---
title: vim学习
date: 2023-06-08 10:07:14
tags:
declare: true
---
[Vimtutor_1.5](http://www2.geog.ucl.ac.uk/~plewis/teaching/unix/vimtutor)
[vimtutor](https://vimhelp.org/usr_01.txt.html#vimtutor)：有一些书籍进行推荐，还有电子版
[VIM无废话极简入门](https://www.bilibili.com/video/BV1qg4y13766/?spm_id_from=333.880.my_history.page.click&vd_source=2dd00fcea46a9c5a26706a99eb12ea3f)
《Vim实用技巧》
《精通vim》
[lazyvim](https://github.com/LazyVim/LazyVim)
[Vimium](https://github.com/philc/vimium)
[Vimium-c](https://github.com/gdh1995/vimium-c)

- 下载最新中文版本的vimtutor
`vim --clean -c 'e $VIMRUNTIME/tutor/tutor.zh_cn.utf-8' -c 'w! TUTORCOPY' -c 'q'`<!--more-->

------------------------------
- `b` 回退
- `0` 或者 `^` 行首
- `t`或`f` 在行内查找下一指定字符
- `T`或`F` 在行内查找上一指定字符
- `di` 删除范围内的字符
- `da` 删除范围内的字符(包括范围字符)
- `zz` 回到文本中部
- `:num` 等同于 `num G`
- `#` 在当前光标所在单词上按`#`，进入查找该单词状态
- `:%s/old/new` 全局替换
- `:34s/old/new` 替换第34行的字符
- `:34,40s/old/new` 替换第34到40行的字符
- `:10,20/your_search_term` 在第10到20行搜索
- `/hel.\{1,3\}` 正则表达式搜索
    - `hel`：匹配字母 "hel" 作为开头。
    - `.`：匹配除换行符外的任意字符。
    - `\{1,3\}`：表示前一个字符或子表达式的重复次数范围。这里指定了 1 到 3 次重复，表示匹配一个到三个任意字符。
- `yj` 复制下一行
- `yi` 范围复制
- `ya` 范围复制(包括范围字符)
- `P` 前粘贴
- `v` 普通可视化
- `V` 行可视化
- `Ctrl + v` (矩形)块可视化
- `Ctrl + G` 显示当前行号、列号及文件信息
- `;` 快速跳转到下一个与当前光标位置处的字符匹配的位置的命令。
- `,` 快速跳转到上一个与当前光标位置处的字符匹配的位置的命令。
- `/` 向下查找
- `?` 向上查找
- `&` 重复上一次使用 `:s` 命令执行的替换操作
- `qx{changes}q` 录制宏
- `*` 在当前光标所在单词上按`*`，进入查找该单词状态。**并且会高亮显示所有匹配的单词，如果没有高亮，可以使用`:set hls`命令开启高亮显示。**


--------------------------------------------------
- `>G` 增加从当前行到文档末尾处的缩进层级
- `.` 重复上一次修改

一箭双雕
| 复合命令 | 等效的长命令 |
| :--- | :---: |
| C | c$ |
| s | cl |
| S | ^C |
| I | ^i |
| o | A<CR> |
| O | ko |
> 这些命令的共同点：都会从普通模式切换到插入模式，这将会对`.`命令产生影响。



-------------------------------------
`.` 命令是一个微型的宏，Vim可以录制任意数目的按键操作，然后在以后重复执行它们。这让我们可以把最常重复的工作流程录制下来，并用一个按键重放它们。

--------------------------------
`qx{changes}q` 是一个 Vim 中用于记录和执行宏的命令序列。这个命令由以下三部分组成：

1. `qx`：这是开始记录宏的命令。`q` 是录制宏的起始命令，后面的 `x` 是宏的名称，你可以使用任何字母来表示宏的名称。例如，你可以使用 `qa`、`qb` 等来表示不同的宏。

2. `{changes}`：这是你要录制的一系列文本编辑操作，包括移动光标、删除、插入、替换等。你可以在这个部分中执行任何你希望录制的编辑操作。

3. `q`：这是结束宏录制的命令。当你完成了要录制的编辑操作后，按下 `q` 来停止录制。

一旦你录制了宏，你可以使用 `@x` 来执行宏，其中 `x` 是你为宏指定的名称。例如，如果你录制了一个名为 `q` 的宏，你可以使用 `@q` 来执行宏中包含的操作，这将重复宏中的所有编辑操作。

以下是一个示例：

1. 打开一个文本文件并将光标移动到要编辑的文本位置。

2. 输入 `qx` 开始录制一个宏，然后执行一系列编辑操作，例如删除一行、插入文本、替换文本等。

3. 输入 `q` 来停止录制宏。

4. 现在，你可以使用 `@x` 来执行宏，其中 `x` 是你为宏指定的名称（在这个示例中是 `q`）。执行宏将重复你录制的所有编辑操作。

这是 Vim 中非常强大的功能，因为它允许你自动执行一系列复杂的编辑操作，而不必手动重复这些操作。这对于批量编辑和自动化编辑任务非常有用。

------------------------------------

method" + argumentl+"

This is a sample text. Here is an example of some text. Sample text is here.

