{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/yilia/source/love.js","path":"love.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/main.0cf68a.css","path":"main.0cf68a.css","modified":0,"renderable":1},{"_id":"themes/yilia/source/main.0cf68a.js","path":"main.0cf68a.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/mobile.992cbe.js","path":"mobile.992cbe.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/slider.e37972.js","path":"slider.e37972.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","path":"fonts/default-skin.b257fa.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","path":"fonts/iconfont.16acc2.ttf","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","path":"fonts/iconfont.45d7ee.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","path":"fonts/iconfont.8c627f.woff","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","path":"fonts/iconfont.b322fa.eot","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","path":"fonts/tooltip.4004ff.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/avatar.jpg","path":"img/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/default-skin.png","path":"img/default-skin.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/preloader.gif","path":"img/preloader.gif","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":0,"renderable":1},{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0}],"Cache":[{"_id":"source/_posts/200元E3神教装机.md","hash":"11c23b136516c4f8dab064020a89dee3a2d32ce7","modified":1714066006983},{"_id":"source/_posts/1927索尔维会议-SolvayConference-合影.md","hash":"789e16c7b25fb7521bf57a572482e1199d383ca7","modified":1714066007443},{"_id":"source/CNAME","hash":"505522a56b6594eab0c1966697662d5932267b63","modified":1714065989193},{"_id":"source/_posts/Building-a-picture-bed-through-github-and-PicGo.md","hash":"b1b8770ed6418d066c5b9528b279049793545471","modified":1714066007203},{"_id":"source/_posts/Configure-oh-my-zsh.md","hash":"554277036ba22aec443fb96119787db8a6b291de","modified":1714066006973},{"_id":"source/_posts/AdGuard-Home-设置.md","hash":"43cd294580e0aacaf6d45b49ff5cccf0530c3736","modified":1714066007003},{"_id":"source/_posts/Configure-jupyter-notebook-in-wsl.md","hash":"0c4c0ebbdb1491aadc5769688f39708a11015335","modified":1714066005673},{"_id":"source/_posts/Configure-Hexo.md","hash":"c5f32b082c8c4fb08485ab63674be701dcb24440","modified":1714066007553},{"_id":"source/_posts/D2L阅读笔记.md","hash":"7b7d633755053dfea52c444dc055d2cff37ff0b8","modified":1714066005933},{"_id":"source/_posts/Delete-the-host-key-record-for-the-specified-IP-address.md","hash":"49a583c6449d73dd2c48fbaaa52e63432fbbd8fa","modified":1714066007513},{"_id":"source/_posts/Download-the-software-and-all-its-dependencies-on-Ubuntu.md","hash":"a8e2ce5fa4f4b87ce81461b81399719e9b5b3c99","modified":1714066008223},{"_id":"source/_posts/DDNSTO.md","hash":"cdac46c0481f29fe47428416a26eb953902a2958","modified":1714066007983},{"_id":"source/_posts/Deploy-Hadoop-on-Ubuntu.md","hash":"e55f8bc2cd345c167326984fa2bc0c3c9b1c8a7b","modified":1714066008443},{"_id":"source/_posts/How-do-I-use-clash-proxy-wsl-in-windows.md","hash":"bda753040f2d34b815d657e80836421fc1c9d524","modified":1714066010723},{"_id":"source/_posts/Fun-Linux-commands.md","hash":"4a8e399128e96025a2716cc708e000c8a9697e63","modified":1714066010743},{"_id":"source/_posts/Install-MongoDB-on-Ubuntu.md","hash":"52ae618ed81f72ce9fd40bd7e9fb759caa4629ad","modified":1714066007723},{"_id":"source/_posts/How-markdown-underlines-and-shading-text.md","hash":"f31b41cc3fbe71c891213aea6b15e9e2273275a0","modified":1714066008483},{"_id":"source/_posts/Linux通过davfs2挂载WebDav网盘.md","hash":"00e9dd27966f52fd84d49f0d1957c6eb86f10ed0","modified":1714066006203},{"_id":"source/_posts/Maximum-Likelihood-Estimation-Bayesian-Estimation-and-Maximum-A-Posteriori-Estimation.md","hash":"6e2187f0deb5d1a6b9f3372605508f2a9b1ef1c1","modified":1714066006313},{"_id":"source/_posts/Model-Compression.md","hash":"410ce5e6331feac2fb10f4341f1cb580d1857b74","modified":1714066007973},{"_id":"source/_posts/Intranet-penetration.md","hash":"bb9bc19497dbc819c46459e954b7bbd54e6fd006","modified":1714066006113},{"_id":"source/_posts/How-to-build-a-hexo-blog-on-Ubuntu-through-gitee-github.md","hash":"b5055159156946d85912d2154c8143ad8d14f5e5","modified":1714066006283},{"_id":"source/_posts/Python虚拟环境.md","hash":"7abdebc8a08960c8449393ccc34e617c7f490a6c","modified":1714066005723},{"_id":"source/_posts/Pytorch-of-Machine-Learning.md","hash":"5d19d70f43304b89e457511e20b1f2e95a39852a","modified":1714066007663},{"_id":"source/_posts/R-CNN、Fast-R-CNN和Faster-R-CNN.md","hash":"2fd4f0b9d61e8c2a4dfa5b3d7bcf5207f6cf6f28","modified":1714066007893},{"_id":"source/_posts/Manage-github-through-git.md","hash":"90bed7ba5eb642e9fe7cfa0a2cd0acac574b40e9","modified":1714066007603},{"_id":"source/_posts/R2S固件.md","hash":"3171d816bd8edc42b0e690f628dcb5f5f0e16ce3","modified":1714066010673},{"_id":"source/_posts/PAT刷题.md","hash":"10581d6b48dc2e9c93b22bf88f3a19bcf67cd641","modified":1714066006803},{"_id":"source/_posts/RAID10.md","hash":"b6ecf19b157128b06cd9136f1c549e953fcf7c7f","modified":1714066008443},{"_id":"source/_posts/Solve-Connecting-to-raw-githubusercontent-com-443-failed-Connection-refused.md","hash":"203451f4181a47a505a29b96c3d518efe2f41eff","modified":1714066006733},{"_id":"source/_posts/Tiny精简系统.md","hash":"adccc1d6ef39ff5f568743a7eec1025069b8942d","modified":1714066007583},{"_id":"source/_posts/Sipser-The-third-edition-of-theory-of-computation-solutions.md","hash":"8c5f072adc38ba7a95db427e1a3342e7892aa374","modified":1714066007763},{"_id":"source/_posts/Transfer-data-via-gpg.md","hash":"6bcdd8f735dccc7f90d72cd92ada471467a6c85d","modified":1714066007273},{"_id":"source/_posts/Ubuntu安全防护.md","hash":"6182e33251cb88f11ccd25d954311891bccafce2","modified":1714066006963},{"_id":"source/_posts/Ubuntu-NAT.md","hash":"9fa40693523a78175635f1a1b49b215f73aa325b","modified":1714066008003},{"_id":"source/_posts/Ubuntu挂载NAS网络驱动器.md","hash":"a4bb0693d003039d70f7343bce6694d6dfbe5335","modified":1714066006003},{"_id":"source/_posts/Ubuntu科学上网.md","hash":"6021f1bcf913d6a307e248eb305be88c29eed28e","modified":1714066007493},{"_id":"source/_posts/WSL开机自启动并在后台运行.md","hash":"f9600031a0ce5800fb60ef84cc2770d8f8134a73","modified":1714066007233},{"_id":"source/_posts/Ubuntu设置网络唤醒.md","hash":"cf30c461f7b1c504c0e0bef40b75e1567fc6cdf2","modified":1714066006933},{"_id":"source/_posts/Ubuntu新用户创建初始化.md","hash":"62c79c66c0b3db78d7d588a4782fe3055da8c895","modified":1714066008043},{"_id":"source/_posts/Ubuntu进入grub界面.md","hash":"1afd5616ff4cd859ac1381b3b28d9d6b804c468a","modified":1714066006943},{"_id":"source/_posts/Windows-font.md","hash":"72fe349509cdbc891c87a9c9a37396094974d995","modified":1714066006203},{"_id":"source/_posts/Windows-11-修改Edge占用Alt-Table.md","hash":"13330cc8b70ec1e2c08cc8d5174432485ada0d95","modified":1714066006263},{"_id":"source/_posts/WSL-modify-the-default-installation-directory-to-another-disk.md","hash":"9e8082454825ffe9802b82dd400e91fc621fd419","modified":1714066007103},{"_id":"themes/yilia/layout/_partial/toc.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1714066014223},{"_id":"source/_posts/clash-load-balancing.md","hash":"f94c71d7159d437c373f45ed26648c1557f3dda4","modified":1714066006243},{"_id":"source/_posts/chatgpt-一直转圈圈问题.md","hash":"c5624a2a5ff0a80e0871f95f94f70befd9808b8e","modified":1714066008523},{"_id":"source/_posts/chrome-设置黑暗模式.md","hash":"ae2ea02addf0cba9db0649303dd78f8822355036","modified":1714066007093},{"_id":"source/_posts/emoji备忘录.md","hash":"6e77b9cd84f4c7b31ddf1c6e3d6f809493fc0c04","modified":1714066006233},{"_id":"source/_posts/firewalld常用命令.md","hash":"9e39dc85c08d1e64cb2d5f5d00f89cf9557c4807","modified":1714066005863},{"_id":"source/_posts/all-in-one-装机.md","hash":"2944fab9f2c90d600efb4ad66e0c04241000f8cf","modified":1714066008173},{"_id":"source/_posts/gdb调试C语言.md","hash":"57e227ebe72f2342e9e092335c981cededd97973","modified":1714066007053},{"_id":"source/_posts/hello-world.md","hash":"2d05a4a6cf535dd5ba2f2ff1127739adea93f500","modified":1714066007533},{"_id":"source/_posts/hexo-d报错问题.md","hash":"19007e7db42269363ff907a42114007af00e262a","modified":1714066007523},{"_id":"source/_posts/hexo-g-报错-expected-variable-end.md","hash":"acf7a2edd2b1e34f6a75f59d9a3ee348f6731ac9","modified":1714066005943},{"_id":"source/_posts/iKuai-爱快-软路由.md","hash":"ef67303e70d394c7c29a1489b0a51d1a65f11b79","modified":1714066005703},{"_id":"source/_posts/if-name-main.md","hash":"cd0284500df6dfee301d22817c14d6e943eb7e17","modified":1714066005813},{"_id":"source/_posts/bilibili-custom-double-speed.md","hash":"971a95dc72cee135da4c064fadd61e82f32653e1","modified":1714066006043},{"_id":"source/_posts/learn-more-study-less.md","hash":"8a5970f0ea98ad913e79feba8aaf82aa33e53297","modified":1714066007673},{"_id":"source/_posts/matrix-derivation.md","hash":"2796fd6847ce2beca36237976ec082e093874477","modified":1714066005923},{"_id":"source/_posts/microsoft-story-好用的软件.md","hash":"c96c2c89bda909673386c20e8cc67b19b29d6d05","modified":1714066007503},{"_id":"source/_posts/mysql-远程登录.md","hash":"c7bc33f9ee0a01cefebe682e2fdb2eb8b32e5cfc","modified":1714066005683},{"_id":"source/_posts/new-bing重定向问题.md","hash":"d37e27373fe09d7a7c31e1ffe8c26b8b29a9531e","modified":1714066007153},{"_id":"source/_posts/openwrt-ipv6-开启记录.md","hash":"79ce1667a403d6fc4f693610414b7ac0e2724f40","modified":1714066007173},{"_id":"source/_posts/openwrt卡在正在应用更改.md","hash":"ba4e768eabef0b8c9186617760d3a0d43bf0f4af","modified":1714066006923},{"_id":"source/_posts/manjaro初始化.md","hash":"f33a15e96c891a0a44ab37f9ddf4b99ac5026aa2","modified":1714066010663},{"_id":"source/_posts/openwrt单臂路由之单线多拨.md","hash":"650fa5ac05416fec0b75e07aa2b70cc7ce3a6c78","modified":1714066006823},{"_id":"source/_posts/openwrt进行DDNS解析.md","hash":"842a2ca1dbc368581b7a683ce9c0d20cbc54f70f","modified":1714066007943},{"_id":"source/_posts/migration-of-hexo.md","hash":"ba8b5948a8a8581472440b4bb2a6da84a98ac67a","modified":1714066008063},{"_id":"source/_posts/pytorch学习路线.md","hash":"a791c52861d506cd4b7629ccd39cb02e511d0c74","modified":1714066008093},{"_id":"source/_posts/ssrplus和passwall.md","hash":"23356a8c57f8ae3f8f4d218fdec65f2a0a14dbb7","modified":1714066008453},{"_id":"source/_posts/terminal-dictionary.md","hash":"37ff67c6190a7aaef708611327188544f592bb14","modified":1714066005713},{"_id":"source/_posts/vscode-colab.md","hash":"fecff602f34a3df0da5a906d8f3800719b6c6e77","modified":1714066005953},{"_id":"source/_posts/vscode中jupyter的函数定义点击无法跳转.md","hash":"7b802afce14cfd6116cda8fb1458dff5444d99d7","modified":1714066005643},{"_id":"source/_posts/vscode-无法-debug-python-中-import-的函数.md","hash":"b28cdf62424d28fc4a2a7ba40cdf5918c299bf49","modified":1714066008233},{"_id":"source/_posts/windows-terminal-关闭提示音.md","hash":"3aeb3206e6575ac7dee89affaeae579ffd22ac5c","modified":1714066007033},{"_id":"source/_posts/vscode显示类似Visual-Studio的内存窗口.md","hash":"6f24852e6c51905ae56a0feb5b2e76641a786dcc","modified":1714066005763},{"_id":"source/_posts/windows11安装安卓子系统.md","hash":"04bdd111b8f3d16b6bb8a254c05e2fcd930f0683","modified":1714066006843},{"_id":"source/_posts/windows11连接隐藏WIFI.md","hash":"cfcad95403cb3ad6a891b343a3c27649e7c2f0da","modified":1714066007143},{"_id":"source/_posts/windows安装v2ray.md","hash":"2b112ecb96c90eb36699886e9b78098a8602e35d","modified":1714066006773},{"_id":"source/_posts/windows共享文件夹.md","hash":"1141557181b8902489441884a20f71879998fb51","modified":1714066005733},{"_id":"source/_posts/windows和chrome常用快捷键.md","hash":"6286fe46aa840a81bf99ee4e83eaebe6d504d04f","modified":1714066007563},{"_id":"source/_posts/windows用xrdp远程桌面到deepin卡顿.md","hash":"4110d0f2bc024d52a953c4f0eeff65a1c4776516","modified":1714066007163},{"_id":"source/_posts/windows自带长截图.md","hash":"416f96760225c454c4f50c5188437d50315bd880","modified":1714066008083},{"_id":"source/_posts/windows终端复用.md","hash":"874acf3ba4bc83eb3d05811d957c81a18519dc3c","modified":1714066007393},{"_id":"source/_posts/windows远程桌面.md","hash":"557864deeb94530ae7e8ab41232b5aed365b368d","modified":1714066006223},{"_id":"source/_posts/免费申请Microsoft-365-E5开发者账号.md","hash":"45d2b82cc03a251945f0ae4db92ed471dee1af05","modified":1714066008053},{"_id":"source/_posts/wsl-supports-systemd.md","hash":"32a83b2d3a1a86c13c1de7911ea0c2bb3b812648","modified":1714066006123},{"_id":"source/_posts/入党时间线.md","hash":"f996b3ac189b707ff93492e45b98a8913c1dd841","modified":1714066007543},{"_id":"source/_posts/哈工程复试机试.md","hash":"eb6b1d95b688864a5486d5e06246f5a1715c3772","modified":1714066008103},{"_id":"source/_posts/哈工程复试自我介绍.md","hash":"b73dbaed5f539f6b2ad14e67d2bc85df77b6cddc","modified":1714066007123},{"_id":"source/_posts/域名解析以及怎么给hexo绑定域名.md","hash":"152337b3c234701e20b9d3a7176fbfc2a1c9831e","modified":1714066010653},{"_id":"source/_posts/如何禁用通过frp进行sftp传输文件.md","hash":"4641a01055bad6fb7759bea11eeef2c158784343","modified":1714066007293},{"_id":"source/_posts/如此惊艳、如此优美.md","hash":"9d141feae9f03fd45ee230cab1d0c7a73622ee9c","modified":1714066007833},{"_id":"source/_posts/安卓手机设置路由转发，充当旁路由.md","hash":"6eb25dd34ec0a1e663ffee365f657010cafa2809","modified":1714066008023},{"_id":"source/_posts/对比学习（Contrastive-Learning）.md","hash":"78d34fafdadc226e23d271810627030b6f1aa565","modified":1714066008073},{"_id":"source/_posts/小新pro16-安装-Ubuntu.md","hash":"a0038c9ecaba52236d29d0a2f3d66d96f002ee1b","modified":1714066005803},{"_id":"source/_posts/将openwrt刷入电脑.md","hash":"d77064b27bd83e45f716947ca7e64641e41af869","modified":1714066007333},{"_id":"source/_posts/情绪垃圾.md","hash":"8419b77f59205a8ba96191c2e1f7a48f9a0bcdff","modified":1714066005903},{"_id":"source/_posts/文献阅读.md","hash":"da2d08dd2bc579db1e80dee8ca9cca55ceb9aed2","modified":1714066006013},{"_id":"source/_posts/机场或节点测速.md","hash":"6cf4d23062476ee67edde9fafcd0eab62ffef1f1","modified":1714066007623},{"_id":"source/_posts/清空输入缓冲区.md","hash":"23a98ebae7b88ed8930ab620cdf15b58fe8ec2dc","modified":1714066006063},{"_id":"source/_posts/百度文库.md","hash":"815a5a58e2935bc74f3cf75771416c1666f88852","modified":1714066007253},{"_id":"source/_posts/用markdown书写数学公式.md","hash":"d23554db8f8daf2c9b9434d3d80768c71196fc46","modified":1714066007263},{"_id":"source/_posts/神秘代码.md","hash":"a70c4bb1d68fd67980bc9ad9817943fad7d7b75b","modified":1714066007743},{"_id":"source/_posts/节点和客户端的选择.md","hash":"45412b85c861efbc27a0448e0431cf6fdf5c4d0f","modified":1714066007383},{"_id":"source/_posts/paper.md","hash":"ab291b21a1835ed0b6f8011785b759ad9af2c94f","modified":1714066008013},{"_id":"source/_posts/网关代理.md","hash":"5fb72c900e78b8923ca947e93455d816a2e35905","modified":1714066005913},{"_id":"source/_posts/路由器无线桥接.md","hash":"b34bb2814674969d1e714a585ab7af345ecf1131","modified":1714066007243},{"_id":"source/_posts/算法.md","hash":"56458236663487c6602af05a05038476fe8d34fa","modified":1714066007913},{"_id":"source/_posts/通过openwrt进行远程开机.md","hash":"1bda21388a4893f32a304c3c18fef2d2c8aae672","modified":1714066007043},{"_id":"source/_posts/阿里云最新活动.md","hash":"6aba13f652a6ca4af9c73c9a20a0e4b87bbe883d","modified":1714066007403},{"_id":"source/_posts/网络是怎样连接的.md","hash":"cbbff2512ce9b39754d056119f586e000ebda673","modified":1714066008203},{"_id":"source/_posts/黑群晖NAS安装.md","hash":"e685c7b7d3b6f242c0f36afd0bf8162943a399e7","modified":1714066008243},{"_id":"source/_posts/路由AP模式设置.md","hash":"7a14db8ca6a9961478b890861d36bf8201cec070","modified":1714066006913},{"_id":"source/_posts/键位映射.md","hash":"562b95380c5756e5426a412c94ac7d36fa90cbc6","modified":1714066008153},{"_id":"source/_posts/哈工程复试笔记.md","hash":"15af17038fec92637ee35e80dae58e831cb21beb","modified":1714066010753},{"_id":"source/_posts/阿里云盘应用网络状况不佳.md","hash":"c49dfcfda4e4ed52ee70854eff50589e4bc7b89e","modified":1714066006023},{"_id":"source/_posts/Configure-Hexo/HTML标签验证.png","hash":"58b0e3e6093807ffd454aae70f406b3de24404e9","modified":1714066010623},{"_id":"source/_posts/Configure-Hexo/效果图1.png","hash":"2c71ca106bb3867249575195484fa990152b6292","modified":1714066010573},{"_id":"source/_posts/Configure-Hexo/效果图2.png","hash":"6e7a5971428883ff66bb46b080bbf23ed3126f9c","modified":1714066010563},{"_id":"source/_posts/Building-a-picture-bed-through-github-and-PicGo/PicGo_setting.png","hash":"b643ec525f84df7bc9fcc6e853e635001e6b399e","modified":1714066007323},{"_id":"source/_posts/Configure-Hexo/绑定到page.png","hash":"d56ce0a4b2c5f63cfa1e389f7bccbbbdc8db7adc","modified":1714066010603},{"_id":"source/_posts/How-to-build-a-hexo-blog-on-Ubuntu-through-gitee-github/单篇字数.png","hash":"ad1af99e04082d1564185ba91a415b4f2d97c557","modified":1714066006453},{"_id":"source/_posts/Configure-Hexo/添加CNAME.png","hash":"fba10ed9f47916f2851ed63a77237193ef149363","modified":1714066010633},{"_id":"source/_posts/How-to-build-a-hexo-blog-on-Ubuntu-through-gitee-github/测试置顶.png","hash":"efc0e04d5c72d0d16aa2e54c6cefc0831b2e5840","modified":1714066006343},{"_id":"source/_posts/How-to-build-a-hexo-blog-on-Ubuntu-through-gitee-github/复制HTML代码.png","hash":"5f26189ade8b8c960254d1300d0ee6f0a954edc7","modified":1714066006403},{"_id":"source/_posts/How-to-build-a-hexo-blog-on-Ubuntu-through-gitee-github/置顶优先级配置.png","hash":"91f1f1247e6949ecc7ca8d848d26af639961cde4","modified":1714066006613},{"_id":"source/_posts/How-to-build-a-hexo-blog-on-Ubuntu-through-gitee-github/置顶效果图.png","hash":"a4a82059cad4947270e9d6dfdda179021ca6e7d2","modified":1714066006443},{"_id":"source/_posts/python笔记/001_代码结构示意图.png","hash":"e2bb4c17873e607510807a37bded2a1cf09ad04c","modified":1714066010533},{"_id":"source/_posts/python笔记/001_函数参数和返回值.png","hash":"d51ab24e9286785bdd22060a26264a2d9e9256cf","modified":1714066008733},{"_id":"source/_posts/python笔记/002_Person类.png","hash":"eac3073c8a0dce977a3a912ceb568432c1b38fc4","modified":1714066010313},{"_id":"source/_posts/python笔记/001_面向过程.png","hash":"c678e60ff748bbbe05d424bac906b4aa4ed66fa1","modified":1714066008963},{"_id":"source/_posts/python笔记/003_Dog类.png","hash":"6ec9d841d62d0d55ef52e19d440aef11594e473d","modified":1714066008543},{"_id":"source/_posts/python笔记/004_Cat类1.png","hash":"e0901df60ed02ffaaf1f02f065b59f6261a357e2","modified":1714066010133},{"_id":"source/_posts/python笔记/004_a1tag.png","hash":"d3aeb35d848661c7d74814ab106291f859b617e3","modified":1714066008553},{"_id":"source/_posts/python笔记/004_Cat类3.png","hash":"552f67b906e89e4a229e33266b9d8972b121008a","modified":1714066008663},{"_id":"source/_posts/python笔记/005_1.png","hash":"e58b5d1983e8607b40ed42fd6a1c9b244866b291","modified":1714066008973},{"_id":"source/_posts/python笔记/004_Cat类2.png","hash":"9c028840f9be8a941e47da5b49cef1ee8b4ebc83","modified":1714066010543},{"_id":"source/_posts/python笔记/005_a2tag.png","hash":"8e7fad79d4ab15af795610dfe18f4553d3b47382","modified":1714066010503},{"_id":"source/_posts/python笔记/006_ab2tag.png","hash":"7417e51a9fab16250a698dc944c30e7ebe04b460","modified":1714066010513},{"_id":"source/_posts/python笔记/007_小明爱跑步.png","hash":"13f784f2bb243ee84358dcfbdf3fb6357b08923a","modified":1714066009993},{"_id":"source/_posts/python笔记/010_私有属性和方法.png","hash":"ef4124b0777b11668255d85740185825c3972c7a","modified":1714066008953},{"_id":"source/_posts/python笔记/009_士兵突击.png","hash":"aa032679a5854c1ed4749b445ba53fde4b8a50cb","modified":1714066010153},{"_id":"source/_posts/python笔记/008_摆放家具.png","hash":"ae9bfc16f226b3987c90725ed071bdb2308dec5a","modified":1714066010403},{"_id":"source/_posts/python笔记/013_父类的私有属性和私有方法.png","hash":"f963cfc2dee268073cbfab3d94efe23234e5b389","modified":1714066010003},{"_id":"source/_posts/python笔记/012_继承方法的重写.png","hash":"2444e6ada30d8d4d30d39d6d228c4a91cee96831","modified":1714066010493},{"_id":"source/_posts/python笔记/014_多继承.png","hash":"8cd430a8dde0a30a17b611535c20e77282ebff16","modified":1714066008783},{"_id":"source/_posts/python笔记/016_多态.png","hash":"874c10c1b2e70b0bc6042101447aadab944b9878","modified":1714066008793},{"_id":"source/_posts/python笔记/015_多继承II.png","hash":"d1681c69590dc09f71c8ce386290c06276829769","modified":1714066008643},{"_id":"source/_posts/python笔记/018_类属性案例I.png","hash":"06a0ba934c4c1f1e48f79761a9316f396ef8a3dd","modified":1714066008763},{"_id":"source/_posts/python笔记/016_多态示意图.png","hash":"3485d69be30258d8b40cf8b2d3911ea4038b7bcd","modified":1714066010333},{"_id":"source/_posts/python笔记/020_类方法案例.png","hash":"878416067492e86b7359fa697b77de1e5b408353","modified":1714066010453},{"_id":"source/_posts/python笔记/022_对象分配空间和初始化.png","hash":"6b40e4918176657b8185c2eced63911d661706c7","modified":1714066010443},{"_id":"source/_posts/python笔记/024_自定义异常.png","hash":"6007df5d30b1bccd209d98c4c0bb8078a90a16a9","modified":1714066010193},{"_id":"source/_posts/python笔记/025_复制文件.png","hash":"057fec6a2adb8409d89965597dfdc4e3f5150200","modified":1714066010173},{"_id":"source/_posts/python笔记/硬盘.jpg","hash":"6cac1fb158b93110f56715a20156cf6e11b9651f","modified":1714066010203},{"_id":"source/_posts/python笔记/021_方法综合案例.png","hash":"c18209792f04af0e4a625a79c50c45d2715ac4f6","modified":1714066010523},{"_id":"themes/yilia/.editorconfig","hash":"da6d022b8f4d9c961e2f8f80677e92af8de0db4d","modified":1714066013963},{"_id":"themes/yilia/.babelrc","hash":"b1b76475ac17dc9e2fa50af96c9e31eea2d0f2b4","modified":1714066013933},{"_id":"themes/yilia/.eslintignore","hash":"df0a50b13cc00acb749226fee3cee6e0351fb1d9","modified":1714066013903},{"_id":"themes/yilia/README.md","hash":"1bf755806af9d8874bd22e1abbdaaa24328ef4dc","modified":1714066013953},{"_id":"themes/yilia/.eslintrc.js","hash":"5696ae049de010ed3786768b0c359f14c05b5ec6","modified":1714066013893},{"_id":"themes/yilia/webpack.config.js","hash":"05ba46a4ae744272f5312e684928910dccad3755","modified":1714066013923},{"_id":"themes/yilia/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1714066014043},{"_id":"themes/yilia/_config.yml","hash":"529d31c30425ef8b6f472df3986aacf5cca55cfc","modified":1714066013913},{"_id":"themes/yilia/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1714066014063},{"_id":"themes/yilia/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1714066014013},{"_id":"themes/yilia/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1714066014033},{"_id":"themes/yilia/package.json","hash":"367cb9579d35968a942c243ab248a5f5ebfaf462","modified":1714066013973},{"_id":"themes/yilia/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1714066014023},{"_id":"themes/yilia/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1714066014003},{"_id":"themes/yilia/layout/index.ejs","hash":"a35dc900203f9d8dd863ea4c1722198d6d457ec8","modified":1714066014103},{"_id":"themes/yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1714066014153},{"_id":"themes/yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1714066014123},{"_id":"themes/yilia/languages/zh-tw.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1714066014053},{"_id":"themes/yilia/layout/post.ejs","hash":"6b68c7fb714cf90f00dfafde163716e1b8d10156","modified":1714066014083},{"_id":"themes/yilia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1714066014113},{"_id":"themes/yilia/layout/layout.ejs","hash":"0a332bdbd3b86c231d690614687f5b97186b85d5","modified":1714066014163},{"_id":"themes/yilia/source/love.js","hash":"9b8af64e70aeb7b193d30fe79afd1f90ca4a2078","modified":1714066010913},{"_id":"themes/yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1714066014143},{"_id":"themes/yilia/source/slider.e37972.js","hash":"6dec4e220c89049037eebc44404abd8455d22ad7","modified":1714066011013},{"_id":"themes/yilia/source-src/script.ejs","hash":"c21381e1317db7bb157f1d182b8c088cb7cba411","modified":1714066013213},{"_id":"themes/yilia/source-src/css.ejs","hash":"94dbdb02ca11849e415d54fb28546a598f2cffb1","modified":1714066013883},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","hash":"b86b248720ad415ec1b5fee53fb583776c776f83","modified":1714066014493},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","hash":"1f7d4819b7f67602c4a1b99871808d2160b60978","modified":1714066014433},{"_id":"themes/yilia/layout/_partial/article.ejs","hash":"64140015b9a35a1e33f1b7f3244eebe073485c03","modified":1714066014443},{"_id":"themes/yilia/layout/_partial/archive.ejs","hash":"a6e94061ac55b9eb55275f87b608d62f6ea35659","modified":1714066014403},{"_id":"themes/yilia/source/main.0cf68a.css","hash":"ddf6e2c6b953c2c59a3c271e6070010a4cc81cf9","modified":1714066011003},{"_id":"themes/yilia/layout/_partial/aside.ejs","hash":"8edbd7993b9b061611a193533a664e2e85eae748","modified":1714066014203},{"_id":"themes/yilia/layout/_partial/baidu-analytics.ejs","hash":"f0e6e88f9f7eb08b8fe51449a8a3016273507924","modified":1714066014243},{"_id":"themes/yilia/layout/_partial/css.ejs","hash":"236f8a377b2e4e35754319c3029bcd4a4115431d","modified":1714066014423},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1714066014233},{"_id":"themes/yilia/layout/_partial/head.ejs","hash":"64f092186b5a744aa1603ce22bb1d44a34446add","modified":1714066014413},{"_id":"themes/yilia/layout/_partial/footer.ejs","hash":"e6369d037a88bf7eefc1e873186d226283101aa7","modified":1714066014263},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","hash":"151a1ef2173ba7b6789d349f0f8da89616cc1394","modified":1714066014253},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","hash":"7fbbfabf5e29525b24ada14613c21a26789132b4","modified":1714066014213},{"_id":"themes/yilia/layout/_partial/header.ejs","hash":"6387a93dad7c3d778eb91e3821852fbf6813880c","modified":1714066014483},{"_id":"themes/yilia/layout/_partial/left-col.ejs","hash":"b59c74c80d9b1bb4a2f9a0868cc4b9bdd6a22fc5","modified":1714066014463},{"_id":"themes/yilia/layout/_partial/tools.ejs","hash":"c41341b9618e591538e1136a2d1637587c1bbd90","modified":1714066014453},{"_id":"themes/yilia/layout/_partial/viewer.ejs","hash":"e495790b2abe2290875817e42bd505bc611d3e26","modified":1714066014273},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1714066010873},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1714066010853},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1714066010843},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1714066010833},{"_id":"themes/yilia/source/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1714066010953},{"_id":"themes/yilia/source/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1714066010963},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1714066010973},{"_id":"themes/yilia/source-src/css/_function.scss","hash":"93a50dd19a93485712da1f8d0a1672482dd1eabc","modified":1714066013673},{"_id":"themes/yilia/source-src/css/_core.scss","hash":"24f347a2412abbf58318369152504da9538f8d3b","modified":1714066013853},{"_id":"themes/yilia/source-src/css/archive.scss","hash":"7d27e22ac898e8fafec14549e940c73cbea1fba8","modified":1714066013643},{"_id":"themes/yilia/source/img/avatar.jpg","hash":"e9bba3403796407c4fcbc5a38590f02f0c4c8ae6","modified":1714066010983},{"_id":"themes/yilia/source-src/css/article-inner.scss","hash":"d79f2d35a06de83a2a226ca790b7a0a34789c115","modified":1714066013543},{"_id":"themes/yilia/source-src/css/article-main.scss","hash":"3fad68bd74260326f83090b0974dd80707e7bac7","modified":1714066013873},{"_id":"themes/yilia/source-src/css/article-nav.scss","hash":"43e507f2a48504079afd9471353337e23ca47470","modified":1714066013693},{"_id":"themes/yilia/source-src/css/article.scss","hash":"0f6d61af99ed4db87f8589db1feaea7747b55963","modified":1714066013793},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1714066010813},{"_id":"themes/yilia/source-src/css/aside.scss","hash":"578a67464dd0f542197f7fcee158c991db058563","modified":1714066013773},{"_id":"themes/yilia/source-src/css/comment.scss","hash":"cafe3834017a3bf47420f37543725025225a2c89","modified":1714066013863},{"_id":"themes/yilia/source-src/css/declare.scss","hash":"b12e83f7ba2fe9c5c4b52a9cbac828370a96fd9c","modified":1714066013633},{"_id":"themes/yilia/source-src/css/fonts.scss","hash":"97b8fba41c914145710b90091f400b845879577f","modified":1714066013743},{"_id":"themes/yilia/source-src/css/footer.scss","hash":"7c995410b25baaf61dfc5e148e22ca60330abcd3","modified":1714066013703},{"_id":"themes/yilia/source-src/css/grid.scss","hash":"849a29fcd7150214fcf7b9715fa5dc71d1f9b896","modified":1714066013663},{"_id":"themes/yilia/source-src/css/highlight.scss","hash":"3719994c2c9393813cc1d42b657205c368a329cb","modified":1714066013433},{"_id":"themes/yilia/source-src/css/global.scss","hash":"b4cb4f45a55d4250cd9056f76dab2a3c0dabcec4","modified":1714066013403},{"_id":"themes/yilia/source-src/css/left.scss","hash":"0d30c0e7cdb831c3881a017006c782f2214ac195","modified":1714066013653},{"_id":"themes/yilia/source-src/css/main.scss","hash":"8b4643cb6d9b7dc53fe54a912593012e4dde0cf9","modified":1714066013413},{"_id":"themes/yilia/source-src/css/mobile-slider.scss","hash":"f053c609d84df0dd9eee1d11ddf0c19163a456be","modified":1714066013723},{"_id":"themes/yilia/source-src/css/mobile.scss","hash":"ace041d72f95b419f6a5e443191703c2b62007f4","modified":1714066013733},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1714066010863},{"_id":"themes/yilia/source-src/css/reward.scss","hash":"80a4fcf9171d4a33235da96ac8a2b7dcabc45dfb","modified":1714066013753},{"_id":"themes/yilia/source-src/css/page.scss","hash":"bf206bb7f7d0967bc8b7fdf01b7ffc99aff9ba88","modified":1714066013443},{"_id":"themes/yilia/source-src/css/share.scss","hash":"150c6425f6582e7ec78a873256ce49c9930e8805","modified":1714066013783},{"_id":"themes/yilia/source-src/css/social.scss","hash":"724162ccf3977e70a45d189abfaa20b6e2fba87b","modified":1714066013463},{"_id":"themes/yilia/source-src/css/scroll.scss","hash":"9c8dfd1c76854ef063494ca76fac6360b391ed6d","modified":1714066013453},{"_id":"themes/yilia/source-src/css/tags-cloud.scss","hash":"c8aa84fca93862d3caae77c552873b8610f33327","modified":1714066013683},{"_id":"themes/yilia/source-src/css/tags.scss","hash":"ac67a3c7097849206244db9b0ba91daaba017ef5","modified":1714066013713},{"_id":"themes/yilia/source-src/css/tooltip.scss","hash":"53d5a554bc2f38e9bb3d26400a47767013c05216","modified":1714066013423},{"_id":"themes/yilia/source-src/css/tools.scss","hash":"1b1aa0908e58cf942b28e3881d07c5573c4129e1","modified":1714066013623},{"_id":"themes/yilia/source-src/js/Q.js","hash":"d011af172064b6c6e0c7051d8f9879373ddac113","modified":1714066013303},{"_id":"themes/yilia/source-src/js/aside.js","hash":"754f771264548a6c5a8ad842908e59ae4e7ed099","modified":1714066013383},{"_id":"themes/yilia/source-src/js/anm.js","hash":"4a4c5d82b09a3063f91a434388e6aa064fd7fd98","modified":1714066013323},{"_id":"themes/yilia/source-src/js/browser.js","hash":"04095b38cfd4316a23f8eb14b1ffaf95f78a4260","modified":1714066013243},{"_id":"themes/yilia/source-src/js/fix.js","hash":"d6782d53c992e712af39c84e804eccaf38830b94","modified":1714066013343},{"_id":"themes/yilia/source-src/js/main.js","hash":"3894e60827c817319e43c9ff3ed045fc3d7336ce","modified":1714066013263},{"_id":"themes/yilia/source-src/js/report.js","hash":"4f1d9a18a936ce40b037f636a39127dd19175b6e","modified":1714066013263},{"_id":"themes/yilia/source-src/js/mobile.js","hash":"4d823b039fd296d24a454eae5a798b93c44560cb","modified":1714066013353},{"_id":"themes/yilia/source-src/js/share.js","hash":"b090f82cf80cba7da764753906d9e2cc2acdf30d","modified":1714066013313},{"_id":"themes/yilia/source-src/js/util.js","hash":"8456e9d6b19532742582c99b2fb9d09e146e1c58","modified":1714066013333},{"_id":"themes/yilia/source-src/js/slider.js","hash":"e846bcc5aac9c68b93f7b8de353df54d8d29f666","modified":1714066013283},{"_id":"themes/yilia/source-src/js/viewer.js","hash":"2577deb6a9fe4f5436360b2ce9afcc7f9a7f0116","modified":1714066013373},{"_id":"themes/yilia/layout/_partial/post/category.ejs","hash":"0809a4829aabeb4e911a3ed04ec28db4df7dfe3f","modified":1714066014333},{"_id":"themes/yilia/layout/_partial/post/changyan.ejs","hash":"5f99b55980da64a723a8e14d5a7daba0d6504647","modified":1714066014343},{"_id":"themes/yilia/layout/_partial/post/date.ejs","hash":"ef71c4081e866a494367575c59610e7e6339ece0","modified":1714066014313},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","hash":"e8399025ed3b980aedb821c92855889f5f12fd5b","modified":1714066014303},{"_id":"themes/yilia/layout/_partial/post/gitment.ejs","hash":"e68bbac9ffb1ad27b56837c9abad6ed6bb7daa0c","modified":1714066014333},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","hash":"1036c8e4e1a7bc935ba173744da735a0d6ed09cd","modified":1714066014383},{"_id":"themes/yilia/layout/_partial/post/share.ejs","hash":"5dccfbe165b23a101f1333cc65ed8efbd197453c","modified":1714066014363},{"_id":"themes/yilia/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1714066014373},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","hash":"2e783e68755abb852760eb0e627a3fbb50a05a55","modified":1714066014353},{"_id":"themes/yilia/layout/_partial/post/wangyiyun.ejs","hash":"ea41c462168d9697caef9485862e9cac718a12c1","modified":1714066014393},{"_id":"themes/yilia/source-src/css/core/_media-queries.scss","hash":"491ab3378d5c11005ba65c607608bb36b368a9d5","modified":1714066013563},{"_id":"themes/yilia/source-src/css/core/_animation.scss","hash":"63a37f26276f9207405afe0f2d65339ce295bbaf","modified":1714066013613},{"_id":"themes/yilia/source-src/css/core/_mixin.scss","hash":"3bba5c77bad5981eac859fe05c9561d580ba7fa9","modified":1714066013603},{"_id":"themes/yilia/source-src/css/core/_reset.scss","hash":"fab871fa93bd542e76a71a56428f2994a4aaf443","modified":1714066013573},{"_id":"themes/yilia/source-src/css/core/_variables.scss","hash":"fb511c505d1309249f21dc577d4ad2bad99a764f","modified":1714066013583},{"_id":"themes/yilia/source-src/css/fonts/iconfont.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1714066013503},{"_id":"themes/yilia/source-src/css/fonts/iconfont.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1714066013523},{"_id":"themes/yilia/source-src/css/fonts/iconfont.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1714066013493},{"_id":"themes/yilia/source-src/css/fonts/iconfont.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1714066013533},{"_id":"themes/yilia/source-src/css/img/checkered-pattern.png","hash":"049262fa0886989d750637b264bed34ab51c23c8","modified":1714066013833},{"_id":"themes/yilia/source-src/css/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1714066013843},{"_id":"themes/yilia/source-src/css/img/tooltip.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1714066013813},{"_id":"source/_posts/python笔记.md","hash":"864dc7ed852a03074923961a09df7a37bf9fe8cd","modified":1714066006873},{"_id":"source/_posts/Configure-Hexo/准入密钥获取.png","hash":"9071c8c159c72132021c8f04d049d3976364dbb8","modified":1714066010593},{"_id":"source/_posts/How-to-build-a-hexo-blog-on-Ubuntu-through-gitee-github/总字数.png","hash":"6a916771d0f599cbcbe1c1b3aa435f6f07f5e180","modified":1714066006693},{"_id":"source/_posts/How-to-build-a-hexo-blog-on-Ubuntu-through-gitee-github/选择外链插件.png","hash":"3b5f5d7355a83fe31cbe3edf3d8c70237d5612e2","modified":1714066006433},{"_id":"source/_posts/python笔记/001_植物大战僵尸类图 copy.png","hash":"7208cc7d04b6ddd70a126c6888870b523d2bb217","modified":1714066010413},{"_id":"source/_posts/python笔记/001_异常示意图.png","hash":"b07c3467c79f8e56ae7964455100b99c9499595d","modified":1714066010303},{"_id":"source/_posts/python笔记/001_植物大战僵尸类图.png","hash":"7208cc7d04b6ddd70a126c6888870b523d2bb217","modified":1714066010433},{"_id":"source/_posts/python笔记/002_递归调用示意图.png","hash":"27101abadb4787d0f54a3e8e686a8140a93f9936","modified":1714066010473},{"_id":"source/_posts/python笔记/002_递归调用示意图I.png","hash":"b2f8173b637370a4fdef6c9b47203e1b04ee0cf0","modified":1714066010353},{"_id":"source/_posts/python笔记/005_方法中的self.png","hash":"2a1388fdd2e44bab16d608fbfde31d70f18e5031","modified":1714066008803},{"_id":"source/_posts/python笔记/017_类的结构示意图II.png","hash":"7e8a92f2a1820c7fac6c73faaa3dafaf2f423de4","modified":1714066010163},{"_id":"source/_posts/python笔记/023_单例流程.png","hash":"e2deb984d0e00b3ff64c76d3215f9c60f2a70f24","modified":1714066010383},{"_id":"source/_posts/python笔记/017_类的结构示意图I.png","hash":"dc76e42d5af09e3b6b43170714f91ff5d113090d","modified":1714066008943},{"_id":"source/_posts/python笔记/019_通过对象访问类属性.png","hash":"0cebb62ff276fbc87a86b9bf911058ca0f6172f7","modified":1714066010123},{"_id":"themes/yilia/source/main.0cf68a.js","hash":"993fadeb5f6d296e9d997a49ee20dc97333ceab7","modified":1714066010933},{"_id":"themes/yilia/source/mobile.992cbe.js","hash":"01b35e71e37aa2849664eb5daf26daede2278398","modified":1714066010903},{"_id":"themes/yilia/layout/_partial/script.ejs","hash":"4cb685f07e89dd5175c2a576e73a1a957aec5637","modified":1714066014193},{"_id":"source/_posts/python笔记/011_继承对比图示.png","hash":"d8907642d091d0549254c030122adc94568bc4f8","modified":1714066008753},{"_id":"source/_posts/cpp-基础.md","hash":"08653f946724dc18bad748cfe6778a2b530a3de3","modified":1714066007653},{"_id":"source/_posts/哈工程复试笔记/传递过程.png","hash":"027358957cce14c544dcaff3454a152ac9f83daf","modified":1714066008393},{"_id":"source/_posts/哈工程复试笔记/TCP面向流的传输.png","hash":"3edd008762e34e1119f3d2f5986ea4d68f2d00a5","modified":1714066008293},{"_id":"source/_posts/python笔记/CPU.jpg","hash":"6041ca208522c953227f67fcbe05006a424ec577","modified":1714066009983},{"_id":"source/_posts/How-to-build-a-hexo-blog-on-Ubuntu-through-gitee-github/模块完整.png","hash":"e8358386192414b44a7c2463c3a80685a677650e","modified":1714066006603},{"_id":"source/_posts/How-to-build-a-hexo-blog-on-Ubuntu-through-gitee-github/网易云生成外链.png","hash":"dd331e91041c175ed4f5f803c4c7b69dc592d871","modified":1714066006393},{"_id":"source/_posts/How-to-build-a-hexo-blog-on-Ubuntu-through-gitee-github/模块缺失.png","hash":"7c98676d74eea6354feefa477452139138431c93","modified":1714066006663},{"_id":"source/_posts/python笔记/001_ASCII编码表1.jpg","hash":"d69d351305dbf524d4796cdffa3378d03140e5a9","modified":1714066010103},{"_id":"source/_posts/哈工程复试笔记/2005哈尔滨工程大学数据库试卷A_2.png","hash":"ef4e5dd61ace89c49b776b5ca7871e7466efb7d9","modified":1714066008433},{"_id":"source/_posts/哈工程复试笔记/2005哈尔滨工程大学数据库试卷A_1.png","hash":"c4f7739d452b96409f6f8924b6e115de518f47ef","modified":1714066008383},{"_id":"source/_posts/哈工程复试笔记/计算机网络体系结构.png","hash":"7d2c26fa3a0ac412e5df70214871b735a49fc425","modified":1714066008333},{"_id":"source/_posts/python笔记/001_植物大战僵尸 copy.png","hash":"d3f21651124d9bbd8e0b713666002b1f26249b98","modified":1714066008723},{"_id":"source/_posts/python笔记/001_植物大战僵尸.png","hash":"d3f21651124d9bbd8e0b713666002b1f26249b98","modified":1714066008923},{"_id":"source/_posts/python笔记/内存条.png","hash":"eab7df35f8bd8f90779414af6db57155018fe7fc","modified":1714066008633},{"_id":"source/_posts/python笔记/002_飞机设计图纸.png","hash":"455745ef57c80bdb12d678ff7bd6b8355715220a","modified":1714066008873},{"_id":"source/_posts/python笔记/003_飞机对象.png","hash":"d9f8e3a8d1453c8985163f5269c90914ddd84bfa","modified":1714066009903},{"_id":"public/content.json","hash":"81c5b3b19722fcbca3ed8d677c392e549bad24f1","modified":1714302326802},{"_id":"public/2024/04/06/mysql-远程登录/index.html","hash":"f075bc5af50dc123e4e8d5a2a58610c6b6dd9cea","modified":1714302326802},{"_id":"public/2023/12/19/vscode-colab/index.html","hash":"663c515fe75bda1c4fa8e11b751d4b12f7460c8e","modified":1714302326802},{"_id":"public/2023/12/17/chrome-设置黑暗模式/index.html","hash":"063e71858fb9c51b86281604beb0c6167e227c93","modified":1714302326802},{"_id":"public/2023/12/10/firewalld常用命令/index.html","hash":"0b79bd880f79360b9c762c5d678e90cc22bfa13d","modified":1714302326802},{"_id":"public/2023/12/10/Linux通过davfs2挂载WebDav网盘/index.html","hash":"4bcce74d94f7c9dee72764f2e35045cdaf8188dd","modified":1714302326802},{"_id":"public/2023/12/09/小新pro16-安装-Ubuntu/index.html","hash":"ce2009e25fe88ca6fe20a403b730e5e7e3f05d71","modified":1714302326802},{"_id":"public/2023/11/27/hexo-g-报错-expected-variable-end/index.html","hash":"b81dde65cc0608446bbfa57a9a168f19d0d26180","modified":1714302326802},{"_id":"public/2023/11/26/vscode-无法-debug-python-中-import-的函数/index.html","hash":"3e2cb6c1ae2700257140e997ee38dac6be061d5a","modified":1714302326802},{"_id":"public/2023/11/16/清空输入缓冲区/index.html","hash":"45581c79cb62952646ad2f38e131d6d0f420e5d5","modified":1714302326802},{"_id":"public/2023/11/09/all-in-one-装机/index.html","hash":"b15a91babd5655723be7958139bc31512f44ca01","modified":1714302326802},{"_id":"public/2023/11/03/阿里云最新活动/index.html","hash":"5d16ceeaf83c787da480efa8bc53bd67b4198a05","modified":1714302326802},{"_id":"public/2023/11/03/windows-terminal-关闭提示音/index.html","hash":"6209d105bb29666c12ab33c8171bd79724e489fa","modified":1714302326802},{"_id":"public/2023/10/31/iKuai-爱快-软路由/index.html","hash":"8758303e793a543c2c26ec1639320d7da5c94846","modified":1714302326802},{"_id":"public/2023/10/31/如何禁用通过frp进行sftp传输文件/index.html","hash":"0c4ec314d16fd4a4214b0f7fd9d8bc47c75c52d7","modified":1714302326802},{"_id":"public/2023/10/28/R-CNN、Fast-R-CNN和Faster-R-CNN/index.html","hash":"71986ffbf62d732929014c7af14850c977a5445c","modified":1714302326802},{"_id":"public/2023/08/31/pytorch学习路线/index.html","hash":"c02d780f109c6ac22b8862e88843778b3f0f518b","modified":1714302326802},{"_id":"public/2023/08/10/vscode中jupyter的函数定义点击无法跳转/index.html","hash":"92adfb2f9d3503fa77f306b873fcebe0d187f345","modified":1714302326802},{"_id":"public/2023/07/24/Windows-11-修改Edge占用Alt-Table/index.html","hash":"16395f88386e5168aae44911eb71b49060e21283","modified":1714302326802},{"_id":"public/2023/07/23/Ubuntu挂载NAS网络驱动器/index.html","hash":"0b1b2bed37acb32081beed23fb729b0309285a51","modified":1714302326802},{"_id":"public/2023/07/19/Python虚拟环境/index.html","hash":"c4e0fefd073da872909baa82259774e0bef44c0d","modified":1714295531354},{"_id":"public/2023/07/18/对比学习（Contrastive-Learning）/index.html","hash":"a416bbe53a35204d736a80822d0ab42165269df0","modified":1714302326802},{"_id":"public/2023/07/14/if-name-main/index.html","hash":"169ed6e26e222a7f9f7100a4c2d3eb634a881e3b","modified":1714302326802},{"_id":"public/2023/07/13/D2L阅读笔记/index.html","hash":"fdafd15a4fb0e48eaf0ecaecf16d54a301b36ffa","modified":1714302326802},{"_id":"public/2023/07/10/算法/index.html","hash":"293015894b1d261b84d57dd289f93f08ac4c08ea","modified":1714302326802},{"_id":"public/2023/07/04/emoji备忘录/index.html","hash":"5e6fa2f841a250769869d3b032162c2e82255abe","modified":1714302326802},{"_id":"public/2023/06/26/Model-Compression/index.html","hash":"d4a753f5e2707ba5125e628ec46037bd033c699c","modified":1714302326802},{"_id":"public/2023/06/24/如此惊艳、如此优美/index.html","hash":"ad2b03deb02c27f918c19244adcbd6892c6a4e2a","modified":1714302326802},{"_id":"public/2023/06/24/安卓手机设置路由转发，充当旁路由/index.html","hash":"d6d5a53c30ef9676ef618855689b127bdcec0e2a","modified":1714302326802},{"_id":"public/2023/06/24/1927索尔维会议-SolvayConference-合影/index.html","hash":"8caf6bd9c67250bf7fabeb4b81da52026fe13d2e","modified":1714302326802},{"_id":"public/2023/06/22/网络是怎样连接的/index.html","hash":"cd8c938df60fc9839fade62878bb97b75406d722","modified":1714302326802},{"_id":"public/2023/06/08/Pytorch-of-Machine-Learning/index.html","hash":"40cef50450582052f7444492900659bd831688e1","modified":1714302326802},{"_id":"public/2023/06/08/windows和chrome常用快捷键/index.html","hash":"287c71bc20055bfd775949bfdaba5301280cc396","modified":1714302326802},{"_id":"public/2023/06/07/键位映射/index.html","hash":"f9ee535ee71bbc058ccfe4f42d4fc8e8a35a5e5d","modified":1714302326802},{"_id":"public/2023/06/05/microsoft-story-好用的软件/index.html","hash":"dd19558dfc9d2271a29871b74aa9d38612b05dd0","modified":1714302326802},{"_id":"public/2023/06/04/节点和客户端的选择/index.html","hash":"b77869516a3192ff617d3aecddcad79716bba1cf","modified":1714302326802},{"_id":"public/2023/06/04/ssrplus和passwall/index.html","hash":"0f91e7416af9c9d5efcbba9e8c48fa324ccd8293","modified":1714302326802},{"_id":"public/2023/06/04/AdGuard-Home-设置/index.html","hash":"e88ea2c2140bbd5de0f9138a9f343938740ac963","modified":1714302326802},{"_id":"public/2023/06/02/R2S固件/index.html","hash":"078b9b0dcbb63ccfb974856c593947c311658daf","modified":1714302326802},{"_id":"public/2023/06/01/openwrt单臂路由之单线多拨/index.html","hash":"4481bfb722aa3868d97fe5cf73e541e7e9c82887","modified":1714302326802},{"_id":"public/2023/05/31/windows安装v2ray/index.html","hash":"bedfeb794b3133a105a3760c02558879205b4913","modified":1714302326802},{"_id":"public/2023/05/30/将openwrt刷入电脑/index.html","hash":"16d8aae28b04cf829946d29c7b4c37897826a346","modified":1714302326802},{"_id":"public/2023/05/30/windows终端复用/index.html","hash":"e1d94f8670d63f9ff9a059aeaef7aff7de96bad4","modified":1714302326802},{"_id":"public/2023/05/29/阿里云盘应用网络状况不佳/index.html","hash":"ff892a997880301051dac2c935f31a28bd120bf3","modified":1714302326802},{"_id":"public/2023/05/25/网关代理/index.html","hash":"0b94d6d3f682543ffb472f1fc5b065220b5ceadf","modified":1714302326802},{"_id":"public/2023/05/25/WSL开机自启动并在后台运行/index.html","hash":"1681a6f3b6c36c85c7a923f4b5e149e7c2d22606","modified":1714302326802},{"_id":"public/2023/05/24/Ubuntu设置网络唤醒/index.html","hash":"f9689aaa2a091dc46f4b6f68107f25045a5d03ea","modified":1714302326802},{"_id":"public/2023/05/22/windows用xrdp远程桌面到deepin卡顿/index.html","hash":"83f6f3745b434e188e696351a0c75e31cdfb5a20","modified":1714302326802},{"_id":"public/2023/05/22/黑群晖NAS安装/index.html","hash":"e2032cbc0cc6c102d85d81e29e651df4aaf61d2a","modified":1714302326802},{"_id":"public/2023/05/21/200元E3神教装机/index.html","hash":"d7ca72d36fb19413588280231d05382c1b9954a4","modified":1714302326802},{"_id":"public/2023/05/21/DDNSTO/index.html","hash":"a0db480accebd918bd884080fd19f60a44571f67","modified":1714302326802},{"_id":"public/2023/05/21/Ubuntu进入grub界面/index.html","hash":"3eb8466b112a5639fd9b6caff6bd107527850756","modified":1714302326802},{"_id":"public/2023/05/19/openwrt进行DDNS解析/index.html","hash":"4e024cd5ae6891c09256064ff3f4fb7c20e4bc84","modified":1714302326802},{"_id":"public/2023/05/18/windows11安装安卓子系统/index.html","hash":"bf11f88a7c5f91bc8a72f8ee0a372cdd2ec47942","modified":1714302326802},{"_id":"public/2023/05/18/通过openwrt进行远程开机/index.html","hash":"8e6ed8cbacd5324ddaf4299173fce4d080be84f7","modified":1714302326802},{"_id":"public/2023/05/16/路由器无线桥接/index.html","hash":"326ae6c41b2b24a2447b006a0fddc42870e1c3da","modified":1714302326802},{"_id":"public/2023/05/16/windows共享文件夹/index.html","hash":"7f6781e1436e86c11f6102bb6501cc9cb5b98c71","modified":1714302326802},{"_id":"public/2023/05/16/windows11连接隐藏WIFI/index.html","hash":"4653a3d72a6133fe78c084306818b61d9f718127","modified":1714302326802},{"_id":"public/2023/05/16/机场或节点测速/index.html","hash":"728e02959e8733c707965a4cc7240e81bcae9144","modified":1714302326802},{"_id":"public/2023/05/14/paper/index.html","hash":"323db08fa52f1ed0acc60f6db8e2dcd6fd05f7e5","modified":1714302326802},{"_id":"public/2023/05/13/路由AP模式设置/index.html","hash":"3f8f56663374c946663168a7f643f2f581a0b47b","modified":1714302326802},{"_id":"public/2023/05/12/chatgpt-一直转圈圈问题/index.html","hash":"55cbc2c9263ae97ead5d9174349c904804089f62","modified":1714302326802},{"_id":"public/2023/05/12/new-bing重定向问题/index.html","hash":"d209f4c3d4b685de442367d276ab36fc28643025","modified":1714302326802},{"_id":"public/2023/05/11/windows远程桌面/index.html","hash":"3db17cb2bed79501e78928a27992989fb137f54d","modified":1714302326802},{"_id":"public/2023/05/10/openwrt-ipv6-开启记录/index.html","hash":"e741c38ee69e0904730338e9a9c740ce0134c0cd","modified":1714302326802},{"_id":"public/2023/05/09/Ubuntu新用户创建初始化/index.html","hash":"daea0ce0b70cca77aa37114caa99f5ee38f65661","modified":1714302326802},{"_id":"public/2023/05/09/openwrt卡在正在应用更改/index.html","hash":"1f56b1ae56077b0f502929d44149d605bb063221","modified":1714302326802},{"_id":"public/2023/05/09/文献阅读/index.html","hash":"1ef2ceca9bea65590e928e25e8f25fccdc1076c8","modified":1714302326802},{"_id":"public/2023/05/08/manjaro初始化/index.html","hash":"f60192a31f7922ebfdde6e58609027285c484a74","modified":1714302326802},{"_id":"public/2023/05/07/Ubuntu安全防护/index.html","hash":"2383be2f0898b6db7d6cb9bb65226fe6a5465eaa","modified":1714302326802},{"_id":"public/2023/04/23/hexo-d报错问题/index.html","hash":"ccab5c5a32bb381ad3c108ca0b360ec1350ad780","modified":1714302326802},{"_id":"public/2023/04/22/gdb调试C语言/index.html","hash":"a217965d403b4308a06044e5ccb3f0fe06cb428c","modified":1714302326802},{"_id":"public/2023/04/22/Tiny精简系统/index.html","hash":"c42665a39675f2026483320241c6e14b57727f49","modified":1714302326802},{"_id":"public/2023/04/17/vscode显示类似Visual-Studio的内存窗口/index.html","hash":"54bf3ff3adf0486fb099bdad7dcf654c66f81f84","modified":1714302326802},{"_id":"public/2023/04/11/Ubuntu科学上网/index.html","hash":"234424245574b0aab1f23efcefa45ec1db49f920","modified":1714302326802},{"_id":"public/2023/04/08/learn-more-study-less/index.html","hash":"92542ccbe3e4e58a1672300b5507bb32c681e2bc","modified":1714302326802},{"_id":"public/2023/04/08/Manage-github-through-git/index.html","hash":"991e4d5e81fced04c84d837acf0f9e52ec80ae0a","modified":1714302326802},{"_id":"public/2023/04/06/Sipser-The-third-edition-of-theory-of-computation-solutions/index.html","hash":"6608fe0cff21045a0a388bf3ed872c27737479e3","modified":1714302326802},{"_id":"public/2023/04/06/windows自带长截图/index.html","hash":"0443dc3b5d1c919656344dfda181f4ddec68e5fd","modified":1714302326802},{"_id":"public/2023/04/05/How-do-I-use-clash-proxy-wsl-in-windows/index.html","hash":"73a6c8abdb314b9c18e345b77302fc9b3a98a1af","modified":1714302326802},{"_id":"public/2023/04/05/免费申请Microsoft-365-E5开发者账号/index.html","hash":"f363e05089de37cea77556e3c7a366df7f2724db","modified":1714302326802},{"_id":"public/2023/04/05/Building-a-picture-bed-through-github-and-PicGo/index.html","hash":"8235b8822d5d55e0c1ef86f7ba6d06ffa016e446","modified":1714302326802},{"_id":"public/2023/04/04/clash-load-balancing/index.html","hash":"7d8576d4a98b5a22697d261e52cee1b7e7199273","modified":1714302326802},{"_id":"public/2023/04/03/情绪垃圾/index.html","hash":"23e01f115c481d5bcad4c24a7509cdd5db0348a8","modified":1714302326802},{"_id":"public/2023/04/03/Maximum-Likelihood-Estimation-Bayesian-Estimation-and-Maximum-A-Posteriori-Estimation/index.html","hash":"c7aac041cb679ff067332c64862c423398566a80","modified":1714302326802},{"_id":"public/2023/04/03/Fun-Linux-commands/index.html","hash":"2e52b1eceda5bd892a7d663f2faed76851b250a8","modified":1714302326802},{"_id":"public/2023/04/03/matrix-derivation/index.html","hash":"83fe7e5e1cfccfcd40a09431cf999c43807d07eb","modified":1714302326802},{"_id":"public/2023/04/03/Transfer-data-via-gpg/index.html","hash":"0c97aebc4d796aced9ac63cb9fbf47fc3e6dc5ab","modified":1714302326802},{"_id":"public/2023/04/03/Delete-the-host-key-record-for-the-specified-IP-address/index.html","hash":"9b00c19a5ee0f9ea64c44008b3db99cebbc5c857","modified":1714302326802},{"_id":"public/2023/04/03/Download-the-software-and-all-its-dependencies-on-Ubuntu/index.html","hash":"aa03a271a4068f1632975d845bcaa08ab9c5a68a","modified":1714302326802},{"_id":"public/2023/04/03/Install-MongoDB-on-Ubuntu/index.html","hash":"b6d10b876b48b5aac62f5cfa5da7fddeba4ac824","modified":1714302326802},{"_id":"public/2023/04/03/Configure-jupyter-notebook-in-wsl/index.html","hash":"ac559ee047d81b2aed9542fe9d1b6a395f170fe4","modified":1714302326802},{"_id":"public/2023/04/03/RAID10/index.html","hash":"999a5451ac8468237848bf96cba2467c96b6702f","modified":1714302326802},{"_id":"public/2023/04/03/Windows-font/index.html","hash":"ccf7c0b1f0403d5818dc6e2316dee08858c3c2d6","modified":1714302326802},{"_id":"public/2023/04/03/Ubuntu-NAT/index.html","hash":"230e7c7a200cd47bd57c371179964039260caa54","modified":1714302326802},{"_id":"public/2023/04/03/Deploy-Hadoop-on-Ubuntu/index.html","hash":"d15b3d1b27c78e3348fcff490a1d88b538f52511","modified":1714302326802},{"_id":"public/2023/04/03/Configure-oh-my-zsh/index.html","hash":"a8ded30fe268fe051c9d654e10cf4892d7da279b","modified":1714302326802},{"_id":"public/2023/04/03/Solve-Connecting-to-raw-githubusercontent-com-443-failed-Connection-refused/index.html","hash":"7ce54b1ec62ad99b536c341a69784fc2081a6d40","modified":1714302326802},{"_id":"public/2023/04/03/terminal-dictionary/index.html","hash":"e192ed5cbc6436cff501f88cacbae4ca97d785ee","modified":1714302326802},{"_id":"public/2023/04/03/migration-of-hexo/index.html","hash":"99c079f388b4dd367857236cc4a1b3161ae0ed27","modified":1714302326802},{"_id":"public/2023/04/03/WSL-modify-the-default-installation-directory-to-another-disk/index.html","hash":"e2a8d5c54303b456814131bafb6c2efc35ffa2f7","modified":1714302326802},{"_id":"public/2023/04/03/wsl-supports-systemd/index.html","hash":"0a94f128e46918735d571147a153b9cfe618c8f0","modified":1714302326802},{"_id":"public/2023/04/03/Intranet-penetration/index.html","hash":"5ed42f70b865b1ac46a72d432dc7039b40a417a8","modified":1714302326802},{"_id":"public/2022/04/24/bilibili-custom-double-speed/index.html","hash":"52866b0d96eada4495183ce8e61cd813a627c59f","modified":1714302326802},{"_id":"public/2022/04/04/python笔记/index.html","hash":"092ecde262e25bc2c9df7f99b54f167a06fed899","modified":1714296348294},{"_id":"public/2022/03/24/哈工程复试自我介绍/index.html","hash":"65a557844ff3719d49e169e1cd45b605134d2bbf","modified":1714302326802},{"_id":"public/2022/03/15/哈工程复试笔记/index.html","hash":"8e88ad5af378bbecf5d10f48a81574b962de9426","modified":1714302326802},{"_id":"public/2022/03/08/哈工程复试机试/index.html","hash":"13134781bda196cc0ad4584fa09d7bed2a2a5530","modified":1714302326802},{"_id":"public/2022/03/05/cpp-基础/index.html","hash":"1abbe15e3a2593839fef1d69d45556f69988c5bb","modified":1714301491030},{"_id":"public/2022/03/05/PAT刷题/index.html","hash":"2555e3eb1d89bf2ac2ce0fd0315918c723637614","modified":1714302326802},{"_id":"public/2021/07/11/百度文库/index.html","hash":"9e7db8380047d563c3618626b8d7e5eb9b4ad079","modified":1714302326802},{"_id":"public/2021/07/02/用markdown书写数学公式/index.html","hash":"dc5d3b411cd034517ae7092a9f4aeebcb6e4a572","modified":1714302326802},{"_id":"public/2021/06/06/How-markdown-underlines-and-shading-text/index.html","hash":"ef72e756e54c7a41ccf1810bfb28e063d06b0ec8","modified":1714302326802},{"_id":"public/2021/06/01/Configure-Hexo/index.html","hash":"4dac8a90b1bf810f77ad7a72e0eace15afd756b0","modified":1714302326802},{"_id":"public/2021/05/30/域名解析以及怎么给hexo绑定域名/index.html","hash":"fe3593ffd0919d39a7032bb00bc178a86a07b5d3","modified":1714302326802},{"_id":"public/2021/05/29/How-to-build-a-hexo-blog-on-Ubuntu-through-gitee-github/index.html","hash":"f58f2df95d6da469a18232362e5fef7591e8ed05","modified":1714302326802},{"_id":"public/2021/04/01/hello-world/index.html","hash":"0c04f857db4fc6cf7e2df9b267ddebe3e7f1524b","modified":1714302326802},{"_id":"public/2018/08/13/神秘代码/index.html","hash":"a79b003f01c8f46d5b37f844b3cd3d8d504a81de","modified":1714302326802},{"_id":"public/2017/09/25/入党时间线/index.html","hash":"343e8c6a075c26d2c70bd9b102f125fab116243a","modified":1714302326802},{"_id":"public/archives/index.html","hash":"414c3da180cc6a5f881992b2795ca3daee00fdd0","modified":1714302326802},{"_id":"public/archives/page/2/index.html","hash":"b988c7390777d395540f63fa6ef3756f4cb85834","modified":1714302326802},{"_id":"public/archives/page/3/index.html","hash":"601534293fc86c4491b6731e4aec2de06e290fdc","modified":1714302326802},{"_id":"public/archives/page/4/index.html","hash":"0bbd47e3b3439921a11ed1f9962ff63a1af0ae69","modified":1714302326802},{"_id":"public/archives/page/5/index.html","hash":"d82becb41d47d44d161b03bb7069680e6e5ea404","modified":1714302326802},{"_id":"public/archives/page/6/index.html","hash":"9cea2274931a1c96e65b9ae650b7770ec347d68e","modified":1714302326802},{"_id":"public/archives/page/7/index.html","hash":"929c4a281e82c32cbac9aa4bc6cdf7aed77f39b2","modified":1714302326802},{"_id":"public/archives/page/8/index.html","hash":"7b3322dd410319c81ce7feb29c05c099a652c747","modified":1714302326802},{"_id":"public/archives/page/9/index.html","hash":"846118599d3b4ea3ebc7d701050f6deafccc342f","modified":1714302326802},{"_id":"public/archives/page/10/index.html","hash":"814499c26b21575974806ba24adf6d33883d5b7b","modified":1714302326802},{"_id":"public/archives/page/11/index.html","hash":"e01e74bdc7a3c73caf7fa05c9f716e50ced54078","modified":1714302326802},{"_id":"public/archives/page/12/index.html","hash":"f12bcda2afcae942b2770ec9db51396156bdee67","modified":1714302326802},{"_id":"public/archives/2017/index.html","hash":"e946a8e109e1c02622dd166fbbb130310a31282f","modified":1714302326802},{"_id":"public/archives/2017/09/index.html","hash":"93d4184d2c4c53bd5f58b886ac95eb4b281e1b9c","modified":1714302326802},{"_id":"public/archives/2018/index.html","hash":"b344ac51e6c19a5f5adb6a9c76820638cf8cc78b","modified":1714302326802},{"_id":"public/archives/2018/08/index.html","hash":"412ebbcc095c69c872550d98876193dcf49ea3d1","modified":1714302326802},{"_id":"public/archives/2021/index.html","hash":"414ab7c90f815f4b4f38d77ea005c7998ea59ea1","modified":1714302326802},{"_id":"public/archives/2021/04/index.html","hash":"a1ea4c1621946e90a589fdc4fb966cc7e0695a33","modified":1714302326802},{"_id":"public/archives/2021/05/index.html","hash":"29b9400506c95ef5b7ade777ba294fbf104286fe","modified":1714302326802},{"_id":"public/archives/2021/06/index.html","hash":"43047d3af941ef1092eac9f41117db7084934f31","modified":1714302326802},{"_id":"public/archives/2021/07/index.html","hash":"a7861bbb9af423624722719a5c8b27d7394bf39e","modified":1714302326802},{"_id":"public/archives/2022/index.html","hash":"c7a9a9c117566efde502414bc9468281447d7272","modified":1714302326802},{"_id":"public/archives/2022/03/index.html","hash":"6edf63e13f148ecf15bd31a1ac598dd23086c2fc","modified":1714302326802},{"_id":"public/archives/2022/04/index.html","hash":"2a98986dd4bcd957f4662ca38536f51058ff9966","modified":1714302326802},{"_id":"public/archives/2023/index.html","hash":"c80c726e469a900be7795b5487db2b505c280b89","modified":1714302326802},{"_id":"public/archives/2023/page/2/index.html","hash":"320f1d4fb885fbb98479e829e8be4e75a8d75939","modified":1714302326802},{"_id":"public/archives/2023/page/3/index.html","hash":"4397196983016aa376b2d1a8713f8b0f0d3bba54","modified":1714302326802},{"_id":"public/archives/2023/page/4/index.html","hash":"6a13171cd9e6ba9c68abc1ec846d7c6ba2188932","modified":1714302326802},{"_id":"public/archives/2023/page/5/index.html","hash":"2ce3f78cec646c040f766f945dc5b45167c176ad","modified":1714302326802},{"_id":"public/archives/2023/page/6/index.html","hash":"bfda30e2ce0bd75bdc8fc44b536ceb4fe0d22248","modified":1714302326802},{"_id":"public/archives/2023/page/7/index.html","hash":"d6a53400f89608ee699f633af51390e2745b781d","modified":1714302326802},{"_id":"public/archives/2023/page/8/index.html","hash":"2c543962dae43ae4ff1c16470f44611c5f80856b","modified":1714302326802},{"_id":"public/archives/2023/page/9/index.html","hash":"ca1016ac4f0486c8392178758e57154740716a8f","modified":1714302326802},{"_id":"public/archives/2023/page/10/index.html","hash":"66f22842fb12dd22f79d4008477254f582e546dd","modified":1714302326802},{"_id":"public/archives/2023/page/11/index.html","hash":"db56b04db580fd197ce110caa91d0a9e6b796b8e","modified":1714295531354},{"_id":"public/archives/2023/04/index.html","hash":"98e92c19eae892c4f6e75f1d74b147b396d979e8","modified":1714302326802},{"_id":"public/archives/2023/04/page/2/index.html","hash":"a00486e5813b1dd4c85e1fda2fd85c59c23d4666","modified":1714302326802},{"_id":"public/archives/2023/04/page/3/index.html","hash":"a23f5f26ee51fb179c7590eb88ceeaa9c9cef3c6","modified":1714302326802},{"_id":"public/archives/2023/04/page/4/index.html","hash":"d4f6946bee53e0dee3b85bc30e0ac0ad6898c9c0","modified":1714302326802},{"_id":"public/archives/2023/05/index.html","hash":"4ab786cdc187cb1cd40e99c41e7d44a9f0fd1b3a","modified":1714302326802},{"_id":"public/archives/2023/05/page/2/index.html","hash":"1698c6fb4e5acaeffd79fc90614ead82d994869e","modified":1714302326802},{"_id":"public/archives/2023/05/page/3/index.html","hash":"e7316bcfc6b94011f2a80e1bf97c3c06060032a7","modified":1714302326802},{"_id":"public/archives/2023/06/index.html","hash":"59c4c4b54b10f70a1532691633dd95d33ffa78e4","modified":1714302326802},{"_id":"public/archives/2023/06/page/2/index.html","hash":"4daf13f08f5259b29ec28c12e1b6105ca3ca9c70","modified":1714302326802},{"_id":"public/archives/2023/07/index.html","hash":"a1eb9323b342a0f8d49dba5242888eb8d5cf96f7","modified":1714302326802},{"_id":"public/archives/2023/08/index.html","hash":"4b48da775818150fa97d8e6e8b5e4ab69bd34a7a","modified":1714302326802},{"_id":"public/archives/2023/10/index.html","hash":"465187e28817fd618171931aa60ad84370e2be27","modified":1714302326802},{"_id":"public/archives/2023/11/index.html","hash":"9fec0781d60a502548badb5c80b8a3e4629bc531","modified":1714302326802},{"_id":"public/archives/2023/12/index.html","hash":"f39727008551c6299548e386fdc142d4a6d8b6de","modified":1714302326802},{"_id":"public/archives/2024/index.html","hash":"b8d87e67b9c2e15131cb66722ee7cd5d99bf7f01","modified":1714302326802},{"_id":"public/archives/2024/04/index.html","hash":"7d88e42a43a550aebe3958af728af14f053c5601","modified":1714302326802},{"_id":"public/index.html","hash":"60e456a3f7c3bc1b425fe44a72ef709c12bb584e","modified":1714302326802},{"_id":"public/page/2/index.html","hash":"eba579eaca61579a6ae54c8860fbb404d3cd3b52","modified":1714302326802},{"_id":"public/page/3/index.html","hash":"e275bbc00c15a7afb4c1b16d3e0d45c8b3bd8fa4","modified":1714302326802},{"_id":"public/page/4/index.html","hash":"d7dafaffea6d0a28e89c064df1a341ffa27f81c1","modified":1714302326802},{"_id":"public/page/5/index.html","hash":"bd309de0f6973f05d25fc93a4ecfdb1533af4807","modified":1714302326802},{"_id":"public/page/6/index.html","hash":"7d58e7eaafdd4e8badcce6dcc90a58a7c9523373","modified":1714302326802},{"_id":"public/page/7/index.html","hash":"c4e30b7df47649e03954769dc4c08be3d560da53","modified":1714302326802},{"_id":"public/page/8/index.html","hash":"e53382514d30cbf11540dbae7916d5b5dccba955","modified":1714302326802},{"_id":"public/page/9/index.html","hash":"f755bda326c0a0b25a80b545ba480a8977b3ec20","modified":1714302326802},{"_id":"public/page/10/index.html","hash":"113e2105ce1d615013669d5b5056651cc40cb41b","modified":1714302326802},{"_id":"public/page/11/index.html","hash":"72b70ec4fa410a6a538bf30e181c9262e22045af","modified":1714302326802},{"_id":"public/page/12/index.html","hash":"aac4e6c17055569d979d99a071dcdddc9790df59","modified":1714302326802},{"_id":"public/tags/DIY/index.html","hash":"cf9890a74cb01398a6855865d7fab197d257fed9","modified":1714302326802},{"_id":"public/tags/路由器/index.html","hash":"2ab87655616114bc11075c253c6bd9beaa0bf025","modified":1714302326802},{"_id":"public/tags/路由器/page/2/index.html","hash":"12d8f5208b2dc739fb5eec8b2cd78d046067d3bb","modified":1714302326802},{"_id":"public/tags/网络/index.html","hash":"61ab4f15307834016ee22007fdb465a3d2372c0e","modified":1714302326802},{"_id":"public/tags/AdGuard-Home/index.html","hash":"bf8c3e21e22c85bfc8c297603848383850074cec","modified":1714302326802},{"_id":"public/tags/Picture-bed/index.html","hash":"1b692c72fcee8c61a4e8004441f88be2fd31b3ef","modified":1714302326802},{"_id":"public/tags/PicGo/index.html","hash":"503723af89853ceaef17ff20335a6cb26e0b4b25","modified":1714302326802},{"_id":"public/tags/图床/index.html","hash":"5e486aa2ddd94f87cbe0226b0c2fdeb777838240","modified":1714302326802},{"_id":"public/tags/Linux/index.html","hash":"60db4dbde376110610106bb8f4b70c4c2f3bb42b","modified":1714302326802},{"_id":"public/tags/Ubuntu/index.html","hash":"f8035db770fe4470651da4793c4501579a4e8114","modified":1714302326802},{"_id":"public/tags/Ubuntu/page/2/index.html","hash":"4a31e82b410ef395e649b5133a571f0039ce1c28","modified":1714302326802},{"_id":"public/tags/Hexo/index.html","hash":"ba656ab0955c0c521eda663742f88264ef547815","modified":1714302326802},{"_id":"public/tags/wsl/index.html","hash":"02bf5004aed0f9a9741d58cdb8b0d5f8d7e509b5","modified":1714302326802},{"_id":"public/tags/jupyter-notebook/index.html","hash":"10e87fa82fddaa76762f97c3a393e7b3a48b0fcf","modified":1714302326802},{"_id":"public/tags/oh-my-zsh/index.html","hash":"4d924559a11af2132e1b2e95d8483820e371cd2e","modified":1714302326802},{"_id":"public/tags/zsh/index.html","hash":"a8f3ea16ad76eb3bd3aefcd581023fafbef211c1","modified":1714302326802},{"_id":"public/tags/shell/index.html","hash":"40b3321b9deeecaa2cafd7611feaeed0a02a200f","modified":1714302326802},{"_id":"public/tags/bash/index.html","hash":"bf78e88cfd32370c2ba1cedb268ff7d5e9999310","modified":1714302326802},{"_id":"public/tags/科研/index.html","hash":"0bd727e5d9f3cfab7212eda6590299d389bf99dc","modified":1714302326802},{"_id":"public/tags/内网穿透/index.html","hash":"f9b3d45b9e41b7953a0fa5503f306119559d5862","modified":1714302326802},{"_id":"public/tags/ssh/index.html","hash":"82ac6ac08892e530f36ff58ccc25575b516cccff","modified":1714302326802},{"_id":"public/tags/Hadoop/index.html","hash":"14cb588534760ac12ac11a31c1860b4ccb0bd184","modified":1714302326802},{"_id":"public/tags/dpkg/index.html","hash":"815e26cd046a8ea76761efea660882bb74be8a2c","modified":1714302326802},{"_id":"public/tags/clash/index.html","hash":"7448bc7843dcfad03822ed82820998654e586a61","modified":1714302326802},{"_id":"public/tags/科学上网/index.html","hash":"ade0adae7b4a03b70819a6845fd5c0e819da725e","modified":1714302326802},{"_id":"public/tags/markdown/index.html","hash":"358aae673ec96e1660957b6958326d3fdbb64509","modified":1714302326802},{"_id":"public/tags/MongoDB/index.html","hash":"4658c1dda4b3b030cbdb3f3566011fb20aa99cfd","modified":1714302326802},{"_id":"public/tags/WebDav/index.html","hash":"bf1d2c0ec42074fae323d37799c6e07d17bc98ce","modified":1714302326802},{"_id":"public/tags/git/index.html","hash":"956d1f1513ef31ec4a9934e72de2d3735c2bea46","modified":1714302326802},{"_id":"public/tags/python/index.html","hash":"acae29c82c9297b37e3d7521b832e937fa8dc165","modified":1714302326802},{"_id":"public/tags/pytorch/index.html","hash":"a0726397b8f5cdaee5921edf9da269c412170ec1","modified":1714302326802},{"_id":"public/tags/openwrt/index.html","hash":"373fba542a639e7d1dffd801e88f96d6600d45e7","modified":1714302326802},{"_id":"public/tags/RAID/index.html","hash":"2630b866516a93dc814d4b6cf41f6e0a1038c940","modified":1714302326802},{"_id":"public/tags/学习/index.html","hash":"dea49dbe744148d97153c059c7e6ebfa1763f424","modified":1714302326802},{"_id":"public/tags/笔记/index.html","hash":"361383ae27e12754e6fe99755a432296bbef10b0","modified":1714302326802},{"_id":"public/tags/hosts/index.html","hash":"b95d348605af5a307d594ff6f4b955ba168e9e79","modified":1714302326802},{"_id":"public/tags/raw-githubusercontent-com/index.html","hash":"b0f4497d05f1f7ec39493553099d4b06e0254a45","modified":1714302326802},{"_id":"public/tags/windows/index.html","hash":"1b97055bf92ed12df22b958dde0a310af70d5b23","modified":1714302326802},{"_id":"public/tags/windows/page/2/index.html","hash":"4c4ef0d4de3843947080992a8190e618f7ae44fd","modified":1714302326802},{"_id":"public/tags/gpg-加密/index.html","hash":"d7965bc3b7760c5d10155ecb9d478ba1dd992cdf","modified":1714302326802},{"_id":"public/tags/NAS/index.html","hash":"4f15fda0c9cf8b8c6b4aa909c364ec7ee54a13ca","modified":1714302326802},{"_id":"public/tags/WSL/index.html","hash":"7b93424315b097d95388e380444673c9537298bc","modified":1714302326802},{"_id":"public/tags/Windows/index.html","hash":"8f7a2aac96c05e66017ad02bf0e8c877cff53c35","modified":1714302326802},{"_id":"public/tags/bilibili/index.html","hash":"f7764de27a335c59ca8d41d5cbdc39a3aec83a00","modified":1714302326802},{"_id":"public/tags/chatgpt/index.html","hash":"1e09531e3baf1a92d493b9bc6fd1f8e2219fe361","modified":1714302326802},{"_id":"public/tags/chrome/index.html","hash":"0b1998dc85713645405669ca4349af1fe7d4d085","modified":1714302326802},{"_id":"public/tags/emoji/index.html","hash":"dd9fa3c07bc9699b39fd840d248aa298f8a49f3d","modified":1714302326802},{"_id":"public/tags/gdb/index.html","hash":"0913084b42c3a91662c95daef986c7377773b4bf","modified":1714302326802},{"_id":"public/tags/C-C/index.html","hash":"5d4dbb9f54246261cb02bc0245a1255879798129","modified":1714302326802},{"_id":"public/tags/hexo/index.html","hash":"e675b39226e1f435b4278a2698f5ba2529394b7e","modified":1714302326802},{"_id":"public/tags/Python/index.html","hash":"0581fc6d34881a22bdb30ec1637f2780f7b3671b","modified":1714302326802},{"_id":"public/tags/其它/index.html","hash":"53aa52a5696c39c7d22a8319171c1e505adfc928","modified":1714302326802},{"_id":"public/tags/manjaro/index.html","hash":"5d1654c84f8728c2148d91949fd2e0a300ee4604","modified":1714302326802},{"_id":"public/tags/Arch/index.html","hash":"1add106a396fa75015e660137cc2fc6b287e4b01","modified":1714302326802},{"_id":"public/tags/microsoft/index.html","hash":"1f41e6f28114cda9980428688fc692d5a52da243","modified":1714302326802},{"_id":"public/tags/mysql/index.html","hash":"17f0f93026a3e6774cff00ae87b430922d058521","modified":1714302326802},{"_id":"public/tags/bing/index.html","hash":"7a8d28c2fd1fb28ee646bac0ea47552ed41f645a","modified":1714302326802},{"_id":"public/tags/域名解析/index.html","hash":"d7a6317bd507169b0877dd7429eaf84f796be2cd","modified":1714302326802},{"_id":"public/tags/vscode/index.html","hash":"18bdf138fe49098cfed403b2451e4bb5ec5fce52","modified":1714302326802},{"_id":"public/tags/colab/index.html","hash":"4a25f23c75fedef6fb4b7b0a9f9b33b1c3b9d667","modified":1714302326802},{"_id":"public/tags/jupyter/index.html","hash":"5308d559f89b71b1c3120ea224b9b67998466745","modified":1714302326802},{"_id":"public/tags/快捷键/index.html","hash":"7cd543dc5f382cb425c8a423b5459f755881bfc9","modified":1714302326802},{"_id":"public/tags/v2ray/index.html","hash":"0e8f016b5e36acd543c5f46a8294c26d6bbc6b0d","modified":1714302326802},{"_id":"public/tags/deepin/index.html","hash":"df85dd19b749e614ce2385a76980623156d9d371","modified":1714302326802},{"_id":"public/tags/羊毛/index.html","hash":"7713cb51027506c02322f59deebff60a0f8e8ec0","modified":1714302326802},{"_id":"public/tags/入党/index.html","hash":"3afb99789fbacb34114bcaf8eb445b5a69ea7bc1","modified":1714302326802},{"_id":"public/tags/考研/index.html","hash":"57bdb2f965c3616273c0f6921ccd75a62393a7da","modified":1714302326802},{"_id":"public/tags/域名/index.html","hash":"cb2824602e7c9419465ec6fd39f2a25899be91a2","modified":1714302326802},{"_id":"public/tags/mathjax/index.html","hash":"8f9b806d90cb80c57aba132e8470044eb26cc423","modified":1714302326802},{"_id":"public/tags/数学公式/index.html","hash":"104df76a00eb91d9aed4a71e7943eebbe139c1a0","modified":1714302326802},{"_id":"public/tags/百度文库/index.html","hash":"aaf4fb8c2308de92596363b77f0ce2a105d7ca9a","modified":1714302326802},{"_id":"public/tags/算法/index.html","hash":"41e49c744cec6402f77f78040f65976181402c4f","modified":1714302326802},{"_id":"public/tags/键位映射/index.html","hash":"1f32d99667159845e43e24dd7d1e05781a0cfb8d","modified":1714302326802},{"_id":"public/tags/阿里云/index.html","hash":"0bc3367f4ebf215e4445690c152336a3c04d0e4f","modified":1714302326802},{"_id":"public/tags/阿里云盘/index.html","hash":"50ae4c4dd9eb2e0200d85b2e551d2d00580beae1","modified":1714302326802},{"_id":"public/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1714295531354},{"_id":"public/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1714295531354},{"_id":"public/fonts/iconfont.45d7ee.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1714295531354},{"_id":"public/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1714295531354},{"_id":"public/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1714295531354},{"_id":"public/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1714295531354},{"_id":"public/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1714295531354},{"_id":"public/img/avatar.jpg","hash":"e9bba3403796407c4fcbc5a38590f02f0c4c8ae6","modified":1714295531354},{"_id":"public/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1714295531354},{"_id":"public/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1714295531354},{"_id":"public/CNAME","hash":"505522a56b6594eab0c1966697662d5932267b63","modified":1714295531354},{"_id":"public/2023/04/05/Building-a-picture-bed-through-github-and-PicGo/PicGo_setting.png","hash":"b643ec525f84df7bc9fcc6e853e635001e6b399e","modified":1714295531354},{"_id":"public/2021/06/01/Configure-Hexo/HTML标签验证.png","hash":"58b0e3e6093807ffd454aae70f406b3de24404e9","modified":1714295531354},{"_id":"public/2021/06/01/Configure-Hexo/效果图1.png","hash":"2c71ca106bb3867249575195484fa990152b6292","modified":1714295531354},{"_id":"public/2021/06/01/Configure-Hexo/效果图2.png","hash":"6e7a5971428883ff66bb46b080bbf23ed3126f9c","modified":1714295531354},{"_id":"public/2021/06/01/Configure-Hexo/添加CNAME.png","hash":"fba10ed9f47916f2851ed63a77237193ef149363","modified":1714295531354},{"_id":"public/2021/06/01/Configure-Hexo/绑定到page.png","hash":"d56ce0a4b2c5f63cfa1e389f7bccbbbdc8db7adc","modified":1714295531354},{"_id":"public/2021/05/29/How-to-build-a-hexo-blog-on-Ubuntu-through-gitee-github/单篇字数.png","hash":"ad1af99e04082d1564185ba91a415b4f2d97c557","modified":1714295531354},{"_id":"public/2021/05/29/How-to-build-a-hexo-blog-on-Ubuntu-through-gitee-github/复制HTML代码.png","hash":"5f26189ade8b8c960254d1300d0ee6f0a954edc7","modified":1714295531354},{"_id":"public/2021/05/29/How-to-build-a-hexo-blog-on-Ubuntu-through-gitee-github/测试置顶.png","hash":"efc0e04d5c72d0d16aa2e54c6cefc0831b2e5840","modified":1714295531354},{"_id":"public/2021/05/29/How-to-build-a-hexo-blog-on-Ubuntu-through-gitee-github/置顶优先级配置.png","hash":"91f1f1247e6949ecc7ca8d848d26af639961cde4","modified":1714295531354},{"_id":"public/2021/05/29/How-to-build-a-hexo-blog-on-Ubuntu-through-gitee-github/置顶效果图.png","hash":"a4a82059cad4947270e9d6dfdda179021ca6e7d2","modified":1714295531354},{"_id":"public/2022/04/04/python笔记/001_代码结构示意图.png","hash":"e2bb4c17873e607510807a37bded2a1cf09ad04c","modified":1714295531354},{"_id":"public/2022/04/04/python笔记/001_函数参数和返回值.png","hash":"d51ab24e9286785bdd22060a26264a2d9e9256cf","modified":1714295531354},{"_id":"public/2022/04/04/python笔记/002_Person类.png","hash":"eac3073c8a0dce977a3a912ceb568432c1b38fc4","modified":1714295531354},{"_id":"public/2022/04/04/python笔记/003_Dog类.png","hash":"6ec9d841d62d0d55ef52e19d440aef11594e473d","modified":1714295531354},{"_id":"public/2022/04/04/python笔记/004_Cat类1.png","hash":"e0901df60ed02ffaaf1f02f065b59f6261a357e2","modified":1714295531354},{"_id":"public/2022/04/04/python笔记/004_Cat类2.png","hash":"9c028840f9be8a941e47da5b49cef1ee8b4ebc83","modified":1714295531354},{"_id":"public/2022/04/04/python笔记/004_Cat类3.png","hash":"552f67b906e89e4a229e33266b9d8972b121008a","modified":1714295531354},{"_id":"public/2022/04/04/python笔记/004_a1tag.png","hash":"d3aeb35d848661c7d74814ab106291f859b617e3","modified":1714295531354},{"_id":"public/2022/04/04/python笔记/005_1.png","hash":"e58b5d1983e8607b40ed42fd6a1c9b244866b291","modified":1714295531354},{"_id":"public/2022/04/04/python笔记/005_a2tag.png","hash":"8e7fad79d4ab15af795610dfe18f4553d3b47382","modified":1714295531354},{"_id":"public/2022/04/04/python笔记/006_ab2tag.png","hash":"7417e51a9fab16250a698dc944c30e7ebe04b460","modified":1714295531354},{"_id":"public/2022/04/04/python笔记/007_小明爱跑步.png","hash":"13f784f2bb243ee84358dcfbdf3fb6357b08923a","modified":1714295531354},{"_id":"public/2022/04/04/python笔记/008_摆放家具.png","hash":"ae9bfc16f226b3987c90725ed071bdb2308dec5a","modified":1714295531354},{"_id":"public/2022/04/04/python笔记/009_士兵突击.png","hash":"aa032679a5854c1ed4749b445ba53fde4b8a50cb","modified":1714295531354},{"_id":"public/2022/04/04/python笔记/010_私有属性和方法.png","hash":"ef4124b0777b11668255d85740185825c3972c7a","modified":1714295531354},{"_id":"public/2022/04/04/python笔记/012_继承方法的重写.png","hash":"2444e6ada30d8d4d30d39d6d228c4a91cee96831","modified":1714295531354},{"_id":"public/2022/04/04/python笔记/013_父类的私有属性和私有方法.png","hash":"f963cfc2dee268073cbfab3d94efe23234e5b389","modified":1714295531354},{"_id":"public/2022/04/04/python笔记/014_多继承.png","hash":"8cd430a8dde0a30a17b611535c20e77282ebff16","modified":1714295531354},{"_id":"public/2022/04/04/python笔记/015_多继承II.png","hash":"d1681c69590dc09f71c8ce386290c06276829769","modified":1714295531354},{"_id":"public/2022/04/04/python笔记/016_多态.png","hash":"874c10c1b2e70b0bc6042101447aadab944b9878","modified":1714295531354},{"_id":"public/2022/04/04/python笔记/016_多态示意图.png","hash":"3485d69be30258d8b40cf8b2d3911ea4038b7bcd","modified":1714295531354},{"_id":"public/2022/04/04/python笔记/018_类属性案例I.png","hash":"06a0ba934c4c1f1e48f79761a9316f396ef8a3dd","modified":1714295531354},{"_id":"public/2022/04/04/python笔记/020_类方法案例.png","hash":"878416067492e86b7359fa697b77de1e5b408353","modified":1714295531354},{"_id":"public/2022/04/04/python笔记/021_方法综合案例.png","hash":"c18209792f04af0e4a625a79c50c45d2715ac4f6","modified":1714295531354},{"_id":"public/2022/04/04/python笔记/022_对象分配空间和初始化.png","hash":"6b40e4918176657b8185c2eced63911d661706c7","modified":1714295531354},{"_id":"public/2022/04/04/python笔记/024_自定义异常.png","hash":"6007df5d30b1bccd209d98c4c0bb8078a90a16a9","modified":1714295531354},{"_id":"public/2022/04/04/python笔记/025_复制文件.png","hash":"057fec6a2adb8409d89965597dfdc4e3f5150200","modified":1714295531354},{"_id":"public/2022/04/04/python笔记/硬盘.jpg","hash":"6cac1fb158b93110f56715a20156cf6e11b9651f","modified":1714295531354},{"_id":"public/css/hbe.style.css","hash":"b0a0077cb588c0941823905fcc383aa7509ade73","modified":1714295531354},{"_id":"public/lib/hbe.js","hash":"136dba00826bdd086153bf0acb5473aea7183ad1","modified":1714295531354},{"_id":"public/live2dw/assets/hijiki.model.json","hash":"feff43bf7498d213982c3736c2c029664e4bcbd2","modified":1714295531354},{"_id":"public/live2dw/assets/hijiki.pose.json","hash":"81438bf69b32c7c11e311b4fe043730cdc7b7ec2","modified":1714295531354},{"_id":"public/live2dw/assets/mtn/00_idle.mtn","hash":"b224c60e463b9f71ddbfc0c720e430496c175f4f","modified":1714295531354},{"_id":"public/live2dw/assets/mtn/01.mtn","hash":"fb550833ae22c9954c3e01df37ed29b2d61700f2","modified":1714295531354},{"_id":"public/live2dw/assets/mtn/02.mtn","hash":"7eafc52edc73b7cb80ae70d34b43c6ac778fa47b","modified":1714295531354},{"_id":"public/live2dw/assets/mtn/03.mtn","hash":"f900737c7a98441cbb2e05255427e6260e19ae68","modified":1714295531354},{"_id":"public/live2dw/assets/mtn/04.mtn","hash":"c7a25d3c5d783639bae18db2f3cd284b819c3c85","modified":1714295531354},{"_id":"public/live2dw/assets/mtn/05.mtn","hash":"dd20ad24b5d1830a5d44b9bccb28f922eea5e0e5","modified":1714295531354},{"_id":"public/live2dw/assets/mtn/06.mtn","hash":"ad404bd852d276cdd3d054c953e23f90e4e45ae1","modified":1714295531354},{"_id":"public/live2dw/assets/mtn/07.mtn","hash":"b7f2e3a9fa4f3ffbb6e64a08f8d9f45ca1868ffb","modified":1714295531354},{"_id":"public/live2dw/assets/mtn/08.mtn","hash":"4411c7651ff65195b113d95e7d5ebef8a59a37d9","modified":1714295531354},{"_id":"public/live2dw/lib/L2Dwidget.min.js","hash":"5f1a807437cc723bcadc3791d37add5ceed566a2","modified":1714295531354},{"_id":"public/2021/06/01/Configure-Hexo/准入密钥获取.png","hash":"9071c8c159c72132021c8f04d049d3976364dbb8","modified":1714295531354},{"_id":"public/2021/05/29/How-to-build-a-hexo-blog-on-Ubuntu-through-gitee-github/总字数.png","hash":"6a916771d0f599cbcbe1c1b3aa435f6f07f5e180","modified":1714295531354},{"_id":"public/2021/05/29/How-to-build-a-hexo-blog-on-Ubuntu-through-gitee-github/选择外链插件.png","hash":"3b5f5d7355a83fe31cbe3edf3d8c70237d5612e2","modified":1714295531354},{"_id":"public/2022/04/04/python笔记/001_异常示意图.png","hash":"b07c3467c79f8e56ae7964455100b99c9499595d","modified":1714295531354},{"_id":"public/2022/04/04/python笔记/001_植物大战僵尸类图 copy.png","hash":"7208cc7d04b6ddd70a126c6888870b523d2bb217","modified":1714295531354},{"_id":"public/2022/04/04/python笔记/001_植物大战僵尸类图.png","hash":"7208cc7d04b6ddd70a126c6888870b523d2bb217","modified":1714295531354},{"_id":"public/2022/04/04/python笔记/001_面向过程.png","hash":"c678e60ff748bbbe05d424bac906b4aa4ed66fa1","modified":1714295531354},{"_id":"public/2022/04/04/python笔记/002_递归调用示意图.png","hash":"27101abadb4787d0f54a3e8e686a8140a93f9936","modified":1714295531354},{"_id":"public/2022/04/04/python笔记/002_递归调用示意图I.png","hash":"b2f8173b637370a4fdef6c9b47203e1b04ee0cf0","modified":1714295531354},{"_id":"public/2022/04/04/python笔记/005_方法中的self.png","hash":"2a1388fdd2e44bab16d608fbfde31d70f18e5031","modified":1714295531354},{"_id":"public/2022/04/04/python笔记/017_类的结构示意图I.png","hash":"dc76e42d5af09e3b6b43170714f91ff5d113090d","modified":1714295531354},{"_id":"public/2022/04/04/python笔记/017_类的结构示意图II.png","hash":"7e8a92f2a1820c7fac6c73faaa3dafaf2f423de4","modified":1714295531354},{"_id":"public/2022/04/04/python笔记/019_通过对象访问类属性.png","hash":"0cebb62ff276fbc87a86b9bf911058ca0f6172f7","modified":1714295531354},{"_id":"public/2022/04/04/python笔记/023_单例流程.png","hash":"e2deb984d0e00b3ff64c76d3215f9c60f2a70f24","modified":1714295531354},{"_id":"public/live2dw/lib/L2Dwidget.min.js.map","hash":"3290fe2df45f065b51a1cd7b24ec325cbf9bb5ce","modified":1714295531354},{"_id":"public/2022/04/04/python笔记/011_继承对比图示.png","hash":"d8907642d091d0549254c030122adc94568bc4f8","modified":1714295531354},{"_id":"public/live2dw/assets/moc/hijiki.moc","hash":"44289e62545a7046e0f5231103a851750b78524e","modified":1714295531354},{"_id":"public/live2dw/lib/L2Dwidget.0.min.js","hash":"35bb5b588b6de25c9be2dd51d3fd331feafac02d","modified":1714295531354},{"_id":"public/love.js","hash":"9b8af64e70aeb7b193d30fe79afd1f90ca4a2078","modified":1714295531354},{"_id":"public/2022/03/15/哈工程复试笔记/传递过程.png","hash":"027358957cce14c544dcaff3454a152ac9f83daf","modified":1714295531354},{"_id":"public/live2dw/assets/moc/hijiki.2048/texture_00.png","hash":"66464e0d96439695b5542c5e2f5be60739c29999","modified":1714295531354},{"_id":"public/2022/03/15/哈工程复试笔记/TCP面向流的传输.png","hash":"3edd008762e34e1119f3d2f5986ea4d68f2d00a5","modified":1714295531354},{"_id":"public/2022/04/04/python笔记/CPU.jpg","hash":"6041ca208522c953227f67fcbe05006a424ec577","modified":1714295531354},{"_id":"public/main.0cf68a.css","hash":"ddf6e2c6b953c2c59a3c271e6070010a4cc81cf9","modified":1714295531354},{"_id":"public/slider.e37972.js","hash":"6dec4e220c89049037eebc44404abd8455d22ad7","modified":1714295531354},{"_id":"public/main.0cf68a.js","hash":"993fadeb5f6d296e9d997a49ee20dc97333ceab7","modified":1714295531354},{"_id":"public/2021/05/29/How-to-build-a-hexo-blog-on-Ubuntu-through-gitee-github/模块缺失.png","hash":"7c98676d74eea6354feefa477452139138431c93","modified":1714295531354},{"_id":"public/2022/04/04/python笔记/001_ASCII编码表1.jpg","hash":"d69d351305dbf524d4796cdffa3378d03140e5a9","modified":1714295531354},{"_id":"public/2021/05/29/How-to-build-a-hexo-blog-on-Ubuntu-through-gitee-github/模块完整.png","hash":"e8358386192414b44a7c2463c3a80685a677650e","modified":1714295531354},{"_id":"public/2021/05/29/How-to-build-a-hexo-blog-on-Ubuntu-through-gitee-github/网易云生成外链.png","hash":"dd331e91041c175ed4f5f803c4c7b69dc592d871","modified":1714295531354},{"_id":"public/2022/03/15/哈工程复试笔记/2005哈尔滨工程大学数据库试卷A_2.png","hash":"ef4e5dd61ace89c49b776b5ca7871e7466efb7d9","modified":1714295531354},{"_id":"public/mobile.992cbe.js","hash":"01b35e71e37aa2849664eb5daf26daede2278398","modified":1714295531354},{"_id":"public/live2dw/lib/L2Dwidget.0.min.js.map","hash":"35e71cc2a130199efb167b9a06939576602f0d75","modified":1714295531354},{"_id":"public/2022/03/15/哈工程复试笔记/计算机网络体系结构.png","hash":"7d2c26fa3a0ac412e5df70214871b735a49fc425","modified":1714295531354},{"_id":"public/2022/03/15/哈工程复试笔记/2005哈尔滨工程大学数据库试卷A_1.png","hash":"c4f7739d452b96409f6f8924b6e115de518f47ef","modified":1714295531354},{"_id":"public/2022/04/04/python笔记/001_植物大战僵尸.png","hash":"d3f21651124d9bbd8e0b713666002b1f26249b98","modified":1714295531354},{"_id":"public/2022/04/04/python笔记/内存条.png","hash":"eab7df35f8bd8f90779414af6db57155018fe7fc","modified":1714295531354},{"_id":"public/2022/04/04/python笔记/002_飞机设计图纸.png","hash":"455745ef57c80bdb12d678ff7bd6b8355715220a","modified":1714295531354},{"_id":"public/2022/04/04/python笔记/001_植物大战僵尸 copy.png","hash":"d3f21651124d9bbd8e0b713666002b1f26249b98","modified":1714295531354},{"_id":"public/2022/04/04/python笔记/003_飞机对象.png","hash":"d9f8e3a8d1453c8985163f5269c90914ddd84bfa","modified":1714295531354}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"1927索尔维会议(SolvayConference)合影","date":"2023-06-24T11:34:43.000Z","_content":"![20230624113315](https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20230624113315.png)<!--more-->\n[1927索尔维会议(SolvayConference)合影](https://jerkwin.github.io/2014/10/14/1927%E7%B4%A2%E5%B0%94%E7%BB%B4%E4%BC%9A%E8%AE%AE(SolvayConference)%E5%90%88%E5%BD%B1/)","source":"_posts/1927索尔维会议-SolvayConference-合影.md","raw":"---\ntitle: 1927索尔维会议(SolvayConference)合影\ndate: 2023-06-24 11:34:43\ntags:\n---\n![20230624113315](https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20230624113315.png)<!--more-->\n[1927索尔维会议(SolvayConference)合影](https://jerkwin.github.io/2014/10/14/1927%E7%B4%A2%E5%B0%94%E7%BB%B4%E4%BC%9A%E8%AE%AE(SolvayConference)%E5%90%88%E5%BD%B1/)","slug":"1927索尔维会议-SolvayConference-合影","published":1,"updated":"2024-04-25T17:26:47.443Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvjbaqgg00000vn1d19l8sg7","content":"<p><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20230624113315.png\" alt=\"20230624113315\"><span id=\"more\"></span><br><a href=\"https://jerkwin.github.io/2014/10/14/1927%E7%B4%A2%E5%B0%94%E7%BB%B4%E4%BC%9A%E8%AE%AE(SolvayConference)%E5%90%88%E5%BD%B1/\">1927索尔维会议(SolvayConference)合影</a></p>\n","site":{"data":{}},"excerpt":"<p><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20230624113315.png\" alt=\"20230624113315\"></p>","more":"<br><a href=\"https://jerkwin.github.io/2014/10/14/1927%E7%B4%A2%E5%B0%94%E7%BB%B4%E4%BC%9A%E8%AE%AE(SolvayConference)%E5%90%88%E5%BD%B1/\">1927索尔维会议(SolvayConference)合影</a><p></p>"},{"title":"200元E3神教装机","date":"2023-05-21T19:37:19.000Z","declare":true,"_content":"| 设备 | 型号              | 价格 |\n| :----: | :----------------: | :--: |\n| 主板 | H61              | 35 |\n| CPU  | E3-1220 V2       | 38 |\n| 内存 | DDR3 4G * 2 1600 | 26 |\n| 散热 | inter原装 or 玄冰100 | 10 |\n| 硬盘 | 120G + 500G | 45 |\n| 显卡 | GT240 | 35 |\n| 电源 | 180W拆机电源 | 14 |\n| 机箱 | 手艺人鞋盒制作 | 0 |\n| 总计 |  | 168 |\n\n> 注意主板和CPU工艺匹配，显卡要d5版本\n","source":"_posts/200元E3神教装机.md","raw":"---\ntitle: 200元E3神教装机\ndate: 2023-05-21 19:37:19\ntags:\n    - DIY\ndeclare: true\n---\n| 设备 | 型号              | 价格 |\n| :----: | :----------------: | :--: |\n| 主板 | H61              | 35 |\n| CPU  | E3-1220 V2       | 38 |\n| 内存 | DDR3 4G * 2 1600 | 26 |\n| 散热 | inter原装 or 玄冰100 | 10 |\n| 硬盘 | 120G + 500G | 45 |\n| 显卡 | GT240 | 35 |\n| 电源 | 180W拆机电源 | 14 |\n| 机箱 | 手艺人鞋盒制作 | 0 |\n| 总计 |  | 168 |\n\n> 注意主板和CPU工艺匹配，显卡要d5版本\n","slug":"200元E3神教装机","published":1,"updated":"2024-04-25T17:26:46.983Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvjbaqgl00010vn1bfbkatyv","content":"<table>\n<thead>\n<tr>\n<th align=\"center\">设备</th>\n<th align=\"center\">型号</th>\n<th align=\"center\">价格</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">主板</td>\n<td align=\"center\">H61</td>\n<td align=\"center\">35</td>\n</tr>\n<tr>\n<td align=\"center\">CPU</td>\n<td align=\"center\">E3-1220 V2</td>\n<td align=\"center\">38</td>\n</tr>\n<tr>\n<td align=\"center\">内存</td>\n<td align=\"center\">DDR3 4G * 2 1600</td>\n<td align=\"center\">26</td>\n</tr>\n<tr>\n<td align=\"center\">散热</td>\n<td align=\"center\">inter原装 or 玄冰100</td>\n<td align=\"center\">10</td>\n</tr>\n<tr>\n<td align=\"center\">硬盘</td>\n<td align=\"center\">120G + 500G</td>\n<td align=\"center\">45</td>\n</tr>\n<tr>\n<td align=\"center\">显卡</td>\n<td align=\"center\">GT240</td>\n<td align=\"center\">35</td>\n</tr>\n<tr>\n<td align=\"center\">电源</td>\n<td align=\"center\">180W拆机电源</td>\n<td align=\"center\">14</td>\n</tr>\n<tr>\n<td align=\"center\">机箱</td>\n<td align=\"center\">手艺人鞋盒制作</td>\n<td align=\"center\">0</td>\n</tr>\n<tr>\n<td align=\"center\">总计</td>\n<td align=\"center\"></td>\n<td align=\"center\">168</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>注意主板和CPU工艺匹配，显卡要d5版本</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<table>\n<thead>\n<tr>\n<th align=\"center\">设备</th>\n<th align=\"center\">型号</th>\n<th align=\"center\">价格</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">主板</td>\n<td align=\"center\">H61</td>\n<td align=\"center\">35</td>\n</tr>\n<tr>\n<td align=\"center\">CPU</td>\n<td align=\"center\">E3-1220 V2</td>\n<td align=\"center\">38</td>\n</tr>\n<tr>\n<td align=\"center\">内存</td>\n<td align=\"center\">DDR3 4G * 2 1600</td>\n<td align=\"center\">26</td>\n</tr>\n<tr>\n<td align=\"center\">散热</td>\n<td align=\"center\">inter原装 or 玄冰100</td>\n<td align=\"center\">10</td>\n</tr>\n<tr>\n<td align=\"center\">硬盘</td>\n<td align=\"center\">120G + 500G</td>\n<td align=\"center\">45</td>\n</tr>\n<tr>\n<td align=\"center\">显卡</td>\n<td align=\"center\">GT240</td>\n<td align=\"center\">35</td>\n</tr>\n<tr>\n<td align=\"center\">电源</td>\n<td align=\"center\">180W拆机电源</td>\n<td align=\"center\">14</td>\n</tr>\n<tr>\n<td align=\"center\">机箱</td>\n<td align=\"center\">手艺人鞋盒制作</td>\n<td align=\"center\">0</td>\n</tr>\n<tr>\n<td align=\"center\">总计</td>\n<td align=\"center\"></td>\n<td align=\"center\">168</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>注意主板和CPU工艺匹配，显卡要d5版本</p>\n</blockquote>\n"},{"title":"AdGuard Home 设置","date":"2023-06-04T01:59:53.000Z","declare":true,"_content":"![20230604014941](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230604014941.png)\n<!--more-->\n- 进入web界面，点击设置->DNS设置\n- 上有服务器因个人情况填写，可以多填写一些\n![20230604015138](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230604015138.png)\n\n- 删除 Bootstrap DNS 服务器 中的所有信息，点击应用\n![1685814771128](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/1685814771128.jpg)\n\n- 速度限制改为0，点击保存\n![20230604015335](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230604015335.png)\n\n-----------------------------------------\n- 点击过滤器->DNS黑名单\n![20230604015421](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230604015421.png)\n\n- 添加规则\n![20230604015442](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230604015442.png)\n\n- [easylistchina](https://easylist-downloads.adblockplus.org/easylistchina.txt)\n- [ad合并自乘风视频广告过滤规则、EasylistChina、EasylistLite、CJX'sAnnoyance](https://cdn.jsdelivr.net/gh/o0HalfLife0o/list@master/ad.txt)\n- [easyprivacy](https://easylist-downloads.adblockplus.org/easyprivacy.txt)\n- [ad-pc](https://cdn.jsdelivr.net/gh/o0HalfLife0o/list@master/ad-pc.txt)\n\n--------------------------------------\n更多规则google搜索adguard home规则\n\n--------------------------------\n> 务必要关闭Turbo ACC 网络加速设置的DNS缓存/DNS加速\n\n------------------------------------------","source":"_posts/AdGuard-Home-设置.md","raw":"---\ntitle: AdGuard Home 设置\ndate: 2023-06-04 01:59:53\ntags:\n    - 路由器\n    - 网络\n    - AdGuard Home\ndeclare: true\n---\n![20230604014941](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230604014941.png)\n<!--more-->\n- 进入web界面，点击设置->DNS设置\n- 上有服务器因个人情况填写，可以多填写一些\n![20230604015138](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230604015138.png)\n\n- 删除 Bootstrap DNS 服务器 中的所有信息，点击应用\n![1685814771128](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/1685814771128.jpg)\n\n- 速度限制改为0，点击保存\n![20230604015335](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230604015335.png)\n\n-----------------------------------------\n- 点击过滤器->DNS黑名单\n![20230604015421](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230604015421.png)\n\n- 添加规则\n![20230604015442](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230604015442.png)\n\n- [easylistchina](https://easylist-downloads.adblockplus.org/easylistchina.txt)\n- [ad合并自乘风视频广告过滤规则、EasylistChina、EasylistLite、CJX'sAnnoyance](https://cdn.jsdelivr.net/gh/o0HalfLife0o/list@master/ad.txt)\n- [easyprivacy](https://easylist-downloads.adblockplus.org/easyprivacy.txt)\n- [ad-pc](https://cdn.jsdelivr.net/gh/o0HalfLife0o/list@master/ad-pc.txt)\n\n--------------------------------------\n更多规则google搜索adguard home规则\n\n--------------------------------\n> 务必要关闭Turbo ACC 网络加速设置的DNS缓存/DNS加速\n\n------------------------------------------","slug":"AdGuard-Home-设置","published":1,"updated":"2024-04-25T17:26:47.003Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvjbaqgn00020vn186w2g3zd","content":"<p><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230604014941.png\" alt=\"20230604014941\"></p>\n<span id=\"more\"></span>\n<ul>\n<li><p>进入web界面，点击设置-&gt;DNS设置</p>\n</li>\n<li><p>上有服务器因个人情况填写，可以多填写一些<br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230604015138.png\" alt=\"20230604015138\"></p>\n</li>\n<li><p>删除 Bootstrap DNS 服务器 中的所有信息，点击应用<br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/1685814771128.jpg\" alt=\"1685814771128\"></p>\n</li>\n<li><p>速度限制改为0，点击保存<br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230604015335.png\" alt=\"20230604015335\"></p>\n</li>\n</ul>\n<hr>\n<ul>\n<li><p>点击过滤器-&gt;DNS黑名单<br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230604015421.png\" alt=\"20230604015421\"></p>\n</li>\n<li><p>添加规则<br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230604015442.png\" alt=\"20230604015442\"></p>\n</li>\n<li><p><a href=\"https://easylist-downloads.adblockplus.org/easylistchina.txt\">easylistchina</a></p>\n</li>\n<li><p><a href=\"https://cdn.jsdelivr.net/gh/o0HalfLife0o/list@master/ad.txt\">ad合并自乘风视频广告过滤规则、EasylistChina、EasylistLite、CJX’sAnnoyance</a></p>\n</li>\n<li><p><a href=\"https://easylist-downloads.adblockplus.org/easyprivacy.txt\">easyprivacy</a></p>\n</li>\n<li><p><a href=\"https://cdn.jsdelivr.net/gh/o0HalfLife0o/list@master/ad-pc.txt\">ad-pc</a></p>\n</li>\n</ul>\n<hr>\n<p>更多规则google搜索adguard home规则</p>\n<hr>\n<blockquote>\n<p>务必要关闭Turbo ACC 网络加速设置的DNS缓存&#x2F;DNS加速</p>\n</blockquote>\n<hr>\n","site":{"data":{}},"excerpt":"<p><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230604014941.png\" alt=\"20230604014941\"></p>","more":"<ul>\n<li><p>进入web界面，点击设置-&gt;DNS设置</p>\n</li>\n<li><p>上有服务器因个人情况填写，可以多填写一些<br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230604015138.png\" alt=\"20230604015138\"></p>\n</li>\n<li><p>删除 Bootstrap DNS 服务器 中的所有信息，点击应用<br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/1685814771128.jpg\" alt=\"1685814771128\"></p>\n</li>\n<li><p>速度限制改为0，点击保存<br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230604015335.png\" alt=\"20230604015335\"></p>\n</li>\n</ul>\n<hr>\n<ul>\n<li><p>点击过滤器-&gt;DNS黑名单<br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230604015421.png\" alt=\"20230604015421\"></p>\n</li>\n<li><p>添加规则<br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230604015442.png\" alt=\"20230604015442\"></p>\n</li>\n<li><p><a href=\"https://easylist-downloads.adblockplus.org/easylistchina.txt\">easylistchina</a></p>\n</li>\n<li><p><a href=\"https://cdn.jsdelivr.net/gh/o0HalfLife0o/list@master/ad.txt\">ad合并自乘风视频广告过滤规则、EasylistChina、EasylistLite、CJX’sAnnoyance</a></p>\n</li>\n<li><p><a href=\"https://easylist-downloads.adblockplus.org/easyprivacy.txt\">easyprivacy</a></p>\n</li>\n<li><p><a href=\"https://cdn.jsdelivr.net/gh/o0HalfLife0o/list@master/ad-pc.txt\">ad-pc</a></p>\n</li>\n</ul>\n<hr>\n<p>更多规则google搜索adguard home规则</p>\n<hr>\n<blockquote>\n<p>务必要关闭Turbo ACC 网络加速设置的DNS缓存&#x2F;DNS加速</p>\n</blockquote>\n<hr>"},{"title":"Building a picture bed through github and PicGo","date":"2023-04-05T17:24:17.000Z","declare":true,"_content":"1. Create a new repository on github, select **setting->Developer settings->Personal access tokens (classic)** to create a tokens.<!--more-->\n2. Download the **PicGo** plugin for vscode, find **Picgo>Pic Bed:Current** in **setting**, fill in the following content:\n<!-- ![PicGo_setting](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/PicGo_setting.png) -->\n\n<img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/PicGo_setting.png\" width=\"40%\" height=\"40%\">\n\n**https://cdn.jsdelivr.net/gh/** for CDN acceleration.\n\n3. Remaining problems: wsl cannot be used normally.\n\n------------------------------------\n\nUbuntu 中报错 `xclip not found,Please install xclip before run picgo`，安装 `xclip`，之后使用**Ubuntu系统自带的剪贴板**就可以了。\n","source":"_posts/Building-a-picture-bed-through-github-and-PicGo.md","raw":"---\ntitle: Building a picture bed through github and PicGo\ndate: 2023-04-05 17:24:17\ntags:\n    - Picture bed\n    - PicGo\n    - 图床\n    - Linux\n    - Ubuntu\ndeclare: true\n---\n1. Create a new repository on github, select **setting->Developer settings->Personal access tokens (classic)** to create a tokens.<!--more-->\n2. Download the **PicGo** plugin for vscode, find **Picgo>Pic Bed:Current** in **setting**, fill in the following content:\n<!-- ![PicGo_setting](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/PicGo_setting.png) -->\n\n<img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/PicGo_setting.png\" width=\"40%\" height=\"40%\">\n\n**https://cdn.jsdelivr.net/gh/** for CDN acceleration.\n\n3. Remaining problems: wsl cannot be used normally.\n\n------------------------------------\n\nUbuntu 中报错 `xclip not found,Please install xclip before run picgo`，安装 `xclip`，之后使用**Ubuntu系统自带的剪贴板**就可以了。\n","slug":"Building-a-picture-bed-through-github-and-PicGo","published":1,"updated":"2024-04-25T17:26:47.203Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvjbaqgr00040vn16mfd48gc","content":"<ol>\n<li>Create a new repository on github, select <strong>setting-&gt;Developer settings-&gt;Personal access tokens (classic)</strong> to create a tokens.<span id=\"more\"></span></li>\n<li>Download the <strong>PicGo</strong> plugin for vscode, find <strong>Picgo&gt;Pic Bed:Current</strong> in <strong>setting</strong>, fill in the following content:<!-- ![PicGo_setting](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/PicGo_setting.png) --></li>\n</ol>\n<img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/PicGo_setting.png\" width=\"40%\" height=\"40%\">\n\n<p><strong><a href=\"https://cdn.jsdelivr.net/gh/\">https://cdn.jsdelivr.net/gh/</a></strong> for CDN acceleration.</p>\n<ol start=\"3\">\n<li>Remaining problems: wsl cannot be used normally.</li>\n</ol>\n<hr>\n<p>Ubuntu 中报错 <code>xclip not found,Please install xclip before run picgo</code>，安装 <code>xclip</code>，之后使用<strong>Ubuntu系统自带的剪贴板</strong>就可以了。</p>\n","site":{"data":{}},"excerpt":"<ol>\n<li>Create a new repository on github, select <strong>setting-&gt;Developer settings-&gt;Personal access tokens (classic)</strong> to create a tokens.</li></ol>","more":"\n<li>Download the <strong>PicGo</strong> plugin for vscode, find <strong>Picgo&gt;Pic Bed:Current</strong> in <strong>setting</strong>, fill in the following content:<!-- ![PicGo_setting](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/PicGo_setting.png) --></li>\n\n<img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/PicGo_setting.png\" width=\"40%\" height=\"40%\">\n\n<p><strong><a href=\"https://cdn.jsdelivr.net/gh/\">https://cdn.jsdelivr.net/gh/</a></strong> for CDN acceleration.</p>\n<ol start=\"3\">\n<li>Remaining problems: wsl cannot be used normally.</li>\n</ol>\n<hr>\n<p>Ubuntu 中报错 <code>xclip not found,Please install xclip before run picgo</code>，安装 <code>xclip</code>，之后使用<strong>Ubuntu系统自带的剪贴板</strong>就可以了。</p>"},{"title":"Configure Hexo","date":"2021-06-01T01:18:44.000Z","declare":true,"toc":1,"_content":"### 1. 添加百度统计<!--more-->\n- 打开themes/yilia/layout/_partial/baidu-analytics.ejs，将在百度统计里面得到的代码粘进去\n- 打开themes/yilia/_config.yml，将其中的baidu_analytics: ''写为baidu_analytics: 'true'\n\n### 2. sitemap方式提交网页\n- 安装sitemap\n```shell\nnpm install hexo-generator-sitemap --save\nhexo clean\nhexo g\n```\n\n- 配置sitemap路径\n打开本目录下的_config.yml文件，将`url`修改为博客的首页地址，这是为了保证sitemap.xml文件路径的正确性。\n```yml\nurl: http://corner88.cf     #修改成你博客的首页地址\nroot: /\npermalink: :year/:month/:day/:title/\npermalink_defaults:\n```\n在合适的位置添加以下内容\n```yml\n# 自动生成sitemap\nsitemap:\n  path: sitemap.xml\n```\n之后输入命令重新部署博客。\n\n- 提交文件\n查看blog/public文件夹，可以看到sitemap.xml文件\nsitemap的初衷是给搜索引擎看的，为了提高搜索引擎对自己站点的收录效果，最好手动到google和百度等搜索引擎提交sitemap.xml。\n进入[百度提交网址](https://ziyuan.baidu.com/?castk=LTE%3D)，点击用户中心->添加网站，选择HTML标签验证。将出现的那行meta代码复制下来\n![HTML标签验证](Configure-Hexo/HTML标签验证.png)\n\n- 配置\n打开themes/layout/_partial/head.ejs文件，将复制的meta代码粘贴进去，注意位置！之后点击完成验证。\n\n- 重新部署博客\n`hexo clean && hexo g && hexo d`\n\n- 资源提交\n打开[百度站点普通收录控制台](https://ziyuan.baidu.com/linksubmit/index)，选择sitemap方式提交，填写正确的文件数据地址，例如我是`http://corner88.cf/sitemap.xml`，之后点击提交即可！\n\n- Google\ngoogle类似于上述百度，[google搜索验证](https://www.google.com/webmasters/tools/home?hl=zh-CN)，[google站点控制台](https://search.google.com/search-console/sitemaps)\n在google搜索验证中选择网址前缀填写博客网址即可，在google站点控制台添加新的站点地图提交即可。\n\n\n### 3. 使用hexo画思维导图\n- 首先进入到 Hexo 博客的根目录，执行`npm install hexo-simple-mindmap`安装插件。\n写新文章时，在需要脑图的地方，按以下格式添加内容。插件会自动将 pullquote 中包裹的内容按照层级顺序渲染成脑图。\n- 代码示例\n\n```\n{% pullquote mindmap mindmap-md %}\n- Fengx\n\t- 任何方向\n\t\t- 编程语言\n\t\t\t- Java\n\t\t- SQL\n\t\t- Linux\n\t\t- Git\n\t- 技术\n\t\t- Java Web\n\t\t- 数据库\n\t\t- Docker\n\t\t- svn\n\t\t- 消息队列(MQ)\n\t\t- mycat\n\t\t- 大数据\n\t\t\t- Hadoop\n\t\t\t- HBase\n\t- 内功\n\t\t- 计算机基础\n\t\t\t- 计算机网络\n\t\t\t- 计算机操作系统\n\t\t\t- 编译原理\n\t\t\t- 计算机组成原理\n\t\t- 数据结构与算法\n\t\t- 设计模式\n\t\t- 性能优化\n\t\t- 架构设计\n\t\t- 软件工程\n\t- 其他\n\t\t- 英语\n\t\t- 博客\n{% endpullquote %}\n```\n\n{% pullquote mindmap mindmap-md %}\n- Fengx\n\t- 任何方向\n\t\t- 编程语言\n\t\t\t- Java\n\t\t- SQL\n\t\t- Linux\n\t\t- Git\n\t- 技术\n\t\t- Java Web\n\t\t- 数据库\n\t\t- Docker\n\t\t- svn\n\t\t- 消息队列(MQ)\n\t\t- mycat\n\t\t- 大数据\n\t\t\t- Hadoop\n\t\t\t- HBase\n\t- 内功\n\t\t- 计算机基础\n\t\t\t- 计算机网络\n\t\t\t- 计算机操作系统\n\t\t\t- 编译原理\n\t\t\t- 计算机组成原理\n\t\t- 数据结构与算法\n\t\t- 设计模式\n\t\t- 性能优化\n\t\t- 架构设计\n\t\t- 软件工程\n\t- 其他\n\t\t- 英语\n\t\t- 博客\n{% endpullquote %}\n\n\n\n### 4. 域名解析以及怎么给hexo绑定域名\n> temp email\n- 首先进入[freenom官网](https://www.freenom.com/zh/index.html)\n    - 全程以美国IP进行，点击**Partners**申请账号。（需要美国身份信息）\n    - 申请一个域名\n\n- 进入[Cloudflare官网](https://dash.cloudflare.com/login)\n其实freenom自带的已经有域名解析功能了，但这个是专业的，而且还能套CDN防止被墙\n- 解析\n    - 添加域名到cloudflare\n    - 需要填写域名服务器，耐心等待检查\n    - 添加A记录可以直接解析到IP上\n    - 添加CNAME可以指向另一个网址\n    - 直接输入'@'就是不加前缀\n- 绑定到hexo\n    1. 找到当前项目，点击Settings->Pages\n    在Custom domain中输入自己的域名\n    ![绑定到page](Configure-Hexo/绑定到page.png)\n    2. 在cloudflare->DNS中添加CNAME记录（不要勾选小云朵）\n    ![添加CNAME](Configure-Hexo/添加CNAME.png)\n    3. 在本地博客文件夹的source中新建一个CNAME文件\n    这个文件不能有任何格式，txt都不行。内容填写刚才的域名即可。\n\n- 域名购买推荐\n[NameSilo](https://www.namesilo.com/?rid=d7fe456te)，[万网](https://wanwang.aliyun.com/)\n如果要续费，注意好次年的价格！\n\n### 5 文章加密\n- 安装[hexo-blog-encrypt](https://github.com/D0n9X1n/hexo-blog-encrypt)插件。\n`npm install hexo-blog-encrypt --save`\n- 配置文件\n打开根目录下的_config.yml文件，在末尾加上下述字段。\n```yml\n# 文章加密\nencrypt:\n  enable: true\n  abstract: 这是一篇加密文章，内容可能是个人情感宣泄或者收费技术。如果你非常好奇，请与我联系。\n  message: 输入密码，查看文章。\n```\n- 文章Front-Matter配置\n在想加密的文章头部添加password、abstract、message\n\n> password: 访问文章的的密码\nabstract: 博客摘要\nmessage: 密码框上的信息\n\n- 测试文章\n```yml\n---\ntitle: test\ndate: 2021-05-31 20:00:49\ntags: 随笔\ntop: 1\npassword: 123\nabstract: 是加密文章啊！\nmessage: 三位数字\ndeclare: true\n---\ntest\n你能看到吗？\n```\n- 效果\n![效果1](Configure-Hexo/效果图1.png)\n\n点开后。\n\n![效果2](Configure-Hexo/效果图2.png)\n> 需要时加上password，提示语message，abstract摘要，后两者不能设置为空！\n- 进阶一下\n需要额外隐藏一下**浏览数、评论、作者信息等**，在任何需要加密的地方（例如comment.ejs）加上一句。\n`<% if (post.encrypt == true) { %>style=\"display:none\" <% } %>`\n\n### 6. 百度自动推送方式提交网页\n打开themes/yilia/layout/_partial/article.ejs文件，定位到下述代码\n```js\n<%\n        var sUrl = url.replace(/index\\.html$/, '');\n        sUrl = /^(http:|https:)\\/\\//.test(sUrl) ? sUrl : 'https:' + sUrl;\n      %>\n```\n在它的前面加上下述代码，即完成了**新增博客文章页面（不包括其他页面）**的自动推送方式提交。\n```js\n<!- 百度自动推送方式提交 -->\n<% if (1){ %>\n  <script>\n  (function(){\n      var bp = document.createElement('script');\n      var curProtocol = window.location.protocol.split(':')[0];\n      if (curProtocol === 'https') {\n          bp.src = 'https://zz.bdstatic.com/linksubmit/push.js';\n      }\n      else {\n          bp.src = 'http://push.zhanzhang.baidu.com/push.js';\n      }\n      var s = document.getElementsByTagName(\"script\")[0];\n      s.parentNode.insertBefore(bp, s);\n  })();\n  </script>\n<% } %>\n<!- 百度自动推送方式提交结束 -->\n```\n\n### 7. 链接提交到百度\n百度站长平台的链接提交方式分为自动提交和手动提交两种，此处只讲自动提交，手动提交按照要求操作即可。<!--more-->\n- 主动推送\n主动推送最为快速的提交方式，是被百度收录最快的推送方式。主动推送可以通过安装插件实现。\n    - 安装插件\n    `npm install hexo-baidu-url-submit --save`\n    修改站点根目录下的配置文件_config.yml，添加以下内容：\n    ```yml\n        baidu_url_submit:\n            count: 20 ## 提交最新的20个链接\n            host: www.corner88.cf ## 百度站长平台中注册的域名\n            token:  ## 16位准入秘钥\n            path: baidu_urls.txt ## 文本文档的地址， 新链接会保存在此文本文档里\n    ```\n    - 准入密钥获取\n    ![准入密钥](Configure-Hexo/准入密钥获取.png)\n    > 记得检查根目录_config.yml文件中url的值，必须包含是百度站长平台注册的域名。\n    - 配置\n    配置根目录下的_config.yml，加入新的deployer，**这里的\"-\",必不可少！ 否则报错。**\n    ```yml\n    deploy:\n        - type: git ## 这是我原来的deployer\n        repo:\n        branch:\n        - type: baidu_url_submitter ## 添加这里内容即可\n    ```\n    - 原理\n    新链接的产生， hexo generate 会产生一个文本文件，里面包含最新的链接\n    新链接的提交， hexo deploy 会从上述文件中读取链接，提交至百度搜索引擎\n\n- 自动推送\n安装自动推送JS代码的网页，在页面被访问时，页面URL将立即被推送给百度。\n修改themes/yilia/layout/post.ejs文件，末尾添加自动推送代码，代码如下：\n```js\n<script>\n(function(){\n    var bp = document.createElement('script');\n    var curProtocol = window.location.protocol.split(':')[0];\n    if (curProtocol === 'https') {\n        bp.src = 'https://zz.bdstatic.com/linksubmit/push.js';\n    }\n    else {\n        bp.src = 'http://push.zhanzhang.baidu.com/push.js';\n    }\n    var s = document.getElementsByTagName(\"script\")[0];\n    s.parentNode.insertBefore(bp, s);\n})();\n</script>\n```\n\n### 8. 参考文章\n[Hexo Yilia高级配置](http://dongshuyan.com/2019/05/24/hexo%E5%8D%9A%E5%AE%A2%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/)\n[Hexo 的思维导图插件](https://hunterx.xyz/hexo-simple-mindmap-plugin-intro.html)\n[Hexo使用思维导图插件](https://juejin.cn/post/6844904184794480654)\n[hexo添加sitemap功能](https://www.gaotianyang.top/archives/20200814f023bd8e/)","source":"_posts/Configure-Hexo.md","raw":"---\ntitle: Configure Hexo\ndate: 2021-06-01 01:18:44\ntags:\n    - Hexo\ndeclare: true\ntoc: 1\n---\n### 1. 添加百度统计<!--more-->\n- 打开themes/yilia/layout/_partial/baidu-analytics.ejs，将在百度统计里面得到的代码粘进去\n- 打开themes/yilia/_config.yml，将其中的baidu_analytics: ''写为baidu_analytics: 'true'\n\n### 2. sitemap方式提交网页\n- 安装sitemap\n```shell\nnpm install hexo-generator-sitemap --save\nhexo clean\nhexo g\n```\n\n- 配置sitemap路径\n打开本目录下的_config.yml文件，将`url`修改为博客的首页地址，这是为了保证sitemap.xml文件路径的正确性。\n```yml\nurl: http://corner88.cf     #修改成你博客的首页地址\nroot: /\npermalink: :year/:month/:day/:title/\npermalink_defaults:\n```\n在合适的位置添加以下内容\n```yml\n# 自动生成sitemap\nsitemap:\n  path: sitemap.xml\n```\n之后输入命令重新部署博客。\n\n- 提交文件\n查看blog/public文件夹，可以看到sitemap.xml文件\nsitemap的初衷是给搜索引擎看的，为了提高搜索引擎对自己站点的收录效果，最好手动到google和百度等搜索引擎提交sitemap.xml。\n进入[百度提交网址](https://ziyuan.baidu.com/?castk=LTE%3D)，点击用户中心->添加网站，选择HTML标签验证。将出现的那行meta代码复制下来\n![HTML标签验证](Configure-Hexo/HTML标签验证.png)\n\n- 配置\n打开themes/layout/_partial/head.ejs文件，将复制的meta代码粘贴进去，注意位置！之后点击完成验证。\n\n- 重新部署博客\n`hexo clean && hexo g && hexo d`\n\n- 资源提交\n打开[百度站点普通收录控制台](https://ziyuan.baidu.com/linksubmit/index)，选择sitemap方式提交，填写正确的文件数据地址，例如我是`http://corner88.cf/sitemap.xml`，之后点击提交即可！\n\n- Google\ngoogle类似于上述百度，[google搜索验证](https://www.google.com/webmasters/tools/home?hl=zh-CN)，[google站点控制台](https://search.google.com/search-console/sitemaps)\n在google搜索验证中选择网址前缀填写博客网址即可，在google站点控制台添加新的站点地图提交即可。\n\n\n### 3. 使用hexo画思维导图\n- 首先进入到 Hexo 博客的根目录，执行`npm install hexo-simple-mindmap`安装插件。\n写新文章时，在需要脑图的地方，按以下格式添加内容。插件会自动将 pullquote 中包裹的内容按照层级顺序渲染成脑图。\n- 代码示例\n\n```\n{% pullquote mindmap mindmap-md %}\n- Fengx\n\t- 任何方向\n\t\t- 编程语言\n\t\t\t- Java\n\t\t- SQL\n\t\t- Linux\n\t\t- Git\n\t- 技术\n\t\t- Java Web\n\t\t- 数据库\n\t\t- Docker\n\t\t- svn\n\t\t- 消息队列(MQ)\n\t\t- mycat\n\t\t- 大数据\n\t\t\t- Hadoop\n\t\t\t- HBase\n\t- 内功\n\t\t- 计算机基础\n\t\t\t- 计算机网络\n\t\t\t- 计算机操作系统\n\t\t\t- 编译原理\n\t\t\t- 计算机组成原理\n\t\t- 数据结构与算法\n\t\t- 设计模式\n\t\t- 性能优化\n\t\t- 架构设计\n\t\t- 软件工程\n\t- 其他\n\t\t- 英语\n\t\t- 博客\n{% endpullquote %}\n```\n\n{% pullquote mindmap mindmap-md %}\n- Fengx\n\t- 任何方向\n\t\t- 编程语言\n\t\t\t- Java\n\t\t- SQL\n\t\t- Linux\n\t\t- Git\n\t- 技术\n\t\t- Java Web\n\t\t- 数据库\n\t\t- Docker\n\t\t- svn\n\t\t- 消息队列(MQ)\n\t\t- mycat\n\t\t- 大数据\n\t\t\t- Hadoop\n\t\t\t- HBase\n\t- 内功\n\t\t- 计算机基础\n\t\t\t- 计算机网络\n\t\t\t- 计算机操作系统\n\t\t\t- 编译原理\n\t\t\t- 计算机组成原理\n\t\t- 数据结构与算法\n\t\t- 设计模式\n\t\t- 性能优化\n\t\t- 架构设计\n\t\t- 软件工程\n\t- 其他\n\t\t- 英语\n\t\t- 博客\n{% endpullquote %}\n\n\n\n### 4. 域名解析以及怎么给hexo绑定域名\n> temp email\n- 首先进入[freenom官网](https://www.freenom.com/zh/index.html)\n    - 全程以美国IP进行，点击**Partners**申请账号。（需要美国身份信息）\n    - 申请一个域名\n\n- 进入[Cloudflare官网](https://dash.cloudflare.com/login)\n其实freenom自带的已经有域名解析功能了，但这个是专业的，而且还能套CDN防止被墙\n- 解析\n    - 添加域名到cloudflare\n    - 需要填写域名服务器，耐心等待检查\n    - 添加A记录可以直接解析到IP上\n    - 添加CNAME可以指向另一个网址\n    - 直接输入'@'就是不加前缀\n- 绑定到hexo\n    1. 找到当前项目，点击Settings->Pages\n    在Custom domain中输入自己的域名\n    ![绑定到page](Configure-Hexo/绑定到page.png)\n    2. 在cloudflare->DNS中添加CNAME记录（不要勾选小云朵）\n    ![添加CNAME](Configure-Hexo/添加CNAME.png)\n    3. 在本地博客文件夹的source中新建一个CNAME文件\n    这个文件不能有任何格式，txt都不行。内容填写刚才的域名即可。\n\n- 域名购买推荐\n[NameSilo](https://www.namesilo.com/?rid=d7fe456te)，[万网](https://wanwang.aliyun.com/)\n如果要续费，注意好次年的价格！\n\n### 5 文章加密\n- 安装[hexo-blog-encrypt](https://github.com/D0n9X1n/hexo-blog-encrypt)插件。\n`npm install hexo-blog-encrypt --save`\n- 配置文件\n打开根目录下的_config.yml文件，在末尾加上下述字段。\n```yml\n# 文章加密\nencrypt:\n  enable: true\n  abstract: 这是一篇加密文章，内容可能是个人情感宣泄或者收费技术。如果你非常好奇，请与我联系。\n  message: 输入密码，查看文章。\n```\n- 文章Front-Matter配置\n在想加密的文章头部添加password、abstract、message\n\n> password: 访问文章的的密码\nabstract: 博客摘要\nmessage: 密码框上的信息\n\n- 测试文章\n```yml\n---\ntitle: test\ndate: 2021-05-31 20:00:49\ntags: 随笔\ntop: 1\npassword: 123\nabstract: 是加密文章啊！\nmessage: 三位数字\ndeclare: true\n---\ntest\n你能看到吗？\n```\n- 效果\n![效果1](Configure-Hexo/效果图1.png)\n\n点开后。\n\n![效果2](Configure-Hexo/效果图2.png)\n> 需要时加上password，提示语message，abstract摘要，后两者不能设置为空！\n- 进阶一下\n需要额外隐藏一下**浏览数、评论、作者信息等**，在任何需要加密的地方（例如comment.ejs）加上一句。\n`<% if (post.encrypt == true) { %>style=\"display:none\" <% } %>`\n\n### 6. 百度自动推送方式提交网页\n打开themes/yilia/layout/_partial/article.ejs文件，定位到下述代码\n```js\n<%\n        var sUrl = url.replace(/index\\.html$/, '');\n        sUrl = /^(http:|https:)\\/\\//.test(sUrl) ? sUrl : 'https:' + sUrl;\n      %>\n```\n在它的前面加上下述代码，即完成了**新增博客文章页面（不包括其他页面）**的自动推送方式提交。\n```js\n<!- 百度自动推送方式提交 -->\n<% if (1){ %>\n  <script>\n  (function(){\n      var bp = document.createElement('script');\n      var curProtocol = window.location.protocol.split(':')[0];\n      if (curProtocol === 'https') {\n          bp.src = 'https://zz.bdstatic.com/linksubmit/push.js';\n      }\n      else {\n          bp.src = 'http://push.zhanzhang.baidu.com/push.js';\n      }\n      var s = document.getElementsByTagName(\"script\")[0];\n      s.parentNode.insertBefore(bp, s);\n  })();\n  </script>\n<% } %>\n<!- 百度自动推送方式提交结束 -->\n```\n\n### 7. 链接提交到百度\n百度站长平台的链接提交方式分为自动提交和手动提交两种，此处只讲自动提交，手动提交按照要求操作即可。<!--more-->\n- 主动推送\n主动推送最为快速的提交方式，是被百度收录最快的推送方式。主动推送可以通过安装插件实现。\n    - 安装插件\n    `npm install hexo-baidu-url-submit --save`\n    修改站点根目录下的配置文件_config.yml，添加以下内容：\n    ```yml\n        baidu_url_submit:\n            count: 20 ## 提交最新的20个链接\n            host: www.corner88.cf ## 百度站长平台中注册的域名\n            token:  ## 16位准入秘钥\n            path: baidu_urls.txt ## 文本文档的地址， 新链接会保存在此文本文档里\n    ```\n    - 准入密钥获取\n    ![准入密钥](Configure-Hexo/准入密钥获取.png)\n    > 记得检查根目录_config.yml文件中url的值，必须包含是百度站长平台注册的域名。\n    - 配置\n    配置根目录下的_config.yml，加入新的deployer，**这里的\"-\",必不可少！ 否则报错。**\n    ```yml\n    deploy:\n        - type: git ## 这是我原来的deployer\n        repo:\n        branch:\n        - type: baidu_url_submitter ## 添加这里内容即可\n    ```\n    - 原理\n    新链接的产生， hexo generate 会产生一个文本文件，里面包含最新的链接\n    新链接的提交， hexo deploy 会从上述文件中读取链接，提交至百度搜索引擎\n\n- 自动推送\n安装自动推送JS代码的网页，在页面被访问时，页面URL将立即被推送给百度。\n修改themes/yilia/layout/post.ejs文件，末尾添加自动推送代码，代码如下：\n```js\n<script>\n(function(){\n    var bp = document.createElement('script');\n    var curProtocol = window.location.protocol.split(':')[0];\n    if (curProtocol === 'https') {\n        bp.src = 'https://zz.bdstatic.com/linksubmit/push.js';\n    }\n    else {\n        bp.src = 'http://push.zhanzhang.baidu.com/push.js';\n    }\n    var s = document.getElementsByTagName(\"script\")[0];\n    s.parentNode.insertBefore(bp, s);\n})();\n</script>\n```\n\n### 8. 参考文章\n[Hexo Yilia高级配置](http://dongshuyan.com/2019/05/24/hexo%E5%8D%9A%E5%AE%A2%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/)\n[Hexo 的思维导图插件](https://hunterx.xyz/hexo-simple-mindmap-plugin-intro.html)\n[Hexo使用思维导图插件](https://juejin.cn/post/6844904184794480654)\n[hexo添加sitemap功能](https://www.gaotianyang.top/archives/20200814f023bd8e/)","slug":"Configure-Hexo","published":1,"updated":"2024-04-25T17:26:47.553Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvjbaqgs00050vn1f5cudeje","content":"<h3 id=\"1-添加百度统计\"><a href=\"#1-添加百度统计\" class=\"headerlink\" title=\"1. 添加百度统计\"></a>1. 添加百度统计<span id=\"more\"></span></h3><ul>\n<li>打开themes&#x2F;yilia&#x2F;layout&#x2F;_partial&#x2F;baidu-analytics.ejs，将在百度统计里面得到的代码粘进去</li>\n<li>打开themes&#x2F;yilia&#x2F;_config.yml，将其中的baidu_analytics: ‘’写为baidu_analytics: ‘true’</li>\n</ul>\n<h3 id=\"2-sitemap方式提交网页\"><a href=\"#2-sitemap方式提交网页\" class=\"headerlink\" title=\"2. sitemap方式提交网页\"></a>2. sitemap方式提交网页</h3><ul>\n<li><p>安装sitemap</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-generator-sitemap --save</span><br><span class=\"line\">hexo clean</span><br><span class=\"line\">hexo g</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置sitemap路径<br>打开本目录下的_config.yml文件，将<code>url</code>修改为博客的首页地址，这是为了保证sitemap.xml文件路径的正确性。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">url:</span> <span class=\"string\">http://corner88.cf</span>     <span class=\"comment\">#修改成你博客的首页地址</span></span><br><span class=\"line\"><span class=\"attr\">root:</span> <span class=\"string\">/</span></span><br><span class=\"line\"><span class=\"attr\">permalink:</span> <span class=\"string\">:year/:month/:day/:title/</span></span><br><span class=\"line\"><span class=\"attr\">permalink_defaults:</span></span><br></pre></td></tr></table></figure>\n<p>在合适的位置添加以下内容</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 自动生成sitemap</span></span><br><span class=\"line\"><span class=\"attr\">sitemap:</span></span><br><span class=\"line\">  <span class=\"attr\">path:</span> <span class=\"string\">sitemap.xml</span></span><br></pre></td></tr></table></figure>\n<p>之后输入命令重新部署博客。</p>\n</li>\n<li><p>提交文件<br>查看blog&#x2F;public文件夹，可以看到sitemap.xml文件<br>sitemap的初衷是给搜索引擎看的，为了提高搜索引擎对自己站点的收录效果，最好手动到google和百度等搜索引擎提交sitemap.xml。<br>进入<a href=\"https://ziyuan.baidu.com/?castk=LTE=\">百度提交网址</a>，点击用户中心-&gt;添加网站，选择HTML标签验证。将出现的那行meta代码复制下来<br><img src=\"/2021/06/01/Configure-Hexo/HTML%E6%A0%87%E7%AD%BE%E9%AA%8C%E8%AF%81.png\" alt=\"HTML标签验证\"></p>\n</li>\n<li><p>配置<br>打开themes&#x2F;layout&#x2F;_partial&#x2F;head.ejs文件，将复制的meta代码粘贴进去，注意位置！之后点击完成验证。</p>\n</li>\n<li><p>重新部署博客<br><code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</code></p>\n</li>\n<li><p>资源提交<br>打开<a href=\"https://ziyuan.baidu.com/linksubmit/index\">百度站点普通收录控制台</a>，选择sitemap方式提交，填写正确的文件数据地址，例如我是<code>http://corner88.cf/sitemap.xml</code>，之后点击提交即可！</p>\n</li>\n<li><p>Google<br>google类似于上述百度，<a href=\"https://www.google.com/webmasters/tools/home?hl=zh-CN\">google搜索验证</a>，<a href=\"https://search.google.com/search-console/sitemaps\">google站点控制台</a><br>在google搜索验证中选择网址前缀填写博客网址即可，在google站点控制台添加新的站点地图提交即可。</p>\n</li>\n</ul>\n<h3 id=\"3-使用hexo画思维导图\"><a href=\"#3-使用hexo画思维导图\" class=\"headerlink\" title=\"3. 使用hexo画思维导图\"></a>3. 使用hexo画思维导图</h3><ul>\n<li>首先进入到 Hexo 博客的根目录，执行<code>npm install hexo-simple-mindmap</code>安装插件。<br>写新文章时，在需要脑图的地方，按以下格式添加内容。插件会自动将 pullquote 中包裹的内容按照层级顺序渲染成脑图。</li>\n<li>代码示例</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% pullquote mindmap mindmap-md %&#125;</span><br><span class=\"line\">- Fengx</span><br><span class=\"line\">\t- 任何方向</span><br><span class=\"line\">\t\t- 编程语言</span><br><span class=\"line\">\t\t\t- Java</span><br><span class=\"line\">\t\t- SQL</span><br><span class=\"line\">\t\t- Linux</span><br><span class=\"line\">\t\t- Git</span><br><span class=\"line\">\t- 技术</span><br><span class=\"line\">\t\t- Java Web</span><br><span class=\"line\">\t\t- 数据库</span><br><span class=\"line\">\t\t- Docker</span><br><span class=\"line\">\t\t- svn</span><br><span class=\"line\">\t\t- 消息队列(MQ)</span><br><span class=\"line\">\t\t- mycat</span><br><span class=\"line\">\t\t- 大数据</span><br><span class=\"line\">\t\t\t- Hadoop</span><br><span class=\"line\">\t\t\t- HBase</span><br><span class=\"line\">\t- 内功</span><br><span class=\"line\">\t\t- 计算机基础</span><br><span class=\"line\">\t\t\t- 计算机网络</span><br><span class=\"line\">\t\t\t- 计算机操作系统</span><br><span class=\"line\">\t\t\t- 编译原理</span><br><span class=\"line\">\t\t\t- 计算机组成原理</span><br><span class=\"line\">\t\t- 数据结构与算法</span><br><span class=\"line\">\t\t- 设计模式</span><br><span class=\"line\">\t\t- 性能优化</span><br><span class=\"line\">\t\t- 架构设计</span><br><span class=\"line\">\t\t- 软件工程</span><br><span class=\"line\">\t- 其他</span><br><span class=\"line\">\t\t- 英语</span><br><span class=\"line\">\t\t- 博客</span><br><span class=\"line\">&#123;% endpullquote %&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote class=\"pullquote mindmap mindmap-md\"><ul>\n<li>Fengx<ul>\n<li>任何方向<ul>\n<li>编程语言<ul>\n<li>Java</li>\n</ul>\n</li>\n<li>SQL</li>\n<li>Linux</li>\n<li>Git</li>\n</ul>\n</li>\n<li>技术<ul>\n<li>Java Web</li>\n<li>数据库</li>\n<li>Docker</li>\n<li>svn</li>\n<li>消息队列(MQ)</li>\n<li>mycat</li>\n<li>大数据<ul>\n<li>Hadoop</li>\n<li>HBase</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>内功<ul>\n<li>计算机基础<ul>\n<li>计算机网络</li>\n<li>计算机操作系统</li>\n<li>编译原理</li>\n<li>计算机组成原理</li>\n</ul>\n</li>\n<li>数据结构与算法</li>\n<li>设计模式</li>\n<li>性能优化</li>\n<li>架构设计</li>\n<li>软件工程</li>\n</ul>\n</li>\n<li>其他<ul>\n<li>英语</li>\n<li>博客</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n\n\n\n<h3 id=\"4-域名解析以及怎么给hexo绑定域名\"><a href=\"#4-域名解析以及怎么给hexo绑定域名\" class=\"headerlink\" title=\"4. 域名解析以及怎么给hexo绑定域名\"></a>4. 域名解析以及怎么给hexo绑定域名</h3><blockquote>\n<p>temp email</p>\n</blockquote>\n<ul>\n<li><p>首先进入<a href=\"https://www.freenom.com/zh/index.html\">freenom官网</a></p>\n<ul>\n<li>全程以美国IP进行，点击<strong>Partners</strong>申请账号。（需要美国身份信息）</li>\n<li>申请一个域名</li>\n</ul>\n</li>\n<li><p>进入<a href=\"https://dash.cloudflare.com/login\">Cloudflare官网</a><br>其实freenom自带的已经有域名解析功能了，但这个是专业的，而且还能套CDN防止被墙</p>\n</li>\n<li><p>解析</p>\n<ul>\n<li>添加域名到cloudflare</li>\n<li>需要填写域名服务器，耐心等待检查</li>\n<li>添加A记录可以直接解析到IP上</li>\n<li>添加CNAME可以指向另一个网址</li>\n<li>直接输入‘@’就是不加前缀</li>\n</ul>\n</li>\n<li><p>绑定到hexo</p>\n<ol>\n<li>找到当前项目，点击Settings-&gt;Pages<br>  在Custom domain中输入自己的域名<br>  <img src=\"/2021/06/01/Configure-Hexo/%E7%BB%91%E5%AE%9A%E5%88%B0page.png\" alt=\"绑定到page\"></li>\n<li>在cloudflare-&gt;DNS中添加CNAME记录（不要勾选小云朵）<br>  <img src=\"/2021/06/01/Configure-Hexo/%E6%B7%BB%E5%8A%A0CNAME.png\" alt=\"添加CNAME\"></li>\n<li>在本地博客文件夹的source中新建一个CNAME文件<br>  这个文件不能有任何格式，txt都不行。内容填写刚才的域名即可。</li>\n</ol>\n</li>\n<li><p>域名购买推荐<br><a href=\"https://www.namesilo.com/?rid=d7fe456te\">NameSilo</a>，<a href=\"https://wanwang.aliyun.com/\">万网</a><br>如果要续费，注意好次年的价格！</p>\n</li>\n</ul>\n<h3 id=\"5-文章加密\"><a href=\"#5-文章加密\" class=\"headerlink\" title=\"5 文章加密\"></a>5 文章加密</h3><ul>\n<li>安装<a href=\"https://github.com/D0n9X1n/hexo-blog-encrypt\">hexo-blog-encrypt</a>插件。<br><code>npm install hexo-blog-encrypt --save</code></li>\n<li>配置文件<br>打开根目录下的_config.yml文件，在末尾加上下述字段。<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 文章加密</span></span><br><span class=\"line\"><span class=\"attr\">encrypt:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">abstract:</span> <span class=\"string\">这是一篇加密文章，内容可能是个人情感宣泄或者收费技术。如果你非常好奇，请与我联系。</span></span><br><span class=\"line\">  <span class=\"attr\">message:</span> <span class=\"string\">输入密码，查看文章。</span></span><br></pre></td></tr></table></figure></li>\n<li>文章Front-Matter配置<br>在想加密的文章头部添加password、abstract、message</li>\n</ul>\n<blockquote>\n<p>password: 访问文章的的密码<br>abstract: 博客摘要<br>message: 密码框上的信息</p>\n</blockquote>\n<ul>\n<li>测试文章<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">test</span></span><br><span class=\"line\"><span class=\"attr\">date:</span> <span class=\"number\">2021-05-31 20:00:49</span></span><br><span class=\"line\"><span class=\"attr\">tags:</span> <span class=\"string\">随笔</span></span><br><span class=\"line\"><span class=\"attr\">top:</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"attr\">password:</span> <span class=\"number\">123</span></span><br><span class=\"line\"><span class=\"attr\">abstract:</span> <span class=\"string\">是加密文章啊！</span></span><br><span class=\"line\"><span class=\"attr\">message:</span> <span class=\"string\">三位数字</span></span><br><span class=\"line\"><span class=\"attr\">declare:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"string\">test</span></span><br><span class=\"line\"><span class=\"string\">你能看到吗？</span></span><br></pre></td></tr></table></figure></li>\n<li>效果<br><img src=\"/2021/06/01/Configure-Hexo/%E6%95%88%E6%9E%9C%E5%9B%BE1.png\" alt=\"效果1\"></li>\n</ul>\n<p>点开后。</p>\n<p><img src=\"/2021/06/01/Configure-Hexo/%E6%95%88%E6%9E%9C%E5%9B%BE2.png\" alt=\"效果2\"></p>\n<blockquote>\n<p>需要时加上password，提示语message，abstract摘要，后两者不能设置为空！</p>\n</blockquote>\n<ul>\n<li>进阶一下<br>需要额外隐藏一下<strong>浏览数、评论、作者信息等</strong>，在任何需要加密的地方（例如comment.ejs）加上一句。<br><code>&lt;% if (post.encrypt == true) &#123; %&gt;style=&quot;display:none&quot; &lt;% &#125; %&gt;</code></li>\n</ul>\n<h3 id=\"6-百度自动推送方式提交网页\"><a href=\"#6-百度自动推送方式提交网页\" class=\"headerlink\" title=\"6. 百度自动推送方式提交网页\"></a>6. 百度自动推送方式提交网页</h3><p>打开themes&#x2F;yilia&#x2F;layout&#x2F;_partial&#x2F;article.ejs文件，定位到下述代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%</span><br><span class=\"line\">        <span class=\"keyword\">var</span> sUrl = url.<span class=\"title function_\">replace</span>(<span class=\"regexp\">/index\\.html$/</span>, <span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\">        sUrl = <span class=\"regexp\">/^(http:|https:)\\/\\//</span>.<span class=\"title function_\">test</span>(sUrl) ? sUrl : <span class=\"string\">&#x27;https:&#x27;</span> + sUrl;</span><br><span class=\"line\">      %&gt;</span><br></pre></td></tr></table></figure>\n<p>在它的前面加上下述代码，即完成了<strong>新增博客文章页面（不包括其他页面）</strong>的自动推送方式提交。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!- 百度自动推送方式提交 --&gt;</span><br><span class=\"line\">&lt;% <span class=\"keyword\">if</span> (<span class=\"number\">1</span>)&#123; %&gt;</span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  (<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"keyword\">var</span> bp = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&#x27;script&#x27;</span>);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"keyword\">var</span> curProtocol = <span class=\"variable language_\">window</span>.<span class=\"property\">location</span>.<span class=\"property\">protocol</span>.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;:&#x27;</span>)[<span class=\"number\">0</span>];</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"keyword\">if</span> (curProtocol === <span class=\"string\">&#x27;https&#x27;</span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">          bp.<span class=\"property\">src</span> = <span class=\"string\">&#x27;https://zz.bdstatic.com/linksubmit/push.js&#x27;</span>;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"keyword\">else</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">          bp.<span class=\"property\">src</span> = <span class=\"string\">&#x27;http://push.zhanzhang.baidu.com/push.js&#x27;</span>;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"keyword\">var</span> s = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementsByTagName</span>(<span class=\"string\">&quot;script&quot;</span>)[<span class=\"number\">0</span>];</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      s.<span class=\"property\">parentNode</span>.<span class=\"title function_\">insertBefore</span>(bp, s);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  &#125;)();</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\">&lt;% &#125; %&gt;</span><br><span class=\"line\">&lt;!- 百度自动推送方式提交结束 --&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-链接提交到百度\"><a href=\"#7-链接提交到百度\" class=\"headerlink\" title=\"7. 链接提交到百度\"></a>7. 链接提交到百度</h3><p>百度站长平台的链接提交方式分为自动提交和手动提交两种，此处只讲自动提交，手动提交按照要求操作即可。<!--more--></p>\n<ul>\n<li><p>主动推送<br>主动推送最为快速的提交方式，是被百度收录最快的推送方式。主动推送可以通过安装插件实现。</p>\n<ul>\n<li>安装插件<br>  <code>npm install hexo-baidu-url-submit --save</code><br>  修改站点根目录下的配置文件_config.yml，添加以下内容：  <figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">baidu_url_submit:</span></span><br><span class=\"line\">    <span class=\"attr\">count:</span> <span class=\"number\">20</span> <span class=\"comment\">## 提交最新的20个链接</span></span><br><span class=\"line\">    <span class=\"attr\">host:</span> <span class=\"string\">www.corner88.cf</span> <span class=\"comment\">## 百度站长平台中注册的域名</span></span><br><span class=\"line\">    <span class=\"attr\">token:</span>  <span class=\"comment\">## 16位准入秘钥</span></span><br><span class=\"line\">    <span class=\"attr\">path:</span> <span class=\"string\">baidu_urls.txt</span> <span class=\"comment\">## 文本文档的地址， 新链接会保存在此文本文档里</span></span><br></pre></td></tr></table></figure></li>\n<li>准入密钥获取<br>  <img src=\"/2021/06/01/Configure-Hexo/%E5%87%86%E5%85%A5%E5%AF%86%E9%92%A5%E8%8E%B7%E5%8F%96.png\" alt=\"准入密钥\"><blockquote>\n<p>记得检查根目录_config.yml文件中url的值，必须包含是百度站长平台注册的域名。</p>\n</blockquote>\n</li>\n<li>配置<br>  配置根目录下的_config.yml，加入新的deployer，<strong>这里的”-“,必不可少！ 否则报错。</strong>  <figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">type:</span> <span class=\"string\">git</span> <span class=\"comment\">## 这是我原来的deployer</span></span><br><span class=\"line\">    <span class=\"attr\">repo:</span></span><br><span class=\"line\">    <span class=\"attr\">branch:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">type:</span> <span class=\"string\">baidu_url_submitter</span> <span class=\"comment\">## 添加这里内容即可</span></span><br></pre></td></tr></table></figure></li>\n<li>原理<br>  新链接的产生， hexo generate 会产生一个文本文件，里面包含最新的链接<br>  新链接的提交， hexo deploy 会从上述文件中读取链接，提交至百度搜索引擎</li>\n</ul>\n</li>\n<li><p>自动推送<br>安装自动推送JS代码的网页，在页面被访问时，页面URL将立即被推送给百度。<br>修改themes&#x2F;yilia&#x2F;layout&#x2F;post.ejs文件，末尾添加自动推送代码，代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> bp = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&#x27;script&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> curProtocol = <span class=\"variable language_\">window</span>.<span class=\"property\">location</span>.<span class=\"property\">protocol</span>.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;:&#x27;</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (curProtocol === <span class=\"string\">&#x27;https&#x27;</span>) &#123;</span><br><span class=\"line\">        bp.<span class=\"property\">src</span> = <span class=\"string\">&#x27;https://zz.bdstatic.com/linksubmit/push.js&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        bp.<span class=\"property\">src</span> = <span class=\"string\">&#x27;http://push.zhanzhang.baidu.com/push.js&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> s = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementsByTagName</span>(<span class=\"string\">&quot;script&quot;</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">    s.<span class=\"property\">parentNode</span>.<span class=\"title function_\">insertBefore</span>(bp, s);</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"8-参考文章\"><a href=\"#8-参考文章\" class=\"headerlink\" title=\"8. 参考文章\"></a>8. 参考文章</h3><p><a href=\"http://dongshuyan.com/2019/05/24/hexo%E5%8D%9A%E5%AE%A2%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/\">Hexo Yilia高级配置</a><br><a href=\"https://hunterx.xyz/hexo-simple-mindmap-plugin-intro.html\">Hexo 的思维导图插件</a><br><a href=\"https://juejin.cn/post/6844904184794480654\">Hexo使用思维导图插件</a><br><a href=\"https://www.gaotianyang.top/archives/20200814f023bd8e/\">hexo添加sitemap功能</a></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"1-添加百度统计\"><a href=\"#1-添加百度统计\" class=\"headerlink\" title=\"1. 添加百度统计\"></a>1. 添加百度统计</h3>","more":"<ul>\n<li>打开themes&#x2F;yilia&#x2F;layout&#x2F;_partial&#x2F;baidu-analytics.ejs，将在百度统计里面得到的代码粘进去</li>\n<li>打开themes&#x2F;yilia&#x2F;_config.yml，将其中的baidu_analytics: ‘’写为baidu_analytics: ‘true’</li>\n</ul>\n<h3 id=\"2-sitemap方式提交网页\"><a href=\"#2-sitemap方式提交网页\" class=\"headerlink\" title=\"2. sitemap方式提交网页\"></a>2. sitemap方式提交网页</h3><ul>\n<li><p>安装sitemap</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-generator-sitemap --save</span><br><span class=\"line\">hexo clean</span><br><span class=\"line\">hexo g</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置sitemap路径<br>打开本目录下的_config.yml文件，将<code>url</code>修改为博客的首页地址，这是为了保证sitemap.xml文件路径的正确性。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">url:</span> <span class=\"string\">http://corner88.cf</span>     <span class=\"comment\">#修改成你博客的首页地址</span></span><br><span class=\"line\"><span class=\"attr\">root:</span> <span class=\"string\">/</span></span><br><span class=\"line\"><span class=\"attr\">permalink:</span> <span class=\"string\">:year/:month/:day/:title/</span></span><br><span class=\"line\"><span class=\"attr\">permalink_defaults:</span></span><br></pre></td></tr></table></figure>\n<p>在合适的位置添加以下内容</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 自动生成sitemap</span></span><br><span class=\"line\"><span class=\"attr\">sitemap:</span></span><br><span class=\"line\">  <span class=\"attr\">path:</span> <span class=\"string\">sitemap.xml</span></span><br></pre></td></tr></table></figure>\n<p>之后输入命令重新部署博客。</p>\n</li>\n<li><p>提交文件<br>查看blog&#x2F;public文件夹，可以看到sitemap.xml文件<br>sitemap的初衷是给搜索引擎看的，为了提高搜索引擎对自己站点的收录效果，最好手动到google和百度等搜索引擎提交sitemap.xml。<br>进入<a href=\"https://ziyuan.baidu.com/?castk=LTE=\">百度提交网址</a>，点击用户中心-&gt;添加网站，选择HTML标签验证。将出现的那行meta代码复制下来<br><img src=\"/2021/06/01/Configure-Hexo/HTML%E6%A0%87%E7%AD%BE%E9%AA%8C%E8%AF%81.png\" alt=\"HTML标签验证\"></p>\n</li>\n<li><p>配置<br>打开themes&#x2F;layout&#x2F;_partial&#x2F;head.ejs文件，将复制的meta代码粘贴进去，注意位置！之后点击完成验证。</p>\n</li>\n<li><p>重新部署博客<br><code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</code></p>\n</li>\n<li><p>资源提交<br>打开<a href=\"https://ziyuan.baidu.com/linksubmit/index\">百度站点普通收录控制台</a>，选择sitemap方式提交，填写正确的文件数据地址，例如我是<code>http://corner88.cf/sitemap.xml</code>，之后点击提交即可！</p>\n</li>\n<li><p>Google<br>google类似于上述百度，<a href=\"https://www.google.com/webmasters/tools/home?hl=zh-CN\">google搜索验证</a>，<a href=\"https://search.google.com/search-console/sitemaps\">google站点控制台</a><br>在google搜索验证中选择网址前缀填写博客网址即可，在google站点控制台添加新的站点地图提交即可。</p>\n</li>\n</ul>\n<h3 id=\"3-使用hexo画思维导图\"><a href=\"#3-使用hexo画思维导图\" class=\"headerlink\" title=\"3. 使用hexo画思维导图\"></a>3. 使用hexo画思维导图</h3><ul>\n<li>首先进入到 Hexo 博客的根目录，执行<code>npm install hexo-simple-mindmap</code>安装插件。<br>写新文章时，在需要脑图的地方，按以下格式添加内容。插件会自动将 pullquote 中包裹的内容按照层级顺序渲染成脑图。</li>\n<li>代码示例</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% pullquote mindmap mindmap-md %&#125;</span><br><span class=\"line\">- Fengx</span><br><span class=\"line\">\t- 任何方向</span><br><span class=\"line\">\t\t- 编程语言</span><br><span class=\"line\">\t\t\t- Java</span><br><span class=\"line\">\t\t- SQL</span><br><span class=\"line\">\t\t- Linux</span><br><span class=\"line\">\t\t- Git</span><br><span class=\"line\">\t- 技术</span><br><span class=\"line\">\t\t- Java Web</span><br><span class=\"line\">\t\t- 数据库</span><br><span class=\"line\">\t\t- Docker</span><br><span class=\"line\">\t\t- svn</span><br><span class=\"line\">\t\t- 消息队列(MQ)</span><br><span class=\"line\">\t\t- mycat</span><br><span class=\"line\">\t\t- 大数据</span><br><span class=\"line\">\t\t\t- Hadoop</span><br><span class=\"line\">\t\t\t- HBase</span><br><span class=\"line\">\t- 内功</span><br><span class=\"line\">\t\t- 计算机基础</span><br><span class=\"line\">\t\t\t- 计算机网络</span><br><span class=\"line\">\t\t\t- 计算机操作系统</span><br><span class=\"line\">\t\t\t- 编译原理</span><br><span class=\"line\">\t\t\t- 计算机组成原理</span><br><span class=\"line\">\t\t- 数据结构与算法</span><br><span class=\"line\">\t\t- 设计模式</span><br><span class=\"line\">\t\t- 性能优化</span><br><span class=\"line\">\t\t- 架构设计</span><br><span class=\"line\">\t\t- 软件工程</span><br><span class=\"line\">\t- 其他</span><br><span class=\"line\">\t\t- 英语</span><br><span class=\"line\">\t\t- 博客</span><br><span class=\"line\">&#123;% endpullquote %&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote class=\"pullquote mindmap mindmap-md\"><ul>\n<li>Fengx<ul>\n<li>任何方向<ul>\n<li>编程语言<ul>\n<li>Java</li>\n</ul>\n</li>\n<li>SQL</li>\n<li>Linux</li>\n<li>Git</li>\n</ul>\n</li>\n<li>技术<ul>\n<li>Java Web</li>\n<li>数据库</li>\n<li>Docker</li>\n<li>svn</li>\n<li>消息队列(MQ)</li>\n<li>mycat</li>\n<li>大数据<ul>\n<li>Hadoop</li>\n<li>HBase</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>内功<ul>\n<li>计算机基础<ul>\n<li>计算机网络</li>\n<li>计算机操作系统</li>\n<li>编译原理</li>\n<li>计算机组成原理</li>\n</ul>\n</li>\n<li>数据结构与算法</li>\n<li>设计模式</li>\n<li>性能优化</li>\n<li>架构设计</li>\n<li>软件工程</li>\n</ul>\n</li>\n<li>其他<ul>\n<li>英语</li>\n<li>博客</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n\n\n\n<h3 id=\"4-域名解析以及怎么给hexo绑定域名\"><a href=\"#4-域名解析以及怎么给hexo绑定域名\" class=\"headerlink\" title=\"4. 域名解析以及怎么给hexo绑定域名\"></a>4. 域名解析以及怎么给hexo绑定域名</h3><blockquote>\n<p>temp email</p>\n</blockquote>\n<ul>\n<li><p>首先进入<a href=\"https://www.freenom.com/zh/index.html\">freenom官网</a></p>\n<ul>\n<li>全程以美国IP进行，点击<strong>Partners</strong>申请账号。（需要美国身份信息）</li>\n<li>申请一个域名</li>\n</ul>\n</li>\n<li><p>进入<a href=\"https://dash.cloudflare.com/login\">Cloudflare官网</a><br>其实freenom自带的已经有域名解析功能了，但这个是专业的，而且还能套CDN防止被墙</p>\n</li>\n<li><p>解析</p>\n<ul>\n<li>添加域名到cloudflare</li>\n<li>需要填写域名服务器，耐心等待检查</li>\n<li>添加A记录可以直接解析到IP上</li>\n<li>添加CNAME可以指向另一个网址</li>\n<li>直接输入‘@’就是不加前缀</li>\n</ul>\n</li>\n<li><p>绑定到hexo</p>\n<ol>\n<li>找到当前项目，点击Settings-&gt;Pages<br>  在Custom domain中输入自己的域名<br>  <img src=\"/2021/06/01/Configure-Hexo/%E7%BB%91%E5%AE%9A%E5%88%B0page.png\" alt=\"绑定到page\"></li>\n<li>在cloudflare-&gt;DNS中添加CNAME记录（不要勾选小云朵）<br>  <img src=\"/2021/06/01/Configure-Hexo/%E6%B7%BB%E5%8A%A0CNAME.png\" alt=\"添加CNAME\"></li>\n<li>在本地博客文件夹的source中新建一个CNAME文件<br>  这个文件不能有任何格式，txt都不行。内容填写刚才的域名即可。</li>\n</ol>\n</li>\n<li><p>域名购买推荐<br><a href=\"https://www.namesilo.com/?rid=d7fe456te\">NameSilo</a>，<a href=\"https://wanwang.aliyun.com/\">万网</a><br>如果要续费，注意好次年的价格！</p>\n</li>\n</ul>\n<h3 id=\"5-文章加密\"><a href=\"#5-文章加密\" class=\"headerlink\" title=\"5 文章加密\"></a>5 文章加密</h3><ul>\n<li>安装<a href=\"https://github.com/D0n9X1n/hexo-blog-encrypt\">hexo-blog-encrypt</a>插件。<br><code>npm install hexo-blog-encrypt --save</code></li>\n<li>配置文件<br>打开根目录下的_config.yml文件，在末尾加上下述字段。<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 文章加密</span></span><br><span class=\"line\"><span class=\"attr\">encrypt:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">abstract:</span> <span class=\"string\">这是一篇加密文章，内容可能是个人情感宣泄或者收费技术。如果你非常好奇，请与我联系。</span></span><br><span class=\"line\">  <span class=\"attr\">message:</span> <span class=\"string\">输入密码，查看文章。</span></span><br></pre></td></tr></table></figure></li>\n<li>文章Front-Matter配置<br>在想加密的文章头部添加password、abstract、message</li>\n</ul>\n<blockquote>\n<p>password: 访问文章的的密码<br>abstract: 博客摘要<br>message: 密码框上的信息</p>\n</blockquote>\n<ul>\n<li>测试文章<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">test</span></span><br><span class=\"line\"><span class=\"attr\">date:</span> <span class=\"number\">2021-05-31 20:00:49</span></span><br><span class=\"line\"><span class=\"attr\">tags:</span> <span class=\"string\">随笔</span></span><br><span class=\"line\"><span class=\"attr\">top:</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"attr\">password:</span> <span class=\"number\">123</span></span><br><span class=\"line\"><span class=\"attr\">abstract:</span> <span class=\"string\">是加密文章啊！</span></span><br><span class=\"line\"><span class=\"attr\">message:</span> <span class=\"string\">三位数字</span></span><br><span class=\"line\"><span class=\"attr\">declare:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"string\">test</span></span><br><span class=\"line\"><span class=\"string\">你能看到吗？</span></span><br></pre></td></tr></table></figure></li>\n<li>效果<br><img src=\"/2021/06/01/Configure-Hexo/%E6%95%88%E6%9E%9C%E5%9B%BE1.png\" alt=\"效果1\"></li>\n</ul>\n<p>点开后。</p>\n<p><img src=\"/2021/06/01/Configure-Hexo/%E6%95%88%E6%9E%9C%E5%9B%BE2.png\" alt=\"效果2\"></p>\n<blockquote>\n<p>需要时加上password，提示语message，abstract摘要，后两者不能设置为空！</p>\n</blockquote>\n<ul>\n<li>进阶一下<br>需要额外隐藏一下<strong>浏览数、评论、作者信息等</strong>，在任何需要加密的地方（例如comment.ejs）加上一句。<br><code>&lt;% if (post.encrypt == true) &#123; %&gt;style=&quot;display:none&quot; &lt;% &#125; %&gt;</code></li>\n</ul>\n<h3 id=\"6-百度自动推送方式提交网页\"><a href=\"#6-百度自动推送方式提交网页\" class=\"headerlink\" title=\"6. 百度自动推送方式提交网页\"></a>6. 百度自动推送方式提交网页</h3><p>打开themes&#x2F;yilia&#x2F;layout&#x2F;_partial&#x2F;article.ejs文件，定位到下述代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%</span><br><span class=\"line\">        <span class=\"keyword\">var</span> sUrl = url.<span class=\"title function_\">replace</span>(<span class=\"regexp\">/index\\.html$/</span>, <span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\">        sUrl = <span class=\"regexp\">/^(http:|https:)\\/\\//</span>.<span class=\"title function_\">test</span>(sUrl) ? sUrl : <span class=\"string\">&#x27;https:&#x27;</span> + sUrl;</span><br><span class=\"line\">      %&gt;</span><br></pre></td></tr></table></figure>\n<p>在它的前面加上下述代码，即完成了<strong>新增博客文章页面（不包括其他页面）</strong>的自动推送方式提交。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!- 百度自动推送方式提交 --&gt;</span><br><span class=\"line\">&lt;% <span class=\"keyword\">if</span> (<span class=\"number\">1</span>)&#123; %&gt;</span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  (<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"keyword\">var</span> bp = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&#x27;script&#x27;</span>);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"keyword\">var</span> curProtocol = <span class=\"variable language_\">window</span>.<span class=\"property\">location</span>.<span class=\"property\">protocol</span>.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;:&#x27;</span>)[<span class=\"number\">0</span>];</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"keyword\">if</span> (curProtocol === <span class=\"string\">&#x27;https&#x27;</span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">          bp.<span class=\"property\">src</span> = <span class=\"string\">&#x27;https://zz.bdstatic.com/linksubmit/push.js&#x27;</span>;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"keyword\">else</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">          bp.<span class=\"property\">src</span> = <span class=\"string\">&#x27;http://push.zhanzhang.baidu.com/push.js&#x27;</span>;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"keyword\">var</span> s = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementsByTagName</span>(<span class=\"string\">&quot;script&quot;</span>)[<span class=\"number\">0</span>];</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      s.<span class=\"property\">parentNode</span>.<span class=\"title function_\">insertBefore</span>(bp, s);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  &#125;)();</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">  </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\">&lt;% &#125; %&gt;</span><br><span class=\"line\">&lt;!- 百度自动推送方式提交结束 --&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-链接提交到百度\"><a href=\"#7-链接提交到百度\" class=\"headerlink\" title=\"7. 链接提交到百度\"></a>7. 链接提交到百度</h3><p>百度站长平台的链接提交方式分为自动提交和手动提交两种，此处只讲自动提交，手动提交按照要求操作即可。<!--more--></p>\n<ul>\n<li><p>主动推送<br>主动推送最为快速的提交方式，是被百度收录最快的推送方式。主动推送可以通过安装插件实现。</p>\n<ul>\n<li>安装插件<br>  <code>npm install hexo-baidu-url-submit --save</code><br>  修改站点根目录下的配置文件_config.yml，添加以下内容：  <figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">baidu_url_submit:</span></span><br><span class=\"line\">    <span class=\"attr\">count:</span> <span class=\"number\">20</span> <span class=\"comment\">## 提交最新的20个链接</span></span><br><span class=\"line\">    <span class=\"attr\">host:</span> <span class=\"string\">www.corner88.cf</span> <span class=\"comment\">## 百度站长平台中注册的域名</span></span><br><span class=\"line\">    <span class=\"attr\">token:</span>  <span class=\"comment\">## 16位准入秘钥</span></span><br><span class=\"line\">    <span class=\"attr\">path:</span> <span class=\"string\">baidu_urls.txt</span> <span class=\"comment\">## 文本文档的地址， 新链接会保存在此文本文档里</span></span><br></pre></td></tr></table></figure></li>\n<li>准入密钥获取<br>  <img src=\"/2021/06/01/Configure-Hexo/%E5%87%86%E5%85%A5%E5%AF%86%E9%92%A5%E8%8E%B7%E5%8F%96.png\" alt=\"准入密钥\"><blockquote>\n<p>记得检查根目录_config.yml文件中url的值，必须包含是百度站长平台注册的域名。</p>\n</blockquote>\n</li>\n<li>配置<br>  配置根目录下的_config.yml，加入新的deployer，<strong>这里的”-“,必不可少！ 否则报错。</strong>  <figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">type:</span> <span class=\"string\">git</span> <span class=\"comment\">## 这是我原来的deployer</span></span><br><span class=\"line\">    <span class=\"attr\">repo:</span></span><br><span class=\"line\">    <span class=\"attr\">branch:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">type:</span> <span class=\"string\">baidu_url_submitter</span> <span class=\"comment\">## 添加这里内容即可</span></span><br></pre></td></tr></table></figure></li>\n<li>原理<br>  新链接的产生， hexo generate 会产生一个文本文件，里面包含最新的链接<br>  新链接的提交， hexo deploy 会从上述文件中读取链接，提交至百度搜索引擎</li>\n</ul>\n</li>\n<li><p>自动推送<br>安装自动推送JS代码的网页，在页面被访问时，页面URL将立即被推送给百度。<br>修改themes&#x2F;yilia&#x2F;layout&#x2F;post.ejs文件，末尾添加自动推送代码，代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> bp = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&#x27;script&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> curProtocol = <span class=\"variable language_\">window</span>.<span class=\"property\">location</span>.<span class=\"property\">protocol</span>.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;:&#x27;</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (curProtocol === <span class=\"string\">&#x27;https&#x27;</span>) &#123;</span><br><span class=\"line\">        bp.<span class=\"property\">src</span> = <span class=\"string\">&#x27;https://zz.bdstatic.com/linksubmit/push.js&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        bp.<span class=\"property\">src</span> = <span class=\"string\">&#x27;http://push.zhanzhang.baidu.com/push.js&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> s = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementsByTagName</span>(<span class=\"string\">&quot;script&quot;</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">    s.<span class=\"property\">parentNode</span>.<span class=\"title function_\">insertBefore</span>(bp, s);</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"8-参考文章\"><a href=\"#8-参考文章\" class=\"headerlink\" title=\"8. 参考文章\"></a>8. 参考文章</h3><p><a href=\"http://dongshuyan.com/2019/05/24/hexo%E5%8D%9A%E5%AE%A2%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/\">Hexo Yilia高级配置</a><br><a href=\"https://hunterx.xyz/hexo-simple-mindmap-plugin-intro.html\">Hexo 的思维导图插件</a><br><a href=\"https://juejin.cn/post/6844904184794480654\">Hexo使用思维导图插件</a><br><a href=\"https://www.gaotianyang.top/archives/20200814f023bd8e/\">hexo添加sitemap功能</a></p>"},{"title":"Configure jupyter notebook in wsl","date":"2023-04-03T18:53:13.000Z","declare":true,"_content":"##### 1. `conda install jupyter notebook`\n<!--more-->\n\n##### 2. `conda install -c conda-forge jupyter_contrib_nbextensions`\n\n##### 3. generate your notebook config by using the following command:\n`jupyter notebook --generate-config`\n\n##### 4. You will then see a Python file in .jupyter folder. Edit them using your favorite text editor.\n`vim ~/.jupyter/jupyter_notebook_config.py`\n\n##### 5. Disable launching browser by redicect file by changing this line (default value is True):\n`c.NotebookApp.use_redirect_file = False`\n\n\nThe good thing about WSL is that you can open Windows programs directly from bash. Thus, to get your Jupyter Notebook opens up a tab in your browser, you can add them as $BROWSER in bash. I am using Firefox here, but you can swap it with your own favorite browser. In other words, you can edit **~/.bashrc**, and add the following line:\n\n`export BROWSER='/mnt/c/Program Files/Google/Chrome/Application/chrome.exe'`\n\nOr add in the configuration file jupyter_notebook_config.py:\n```shell\nimport os\nos.environ['BROWSER'] = r'/mnt/c/Program Files/Google/Chrome/Application/chrome.exe'\n```\n\n##### 6. jupyter notebook\n\n\n--------------\nTo have Jupyter Notebook running in the background, you can follow these steps:\n##### 1. jupyter notebook &\nOn Linux and macOS, the & symbol puts the process in the background. On Windows, use the start command to put Jupyter Notebook into the background, for example:\n`start jupyter notebook`\n\n##### 2. You should see output similar to the following:\n`[1] 1234`\nWhere 1234 is the process ID of Jupyter Notebook.\n\n##### 3. Close the terminal or command prompt window. Jupyter Notebook should continue to run in the background\nTo stop a Jupyter Notebook running in the background, use the following command:\n`kill 1234`\nWhere 1234 is the process ID of Jupyter Notebook.\n\n--------------------------------------------------------\n# 让局域网内设备都能连接\n在配置文件中找到，并修改即可。\n```shell\nc.NotebookApp.ip = 'your_ip_address'\nc.NotebookApp.allow_origin = 'http://your_ip_address:port'\n\n# The port the notebook server will listen on.\nc.NotebookApp.port = 8888\n```\n\n-----------------------------\n# 挂入后台，关闭终端也能用\n`nohup jupyter notebook &`\n> 这将会输出一个文件，配置信息就在文件里面\n\n# 注意事项\n- token每次启动都会生成新的。\n- `jupyter notebook list`可以查看登录URL和令牌。\n- `ps aux | grep jupyter`查找进程PID\n\n-------------------------------------\n# 配置自动补全\n在Jupyter Notebook中，可以通过以下步骤设置自动补全功能：\n\n1. 安装 `jedi` 包：在Jupyter Notebook所在的环境中打开终端或命令提示符，执行以下命令来安装 `jedi` 包：\n```\npip install jedi\n```\n\n2. 启用自动补全功能：打开Jupyter Notebook，在一个代码单元格中输入以下代码并运行：\n```python\n%config IPCompleter.greedy=True\n```\n\n或者，在Jupyter Notebook的配置文件中进行设置。可以使用以下命令生成默认的配置文件：\n```\njupyter notebook --generate-config\n```\n\n打开生成的配置文件（`jupyter_notebook_config.py`），搜索并找到以下行：\n```python\n# c.Completer.use_jedi = True\n```\n\n将其修改为：\n```python\nc.Completer.use_jedi = True\n```\n\n保存并关闭配置文件。\n\n3. 重启Jupyter Notebook：关闭当前运行的Jupyter Notebook服务器，并重新启动。\n\n完成上述步骤后，如果在Jupyter Notebook中输入代码时，将会出现自动补全的建议列表。可以通过按下`Tab`键来选择建议中的某个选项进行补全。","source":"_posts/Configure-jupyter-notebook-in-wsl.md","raw":"---\ntitle: Configure jupyter notebook in wsl\ndate: 2023-04-03 18:53:13\ntags:\n    - wsl\n    - jupyter notebook\ndeclare: true\n---\n##### 1. `conda install jupyter notebook`\n<!--more-->\n\n##### 2. `conda install -c conda-forge jupyter_contrib_nbextensions`\n\n##### 3. generate your notebook config by using the following command:\n`jupyter notebook --generate-config`\n\n##### 4. You will then see a Python file in .jupyter folder. Edit them using your favorite text editor.\n`vim ~/.jupyter/jupyter_notebook_config.py`\n\n##### 5. Disable launching browser by redicect file by changing this line (default value is True):\n`c.NotebookApp.use_redirect_file = False`\n\n\nThe good thing about WSL is that you can open Windows programs directly from bash. Thus, to get your Jupyter Notebook opens up a tab in your browser, you can add them as $BROWSER in bash. I am using Firefox here, but you can swap it with your own favorite browser. In other words, you can edit **~/.bashrc**, and add the following line:\n\n`export BROWSER='/mnt/c/Program Files/Google/Chrome/Application/chrome.exe'`\n\nOr add in the configuration file jupyter_notebook_config.py:\n```shell\nimport os\nos.environ['BROWSER'] = r'/mnt/c/Program Files/Google/Chrome/Application/chrome.exe'\n```\n\n##### 6. jupyter notebook\n\n\n--------------\nTo have Jupyter Notebook running in the background, you can follow these steps:\n##### 1. jupyter notebook &\nOn Linux and macOS, the & symbol puts the process in the background. On Windows, use the start command to put Jupyter Notebook into the background, for example:\n`start jupyter notebook`\n\n##### 2. You should see output similar to the following:\n`[1] 1234`\nWhere 1234 is the process ID of Jupyter Notebook.\n\n##### 3. Close the terminal or command prompt window. Jupyter Notebook should continue to run in the background\nTo stop a Jupyter Notebook running in the background, use the following command:\n`kill 1234`\nWhere 1234 is the process ID of Jupyter Notebook.\n\n--------------------------------------------------------\n# 让局域网内设备都能连接\n在配置文件中找到，并修改即可。\n```shell\nc.NotebookApp.ip = 'your_ip_address'\nc.NotebookApp.allow_origin = 'http://your_ip_address:port'\n\n# The port the notebook server will listen on.\nc.NotebookApp.port = 8888\n```\n\n-----------------------------\n# 挂入后台，关闭终端也能用\n`nohup jupyter notebook &`\n> 这将会输出一个文件，配置信息就在文件里面\n\n# 注意事项\n- token每次启动都会生成新的。\n- `jupyter notebook list`可以查看登录URL和令牌。\n- `ps aux | grep jupyter`查找进程PID\n\n-------------------------------------\n# 配置自动补全\n在Jupyter Notebook中，可以通过以下步骤设置自动补全功能：\n\n1. 安装 `jedi` 包：在Jupyter Notebook所在的环境中打开终端或命令提示符，执行以下命令来安装 `jedi` 包：\n```\npip install jedi\n```\n\n2. 启用自动补全功能：打开Jupyter Notebook，在一个代码单元格中输入以下代码并运行：\n```python\n%config IPCompleter.greedy=True\n```\n\n或者，在Jupyter Notebook的配置文件中进行设置。可以使用以下命令生成默认的配置文件：\n```\njupyter notebook --generate-config\n```\n\n打开生成的配置文件（`jupyter_notebook_config.py`），搜索并找到以下行：\n```python\n# c.Completer.use_jedi = True\n```\n\n将其修改为：\n```python\nc.Completer.use_jedi = True\n```\n\n保存并关闭配置文件。\n\n3. 重启Jupyter Notebook：关闭当前运行的Jupyter Notebook服务器，并重新启动。\n\n完成上述步骤后，如果在Jupyter Notebook中输入代码时，将会出现自动补全的建议列表。可以通过按下`Tab`键来选择建议中的某个选项进行补全。","slug":"Configure-jupyter-notebook-in-wsl","published":1,"updated":"2024-04-25T17:26:45.673Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvjbaqgt00060vn1763728f3","content":"<h5 id=\"1-conda-install-jupyter-notebook\"><a href=\"#1-conda-install-jupyter-notebook\" class=\"headerlink\" title=\"1. conda install jupyter notebook\"></a>1. <code>conda install jupyter notebook</code></h5><span id=\"more\"></span>\n\n<h5 id=\"2-conda-install-c-conda-forge-jupyter-contrib-nbextensions\"><a href=\"#2-conda-install-c-conda-forge-jupyter-contrib-nbextensions\" class=\"headerlink\" title=\"2. conda install -c conda-forge jupyter_contrib_nbextensions\"></a>2. <code>conda install -c conda-forge jupyter_contrib_nbextensions</code></h5><h5 id=\"3-generate-your-notebook-config-by-using-the-following-command\"><a href=\"#3-generate-your-notebook-config-by-using-the-following-command\" class=\"headerlink\" title=\"3. generate your notebook config by using the following command:\"></a>3. generate your notebook config by using the following command:</h5><p><code>jupyter notebook --generate-config</code></p>\n<h5 id=\"4-You-will-then-see-a-Python-file-in-jupyter-folder-Edit-them-using-your-favorite-text-editor\"><a href=\"#4-You-will-then-see-a-Python-file-in-jupyter-folder-Edit-them-using-your-favorite-text-editor\" class=\"headerlink\" title=\"4. You will then see a Python file in .jupyter folder. Edit them using your favorite text editor.\"></a>4. You will then see a Python file in .jupyter folder. Edit them using your favorite text editor.</h5><p><code>vim ~/.jupyter/jupyter_notebook_config.py</code></p>\n<h5 id=\"5-Disable-launching-browser-by-redicect-file-by-changing-this-line-default-value-is-True\"><a href=\"#5-Disable-launching-browser-by-redicect-file-by-changing-this-line-default-value-is-True\" class=\"headerlink\" title=\"5. Disable launching browser by redicect file by changing this line (default value is True):\"></a>5. Disable launching browser by redicect file by changing this line (default value is True):</h5><p><code>c.NotebookApp.use_redirect_file = False</code></p>\n<p>The good thing about WSL is that you can open Windows programs directly from bash. Thus, to get your Jupyter Notebook opens up a tab in your browser, you can add them as $BROWSER in bash. I am using Firefox here, but you can swap it with your own favorite browser. In other words, you can edit <strong>~&#x2F;.bashrc</strong>, and add the following line:</p>\n<p><code>export BROWSER=&#39;/mnt/c/Program Files/Google/Chrome/Application/chrome.exe&#39;</code></p>\n<p>Or add in the configuration file jupyter_notebook_config.py:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import os</span><br><span class=\"line\">os.environ[&#x27;BROWSER&#x27;] = r&#x27;/mnt/c/Program Files/Google/Chrome/Application/chrome.exe&#x27;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"6-jupyter-notebook\"><a href=\"#6-jupyter-notebook\" class=\"headerlink\" title=\"6. jupyter notebook\"></a>6. jupyter notebook</h5><hr>\n<p>To have Jupyter Notebook running in the background, you can follow these steps:</p>\n<h5 id=\"1-jupyter-notebook-amp\"><a href=\"#1-jupyter-notebook-amp\" class=\"headerlink\" title=\"1. jupyter notebook &amp;\"></a>1. jupyter notebook &amp;</h5><p>On Linux and macOS, the &amp; symbol puts the process in the background. On Windows, use the start command to put Jupyter Notebook into the background, for example:<br><code>start jupyter notebook</code></p>\n<h5 id=\"2-You-should-see-output-similar-to-the-following\"><a href=\"#2-You-should-see-output-similar-to-the-following\" class=\"headerlink\" title=\"2. You should see output similar to the following:\"></a>2. You should see output similar to the following:</h5><p><code>[1] 1234</code><br>Where 1234 is the process ID of Jupyter Notebook.</p>\n<h5 id=\"3-Close-the-terminal-or-command-prompt-window-Jupyter-Notebook-should-continue-to-run-in-the-background\"><a href=\"#3-Close-the-terminal-or-command-prompt-window-Jupyter-Notebook-should-continue-to-run-in-the-background\" class=\"headerlink\" title=\"3. Close the terminal or command prompt window. Jupyter Notebook should continue to run in the background\"></a>3. Close the terminal or command prompt window. Jupyter Notebook should continue to run in the background</h5><p>To stop a Jupyter Notebook running in the background, use the following command:<br><code>kill 1234</code><br>Where 1234 is the process ID of Jupyter Notebook.</p>\n<hr>\n<h1 id=\"让局域网内设备都能连接\"><a href=\"#让局域网内设备都能连接\" class=\"headerlink\" title=\"让局域网内设备都能连接\"></a>让局域网内设备都能连接</h1><p>在配置文件中找到，并修改即可。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">c.NotebookApp.ip = &#x27;your_ip_address&#x27;</span><br><span class=\"line\">c.NotebookApp.allow_origin = &#x27;http://your_ip_address:port&#x27;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">The port the notebook server will listen on.</span></span><br><span class=\"line\">c.NotebookApp.port = 8888</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"挂入后台，关闭终端也能用\"><a href=\"#挂入后台，关闭终端也能用\" class=\"headerlink\" title=\"挂入后台，关闭终端也能用\"></a>挂入后台，关闭终端也能用</h1><p><code>nohup jupyter notebook &amp;</code></p>\n<blockquote>\n<p>这将会输出一个文件，配置信息就在文件里面</p>\n</blockquote>\n<h1 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h1><ul>\n<li>token每次启动都会生成新的。</li>\n<li><code>jupyter notebook list</code>可以查看登录URL和令牌。</li>\n<li><code>ps aux | grep jupyter</code>查找进程PID</li>\n</ul>\n<hr>\n<h1 id=\"配置自动补全\"><a href=\"#配置自动补全\" class=\"headerlink\" title=\"配置自动补全\"></a>配置自动补全</h1><p>在Jupyter Notebook中，可以通过以下步骤设置自动补全功能：</p>\n<ol>\n<li><p>安装 <code>jedi</code> 包：在Jupyter Notebook所在的环境中打开终端或命令提示符，执行以下命令来安装 <code>jedi</code> 包：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install jedi</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启用自动补全功能：打开Jupyter Notebook，在一个代码单元格中输入以下代码并运行：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%config IPCompleter.greedy=<span class=\"literal\">True</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>或者，在Jupyter Notebook的配置文件中进行设置。可以使用以下命令生成默认的配置文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jupyter notebook --generate-config</span><br></pre></td></tr></table></figure>\n\n<p>打开生成的配置文件（<code>jupyter_notebook_config.py</code>），搜索并找到以下行：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># c.Completer.use_jedi = True</span></span><br></pre></td></tr></table></figure>\n\n<p>将其修改为：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">c.Completer.use_jedi = <span class=\"literal\">True</span></span><br></pre></td></tr></table></figure>\n\n<p>保存并关闭配置文件。</p>\n<ol start=\"3\">\n<li>重启Jupyter Notebook：关闭当前运行的Jupyter Notebook服务器，并重新启动。</li>\n</ol>\n<p>完成上述步骤后，如果在Jupyter Notebook中输入代码时，将会出现自动补全的建议列表。可以通过按下<code>Tab</code>键来选择建议中的某个选项进行补全。</p>\n","site":{"data":{}},"excerpt":"<h5 id=\"1-conda-install-jupyter-notebook\"><a href=\"#1-conda-install-jupyter-notebook\" class=\"headerlink\" title=\"1. conda install jupyter notebook\"></a>1. <code>conda install jupyter notebook</code></h5>","more":"<h5 id=\"2-conda-install-c-conda-forge-jupyter-contrib-nbextensions\"><a href=\"#2-conda-install-c-conda-forge-jupyter-contrib-nbextensions\" class=\"headerlink\" title=\"2. conda install -c conda-forge jupyter_contrib_nbextensions\"></a>2. <code>conda install -c conda-forge jupyter_contrib_nbextensions</code></h5><h5 id=\"3-generate-your-notebook-config-by-using-the-following-command\"><a href=\"#3-generate-your-notebook-config-by-using-the-following-command\" class=\"headerlink\" title=\"3. generate your notebook config by using the following command:\"></a>3. generate your notebook config by using the following command:</h5><p><code>jupyter notebook --generate-config</code></p>\n<h5 id=\"4-You-will-then-see-a-Python-file-in-jupyter-folder-Edit-them-using-your-favorite-text-editor\"><a href=\"#4-You-will-then-see-a-Python-file-in-jupyter-folder-Edit-them-using-your-favorite-text-editor\" class=\"headerlink\" title=\"4. You will then see a Python file in .jupyter folder. Edit them using your favorite text editor.\"></a>4. You will then see a Python file in .jupyter folder. Edit them using your favorite text editor.</h5><p><code>vim ~/.jupyter/jupyter_notebook_config.py</code></p>\n<h5 id=\"5-Disable-launching-browser-by-redicect-file-by-changing-this-line-default-value-is-True\"><a href=\"#5-Disable-launching-browser-by-redicect-file-by-changing-this-line-default-value-is-True\" class=\"headerlink\" title=\"5. Disable launching browser by redicect file by changing this line (default value is True):\"></a>5. Disable launching browser by redicect file by changing this line (default value is True):</h5><p><code>c.NotebookApp.use_redirect_file = False</code></p>\n<p>The good thing about WSL is that you can open Windows programs directly from bash. Thus, to get your Jupyter Notebook opens up a tab in your browser, you can add them as $BROWSER in bash. I am using Firefox here, but you can swap it with your own favorite browser. In other words, you can edit <strong>~&#x2F;.bashrc</strong>, and add the following line:</p>\n<p><code>export BROWSER=&#39;/mnt/c/Program Files/Google/Chrome/Application/chrome.exe&#39;</code></p>\n<p>Or add in the configuration file jupyter_notebook_config.py:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import os</span><br><span class=\"line\">os.environ[&#x27;BROWSER&#x27;] = r&#x27;/mnt/c/Program Files/Google/Chrome/Application/chrome.exe&#x27;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"6-jupyter-notebook\"><a href=\"#6-jupyter-notebook\" class=\"headerlink\" title=\"6. jupyter notebook\"></a>6. jupyter notebook</h5><hr>\n<p>To have Jupyter Notebook running in the background, you can follow these steps:</p>\n<h5 id=\"1-jupyter-notebook-amp\"><a href=\"#1-jupyter-notebook-amp\" class=\"headerlink\" title=\"1. jupyter notebook &amp;\"></a>1. jupyter notebook &amp;</h5><p>On Linux and macOS, the &amp; symbol puts the process in the background. On Windows, use the start command to put Jupyter Notebook into the background, for example:<br><code>start jupyter notebook</code></p>\n<h5 id=\"2-You-should-see-output-similar-to-the-following\"><a href=\"#2-You-should-see-output-similar-to-the-following\" class=\"headerlink\" title=\"2. You should see output similar to the following:\"></a>2. You should see output similar to the following:</h5><p><code>[1] 1234</code><br>Where 1234 is the process ID of Jupyter Notebook.</p>\n<h5 id=\"3-Close-the-terminal-or-command-prompt-window-Jupyter-Notebook-should-continue-to-run-in-the-background\"><a href=\"#3-Close-the-terminal-or-command-prompt-window-Jupyter-Notebook-should-continue-to-run-in-the-background\" class=\"headerlink\" title=\"3. Close the terminal or command prompt window. Jupyter Notebook should continue to run in the background\"></a>3. Close the terminal or command prompt window. Jupyter Notebook should continue to run in the background</h5><p>To stop a Jupyter Notebook running in the background, use the following command:<br><code>kill 1234</code><br>Where 1234 is the process ID of Jupyter Notebook.</p>\n<hr>\n<h1 id=\"让局域网内设备都能连接\"><a href=\"#让局域网内设备都能连接\" class=\"headerlink\" title=\"让局域网内设备都能连接\"></a>让局域网内设备都能连接</h1><p>在配置文件中找到，并修改即可。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">c.NotebookApp.ip = &#x27;your_ip_address&#x27;</span><br><span class=\"line\">c.NotebookApp.allow_origin = &#x27;http://your_ip_address:port&#x27;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">The port the notebook server will listen on.</span></span><br><span class=\"line\">c.NotebookApp.port = 8888</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"挂入后台，关闭终端也能用\"><a href=\"#挂入后台，关闭终端也能用\" class=\"headerlink\" title=\"挂入后台，关闭终端也能用\"></a>挂入后台，关闭终端也能用</h1><p><code>nohup jupyter notebook &amp;</code></p>\n<blockquote>\n<p>这将会输出一个文件，配置信息就在文件里面</p>\n</blockquote>\n<h1 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h1><ul>\n<li>token每次启动都会生成新的。</li>\n<li><code>jupyter notebook list</code>可以查看登录URL和令牌。</li>\n<li><code>ps aux | grep jupyter</code>查找进程PID</li>\n</ul>\n<hr>\n<h1 id=\"配置自动补全\"><a href=\"#配置自动补全\" class=\"headerlink\" title=\"配置自动补全\"></a>配置自动补全</h1><p>在Jupyter Notebook中，可以通过以下步骤设置自动补全功能：</p>\n<ol>\n<li><p>安装 <code>jedi</code> 包：在Jupyter Notebook所在的环境中打开终端或命令提示符，执行以下命令来安装 <code>jedi</code> 包：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install jedi</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启用自动补全功能：打开Jupyter Notebook，在一个代码单元格中输入以下代码并运行：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%config IPCompleter.greedy=<span class=\"literal\">True</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>或者，在Jupyter Notebook的配置文件中进行设置。可以使用以下命令生成默认的配置文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jupyter notebook --generate-config</span><br></pre></td></tr></table></figure>\n\n<p>打开生成的配置文件（<code>jupyter_notebook_config.py</code>），搜索并找到以下行：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># c.Completer.use_jedi = True</span></span><br></pre></td></tr></table></figure>\n\n<p>将其修改为：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">c.Completer.use_jedi = <span class=\"literal\">True</span></span><br></pre></td></tr></table></figure>\n\n<p>保存并关闭配置文件。</p>\n<ol start=\"3\">\n<li>重启Jupyter Notebook：关闭当前运行的Jupyter Notebook服务器，并重新启动。</li>\n</ol>\n<p>完成上述步骤后，如果在Jupyter Notebook中输入代码时，将会出现自动补全的建议列表。可以通过按下<code>Tab</code>键来选择建议中的某个选项进行补全。</p>"},{"title":"Configure oh-my-zsh","date":"2023-04-03T17:56:08.000Z","_content":"- Install ZSH<!--more-->\n`sudo apt install zsh-autosuggestions zsh-syntax-highlighting zsh`\n\n- Install [Oh my ZSH.](https://github.com/ohmyzsh/ohmyzsh)\n`sh -c \"$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\"`\n\n- Install plugins.\n    - autosuggesions plugin\n    `git clone https://github.com/zsh-users/zsh-autosuggestions.git $ZSH_CUSTOM/plugins/zsh-autosuggestions`\n    - zsh-syntax-highlighting plugin\n    `git clone https://github.com/zsh-users/zsh-syntax-highlighting.git $ZSH_CUSTOM/plugins/zsh-syntax-highlighting`\n    - zsh-fast-syntax-highlighting plugin\n    `git clone https://github.com/zdharma-continuum/fast-syntax-highlighting.git ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/plugins/fast-syntax-highlighting`\n    - zsh-autocomplete plugin\n    `git clone --depth 1 -- https://github.com/marlonrichert/zsh-autocomplete.git $ZSH_CUSTOM/plugins/zsh-autocomplete`\n\n- Enable plugins by adding them to .zshrc.\n    - Open .zshrc\n    `vim ~/.zshrc`\n    - Find the line which says `plugins=(git)`.\n    - Replace that line with `plugins=(git zsh-autosuggestions zsh-syntax-highlighting fast-syntax-highlighting zsh-autocomplete)`\n\n- References\n[Oh my ZSH](https://github.com/ohmyzsh/ohmyzsh)\n[zsh-autosuggestions](https://github.com/zsh-users/zsh-autosuggestions)\n[zsh-syntax-highlighting](https://github.com/zsh-users/zsh-syntax-highlighting)\n[zsh-fast-syntax-highlighting](https://github.com/zdharma/fast-syntax-highlighting)\n[zsh-autocomplete](https://github.com/marlonrichert/zsh-autocomplete)\n[Oh my zsh.](https://gist.github.com/n1snt/454b879b8f0b7995740ae04c5fb5b7df)","source":"_posts/Configure-oh-my-zsh.md","raw":"---\ntitle: Configure oh-my-zsh\ndate: 2023-04-03 17:56:08\ntags:\n    - oh-my-zsh\n    - zsh\n    - shell\n    - bash\n---\n- Install ZSH<!--more-->\n`sudo apt install zsh-autosuggestions zsh-syntax-highlighting zsh`\n\n- Install [Oh my ZSH.](https://github.com/ohmyzsh/ohmyzsh)\n`sh -c \"$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\"`\n\n- Install plugins.\n    - autosuggesions plugin\n    `git clone https://github.com/zsh-users/zsh-autosuggestions.git $ZSH_CUSTOM/plugins/zsh-autosuggestions`\n    - zsh-syntax-highlighting plugin\n    `git clone https://github.com/zsh-users/zsh-syntax-highlighting.git $ZSH_CUSTOM/plugins/zsh-syntax-highlighting`\n    - zsh-fast-syntax-highlighting plugin\n    `git clone https://github.com/zdharma-continuum/fast-syntax-highlighting.git ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/plugins/fast-syntax-highlighting`\n    - zsh-autocomplete plugin\n    `git clone --depth 1 -- https://github.com/marlonrichert/zsh-autocomplete.git $ZSH_CUSTOM/plugins/zsh-autocomplete`\n\n- Enable plugins by adding them to .zshrc.\n    - Open .zshrc\n    `vim ~/.zshrc`\n    - Find the line which says `plugins=(git)`.\n    - Replace that line with `plugins=(git zsh-autosuggestions zsh-syntax-highlighting fast-syntax-highlighting zsh-autocomplete)`\n\n- References\n[Oh my ZSH](https://github.com/ohmyzsh/ohmyzsh)\n[zsh-autosuggestions](https://github.com/zsh-users/zsh-autosuggestions)\n[zsh-syntax-highlighting](https://github.com/zsh-users/zsh-syntax-highlighting)\n[zsh-fast-syntax-highlighting](https://github.com/zdharma/fast-syntax-highlighting)\n[zsh-autocomplete](https://github.com/marlonrichert/zsh-autocomplete)\n[Oh my zsh.](https://gist.github.com/n1snt/454b879b8f0b7995740ae04c5fb5b7df)","slug":"Configure-oh-my-zsh","published":1,"updated":"2024-04-25T17:26:46.973Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvjbaqgv00090vn1g3y92dvq","content":"<ul>\n<li><p>Install ZSH<span id=\"more\"></span><br><code>sudo apt install zsh-autosuggestions zsh-syntax-highlighting zsh</code></p>\n</li>\n<li><p>Install <a href=\"https://github.com/ohmyzsh/ohmyzsh\">Oh my ZSH.</a><br><code>sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot;</code></p>\n</li>\n<li><p>Install plugins.</p>\n<ul>\n<li>autosuggesions plugin<br>  <code>git clone https://github.com/zsh-users/zsh-autosuggestions.git $ZSH_CUSTOM/plugins/zsh-autosuggestions</code></li>\n<li>zsh-syntax-highlighting plugin<br>  <code>git clone https://github.com/zsh-users/zsh-syntax-highlighting.git $ZSH_CUSTOM/plugins/zsh-syntax-highlighting</code></li>\n<li>zsh-fast-syntax-highlighting plugin<br>  <code>git clone https://github.com/zdharma-continuum/fast-syntax-highlighting.git $&#123;ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom&#125;/plugins/fast-syntax-highlighting</code></li>\n<li>zsh-autocomplete plugin<br>  <code>git clone --depth 1 -- https://github.com/marlonrichert/zsh-autocomplete.git $ZSH_CUSTOM/plugins/zsh-autocomplete</code></li>\n</ul>\n</li>\n<li><p>Enable plugins by adding them to .zshrc.</p>\n<ul>\n<li>Open .zshrc<br>  <code>vim ~/.zshrc</code></li>\n<li>Find the line which says <code>plugins=(git)</code>.</li>\n<li>Replace that line with <code>plugins=(git zsh-autosuggestions zsh-syntax-highlighting fast-syntax-highlighting zsh-autocomplete)</code></li>\n</ul>\n</li>\n<li><p>References<br><a href=\"https://github.com/ohmyzsh/ohmyzsh\">Oh my ZSH</a><br><a href=\"https://github.com/zsh-users/zsh-autosuggestions\">zsh-autosuggestions</a><br><a href=\"https://github.com/zsh-users/zsh-syntax-highlighting\">zsh-syntax-highlighting</a><br><a href=\"https://github.com/zdharma/fast-syntax-highlighting\">zsh-fast-syntax-highlighting</a><br><a href=\"https://github.com/marlonrichert/zsh-autocomplete\">zsh-autocomplete</a><br><a href=\"https://gist.github.com/n1snt/454b879b8f0b7995740ae04c5fb5b7df\">Oh my zsh.</a></p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<ul>\n<li><p>Install ZSH</p></li></ul>","more":"<br><code>sudo apt install zsh-autosuggestions zsh-syntax-highlighting zsh</code><p></p>\n\n<li><p>Install <a href=\"https://github.com/ohmyzsh/ohmyzsh\">Oh my ZSH.</a><br><code>sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot;</code></p>\n</li>\n<li><p>Install plugins.</p>\n<ul>\n<li>autosuggesions plugin<br>  <code>git clone https://github.com/zsh-users/zsh-autosuggestions.git $ZSH_CUSTOM/plugins/zsh-autosuggestions</code></li>\n<li>zsh-syntax-highlighting plugin<br>  <code>git clone https://github.com/zsh-users/zsh-syntax-highlighting.git $ZSH_CUSTOM/plugins/zsh-syntax-highlighting</code></li>\n<li>zsh-fast-syntax-highlighting plugin<br>  <code>git clone https://github.com/zdharma-continuum/fast-syntax-highlighting.git $&#123;ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom&#125;/plugins/fast-syntax-highlighting</code></li>\n<li>zsh-autocomplete plugin<br>  <code>git clone --depth 1 -- https://github.com/marlonrichert/zsh-autocomplete.git $ZSH_CUSTOM/plugins/zsh-autocomplete</code></li>\n</ul>\n</li>\n<li><p>Enable plugins by adding them to .zshrc.</p>\n<ul>\n<li>Open .zshrc<br>  <code>vim ~/.zshrc</code></li>\n<li>Find the line which says <code>plugins=(git)</code>.</li>\n<li>Replace that line with <code>plugins=(git zsh-autosuggestions zsh-syntax-highlighting fast-syntax-highlighting zsh-autocomplete)</code></li>\n</ul>\n</li>\n<li><p>References<br><a href=\"https://github.com/ohmyzsh/ohmyzsh\">Oh my ZSH</a><br><a href=\"https://github.com/zsh-users/zsh-autosuggestions\">zsh-autosuggestions</a><br><a href=\"https://github.com/zsh-users/zsh-syntax-highlighting\">zsh-syntax-highlighting</a><br><a href=\"https://github.com/zdharma/fast-syntax-highlighting\">zsh-fast-syntax-highlighting</a><br><a href=\"https://github.com/marlonrichert/zsh-autocomplete\">zsh-autocomplete</a><br><a href=\"https://gist.github.com/n1snt/454b879b8f0b7995740ae04c5fb5b7df\">Oh my zsh.</a></p>\n</li>\n"},{"title":"D2L阅读笔记","date":"2023-07-13T12:51:05.000Z","delcare":true,"_content":"[动手学深度学习（Dive into Deep Learning，D2L.ai）Github](https://github.com/d2l-ai/d2l-zh)\n[D2L电子书](https://zh.d2l.ai/)\n[D2L电子书英文版](https://d2l.ai/)：英文版含有更多的内容\n[D2L电子书英文版PDF](https://d2l.ai/d2l-en.pdf)\n[基础数学知识](http://www.d2l.ai/chapter_appendix-mathematics-for-deep-learning/index.html)\n[讨论区](https://discuss.d2l.ai/)\n[讨论区中文版](https://discuss.d2l.ai/c/16)\n[Distill](https://distill.pub/)\n[Python教程](http://learnpython.org/)<!--more-->\n\n----------------------------------\n《动手学深度学习（PyTorch版）》配套资源获取链接：\n[本书配套网站主页](https://d2l.ai/)\n[课程主页](https://courses.d2l.ai/zh-v2)\n[教材](https://zh-v2.d2l.ai/)\n[Pytroch论坛](https://discuss.pytorch.org/)\n[GitHub项目地址](https://github.com/d2l-ai/d2l-zh)\n[Jupyter记事本下载](https://zh-v2.d2l.ai/d2l-zh.zip)\n[中文版课件](https://github.com/d2l-ai/berkeley-stat-157/tree/master/slides-zh)\n[视频课程及课程PPT](https://courses.d2l.ai/zh-v2/)\n习题：见纸书\n社区讨论：见纸书各节二维码\n\n-------------------------------------\n#### 搭配读物\n- [pytorch-handbook](https://github.com/zergtant/pytorch-handbook)\n- [pytorch-tutorial](https://github.com/yunjey/pytorch-tutorial)\n- [machine_learning_beginner 中的 python 基础](https://github.com/fengdu78/machine_learning_beginner)\n  - 1.[两天入门Python(目录名：python-start)](https://github.com/fengdu78/machine_learning_beginner/blob/master/python-start)\n  - 2.[适合初学者快速入门的Numpy实战全集(目录名：numpy)](https://github.com/fengdu78/machine_learning_beginner/blob/master/numpy)\n  - 3.[matplotlib学习之基本使用(目录名：matplotlib)](https://github.com/fengdu78/machine_learning_beginner/blob/master/matplotlib)\n  - 4.[两天学会pandas(目录名：pandas)](https://github.com/fengdu78/machine_learning_beginner/blob/master/pandas)\n\n----------------------------------------\n[Corner430/d2l](https://github.com/Corner430/d2l)\n","source":"_posts/D2L阅读笔记.md","raw":"---\ntitle: D2L阅读笔记\ndate: 2023-07-13 12:51:05\ntags:\n  - 科研\ndelcare: true\n---\n[动手学深度学习（Dive into Deep Learning，D2L.ai）Github](https://github.com/d2l-ai/d2l-zh)\n[D2L电子书](https://zh.d2l.ai/)\n[D2L电子书英文版](https://d2l.ai/)：英文版含有更多的内容\n[D2L电子书英文版PDF](https://d2l.ai/d2l-en.pdf)\n[基础数学知识](http://www.d2l.ai/chapter_appendix-mathematics-for-deep-learning/index.html)\n[讨论区](https://discuss.d2l.ai/)\n[讨论区中文版](https://discuss.d2l.ai/c/16)\n[Distill](https://distill.pub/)\n[Python教程](http://learnpython.org/)<!--more-->\n\n----------------------------------\n《动手学深度学习（PyTorch版）》配套资源获取链接：\n[本书配套网站主页](https://d2l.ai/)\n[课程主页](https://courses.d2l.ai/zh-v2)\n[教材](https://zh-v2.d2l.ai/)\n[Pytroch论坛](https://discuss.pytorch.org/)\n[GitHub项目地址](https://github.com/d2l-ai/d2l-zh)\n[Jupyter记事本下载](https://zh-v2.d2l.ai/d2l-zh.zip)\n[中文版课件](https://github.com/d2l-ai/berkeley-stat-157/tree/master/slides-zh)\n[视频课程及课程PPT](https://courses.d2l.ai/zh-v2/)\n习题：见纸书\n社区讨论：见纸书各节二维码\n\n-------------------------------------\n#### 搭配读物\n- [pytorch-handbook](https://github.com/zergtant/pytorch-handbook)\n- [pytorch-tutorial](https://github.com/yunjey/pytorch-tutorial)\n- [machine_learning_beginner 中的 python 基础](https://github.com/fengdu78/machine_learning_beginner)\n  - 1.[两天入门Python(目录名：python-start)](https://github.com/fengdu78/machine_learning_beginner/blob/master/python-start)\n  - 2.[适合初学者快速入门的Numpy实战全集(目录名：numpy)](https://github.com/fengdu78/machine_learning_beginner/blob/master/numpy)\n  - 3.[matplotlib学习之基本使用(目录名：matplotlib)](https://github.com/fengdu78/machine_learning_beginner/blob/master/matplotlib)\n  - 4.[两天学会pandas(目录名：pandas)](https://github.com/fengdu78/machine_learning_beginner/blob/master/pandas)\n\n----------------------------------------\n[Corner430/d2l](https://github.com/Corner430/d2l)\n","slug":"D2L阅读笔记","published":1,"updated":"2024-04-25T17:26:45.933Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvjbaqgx000a0vn1dv7wcwh7","content":"<p><a href=\"https://github.com/d2l-ai/d2l-zh\">动手学深度学习（Dive into Deep Learning，D2L.ai）Github</a><br><a href=\"https://zh.d2l.ai/\">D2L电子书</a><br><a href=\"https://d2l.ai/\">D2L电子书英文版</a>：英文版含有更多的内容<br><a href=\"https://d2l.ai/d2l-en.pdf\">D2L电子书英文版PDF</a><br><a href=\"http://www.d2l.ai/chapter_appendix-mathematics-for-deep-learning/index.html\">基础数学知识</a><br><a href=\"https://discuss.d2l.ai/\">讨论区</a><br><a href=\"https://discuss.d2l.ai/c/16\">讨论区中文版</a><br><a href=\"https://distill.pub/\">Distill</a><br><a href=\"http://learnpython.org/\">Python教程</a><span id=\"more\"></span></p>\n<hr>\n<p>《动手学深度学习（PyTorch版）》配套资源获取链接：<br><a href=\"https://d2l.ai/\">本书配套网站主页</a><br><a href=\"https://courses.d2l.ai/zh-v2\">课程主页</a><br><a href=\"https://zh-v2.d2l.ai/\">教材</a><br><a href=\"https://discuss.pytorch.org/\">Pytroch论坛</a><br><a href=\"https://github.com/d2l-ai/d2l-zh\">GitHub项目地址</a><br><a href=\"https://zh-v2.d2l.ai/d2l-zh.zip\">Jupyter记事本下载</a><br><a href=\"https://github.com/d2l-ai/berkeley-stat-157/tree/master/slides-zh\">中文版课件</a><br><a href=\"https://courses.d2l.ai/zh-v2/\">视频课程及课程PPT</a><br>习题：见纸书<br>社区讨论：见纸书各节二维码</p>\n<hr>\n<h4 id=\"搭配读物\"><a href=\"#搭配读物\" class=\"headerlink\" title=\"搭配读物\"></a>搭配读物</h4><ul>\n<li><a href=\"https://github.com/zergtant/pytorch-handbook\">pytorch-handbook</a></li>\n<li><a href=\"https://github.com/yunjey/pytorch-tutorial\">pytorch-tutorial</a></li>\n<li><a href=\"https://github.com/fengdu78/machine_learning_beginner\">machine_learning_beginner 中的 python 基础</a><ul>\n<li>1.<a href=\"https://github.com/fengdu78/machine_learning_beginner/blob/master/python-start\">两天入门Python(目录名：python-start)</a></li>\n<li>2.<a href=\"https://github.com/fengdu78/machine_learning_beginner/blob/master/numpy\">适合初学者快速入门的Numpy实战全集(目录名：numpy)</a></li>\n<li>3.<a href=\"https://github.com/fengdu78/machine_learning_beginner/blob/master/matplotlib\">matplotlib学习之基本使用(目录名：matplotlib)</a></li>\n<li>4.<a href=\"https://github.com/fengdu78/machine_learning_beginner/blob/master/pandas\">两天学会pandas(目录名：pandas)</a></li>\n</ul>\n</li>\n</ul>\n<hr>\n<p><a href=\"https://github.com/Corner430/d2l\">Corner430&#x2F;d2l</a></p>\n","site":{"data":{}},"excerpt":"<p><a href=\"https://github.com/d2l-ai/d2l-zh\">动手学深度学习（Dive into Deep Learning，D2L.ai）Github</a><br><a href=\"https://zh.d2l.ai/\">D2L电子书</a><br><a href=\"https://d2l.ai/\">D2L电子书英文版</a>：英文版含有更多的内容<br><a href=\"https://d2l.ai/d2l-en.pdf\">D2L电子书英文版PDF</a><br><a href=\"http://www.d2l.ai/chapter_appendix-mathematics-for-deep-learning/index.html\">基础数学知识</a><br><a href=\"https://discuss.d2l.ai/\">讨论区</a><br><a href=\"https://discuss.d2l.ai/c/16\">讨论区中文版</a><br><a href=\"https://distill.pub/\">Distill</a><br><a href=\"http://learnpython.org/\">Python教程</a></p>","more":"<p></p>\n<hr>\n<p>《动手学深度学习（PyTorch版）》配套资源获取链接：<br><a href=\"https://d2l.ai/\">本书配套网站主页</a><br><a href=\"https://courses.d2l.ai/zh-v2\">课程主页</a><br><a href=\"https://zh-v2.d2l.ai/\">教材</a><br><a href=\"https://discuss.pytorch.org/\">Pytroch论坛</a><br><a href=\"https://github.com/d2l-ai/d2l-zh\">GitHub项目地址</a><br><a href=\"https://zh-v2.d2l.ai/d2l-zh.zip\">Jupyter记事本下载</a><br><a href=\"https://github.com/d2l-ai/berkeley-stat-157/tree/master/slides-zh\">中文版课件</a><br><a href=\"https://courses.d2l.ai/zh-v2/\">视频课程及课程PPT</a><br>习题：见纸书<br>社区讨论：见纸书各节二维码</p>\n<hr>\n<h4 id=\"搭配读物\"><a href=\"#搭配读物\" class=\"headerlink\" title=\"搭配读物\"></a>搭配读物</h4><ul>\n<li><a href=\"https://github.com/zergtant/pytorch-handbook\">pytorch-handbook</a></li>\n<li><a href=\"https://github.com/yunjey/pytorch-tutorial\">pytorch-tutorial</a></li>\n<li><a href=\"https://github.com/fengdu78/machine_learning_beginner\">machine_learning_beginner 中的 python 基础</a><ul>\n<li>1.<a href=\"https://github.com/fengdu78/machine_learning_beginner/blob/master/python-start\">两天入门Python(目录名：python-start)</a></li>\n<li>2.<a href=\"https://github.com/fengdu78/machine_learning_beginner/blob/master/numpy\">适合初学者快速入门的Numpy实战全集(目录名：numpy)</a></li>\n<li>3.<a href=\"https://github.com/fengdu78/machine_learning_beginner/blob/master/matplotlib\">matplotlib学习之基本使用(目录名：matplotlib)</a></li>\n<li>4.<a href=\"https://github.com/fengdu78/machine_learning_beginner/blob/master/pandas\">两天学会pandas(目录名：pandas)</a></li>\n</ul>\n</li>\n</ul>\n<hr>\n<p><a href=\"https://github.com/Corner430/d2l\">Corner430&#x2F;d2l</a></p>"},{"title":"DDNSTO","date":"2023-05-21T13:34:41.000Z","declare":true,"_content":"[ddnsto官网](ddnsto.com)\n[ddnsto说明](https://doc.linkease.com/zh/guide/ddnsto/)\n\nddnsto 支持很多系统<!--more-->\n![20230521134212](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230521134212.png)\n\n---------------------------------------------------\n1. 注册账号，保留右上角的令牌\n2. 复制令牌，启用\n![20230521133639](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230521133639.png)\n3. 修改设备名，添加域名映射\n![20230521133744](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230521133744.png)\n\n> 这里并不需要有自己的域名，域名映射到的目标主机地址是内网ip，例如192.168.1.1","source":"_posts/DDNSTO.md","raw":"---\ntitle: DDNSTO\ndate: 2023-05-21 13:34:41\ntags:\n    - 内网穿透\ndeclare: true\n---\n[ddnsto官网](ddnsto.com)\n[ddnsto说明](https://doc.linkease.com/zh/guide/ddnsto/)\n\nddnsto 支持很多系统<!--more-->\n![20230521134212](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230521134212.png)\n\n---------------------------------------------------\n1. 注册账号，保留右上角的令牌\n2. 复制令牌，启用\n![20230521133639](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230521133639.png)\n3. 修改设备名，添加域名映射\n![20230521133744](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230521133744.png)\n\n> 这里并不需要有自己的域名，域名映射到的目标主机地址是内网ip，例如192.168.1.1","slug":"DDNSTO","published":1,"updated":"2024-04-25T17:26:47.983Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvjbaqgy000c0vn129lgbedr","content":"<p><a href=\"ddnsto.com\">ddnsto官网</a><br><a href=\"https://doc.linkease.com/zh/guide/ddnsto/\">ddnsto说明</a></p>\n<p>ddnsto 支持很多系统<span id=\"more\"></span><br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230521134212.png\" alt=\"20230521134212\"></p>\n<hr>\n<ol>\n<li>注册账号，保留右上角的令牌</li>\n<li>复制令牌，启用<br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230521133639.png\" alt=\"20230521133639\"></li>\n<li>修改设备名，添加域名映射<br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230521133744.png\" alt=\"20230521133744\"></li>\n</ol>\n<blockquote>\n<p>这里并不需要有自己的域名，域名映射到的目标主机地址是内网ip，例如192.168.1.1</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p><a href=\"ddnsto.com\">ddnsto官网</a><br><a href=\"https://doc.linkease.com/zh/guide/ddnsto/\">ddnsto说明</a></p>\n<p>ddnsto 支持很多系统</p>","more":"<br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230521134212.png\" alt=\"20230521134212\"><p></p>\n<hr>\n<ol>\n<li>注册账号，保留右上角的令牌</li>\n<li>复制令牌，启用<br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230521133639.png\" alt=\"20230521133639\"></li>\n<li>修改设备名，添加域名映射<br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230521133744.png\" alt=\"20230521133744\"></li>\n</ol>\n<blockquote>\n<p>这里并不需要有自己的域名，域名映射到的目标主机地址是内网ip，例如192.168.1.1</p>\n</blockquote>"},{"title":"Delete the host key record for the specified IP address","date":"2023-04-03T19:11:02.000Z","_content":"- Deletes the host key record for the specified IP address from the SSH client's \"known_hosts\" file.\n`ssh-keygen -f \"~/.ssh/known_hosts\" -R \"172.17.0.158\"`\n\nIf you need to specify the IP address of the SSH connection as port 8002 of 172.17.0.158, you can use the following command:\n`ssh-keygen -f \"~/.ssh/known_hosts\" -R \"[172.17.0.158]:8002\"`","source":"_posts/Delete-the-host-key-record-for-the-specified-IP-address.md","raw":"---\ntitle: Delete the host key record for the specified IP address\ndate: 2023-04-03 19:11:02\ntags:\n    - ssh\n---\n- Deletes the host key record for the specified IP address from the SSH client's \"known_hosts\" file.\n`ssh-keygen -f \"~/.ssh/known_hosts\" -R \"172.17.0.158\"`\n\nIf you need to specify the IP address of the SSH connection as port 8002 of 172.17.0.158, you can use the following command:\n`ssh-keygen -f \"~/.ssh/known_hosts\" -R \"[172.17.0.158]:8002\"`","slug":"Delete-the-host-key-record-for-the-specified-IP-address","published":1,"updated":"2024-04-25T17:26:47.513Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvjbaqgz000d0vn13yvg3hp8","content":"<ul>\n<li>Deletes the host key record for the specified IP address from the SSH client’s “known_hosts” file.<br><code>ssh-keygen -f &quot;~/.ssh/known_hosts&quot; -R &quot;172.17.0.158&quot;</code></li>\n</ul>\n<p>If you need to specify the IP address of the SSH connection as port 8002 of 172.17.0.158, you can use the following command:<br><code>ssh-keygen -f &quot;~/.ssh/known_hosts&quot; -R &quot;[172.17.0.158]:8002&quot;</code></p>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>Deletes the host key record for the specified IP address from the SSH client’s “known_hosts” file.<br><code>ssh-keygen -f &quot;~/.ssh/known_hosts&quot; -R &quot;172.17.0.158&quot;</code></li>\n</ul>\n<p>If you need to specify the IP address of the SSH connection as port 8002 of 172.17.0.158, you can use the following command:<br><code>ssh-keygen -f &quot;~/.ssh/known_hosts&quot; -R &quot;[172.17.0.158]:8002&quot;</code></p>\n"},{"title":"Deploy Hadoop on Ubuntu","date":"2023-04-03T18:04:34.000Z","declare":true,"_content":"- [Hadoop-3.3.1 Installation guide for Ubuntu](https://blog.devgenius.io/install-configure-and-setup-hadoop-in-ubuntu-a3cdd6305a0e)<!--more-->\n- [Hadoop: Setting up a Single Node Cluster.](https://hadoop.apache.org/docs/stable/hadoop-project-dist/hadoop-common/SingleCluster.html#Fully-Distributed_Operation)\n- [Hadoop Cluster Setup](https://hadoop.apache.org/docs/stable/hadoop-project-dist/hadoop-common/ClusterSetup.html)\n\n--------------------\n\n1. If you have installed Hadoop on your own Ubuntu system, then the default file system location of HDFS is **/usr/local/hadoop/hdfs/namenode**. This is the default configuration of Hadoop, but you can change it in the **hdfs-site.xml** file. In this file, you can specify the NameNode's data directory using the `dfs.namenode.name.dir` property.\n\nIf you are unsure of the location of the HDFS file system, you can check the **core-site.xml** file in the Hadoop configuration file, which contains Hadoop's core configuration information. You can use the following command to find the location of the **core-site.xml** file:\n`find / -name \"core-site.xml\" 2> /dev/null`\n\nThis will search the entire filesystem for a file named **core-site.xml** and output the results to the console. Once you have located this file, you can open it and view the configuration information in it to determine the HDFS filesystem location.\n\n2. You can retrieve data from HDFS using the following command:\n`hdfs dfs -get <source> <destination>`\n\nAmong them, **<source>** is the source path in HDFS, and **<destination>** is the destination path in the local system. This command will get the specified file or directory from HDFS and copy it to the target path in the local system.\n\nFor example, if you want to retrieve and copy **/hdfs/data/file.txt** from HDFS to **/local/data/** directory on your local system, you can use the following command:\n`hdfs dfs -get /hdfs/data/file.txt /local/data/`\n\nIf you want to retrieve and copy an entire directory from HDFS to a target directory on your local system, you can use the following command:\n`hdfs dfs -get /hdfs/data/ /local/data/`\n\nNote that this command will fail if a file or directory with the same name already exists in the target path. You can force overwrite existing files with the -f option:\n`hdfs dfs -get -f /hdfs/data/file.txt /local/data/`\nThis will force overwrite the existing file in **/local/data/file.txt**.\n\n3. You can delete a specified file or directory from Hadoop using the following command:\n`hdfs dfs -rm -r <path>`\nAmong them, **<path>** is the path of the file or directory to be deleted in Hadoop. If you want to delete a single file, specify **<path>** as the full path to the file. If you want to delete a directory, specify **<path>** as the full path to the directory.\n\nFor example, to delete **/hdfs/data/file.txt** from Hadoop, you can use the following command:\n`hdfs dfs -rm /hdfs/data/file.txt`\n\nIf you want to delete the directory **/hdfs/data/** and all files and subdirectories under it, use the following command:\n`hdfs dfs -rm -r /hdfs/data/`\nNote that deleting a file or directory with this command is irreversible, so proceed with caution and make sure you are deleting the correct file or directory.\n\n\n-----------------\n1. Create a directory to store your photos in HDFS. You can create a directory with\n`hdfs dfs -mkdir /photos`\nThis will create a directory called **photos** under the root directory.\n\n2. Upload your photo to Hadoop. You can upload local files to HDFS with the following command:\n`hdfs dfs -put /local/path/to/photos/* /photos/`\nThis will upload all photos under your local path **/local/path/to/photos/** to **/photos/** directory.\n\n3. Confirm that the photos have been successfully uploaded to Hadoop. You can use the following command to view your uploaded photos:\n`hdfs dfs -ls /photos/`\nThis will list all files under the **/photos/** directory.\n \nNow you have successfully uploaded photos to Hadoop. If you need to further process these photos, you can use distributed processing frameworks such as Hadoop MapReduce or Spark to process them.\n\n\n-------------------\n1. Create a new user\n`sudo adduser userNameHere`\nWhere userNameHere is the username\n\n2. The new user will be added to the **/etc/passwd** file, and the encrypted password will be stored in the **/etc/shadow** file\n\n3. Switch user\n`su -userNameHere`\nWhere userNameHere is the username you want to switch to.\n\n4. Delete user\n`sudo deluser --remove-home userNameHere`\n\n5. Verify that a user has been deleted\n`id userNameHere`\nIf the user does not exist, `No such user` will be displayed\n\n6. Delete the error solution\n- Use the following command to find out the processes using this user: `sudo lsof -u test`.\n- Check if the process can be killed, and if so, kill the process with: `sudo kill -9 <PID> (where \"<PID>\" is the PID of the process to be killed)`\n- The user can then be forcibly removed, including its home directory, with: `sudo deluser --remove-home test`\n\n","source":"_posts/Deploy-Hadoop-on-Ubuntu.md","raw":"---\ntitle: Deploy Hadoop on Ubuntu\ndate: 2023-04-03 18:04:34\ntags:\n    - Ubuntu\n    - Hadoop\ndeclare: true\n---\n- [Hadoop-3.3.1 Installation guide for Ubuntu](https://blog.devgenius.io/install-configure-and-setup-hadoop-in-ubuntu-a3cdd6305a0e)<!--more-->\n- [Hadoop: Setting up a Single Node Cluster.](https://hadoop.apache.org/docs/stable/hadoop-project-dist/hadoop-common/SingleCluster.html#Fully-Distributed_Operation)\n- [Hadoop Cluster Setup](https://hadoop.apache.org/docs/stable/hadoop-project-dist/hadoop-common/ClusterSetup.html)\n\n--------------------\n\n1. If you have installed Hadoop on your own Ubuntu system, then the default file system location of HDFS is **/usr/local/hadoop/hdfs/namenode**. This is the default configuration of Hadoop, but you can change it in the **hdfs-site.xml** file. In this file, you can specify the NameNode's data directory using the `dfs.namenode.name.dir` property.\n\nIf you are unsure of the location of the HDFS file system, you can check the **core-site.xml** file in the Hadoop configuration file, which contains Hadoop's core configuration information. You can use the following command to find the location of the **core-site.xml** file:\n`find / -name \"core-site.xml\" 2> /dev/null`\n\nThis will search the entire filesystem for a file named **core-site.xml** and output the results to the console. Once you have located this file, you can open it and view the configuration information in it to determine the HDFS filesystem location.\n\n2. You can retrieve data from HDFS using the following command:\n`hdfs dfs -get <source> <destination>`\n\nAmong them, **<source>** is the source path in HDFS, and **<destination>** is the destination path in the local system. This command will get the specified file or directory from HDFS and copy it to the target path in the local system.\n\nFor example, if you want to retrieve and copy **/hdfs/data/file.txt** from HDFS to **/local/data/** directory on your local system, you can use the following command:\n`hdfs dfs -get /hdfs/data/file.txt /local/data/`\n\nIf you want to retrieve and copy an entire directory from HDFS to a target directory on your local system, you can use the following command:\n`hdfs dfs -get /hdfs/data/ /local/data/`\n\nNote that this command will fail if a file or directory with the same name already exists in the target path. You can force overwrite existing files with the -f option:\n`hdfs dfs -get -f /hdfs/data/file.txt /local/data/`\nThis will force overwrite the existing file in **/local/data/file.txt**.\n\n3. You can delete a specified file or directory from Hadoop using the following command:\n`hdfs dfs -rm -r <path>`\nAmong them, **<path>** is the path of the file or directory to be deleted in Hadoop. If you want to delete a single file, specify **<path>** as the full path to the file. If you want to delete a directory, specify **<path>** as the full path to the directory.\n\nFor example, to delete **/hdfs/data/file.txt** from Hadoop, you can use the following command:\n`hdfs dfs -rm /hdfs/data/file.txt`\n\nIf you want to delete the directory **/hdfs/data/** and all files and subdirectories under it, use the following command:\n`hdfs dfs -rm -r /hdfs/data/`\nNote that deleting a file or directory with this command is irreversible, so proceed with caution and make sure you are deleting the correct file or directory.\n\n\n-----------------\n1. Create a directory to store your photos in HDFS. You can create a directory with\n`hdfs dfs -mkdir /photos`\nThis will create a directory called **photos** under the root directory.\n\n2. Upload your photo to Hadoop. You can upload local files to HDFS with the following command:\n`hdfs dfs -put /local/path/to/photos/* /photos/`\nThis will upload all photos under your local path **/local/path/to/photos/** to **/photos/** directory.\n\n3. Confirm that the photos have been successfully uploaded to Hadoop. You can use the following command to view your uploaded photos:\n`hdfs dfs -ls /photos/`\nThis will list all files under the **/photos/** directory.\n \nNow you have successfully uploaded photos to Hadoop. If you need to further process these photos, you can use distributed processing frameworks such as Hadoop MapReduce or Spark to process them.\n\n\n-------------------\n1. Create a new user\n`sudo adduser userNameHere`\nWhere userNameHere is the username\n\n2. The new user will be added to the **/etc/passwd** file, and the encrypted password will be stored in the **/etc/shadow** file\n\n3. Switch user\n`su -userNameHere`\nWhere userNameHere is the username you want to switch to.\n\n4. Delete user\n`sudo deluser --remove-home userNameHere`\n\n5. Verify that a user has been deleted\n`id userNameHere`\nIf the user does not exist, `No such user` will be displayed\n\n6. Delete the error solution\n- Use the following command to find out the processes using this user: `sudo lsof -u test`.\n- Check if the process can be killed, and if so, kill the process with: `sudo kill -9 <PID> (where \"<PID>\" is the PID of the process to be killed)`\n- The user can then be forcibly removed, including its home directory, with: `sudo deluser --remove-home test`\n\n","slug":"Deploy-Hadoop-on-Ubuntu","published":1,"updated":"2024-04-25T17:26:48.443Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvjbaqh4000f0vn1frnkez76","content":"<ul>\n<li><a href=\"https://blog.devgenius.io/install-configure-and-setup-hadoop-in-ubuntu-a3cdd6305a0e\">Hadoop-3.3.1 Installation guide for Ubuntu</a><span id=\"more\"></span></li>\n<li><a href=\"https://hadoop.apache.org/docs/stable/hadoop-project-dist/hadoop-common/SingleCluster.html#Fully-Distributed_Operation\">Hadoop: Setting up a Single Node Cluster.</a></li>\n<li><a href=\"https://hadoop.apache.org/docs/stable/hadoop-project-dist/hadoop-common/ClusterSetup.html\">Hadoop Cluster Setup</a></li>\n</ul>\n<hr>\n<ol>\n<li>If you have installed Hadoop on your own Ubuntu system, then the default file system location of HDFS is <strong>&#x2F;usr&#x2F;local&#x2F;hadoop&#x2F;hdfs&#x2F;namenode</strong>. This is the default configuration of Hadoop, but you can change it in the <strong>hdfs-site.xml</strong> file. In this file, you can specify the NameNode’s data directory using the <code>dfs.namenode.name.dir</code> property.</li>\n</ol>\n<p>If you are unsure of the location of the HDFS file system, you can check the <strong>core-site.xml</strong> file in the Hadoop configuration file, which contains Hadoop’s core configuration information. You can use the following command to find the location of the <strong>core-site.xml</strong> file:<br><code>find / -name &quot;core-site.xml&quot; 2&gt; /dev/null</code></p>\n<p>This will search the entire filesystem for a file named <strong>core-site.xml</strong> and output the results to the console. Once you have located this file, you can open it and view the configuration information in it to determine the HDFS filesystem location.</p>\n<ol start=\"2\">\n<li>You can retrieve data from HDFS using the following command:<br><code>hdfs dfs -get &lt;source&gt; &lt;destination&gt;</code></li>\n</ol>\n<p>Among them, <strong><source></strong> is the source path in HDFS, and <strong><destination></destination></strong> is the destination path in the local system. This command will get the specified file or directory from HDFS and copy it to the target path in the local system.</p>\n<p>For example, if you want to retrieve and copy <strong>&#x2F;hdfs&#x2F;data&#x2F;file.txt</strong> from HDFS to <strong>&#x2F;local&#x2F;data&#x2F;</strong> directory on your local system, you can use the following command:<br><code>hdfs dfs -get /hdfs/data/file.txt /local/data/</code></p>\n<p>If you want to retrieve and copy an entire directory from HDFS to a target directory on your local system, you can use the following command:<br><code>hdfs dfs -get /hdfs/data/ /local/data/</code></p>\n<p>Note that this command will fail if a file or directory with the same name already exists in the target path. You can force overwrite existing files with the -f option:<br><code>hdfs dfs -get -f /hdfs/data/file.txt /local/data/</code><br>This will force overwrite the existing file in <strong>&#x2F;local&#x2F;data&#x2F;file.txt</strong>.</p>\n<ol start=\"3\">\n<li>You can delete a specified file or directory from Hadoop using the following command:<br><code>hdfs dfs -rm -r &lt;path&gt;</code><br>Among them, <strong><path></path></strong> is the path of the file or directory to be deleted in Hadoop. If you want to delete a single file, specify <strong><path></path></strong> as the full path to the file. If you want to delete a directory, specify <strong><path></path></strong> as the full path to the directory.</li>\n</ol>\n<p>For example, to delete <strong>&#x2F;hdfs&#x2F;data&#x2F;file.txt</strong> from Hadoop, you can use the following command:<br><code>hdfs dfs -rm /hdfs/data/file.txt</code></p>\n<p>If you want to delete the directory <strong>&#x2F;hdfs&#x2F;data&#x2F;</strong> and all files and subdirectories under it, use the following command:<br><code>hdfs dfs -rm -r /hdfs/data/</code><br>Note that deleting a file or directory with this command is irreversible, so proceed with caution and make sure you are deleting the correct file or directory.</p>\n<hr>\n<ol>\n<li><p>Create a directory to store your photos in HDFS. You can create a directory with<br><code>hdfs dfs -mkdir /photos</code><br>This will create a directory called <strong>photos</strong> under the root directory.</p>\n</li>\n<li><p>Upload your photo to Hadoop. You can upload local files to HDFS with the following command:<br><code>hdfs dfs -put /local/path/to/photos/* /photos/</code><br>This will upload all photos under your local path <strong>&#x2F;local&#x2F;path&#x2F;to&#x2F;photos&#x2F;</strong> to <strong>&#x2F;photos&#x2F;</strong> directory.</p>\n</li>\n<li><p>Confirm that the photos have been successfully uploaded to Hadoop. You can use the following command to view your uploaded photos:<br><code>hdfs dfs -ls /photos/</code><br>This will list all files under the <strong>&#x2F;photos&#x2F;</strong> directory.</p>\n</li>\n</ol>\n<p>Now you have successfully uploaded photos to Hadoop. If you need to further process these photos, you can use distributed processing frameworks such as Hadoop MapReduce or Spark to process them.</p>\n<hr>\n<ol>\n<li><p>Create a new user<br><code>sudo adduser userNameHere</code><br>Where userNameHere is the username</p>\n</li>\n<li><p>The new user will be added to the <strong>&#x2F;etc&#x2F;passwd</strong> file, and the encrypted password will be stored in the <strong>&#x2F;etc&#x2F;shadow</strong> file</p>\n</li>\n<li><p>Switch user<br><code>su -userNameHere</code><br>Where userNameHere is the username you want to switch to.</p>\n</li>\n<li><p>Delete user<br><code>sudo deluser --remove-home userNameHere</code></p>\n</li>\n<li><p>Verify that a user has been deleted<br><code>id userNameHere</code><br>If the user does not exist, <code>No such user</code> will be displayed</p>\n</li>\n<li><p>Delete the error solution</p>\n</li>\n</ol>\n<ul>\n<li>Use the following command to find out the processes using this user: <code>sudo lsof -u test</code>.</li>\n<li>Check if the process can be killed, and if so, kill the process with: <code>sudo kill -9 &lt;PID&gt; (where &quot;&lt;PID&gt;&quot; is the PID of the process to be killed)</code></li>\n<li>The user can then be forcibly removed, including its home directory, with: <code>sudo deluser --remove-home test</code></li>\n</ul>\n","site":{"data":{}},"excerpt":"<ul>\n<li><a href=\"https://blog.devgenius.io/install-configure-and-setup-hadoop-in-ubuntu-a3cdd6305a0e\">Hadoop-3.3.1 Installation guide for Ubuntu</a></li></ul>","more":"\n<li><a href=\"https://hadoop.apache.org/docs/stable/hadoop-project-dist/hadoop-common/SingleCluster.html#Fully-Distributed_Operation\">Hadoop: Setting up a Single Node Cluster.</a></li>\n<li><a href=\"https://hadoop.apache.org/docs/stable/hadoop-project-dist/hadoop-common/ClusterSetup.html\">Hadoop Cluster Setup</a></li>\n\n<hr>\n<ol>\n<li>If you have installed Hadoop on your own Ubuntu system, then the default file system location of HDFS is <strong>&#x2F;usr&#x2F;local&#x2F;hadoop&#x2F;hdfs&#x2F;namenode</strong>. This is the default configuration of Hadoop, but you can change it in the <strong>hdfs-site.xml</strong> file. In this file, you can specify the NameNode’s data directory using the <code>dfs.namenode.name.dir</code> property.</li>\n</ol>\n<p>If you are unsure of the location of the HDFS file system, you can check the <strong>core-site.xml</strong> file in the Hadoop configuration file, which contains Hadoop’s core configuration information. You can use the following command to find the location of the <strong>core-site.xml</strong> file:<br><code>find / -name &quot;core-site.xml&quot; 2&gt; /dev/null</code></p>\n<p>This will search the entire filesystem for a file named <strong>core-site.xml</strong> and output the results to the console. Once you have located this file, you can open it and view the configuration information in it to determine the HDFS filesystem location.</p>\n<ol start=\"2\">\n<li>You can retrieve data from HDFS using the following command:<br><code>hdfs dfs -get &lt;source&gt; &lt;destination&gt;</code></li>\n</ol>\n<p>Among them, <strong><source></strong> is the source path in HDFS, and <strong><destination></destination></strong> is the destination path in the local system. This command will get the specified file or directory from HDFS and copy it to the target path in the local system.</p>\n<p>For example, if you want to retrieve and copy <strong>&#x2F;hdfs&#x2F;data&#x2F;file.txt</strong> from HDFS to <strong>&#x2F;local&#x2F;data&#x2F;</strong> directory on your local system, you can use the following command:<br><code>hdfs dfs -get /hdfs/data/file.txt /local/data/</code></p>\n<p>If you want to retrieve and copy an entire directory from HDFS to a target directory on your local system, you can use the following command:<br><code>hdfs dfs -get /hdfs/data/ /local/data/</code></p>\n<p>Note that this command will fail if a file or directory with the same name already exists in the target path. You can force overwrite existing files with the -f option:<br><code>hdfs dfs -get -f /hdfs/data/file.txt /local/data/</code><br>This will force overwrite the existing file in <strong>&#x2F;local&#x2F;data&#x2F;file.txt</strong>.</p>\n<ol start=\"3\">\n<li>You can delete a specified file or directory from Hadoop using the following command:<br><code>hdfs dfs -rm -r &lt;path&gt;</code><br>Among them, <strong><path></path></strong> is the path of the file or directory to be deleted in Hadoop. If you want to delete a single file, specify <strong><path></path></strong> as the full path to the file. If you want to delete a directory, specify <strong><path></path></strong> as the full path to the directory.</li>\n</ol>\n<p>For example, to delete <strong>&#x2F;hdfs&#x2F;data&#x2F;file.txt</strong> from Hadoop, you can use the following command:<br><code>hdfs dfs -rm /hdfs/data/file.txt</code></p>\n<p>If you want to delete the directory <strong>&#x2F;hdfs&#x2F;data&#x2F;</strong> and all files and subdirectories under it, use the following command:<br><code>hdfs dfs -rm -r /hdfs/data/</code><br>Note that deleting a file or directory with this command is irreversible, so proceed with caution and make sure you are deleting the correct file or directory.</p>\n<hr>\n<ol>\n<li><p>Create a directory to store your photos in HDFS. You can create a directory with<br><code>hdfs dfs -mkdir /photos</code><br>This will create a directory called <strong>photos</strong> under the root directory.</p>\n</li>\n<li><p>Upload your photo to Hadoop. You can upload local files to HDFS with the following command:<br><code>hdfs dfs -put /local/path/to/photos/* /photos/</code><br>This will upload all photos under your local path <strong>&#x2F;local&#x2F;path&#x2F;to&#x2F;photos&#x2F;</strong> to <strong>&#x2F;photos&#x2F;</strong> directory.</p>\n</li>\n<li><p>Confirm that the photos have been successfully uploaded to Hadoop. You can use the following command to view your uploaded photos:<br><code>hdfs dfs -ls /photos/</code><br>This will list all files under the <strong>&#x2F;photos&#x2F;</strong> directory.</p>\n</li>\n</ol>\n<p>Now you have successfully uploaded photos to Hadoop. If you need to further process these photos, you can use distributed processing frameworks such as Hadoop MapReduce or Spark to process them.</p>\n<hr>\n<ol>\n<li><p>Create a new user<br><code>sudo adduser userNameHere</code><br>Where userNameHere is the username</p>\n</li>\n<li><p>The new user will be added to the <strong>&#x2F;etc&#x2F;passwd</strong> file, and the encrypted password will be stored in the <strong>&#x2F;etc&#x2F;shadow</strong> file</p>\n</li>\n<li><p>Switch user<br><code>su -userNameHere</code><br>Where userNameHere is the username you want to switch to.</p>\n</li>\n<li><p>Delete user<br><code>sudo deluser --remove-home userNameHere</code></p>\n</li>\n<li><p>Verify that a user has been deleted<br><code>id userNameHere</code><br>If the user does not exist, <code>No such user</code> will be displayed</p>\n</li>\n<li><p>Delete the error solution</p>\n</li>\n</ol>\n<ul>\n<li>Use the following command to find out the processes using this user: <code>sudo lsof -u test</code>.</li>\n<li>Check if the process can be killed, and if so, kill the process with: <code>sudo kill -9 &lt;PID&gt; (where &quot;&lt;PID&gt;&quot; is the PID of the process to be killed)</code></li>\n<li>The user can then be forcibly removed, including its home directory, with: <code>sudo deluser --remove-home test</code></li>\n</ul>"},{"title":"Download the software and all its dependencies on Ubuntu","date":"2023-04-03T19:06:58.000Z","declare":true,"_content":"\n##### 1. Install apt-rdepends first\n`sudo apt install apt-rdepends`\n\n##### 2. Download all dependencies\n`apt download $(apt-rdepends openssh-server | grep -v \"^ \")`\n\n##### 3. If an error `E: Can't select candidate version from package debconf-2.0 as it has no candidate` is reported\n`apt download $(apt-rdepends openssh-server | grep -v \"^ \" | sed 's/debconf-2.0/debconf/g')`\nThis command will successfully download **openssh-server** and all required packages and save them in **/var/cache/apt/archives** directory.\n\n##### 4. Installtion\n`sudo dpkg -i openssh-server*.deb`\neven `sudo dpkg -i *`\n\n","source":"_posts/Download-the-software-and-all-its-dependencies-on-Ubuntu.md","raw":"---\ntitle: Download the software and all its dependencies on Ubuntu\ndate: 2023-04-03 19:06:58\ntags:\n    - Ubuntu\n    - dpkg\ndeclare: true\n---\n\n##### 1. Install apt-rdepends first\n`sudo apt install apt-rdepends`\n\n##### 2. Download all dependencies\n`apt download $(apt-rdepends openssh-server | grep -v \"^ \")`\n\n##### 3. If an error `E: Can't select candidate version from package debconf-2.0 as it has no candidate` is reported\n`apt download $(apt-rdepends openssh-server | grep -v \"^ \" | sed 's/debconf-2.0/debconf/g')`\nThis command will successfully download **openssh-server** and all required packages and save them in **/var/cache/apt/archives** directory.\n\n##### 4. Installtion\n`sudo dpkg -i openssh-server*.deb`\neven `sudo dpkg -i *`\n\n","slug":"Download-the-software-and-all-its-dependencies-on-Ubuntu","published":1,"updated":"2024-04-25T17:26:48.223Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvjbaqh4000g0vn158iibvun","content":"<h5 id=\"1-Install-apt-rdepends-first\"><a href=\"#1-Install-apt-rdepends-first\" class=\"headerlink\" title=\"1. Install apt-rdepends first\"></a>1. Install apt-rdepends first</h5><p><code>sudo apt install apt-rdepends</code></p>\n<h5 id=\"2-Download-all-dependencies\"><a href=\"#2-Download-all-dependencies\" class=\"headerlink\" title=\"2. Download all dependencies\"></a>2. Download all dependencies</h5><p><code>apt download $(apt-rdepends openssh-server | grep -v &quot;^ &quot;)</code></p>\n<h5 id=\"3-If-an-error-E-Can-39-t-select-candidate-version-from-package-debconf-2-0-as-it-has-no-candidate-is-reported\"><a href=\"#3-If-an-error-E-Can-39-t-select-candidate-version-from-package-debconf-2-0-as-it-has-no-candidate-is-reported\" class=\"headerlink\" title=\"3. If an error E: Can&#39;t select candidate version from package debconf-2.0 as it has no candidate is reported\"></a>3. If an error <code>E: Can&#39;t select candidate version from package debconf-2.0 as it has no candidate</code> is reported</h5><p><code>apt download $(apt-rdepends openssh-server | grep -v &quot;^ &quot; | sed &#39;s/debconf-2.0/debconf/g&#39;)</code><br>This command will successfully download <strong>openssh-server</strong> and all required packages and save them in <strong>&#x2F;var&#x2F;cache&#x2F;apt&#x2F;archives</strong> directory.</p>\n<h5 id=\"4-Installtion\"><a href=\"#4-Installtion\" class=\"headerlink\" title=\"4. Installtion\"></a>4. Installtion</h5><p><code>sudo dpkg -i openssh-server*.deb</code><br>even <code>sudo dpkg -i *</code></p>\n","site":{"data":{}},"excerpt":"","more":"<h5 id=\"1-Install-apt-rdepends-first\"><a href=\"#1-Install-apt-rdepends-first\" class=\"headerlink\" title=\"1. Install apt-rdepends first\"></a>1. Install apt-rdepends first</h5><p><code>sudo apt install apt-rdepends</code></p>\n<h5 id=\"2-Download-all-dependencies\"><a href=\"#2-Download-all-dependencies\" class=\"headerlink\" title=\"2. Download all dependencies\"></a>2. Download all dependencies</h5><p><code>apt download $(apt-rdepends openssh-server | grep -v &quot;^ &quot;)</code></p>\n<h5 id=\"3-If-an-error-E-Can-39-t-select-candidate-version-from-package-debconf-2-0-as-it-has-no-candidate-is-reported\"><a href=\"#3-If-an-error-E-Can-39-t-select-candidate-version-from-package-debconf-2-0-as-it-has-no-candidate-is-reported\" class=\"headerlink\" title=\"3. If an error E: Can&#39;t select candidate version from package debconf-2.0 as it has no candidate is reported\"></a>3. If an error <code>E: Can&#39;t select candidate version from package debconf-2.0 as it has no candidate</code> is reported</h5><p><code>apt download $(apt-rdepends openssh-server | grep -v &quot;^ &quot; | sed &#39;s/debconf-2.0/debconf/g&#39;)</code><br>This command will successfully download <strong>openssh-server</strong> and all required packages and save them in <strong>&#x2F;var&#x2F;cache&#x2F;apt&#x2F;archives</strong> directory.</p>\n<h5 id=\"4-Installtion\"><a href=\"#4-Installtion\" class=\"headerlink\" title=\"4. Installtion\"></a>4. Installtion</h5><p><code>sudo dpkg -i openssh-server*.deb</code><br>even <code>sudo dpkg -i *</code></p>\n"},{"title":"Fun Linux commands","date":"2023-04-03T20:26:57.000Z","_content":"[娱乐 | 14个简单、有趣、好玩的Linux命令](https://cloud.tencent.com/developer/article/1780619)","source":"_posts/Fun-Linux-commands.md","raw":"---\ntitle: Fun Linux commands\ndate: 2023-04-03 20:26:57\ntags:\n    - Linux\n---\n[娱乐 | 14个简单、有趣、好玩的Linux命令](https://cloud.tencent.com/developer/article/1780619)","slug":"Fun-Linux-commands","published":1,"updated":"2024-04-25T17:26:50.743Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvjbaqh6000i0vn1byit80sf","content":"<p><a href=\"https://cloud.tencent.com/developer/article/1780619\">娱乐 | 14个简单、有趣、好玩的Linux命令</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://cloud.tencent.com/developer/article/1780619\">娱乐 | 14个简单、有趣、好玩的Linux命令</a></p>\n"},{"title":"How do I use clash proxy wsl in windows?","date":"2023-04-05T19:42:16.000Z","toc":1,"declare":true,"_content":"### 修改允许应用或功能通过 Windows Defender防火墙\n\n`Control Panel > System and Security > Windows Defender Firewall > Allow an app or feature through Windows Defender Firewall. `\n<!--more-->\n1. 找是否有clash-win64.exe的规则配置，注意不是 Clash For Windows ，CFW本身只是clash的一个前端，在启动CFW的时候有概率防火墙只添加CFW本身，而不添加作为核心的clash的防火墙规则，这个时候则需要我们手动修改。\n2. 如果已经有了clash-win64.exe的规则，则只需要配置专有和公共网络同时允许即可。\n3. 如果没有clash-win64.exe的规则，可以通过下方的允许其他应用手动添加规则，具体clash核心文件的路径可以通过任务管理器后台或 **Clash for Windows\\resources\\static\\files\\win\\x64\\clash-win64.exe** 类似的路径查询到。添加规则的时候同时允许专用和公共即可。\n\n### 在wsl中配置代理（方案一）\n将下面几行脚本加入你的bashrc或者zshrc：\n\n```bash\n# proxy\nexport HOSTIP=$(cat /etc/resolv.conf | grep \"nameserver\" | cut -f 2 -d \" \")\nexport http_proxy=\"http://$HOSTIP:7890\"\nexport https_proxy=\"http://$HOSTIP:7890\"\nexport all_proxy=\"socks5://$HOSTIP:7890\"\nexport ALL_PROXY=\"socks5://$HOSTIP:7890\"\n```\n\n### 在wsl中配置代理（方案二）\n将下面几行脚本加入你的bashrc或者zshrc：\n\n```bash\n# proxy\nproxy () {\n  export HOSTIP=$(cat /etc/resolv.conf | grep \"nameserver\" | cut -f 2 -d \" \")\n  export http_proxy=\"http://$HOSTIP:7890\"\n  export https_proxy=\"http://$HOSTIP:7890\"\n  export ALL_PROXY=\"http://$HOSTIP:7890\"\n  #export all_proxy=\"socks5://$HOSTIP:7890\"\n  #export ALL_PROXY=\"socks5://$HOSTIP:7890\"\n  #export ALL_PROXY=\"http://$host_ip:7890\"\n  echo \"HTTP Proxy on\"\n}\n# no proxy\nunproxy () {\n  unset http_proxy \n  unset https_proxy\n  #unset all_proxy\n  unset ALL_PROXY\n  echo \"HTTP Proxy off\"\n}\n```\n\n### 镜像网络（方案三）\n```.wslconfig\n# Settings apply across all Linux distros running on WSL 2\n[wsl2]\n\n# vmIdleTimeout = -1\n# autoMemoryReclaim = gradual\n\nnetworkingMode = bridged\n\nvmSwitch = \"Hyper Switch\"\n\n# networkingMode = mirrored\n# dnsTunneling = true\n# autoProxy = true\n```\n\n参见 [WSL 中的高级设置配置](https://learn.microsoft.com/zh-cn/windows/wsl/wsl-config#wslconfig)\n\n\n### Reference\n\n[WSL配置Proxy代理引导](https://halc.top/p/6088c65c)\n\n[What's the difference between `hostip` and `windows ip` when set WSL2 proxy by Clash `Allow LAN`?](https://superuser.com/questions/1742501/whats-the-difference-between-hostip-and-windows-ip-when-set-wsl2-proxy-by-c)\n\n[Use proxy in WSL2🚀](https://gist.github.com/aucker/d0fce5477e02cdd7fa76c1c81a87a610)","source":"_posts/How-do-I-use-clash-proxy-wsl-in-windows.md","raw":"---\ntitle: How do I use clash proxy wsl in windows?\ndate: 2023-04-05 19:42:16\ntags:\n  - clash\n  - wsl\n  - 科学上网\ntoc: 1\ndeclare: true\n---\n### 修改允许应用或功能通过 Windows Defender防火墙\n\n`Control Panel > System and Security > Windows Defender Firewall > Allow an app or feature through Windows Defender Firewall. `\n<!--more-->\n1. 找是否有clash-win64.exe的规则配置，注意不是 Clash For Windows ，CFW本身只是clash的一个前端，在启动CFW的时候有概率防火墙只添加CFW本身，而不添加作为核心的clash的防火墙规则，这个时候则需要我们手动修改。\n2. 如果已经有了clash-win64.exe的规则，则只需要配置专有和公共网络同时允许即可。\n3. 如果没有clash-win64.exe的规则，可以通过下方的允许其他应用手动添加规则，具体clash核心文件的路径可以通过任务管理器后台或 **Clash for Windows\\resources\\static\\files\\win\\x64\\clash-win64.exe** 类似的路径查询到。添加规则的时候同时允许专用和公共即可。\n\n### 在wsl中配置代理（方案一）\n将下面几行脚本加入你的bashrc或者zshrc：\n\n```bash\n# proxy\nexport HOSTIP=$(cat /etc/resolv.conf | grep \"nameserver\" | cut -f 2 -d \" \")\nexport http_proxy=\"http://$HOSTIP:7890\"\nexport https_proxy=\"http://$HOSTIP:7890\"\nexport all_proxy=\"socks5://$HOSTIP:7890\"\nexport ALL_PROXY=\"socks5://$HOSTIP:7890\"\n```\n\n### 在wsl中配置代理（方案二）\n将下面几行脚本加入你的bashrc或者zshrc：\n\n```bash\n# proxy\nproxy () {\n  export HOSTIP=$(cat /etc/resolv.conf | grep \"nameserver\" | cut -f 2 -d \" \")\n  export http_proxy=\"http://$HOSTIP:7890\"\n  export https_proxy=\"http://$HOSTIP:7890\"\n  export ALL_PROXY=\"http://$HOSTIP:7890\"\n  #export all_proxy=\"socks5://$HOSTIP:7890\"\n  #export ALL_PROXY=\"socks5://$HOSTIP:7890\"\n  #export ALL_PROXY=\"http://$host_ip:7890\"\n  echo \"HTTP Proxy on\"\n}\n# no proxy\nunproxy () {\n  unset http_proxy \n  unset https_proxy\n  #unset all_proxy\n  unset ALL_PROXY\n  echo \"HTTP Proxy off\"\n}\n```\n\n### 镜像网络（方案三）\n```.wslconfig\n# Settings apply across all Linux distros running on WSL 2\n[wsl2]\n\n# vmIdleTimeout = -1\n# autoMemoryReclaim = gradual\n\nnetworkingMode = bridged\n\nvmSwitch = \"Hyper Switch\"\n\n# networkingMode = mirrored\n# dnsTunneling = true\n# autoProxy = true\n```\n\n参见 [WSL 中的高级设置配置](https://learn.microsoft.com/zh-cn/windows/wsl/wsl-config#wslconfig)\n\n\n### Reference\n\n[WSL配置Proxy代理引导](https://halc.top/p/6088c65c)\n\n[What's the difference between `hostip` and `windows ip` when set WSL2 proxy by Clash `Allow LAN`?](https://superuser.com/questions/1742501/whats-the-difference-between-hostip-and-windows-ip-when-set-wsl2-proxy-by-c)\n\n[Use proxy in WSL2🚀](https://gist.github.com/aucker/d0fce5477e02cdd7fa76c1c81a87a610)","slug":"How-do-I-use-clash-proxy-wsl-in-windows","published":1,"updated":"2024-04-25T17:26:50.723Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvjbaqh7000k0vn1136y44m8","content":"<h3 id=\"修改允许应用或功能通过-Windows-Defender防火墙\"><a href=\"#修改允许应用或功能通过-Windows-Defender防火墙\" class=\"headerlink\" title=\"修改允许应用或功能通过 Windows Defender防火墙\"></a>修改允许应用或功能通过 Windows Defender防火墙</h3><p><code>Control Panel &gt; System and Security &gt; Windows Defender Firewall &gt; Allow an app or feature through Windows Defender Firewall. </code></p>\n<span id=\"more\"></span>\n<ol>\n<li>找是否有clash-win64.exe的规则配置，注意不是 Clash For Windows ，CFW本身只是clash的一个前端，在启动CFW的时候有概率防火墙只添加CFW本身，而不添加作为核心的clash的防火墙规则，这个时候则需要我们手动修改。</li>\n<li>如果已经有了clash-win64.exe的规则，则只需要配置专有和公共网络同时允许即可。</li>\n<li>如果没有clash-win64.exe的规则，可以通过下方的允许其他应用手动添加规则，具体clash核心文件的路径可以通过任务管理器后台或 <strong>Clash for Windows\\resources\\static\\files\\win\\x64\\clash-win64.exe</strong> 类似的路径查询到。添加规则的时候同时允许专用和公共即可。</li>\n</ol>\n<h3 id=\"在wsl中配置代理（方案一）\"><a href=\"#在wsl中配置代理（方案一）\" class=\"headerlink\" title=\"在wsl中配置代理（方案一）\"></a>在wsl中配置代理（方案一）</h3><p>将下面几行脚本加入你的bashrc或者zshrc：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># proxy</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> HOSTIP=$(<span class=\"built_in\">cat</span> /etc/resolv.conf | grep <span class=\"string\">&quot;nameserver&quot;</span> | <span class=\"built_in\">cut</span> -f 2 -d <span class=\"string\">&quot; &quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">export</span> http_proxy=<span class=\"string\">&quot;http://<span class=\"variable\">$HOSTIP</span>:7890&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> https_proxy=<span class=\"string\">&quot;http://<span class=\"variable\">$HOSTIP</span>:7890&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> all_proxy=<span class=\"string\">&quot;socks5://<span class=\"variable\">$HOSTIP</span>:7890&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> ALL_PROXY=<span class=\"string\">&quot;socks5://<span class=\"variable\">$HOSTIP</span>:7890&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"在wsl中配置代理（方案二）\"><a href=\"#在wsl中配置代理（方案二）\" class=\"headerlink\" title=\"在wsl中配置代理（方案二）\"></a>在wsl中配置代理（方案二）</h3><p>将下面几行脚本加入你的bashrc或者zshrc：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># proxy</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">proxy</span></span> () &#123;</span><br><span class=\"line\">  <span class=\"built_in\">export</span> HOSTIP=$(<span class=\"built_in\">cat</span> /etc/resolv.conf | grep <span class=\"string\">&quot;nameserver&quot;</span> | <span class=\"built_in\">cut</span> -f 2 -d <span class=\"string\">&quot; &quot;</span>)</span><br><span class=\"line\">  <span class=\"built_in\">export</span> http_proxy=<span class=\"string\">&quot;http://<span class=\"variable\">$HOSTIP</span>:7890&quot;</span></span><br><span class=\"line\">  <span class=\"built_in\">export</span> https_proxy=<span class=\"string\">&quot;http://<span class=\"variable\">$HOSTIP</span>:7890&quot;</span></span><br><span class=\"line\">  <span class=\"built_in\">export</span> ALL_PROXY=<span class=\"string\">&quot;http://<span class=\"variable\">$HOSTIP</span>:7890&quot;</span></span><br><span class=\"line\">  <span class=\"comment\">#export all_proxy=&quot;socks5://$HOSTIP:7890&quot;</span></span><br><span class=\"line\">  <span class=\"comment\">#export ALL_PROXY=&quot;socks5://$HOSTIP:7890&quot;</span></span><br><span class=\"line\">  <span class=\"comment\">#export ALL_PROXY=&quot;http://$host_ip:7890&quot;</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">&quot;HTTP Proxy on&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\"># no proxy</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">unproxy</span></span> () &#123;</span><br><span class=\"line\">  <span class=\"built_in\">unset</span> http_proxy </span><br><span class=\"line\">  <span class=\"built_in\">unset</span> https_proxy</span><br><span class=\"line\">  <span class=\"comment\">#unset all_proxy</span></span><br><span class=\"line\">  <span class=\"built_in\">unset</span> ALL_PROXY</span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">&quot;HTTP Proxy off&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"镜像网络（方案三）\"><a href=\"#镜像网络（方案三）\" class=\"headerlink\" title=\"镜像网络（方案三）\"></a>镜像网络（方案三）</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Settings apply across all Linux distros running on WSL 2</span><br><span class=\"line\">[wsl2]</span><br><span class=\"line\"></span><br><span class=\"line\"># vmIdleTimeout = -1</span><br><span class=\"line\"># autoMemoryReclaim = gradual</span><br><span class=\"line\"></span><br><span class=\"line\">networkingMode = bridged</span><br><span class=\"line\"></span><br><span class=\"line\">vmSwitch = &quot;Hyper Switch&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># networkingMode = mirrored</span><br><span class=\"line\"># dnsTunneling = true</span><br><span class=\"line\"># autoProxy = true</span><br></pre></td></tr></table></figure>\n\n<p>参见 <a href=\"https://learn.microsoft.com/zh-cn/windows/wsl/wsl-config#wslconfig\">WSL 中的高级设置配置</a></p>\n<h3 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h3><p><a href=\"https://halc.top/p/6088c65c\">WSL配置Proxy代理引导</a></p>\n<p><a href=\"https://superuser.com/questions/1742501/whats-the-difference-between-hostip-and-windows-ip-when-set-wsl2-proxy-by-c\">What’s the difference between <code>hostip</code> and <code>windows ip</code> when set WSL2 proxy by Clash <code>Allow LAN</code>?</a></p>\n<p><a href=\"https://gist.github.com/aucker/d0fce5477e02cdd7fa76c1c81a87a610\">Use proxy in WSL2🚀</a></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"修改允许应用或功能通过-Windows-Defender防火墙\"><a href=\"#修改允许应用或功能通过-Windows-Defender防火墙\" class=\"headerlink\" title=\"修改允许应用或功能通过 Windows Defender防火墙\"></a>修改允许应用或功能通过 Windows Defender防火墙</h3><p><code>Control Panel &gt; System and Security &gt; Windows Defender Firewall &gt; Allow an app or feature through Windows Defender Firewall. </code></p>","more":"<ol>\n<li>找是否有clash-win64.exe的规则配置，注意不是 Clash For Windows ，CFW本身只是clash的一个前端，在启动CFW的时候有概率防火墙只添加CFW本身，而不添加作为核心的clash的防火墙规则，这个时候则需要我们手动修改。</li>\n<li>如果已经有了clash-win64.exe的规则，则只需要配置专有和公共网络同时允许即可。</li>\n<li>如果没有clash-win64.exe的规则，可以通过下方的允许其他应用手动添加规则，具体clash核心文件的路径可以通过任务管理器后台或 <strong>Clash for Windows\\resources\\static\\files\\win\\x64\\clash-win64.exe</strong> 类似的路径查询到。添加规则的时候同时允许专用和公共即可。</li>\n</ol>\n<h3 id=\"在wsl中配置代理（方案一）\"><a href=\"#在wsl中配置代理（方案一）\" class=\"headerlink\" title=\"在wsl中配置代理（方案一）\"></a>在wsl中配置代理（方案一）</h3><p>将下面几行脚本加入你的bashrc或者zshrc：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># proxy</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> HOSTIP=$(<span class=\"built_in\">cat</span> /etc/resolv.conf | grep <span class=\"string\">&quot;nameserver&quot;</span> | <span class=\"built_in\">cut</span> -f 2 -d <span class=\"string\">&quot; &quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">export</span> http_proxy=<span class=\"string\">&quot;http://<span class=\"variable\">$HOSTIP</span>:7890&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> https_proxy=<span class=\"string\">&quot;http://<span class=\"variable\">$HOSTIP</span>:7890&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> all_proxy=<span class=\"string\">&quot;socks5://<span class=\"variable\">$HOSTIP</span>:7890&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> ALL_PROXY=<span class=\"string\">&quot;socks5://<span class=\"variable\">$HOSTIP</span>:7890&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"在wsl中配置代理（方案二）\"><a href=\"#在wsl中配置代理（方案二）\" class=\"headerlink\" title=\"在wsl中配置代理（方案二）\"></a>在wsl中配置代理（方案二）</h3><p>将下面几行脚本加入你的bashrc或者zshrc：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># proxy</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">proxy</span></span> () &#123;</span><br><span class=\"line\">  <span class=\"built_in\">export</span> HOSTIP=$(<span class=\"built_in\">cat</span> /etc/resolv.conf | grep <span class=\"string\">&quot;nameserver&quot;</span> | <span class=\"built_in\">cut</span> -f 2 -d <span class=\"string\">&quot; &quot;</span>)</span><br><span class=\"line\">  <span class=\"built_in\">export</span> http_proxy=<span class=\"string\">&quot;http://<span class=\"variable\">$HOSTIP</span>:7890&quot;</span></span><br><span class=\"line\">  <span class=\"built_in\">export</span> https_proxy=<span class=\"string\">&quot;http://<span class=\"variable\">$HOSTIP</span>:7890&quot;</span></span><br><span class=\"line\">  <span class=\"built_in\">export</span> ALL_PROXY=<span class=\"string\">&quot;http://<span class=\"variable\">$HOSTIP</span>:7890&quot;</span></span><br><span class=\"line\">  <span class=\"comment\">#export all_proxy=&quot;socks5://$HOSTIP:7890&quot;</span></span><br><span class=\"line\">  <span class=\"comment\">#export ALL_PROXY=&quot;socks5://$HOSTIP:7890&quot;</span></span><br><span class=\"line\">  <span class=\"comment\">#export ALL_PROXY=&quot;http://$host_ip:7890&quot;</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">&quot;HTTP Proxy on&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\"># no proxy</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">unproxy</span></span> () &#123;</span><br><span class=\"line\">  <span class=\"built_in\">unset</span> http_proxy </span><br><span class=\"line\">  <span class=\"built_in\">unset</span> https_proxy</span><br><span class=\"line\">  <span class=\"comment\">#unset all_proxy</span></span><br><span class=\"line\">  <span class=\"built_in\">unset</span> ALL_PROXY</span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">&quot;HTTP Proxy off&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"镜像网络（方案三）\"><a href=\"#镜像网络（方案三）\" class=\"headerlink\" title=\"镜像网络（方案三）\"></a>镜像网络（方案三）</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Settings apply across all Linux distros running on WSL 2</span><br><span class=\"line\">[wsl2]</span><br><span class=\"line\"></span><br><span class=\"line\"># vmIdleTimeout = -1</span><br><span class=\"line\"># autoMemoryReclaim = gradual</span><br><span class=\"line\"></span><br><span class=\"line\">networkingMode = bridged</span><br><span class=\"line\"></span><br><span class=\"line\">vmSwitch = &quot;Hyper Switch&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># networkingMode = mirrored</span><br><span class=\"line\"># dnsTunneling = true</span><br><span class=\"line\"># autoProxy = true</span><br></pre></td></tr></table></figure>\n\n<p>参见 <a href=\"https://learn.microsoft.com/zh-cn/windows/wsl/wsl-config#wslconfig\">WSL 中的高级设置配置</a></p>\n<h3 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h3><p><a href=\"https://halc.top/p/6088c65c\">WSL配置Proxy代理引导</a></p>\n<p><a href=\"https://superuser.com/questions/1742501/whats-the-difference-between-hostip-and-windows-ip-when-set-wsl2-proxy-by-c\">What’s the difference between <code>hostip</code> and <code>windows ip</code> when set WSL2 proxy by Clash <code>Allow LAN</code>?</a></p>\n<p><a href=\"https://gist.github.com/aucker/d0fce5477e02cdd7fa76c1c81a87a610\">Use proxy in WSL2🚀</a></p>"},{"title":"How markdown underlines and shading text","date":"2021-06-06T13:13:01.000Z","declare":true,"toc":1,"_content":"### 1. 添加下划线\n利用`<u>我有下划线</u>`即可，效果：<u>我有下划线</u>.\n\n### 2. 添加底纹\n如果是在Typora中，直接在内容的两侧各加两个等号即可。然而这种方法在hexo博客当中失效了。<!--more-->\n然而Markdown是支持HTML语法的，所以我们可以用HTML来使页面内容更加完美丰富。\n- 字体颜色\n在markdown中采用如下方式能够控制文字的颜色：\n```html\n浅红色文字：<font color=\"#dd0000\">浅红色文字</font><br /> \n\n深红色文字：<font color=\"#660000\">深红色文字</font><br /> \n\n浅绿色文字：<font color=\"#00dd00\">浅绿色文字</font><br /> \n\n深绿色文字：<font color=\"#006600\">深绿色文字</font><br /> \n\n浅蓝色文字：<font color=\"#0000dd\">浅蓝色文字</font><br /> \n\n深蓝色文字：<font color=\"#000066\">深蓝色文字</font><br /> \n\n浅黄色文字：<font color=\"#dddd00\">浅黄色文字</font><br /> \n\n深黄色文字：<font color=\"#666600\">深黄色文字</font><br /> \n\n浅青色文字：<font color=\"#00dddd\">浅青色文字</font><br /> \n\n深青色文字：<font color=\"#006666\">深青色文字</font><br /> \n\n浅紫色文字：<font color=\"#dd00dd\">浅紫色文字</font><br /> \n\n深紫色文字：<font color=\"#660066\">深紫色文字</font><br /> \n```\n效果如下\n浅红色文字：<font color=\"#dd0000\">浅红色文字</font><br /> \n\n深红色文字：<font color=\"#660000\">深红色文字</font><br /> \n\n浅绿色文字：<font color=\"#00dd00\">浅绿色文字</font><br /> \n\n深绿色文字：<font color=\"#006600\">深绿色文字</font><br /> \n\n浅蓝色文字：<font color=\"#0000dd\">浅蓝色文字</font><br /> \n\n深蓝色文字：<font color=\"#000066\">深蓝色文字</font><br /> \n\n浅黄色文字：<font color=\"#dddd00\">浅黄色文字</font><br /> \n\n深黄色文字：<font color=\"#666600\">深黄色文字</font><br /> \n\n浅青色文字：<font color=\"#00dddd\">浅青色文字</font><br /> \n\n深青色文字：<font color=\"#006666\">深青色文字</font><br /> \n\n浅紫色文字：<font color=\"#dd00dd\">浅紫色文字</font><br /> \n\n深紫色文字：<font color=\"#660066\">深紫色文字</font><br /> \n\n- 字体大小\n```html\nsize为1：<font size=\"1\">size为1</font><br /> \nsize为2：<font size=\"2\">size为2</font><br /> \nsize为3：<font size=\"3\">size为3</font><br /> \n```\n效果如下\nsize为1：<font size=\"1\">size为1</font><br /> \nsize为2：<font size=\"2\">size为2</font><br /> \nsize为3：<font size=\"3\">size为3</font><br /> \n\n- 背景色\n```html\n<table><tr><td bgcolor=#FF00FF>背景色的设置是按照十六进制颜色值：#7FFFD4</td></tr></table>\n<table><tr><td bgcolor=#FF83FA>背景色的设置是按照十六进制颜色值：#FF83FA</td></tr></table>\n<table><tr><td bgcolor=#D1EEEE>背景色的设置是按照十六进制颜色值：#D1EEEE</td></tr></table>\n<table><tr><td bgcolor=#C0FF3E>背景色的设置是按照十六进制颜色值：#C0FF3E</td></tr></table>\n```\n效果如下\n<table><tr><td bgcolor=#FF00FF>背景色的设置是按照十六进制颜色值：#7FFFD4</td></tr></table>\n<table><tr><td bgcolor=#FF83FA>背景色的设置是按照十六进制颜色值：#FF83FA</td></tr></table>\n<table><tr><td bgcolor=#D1EEEE>背景色的设置是按照十六进制颜色值：#D1EEEE</td></tr></table>\n<table><tr><td bgcolor=#C0FF3E>背景色的设置是按照十六进制颜色值：#C0FF3E</td></tr></table>","source":"_posts/How-markdown-underlines-and-shading-text.md","raw":"---\ntitle: How markdown underlines and shading text\ndate: 2021-06-06 13:13:01\ntags:\n    - markdown\ndeclare: true\ntoc: 1\n---\n### 1. 添加下划线\n利用`<u>我有下划线</u>`即可，效果：<u>我有下划线</u>.\n\n### 2. 添加底纹\n如果是在Typora中，直接在内容的两侧各加两个等号即可。然而这种方法在hexo博客当中失效了。<!--more-->\n然而Markdown是支持HTML语法的，所以我们可以用HTML来使页面内容更加完美丰富。\n- 字体颜色\n在markdown中采用如下方式能够控制文字的颜色：\n```html\n浅红色文字：<font color=\"#dd0000\">浅红色文字</font><br /> \n\n深红色文字：<font color=\"#660000\">深红色文字</font><br /> \n\n浅绿色文字：<font color=\"#00dd00\">浅绿色文字</font><br /> \n\n深绿色文字：<font color=\"#006600\">深绿色文字</font><br /> \n\n浅蓝色文字：<font color=\"#0000dd\">浅蓝色文字</font><br /> \n\n深蓝色文字：<font color=\"#000066\">深蓝色文字</font><br /> \n\n浅黄色文字：<font color=\"#dddd00\">浅黄色文字</font><br /> \n\n深黄色文字：<font color=\"#666600\">深黄色文字</font><br /> \n\n浅青色文字：<font color=\"#00dddd\">浅青色文字</font><br /> \n\n深青色文字：<font color=\"#006666\">深青色文字</font><br /> \n\n浅紫色文字：<font color=\"#dd00dd\">浅紫色文字</font><br /> \n\n深紫色文字：<font color=\"#660066\">深紫色文字</font><br /> \n```\n效果如下\n浅红色文字：<font color=\"#dd0000\">浅红色文字</font><br /> \n\n深红色文字：<font color=\"#660000\">深红色文字</font><br /> \n\n浅绿色文字：<font color=\"#00dd00\">浅绿色文字</font><br /> \n\n深绿色文字：<font color=\"#006600\">深绿色文字</font><br /> \n\n浅蓝色文字：<font color=\"#0000dd\">浅蓝色文字</font><br /> \n\n深蓝色文字：<font color=\"#000066\">深蓝色文字</font><br /> \n\n浅黄色文字：<font color=\"#dddd00\">浅黄色文字</font><br /> \n\n深黄色文字：<font color=\"#666600\">深黄色文字</font><br /> \n\n浅青色文字：<font color=\"#00dddd\">浅青色文字</font><br /> \n\n深青色文字：<font color=\"#006666\">深青色文字</font><br /> \n\n浅紫色文字：<font color=\"#dd00dd\">浅紫色文字</font><br /> \n\n深紫色文字：<font color=\"#660066\">深紫色文字</font><br /> \n\n- 字体大小\n```html\nsize为1：<font size=\"1\">size为1</font><br /> \nsize为2：<font size=\"2\">size为2</font><br /> \nsize为3：<font size=\"3\">size为3</font><br /> \n```\n效果如下\nsize为1：<font size=\"1\">size为1</font><br /> \nsize为2：<font size=\"2\">size为2</font><br /> \nsize为3：<font size=\"3\">size为3</font><br /> \n\n- 背景色\n```html\n<table><tr><td bgcolor=#FF00FF>背景色的设置是按照十六进制颜色值：#7FFFD4</td></tr></table>\n<table><tr><td bgcolor=#FF83FA>背景色的设置是按照十六进制颜色值：#FF83FA</td></tr></table>\n<table><tr><td bgcolor=#D1EEEE>背景色的设置是按照十六进制颜色值：#D1EEEE</td></tr></table>\n<table><tr><td bgcolor=#C0FF3E>背景色的设置是按照十六进制颜色值：#C0FF3E</td></tr></table>\n```\n效果如下\n<table><tr><td bgcolor=#FF00FF>背景色的设置是按照十六进制颜色值：#7FFFD4</td></tr></table>\n<table><tr><td bgcolor=#FF83FA>背景色的设置是按照十六进制颜色值：#FF83FA</td></tr></table>\n<table><tr><td bgcolor=#D1EEEE>背景色的设置是按照十六进制颜色值：#D1EEEE</td></tr></table>\n<table><tr><td bgcolor=#C0FF3E>背景色的设置是按照十六进制颜色值：#C0FF3E</td></tr></table>","slug":"How-markdown-underlines-and-shading-text","published":1,"updated":"2024-04-25T17:26:48.483Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvjbaqh8000m0vn1a3use5u5","content":"<h3 id=\"1-添加下划线\"><a href=\"#1-添加下划线\" class=\"headerlink\" title=\"1. 添加下划线\"></a>1. 添加下划线</h3><p>利用<code>&lt;u&gt;我有下划线&lt;/u&gt;</code>即可，效果：<u>我有下划线</u>.</p>\n<h3 id=\"2-添加底纹\"><a href=\"#2-添加底纹\" class=\"headerlink\" title=\"2. 添加底纹\"></a>2. 添加底纹</h3><p>如果是在Typora中，直接在内容的两侧各加两个等号即可。然而这种方法在hexo博客当中失效了。<span id=\"more\"></span><br>然而Markdown是支持HTML语法的，所以我们可以用HTML来使页面内容更加完美丰富。</p>\n<ul>\n<li>字体颜色<br>在markdown中采用如下方式能够控制文字的颜色：<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">浅红色文字：<span class=\"tag\">&lt;<span class=\"name\">font</span> <span class=\"attr\">color</span>=<span class=\"string\">&quot;#dd0000&quot;</span>&gt;</span>浅红色文字<span class=\"tag\">&lt;/<span class=\"name\">font</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span> </span><br><span class=\"line\"></span><br><span class=\"line\">深红色文字：<span class=\"tag\">&lt;<span class=\"name\">font</span> <span class=\"attr\">color</span>=<span class=\"string\">&quot;#660000&quot;</span>&gt;</span>深红色文字<span class=\"tag\">&lt;/<span class=\"name\">font</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span> </span><br><span class=\"line\"></span><br><span class=\"line\">浅绿色文字：<span class=\"tag\">&lt;<span class=\"name\">font</span> <span class=\"attr\">color</span>=<span class=\"string\">&quot;#00dd00&quot;</span>&gt;</span>浅绿色文字<span class=\"tag\">&lt;/<span class=\"name\">font</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span> </span><br><span class=\"line\"></span><br><span class=\"line\">深绿色文字：<span class=\"tag\">&lt;<span class=\"name\">font</span> <span class=\"attr\">color</span>=<span class=\"string\">&quot;#006600&quot;</span>&gt;</span>深绿色文字<span class=\"tag\">&lt;/<span class=\"name\">font</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span> </span><br><span class=\"line\"></span><br><span class=\"line\">浅蓝色文字：<span class=\"tag\">&lt;<span class=\"name\">font</span> <span class=\"attr\">color</span>=<span class=\"string\">&quot;#0000dd&quot;</span>&gt;</span>浅蓝色文字<span class=\"tag\">&lt;/<span class=\"name\">font</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span> </span><br><span class=\"line\"></span><br><span class=\"line\">深蓝色文字：<span class=\"tag\">&lt;<span class=\"name\">font</span> <span class=\"attr\">color</span>=<span class=\"string\">&quot;#000066&quot;</span>&gt;</span>深蓝色文字<span class=\"tag\">&lt;/<span class=\"name\">font</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span> </span><br><span class=\"line\"></span><br><span class=\"line\">浅黄色文字：<span class=\"tag\">&lt;<span class=\"name\">font</span> <span class=\"attr\">color</span>=<span class=\"string\">&quot;#dddd00&quot;</span>&gt;</span>浅黄色文字<span class=\"tag\">&lt;/<span class=\"name\">font</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span> </span><br><span class=\"line\"></span><br><span class=\"line\">深黄色文字：<span class=\"tag\">&lt;<span class=\"name\">font</span> <span class=\"attr\">color</span>=<span class=\"string\">&quot;#666600&quot;</span>&gt;</span>深黄色文字<span class=\"tag\">&lt;/<span class=\"name\">font</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span> </span><br><span class=\"line\"></span><br><span class=\"line\">浅青色文字：<span class=\"tag\">&lt;<span class=\"name\">font</span> <span class=\"attr\">color</span>=<span class=\"string\">&quot;#00dddd&quot;</span>&gt;</span>浅青色文字<span class=\"tag\">&lt;/<span class=\"name\">font</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span> </span><br><span class=\"line\"></span><br><span class=\"line\">深青色文字：<span class=\"tag\">&lt;<span class=\"name\">font</span> <span class=\"attr\">color</span>=<span class=\"string\">&quot;#006666&quot;</span>&gt;</span>深青色文字<span class=\"tag\">&lt;/<span class=\"name\">font</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span> </span><br><span class=\"line\"></span><br><span class=\"line\">浅紫色文字：<span class=\"tag\">&lt;<span class=\"name\">font</span> <span class=\"attr\">color</span>=<span class=\"string\">&quot;#dd00dd&quot;</span>&gt;</span>浅紫色文字<span class=\"tag\">&lt;/<span class=\"name\">font</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span> </span><br><span class=\"line\"></span><br><span class=\"line\">深紫色文字：<span class=\"tag\">&lt;<span class=\"name\">font</span> <span class=\"attr\">color</span>=<span class=\"string\">&quot;#660066&quot;</span>&gt;</span>深紫色文字<span class=\"tag\">&lt;/<span class=\"name\">font</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span> </span><br></pre></td></tr></table></figure>\n效果如下<br>浅红色文字：<font color=\"#dd0000\">浅红色文字</font><br></li>\n</ul>\n<p>深红色文字：<font color=\"#660000\">深红色文字</font><br> </p>\n<p>浅绿色文字：<font color=\"#00dd00\">浅绿色文字</font><br> </p>\n<p>深绿色文字：<font color=\"#006600\">深绿色文字</font><br> </p>\n<p>浅蓝色文字：<font color=\"#0000dd\">浅蓝色文字</font><br> </p>\n<p>深蓝色文字：<font color=\"#000066\">深蓝色文字</font><br> </p>\n<p>浅黄色文字：<font color=\"#dddd00\">浅黄色文字</font><br> </p>\n<p>深黄色文字：<font color=\"#666600\">深黄色文字</font><br> </p>\n<p>浅青色文字：<font color=\"#00dddd\">浅青色文字</font><br> </p>\n<p>深青色文字：<font color=\"#006666\">深青色文字</font><br> </p>\n<p>浅紫色文字：<font color=\"#dd00dd\">浅紫色文字</font><br> </p>\n<p>深紫色文字：<font color=\"#660066\">深紫色文字</font><br> </p>\n<ul>\n<li><p>字体大小</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">size为1：<span class=\"tag\">&lt;<span class=\"name\">font</span> <span class=\"attr\">size</span>=<span class=\"string\">&quot;1&quot;</span>&gt;</span>size为1<span class=\"tag\">&lt;/<span class=\"name\">font</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span> </span><br><span class=\"line\">size为2：<span class=\"tag\">&lt;<span class=\"name\">font</span> <span class=\"attr\">size</span>=<span class=\"string\">&quot;2&quot;</span>&gt;</span>size为2<span class=\"tag\">&lt;/<span class=\"name\">font</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span> </span><br><span class=\"line\">size为3：<span class=\"tag\">&lt;<span class=\"name\">font</span> <span class=\"attr\">size</span>=<span class=\"string\">&quot;3&quot;</span>&gt;</span>size为3<span class=\"tag\">&lt;/<span class=\"name\">font</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span> </span><br></pre></td></tr></table></figure>\n<p>效果如下<br>size为1：<font size=\"1\">size为1</font><br><br>size为2：<font size=\"2\">size为2</font><br><br>size为3：<font size=\"3\">size为3</font><br> </p>\n</li>\n<li><p>背景色</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">table</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">bgcolor</span>=<span class=\"string\">#FF00FF</span>&gt;</span>背景色的设置是按照十六进制颜色值：#7FFFD4<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">table</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">bgcolor</span>=<span class=\"string\">#FF83FA</span>&gt;</span>背景色的设置是按照十六进制颜色值：#FF83FA<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">table</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">bgcolor</span>=<span class=\"string\">#D1EEEE</span>&gt;</span>背景色的设置是按照十六进制颜色值：#D1EEEE<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">table</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">bgcolor</span>=<span class=\"string\">#C0FF3E</span>&gt;</span>背景色的设置是按照十六进制颜色值：#C0FF3E<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>效果如下</p>\n<table><tr><td bgcolor=\"#FF00FF\">背景色的设置是按照十六进制颜色值：#7FFFD4</td></tr></table>\n<table><tr><td bgcolor=\"#FF83FA\">背景色的设置是按照十六进制颜色值：#FF83FA</td></tr></table>\n<table><tr><td bgcolor=\"#D1EEEE\">背景色的设置是按照十六进制颜色值：#D1EEEE</td></tr></table>\n<table><tr><td bgcolor=\"#C0FF3E\">背景色的设置是按照十六进制颜色值：#C0FF3E</td></tr></table></li>\n</ul>\n","site":{"data":{}},"excerpt":"<h3 id=\"1-添加下划线\"><a href=\"#1-添加下划线\" class=\"headerlink\" title=\"1. 添加下划线\"></a>1. 添加下划线</h3><p>利用<code>&lt;u&gt;我有下划线&lt;/u&gt;</code>即可，效果：<u>我有下划线</u>.</p>\n<h3 id=\"2-添加底纹\"><a href=\"#2-添加底纹\" class=\"headerlink\" title=\"2. 添加底纹\"></a>2. 添加底纹</h3><p>如果是在Typora中，直接在内容的两侧各加两个等号即可。然而这种方法在hexo博客当中失效了。</p>","more":"<br>然而Markdown是支持HTML语法的，所以我们可以用HTML来使页面内容更加完美丰富。<p></p>\n<ul>\n<li>字体颜色<br>在markdown中采用如下方式能够控制文字的颜色：<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">浅红色文字：<span class=\"tag\">&lt;<span class=\"name\">font</span> <span class=\"attr\">color</span>=<span class=\"string\">&quot;#dd0000&quot;</span>&gt;</span>浅红色文字<span class=\"tag\">&lt;/<span class=\"name\">font</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span> </span><br><span class=\"line\"></span><br><span class=\"line\">深红色文字：<span class=\"tag\">&lt;<span class=\"name\">font</span> <span class=\"attr\">color</span>=<span class=\"string\">&quot;#660000&quot;</span>&gt;</span>深红色文字<span class=\"tag\">&lt;/<span class=\"name\">font</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span> </span><br><span class=\"line\"></span><br><span class=\"line\">浅绿色文字：<span class=\"tag\">&lt;<span class=\"name\">font</span> <span class=\"attr\">color</span>=<span class=\"string\">&quot;#00dd00&quot;</span>&gt;</span>浅绿色文字<span class=\"tag\">&lt;/<span class=\"name\">font</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span> </span><br><span class=\"line\"></span><br><span class=\"line\">深绿色文字：<span class=\"tag\">&lt;<span class=\"name\">font</span> <span class=\"attr\">color</span>=<span class=\"string\">&quot;#006600&quot;</span>&gt;</span>深绿色文字<span class=\"tag\">&lt;/<span class=\"name\">font</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span> </span><br><span class=\"line\"></span><br><span class=\"line\">浅蓝色文字：<span class=\"tag\">&lt;<span class=\"name\">font</span> <span class=\"attr\">color</span>=<span class=\"string\">&quot;#0000dd&quot;</span>&gt;</span>浅蓝色文字<span class=\"tag\">&lt;/<span class=\"name\">font</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span> </span><br><span class=\"line\"></span><br><span class=\"line\">深蓝色文字：<span class=\"tag\">&lt;<span class=\"name\">font</span> <span class=\"attr\">color</span>=<span class=\"string\">&quot;#000066&quot;</span>&gt;</span>深蓝色文字<span class=\"tag\">&lt;/<span class=\"name\">font</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span> </span><br><span class=\"line\"></span><br><span class=\"line\">浅黄色文字：<span class=\"tag\">&lt;<span class=\"name\">font</span> <span class=\"attr\">color</span>=<span class=\"string\">&quot;#dddd00&quot;</span>&gt;</span>浅黄色文字<span class=\"tag\">&lt;/<span class=\"name\">font</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span> </span><br><span class=\"line\"></span><br><span class=\"line\">深黄色文字：<span class=\"tag\">&lt;<span class=\"name\">font</span> <span class=\"attr\">color</span>=<span class=\"string\">&quot;#666600&quot;</span>&gt;</span>深黄色文字<span class=\"tag\">&lt;/<span class=\"name\">font</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span> </span><br><span class=\"line\"></span><br><span class=\"line\">浅青色文字：<span class=\"tag\">&lt;<span class=\"name\">font</span> <span class=\"attr\">color</span>=<span class=\"string\">&quot;#00dddd&quot;</span>&gt;</span>浅青色文字<span class=\"tag\">&lt;/<span class=\"name\">font</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span> </span><br><span class=\"line\"></span><br><span class=\"line\">深青色文字：<span class=\"tag\">&lt;<span class=\"name\">font</span> <span class=\"attr\">color</span>=<span class=\"string\">&quot;#006666&quot;</span>&gt;</span>深青色文字<span class=\"tag\">&lt;/<span class=\"name\">font</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span> </span><br><span class=\"line\"></span><br><span class=\"line\">浅紫色文字：<span class=\"tag\">&lt;<span class=\"name\">font</span> <span class=\"attr\">color</span>=<span class=\"string\">&quot;#dd00dd&quot;</span>&gt;</span>浅紫色文字<span class=\"tag\">&lt;/<span class=\"name\">font</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span> </span><br><span class=\"line\"></span><br><span class=\"line\">深紫色文字：<span class=\"tag\">&lt;<span class=\"name\">font</span> <span class=\"attr\">color</span>=<span class=\"string\">&quot;#660066&quot;</span>&gt;</span>深紫色文字<span class=\"tag\">&lt;/<span class=\"name\">font</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span> </span><br></pre></td></tr></table></figure>\n效果如下<br>浅红色文字：<font color=\"#dd0000\">浅红色文字</font><br></li>\n</ul>\n<p>深红色文字：<font color=\"#660000\">深红色文字</font><br> </p>\n<p>浅绿色文字：<font color=\"#00dd00\">浅绿色文字</font><br> </p>\n<p>深绿色文字：<font color=\"#006600\">深绿色文字</font><br> </p>\n<p>浅蓝色文字：<font color=\"#0000dd\">浅蓝色文字</font><br> </p>\n<p>深蓝色文字：<font color=\"#000066\">深蓝色文字</font><br> </p>\n<p>浅黄色文字：<font color=\"#dddd00\">浅黄色文字</font><br> </p>\n<p>深黄色文字：<font color=\"#666600\">深黄色文字</font><br> </p>\n<p>浅青色文字：<font color=\"#00dddd\">浅青色文字</font><br> </p>\n<p>深青色文字：<font color=\"#006666\">深青色文字</font><br> </p>\n<p>浅紫色文字：<font color=\"#dd00dd\">浅紫色文字</font><br> </p>\n<p>深紫色文字：<font color=\"#660066\">深紫色文字</font><br> </p>\n<ul>\n<li><p>字体大小</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">size为1：<span class=\"tag\">&lt;<span class=\"name\">font</span> <span class=\"attr\">size</span>=<span class=\"string\">&quot;1&quot;</span>&gt;</span>size为1<span class=\"tag\">&lt;/<span class=\"name\">font</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span> </span><br><span class=\"line\">size为2：<span class=\"tag\">&lt;<span class=\"name\">font</span> <span class=\"attr\">size</span>=<span class=\"string\">&quot;2&quot;</span>&gt;</span>size为2<span class=\"tag\">&lt;/<span class=\"name\">font</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span> </span><br><span class=\"line\">size为3：<span class=\"tag\">&lt;<span class=\"name\">font</span> <span class=\"attr\">size</span>=<span class=\"string\">&quot;3&quot;</span>&gt;</span>size为3<span class=\"tag\">&lt;/<span class=\"name\">font</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span> </span><br></pre></td></tr></table></figure>\n<p>效果如下<br>size为1：<font size=\"1\">size为1</font><br><br>size为2：<font size=\"2\">size为2</font><br><br>size为3：<font size=\"3\">size为3</font><br> </p>\n</li>\n<li><p>背景色</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">table</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">bgcolor</span>=<span class=\"string\">#FF00FF</span>&gt;</span>背景色的设置是按照十六进制颜色值：#7FFFD4<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">table</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">bgcolor</span>=<span class=\"string\">#FF83FA</span>&gt;</span>背景色的设置是按照十六进制颜色值：#FF83FA<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">table</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">bgcolor</span>=<span class=\"string\">#D1EEEE</span>&gt;</span>背景色的设置是按照十六进制颜色值：#D1EEEE<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">table</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">bgcolor</span>=<span class=\"string\">#C0FF3E</span>&gt;</span>背景色的设置是按照十六进制颜色值：#C0FF3E<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>效果如下</p>\n<table><tr><td bgcolor=\"#FF00FF\">背景色的设置是按照十六进制颜色值：#7FFFD4</td></tr></table>\n<table><tr><td bgcolor=\"#FF83FA\">背景色的设置是按照十六进制颜色值：#FF83FA</td></tr></table>\n<table><tr><td bgcolor=\"#D1EEEE\">背景色的设置是按照十六进制颜色值：#D1EEEE</td></tr></table>\n<table><tr><td bgcolor=\"#C0FF3E\">背景色的设置是按照十六进制颜色值：#C0FF3E</td></tr></table></li>\n</ul>"},{"title":"Install MongoDB on Ubuntu","date":"2023-04-03T19:01:34.000Z","declare":true,"_content":"- [Install MongoDB Community Edition on Ubuntu](https://www.mongodb.com/docs/manual/tutorial/install-mongodb-on-ubuntu/)\n- [How to Use Python with MongoDB](https://www.mongodb.com/languages/python)\n- [MongoDB python](https://www.mongodb.com/developer/languages/python/)","source":"_posts/Install-MongoDB-on-Ubuntu.md","raw":"---\ntitle: Install MongoDB on Ubuntu\ndate: 2023-04-03 19:01:34\ntags:\n    - MongoDB\n    - Ubuntu\ndeclare: true\n---\n- [Install MongoDB Community Edition on Ubuntu](https://www.mongodb.com/docs/manual/tutorial/install-mongodb-on-ubuntu/)\n- [How to Use Python with MongoDB](https://www.mongodb.com/languages/python)\n- [MongoDB python](https://www.mongodb.com/developer/languages/python/)","slug":"Install-MongoDB-on-Ubuntu","published":1,"updated":"2024-04-25T17:26:47.723Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvjbaqh9000p0vn1239a35o0","content":"<ul>\n<li><a href=\"https://www.mongodb.com/docs/manual/tutorial/install-mongodb-on-ubuntu/\">Install MongoDB Community Edition on Ubuntu</a></li>\n<li><a href=\"https://www.mongodb.com/languages/python\">How to Use Python with MongoDB</a></li>\n<li><a href=\"https://www.mongodb.com/developer/languages/python/\">MongoDB python</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><a href=\"https://www.mongodb.com/docs/manual/tutorial/install-mongodb-on-ubuntu/\">Install MongoDB Community Edition on Ubuntu</a></li>\n<li><a href=\"https://www.mongodb.com/languages/python\">How to Use Python with MongoDB</a></li>\n<li><a href=\"https://www.mongodb.com/developer/languages/python/\">MongoDB python</a></li>\n</ul>\n"},{"title":"Intranet penetration","date":"2023-04-03T08:59:06.000Z","declare":true,"toc":1,"_content":"### 1 frp\n- 在[官方github](https://github.com/fatedier/frp)下载对应版本<!--more-->\n- 我们只需要关注如下几个文件\n```shell\nfrps\nfrps.ini\nfrpc\nfrpc.ini\n```\n前两个文件（s结尾代表server）分别是服务端程序和服务端配置文件，后两个文件（c结尾代表client）分别是客户端程序和客户端配置文件。\n因为我们正在配置服务端，可以删除客户端的两个文件\n```shell\nrm frpc\nrm frpc.ini\n```\n\n- 然后修改frps.ini文件\n这个文件应有如下格式\n```bash\n[common]\nbind_port = 7000\ndashboard_port = 7500(网页登录端口)\ntoken = meng123456（密码可以自己修改）\ndashboard_user = meng（网页登录帐号）\ndashboard_pwd = meng123456（网页登录密码）\nvhost_http_port = 10080\nvhost_https_port = 10443\n```\n如果没有必要，端口均可使用默认值，token、user和password项请自行设置。\n\n    - “bind_port”表示用于客户端和服务端连接的端口，这个端口号我们之后在配置客户端的时候要用到。\n    - “dashboard_port”是服务端仪表板的端口，若使用7500端口，在配置完成服务启动后可以通过浏览器访问 x.x.x.x:7500 （其中x.x.x.x为VPS的IP）查看frp服务运行信息。\n    - “token”是用于客户端和服务端连接的口令，请自行设置并记录，稍后会用到。\n    - “dashboard_user”和“dashboard_pwd”表示打开仪表板页面登录的用户名和密码，自行设置即可。\n    - “vhost_http_port”和“vhost_https_port”用于反向代理HTTP主机时使用，本文不涉及HTTP协议，因而照抄或者删除这两条均可。\n\n\n- 编辑完成后保存\n\n如果看到屏幕输出这样一段内容，即表示运行正常，如果出现错误提示，请检查上面的步骤。\n```shell\n2019/01/12 15:22:39 [I] [service.go:130] frps tcp listen on 0.0.0.0:7000\n2019/01/12 15:22:39 [I] [service.go:172] http service listen on 0.0.0.0:10080\n2019/01/12 15:22:39 [I] [service.go:193] https service listen on 0.0.0.0:10443\n2019/01/12 15:22:39 [I] [service.go:216] Dashboard listen on 0.0.0.0:7500\n2019/01/12 15:22:39 [I] [root.go:210] Start frps success\n```\n此时访问 x.x.x.x:7500 并使用自己设置的用户名密码登录，即可看到仪表板界面\n\n\n- 服务端后台运行\n\n至此，我们的服务端仅运行在前台，如果Ctrl+C停止或者关闭SSH窗口后，frps均会停止运行，因而我们使用 nohup命令将其运行在后台。\nnohup后台程序管理或关闭相关命令可自行查询资料。\n`nohup ./frps -c frps.ini &`\n输出如下内容即表示正常运行\n```shell\nnohup: ignoring input and appending output to 'nohup.out'\n```\n此时可先使用Ctrl+C关闭nohup，frps依然会在后台运行，使用jobs命令查看后台运行的程序\n`jobs`\n在结果中我们可以看到frps正在后台正常运行\n```shell\n[1]+  Running                 nohup ./frps -c frps.ini &\n```\n\n- 此处附上开机自启动的方式\n`tar -zxvf frp_0.29.0_linux_amd64.tar.gz`\n运行命令\n./frps -c ./frps.ini\n**************************************************************************\n设置自动启动\nvim /lib/systemd/system/frps.service\n写入以下配置\n**************************************************************************\n```shell\n[Unit]\nDescription=frps service\nAfter=network.target network-online.target syslog.target\nWants=network.target network-online.target\n\n[Service]\nType=simple\n\n#启动服务的命令（此处写你的frps的实际安装目录）\nExecStart=/root/frp/frps -c /root/frp/frps.ini\n\n[Install]\nWantedBy=multi-user.target\n```\n**************************************************************************\n然后启动 frps\n`systemctl start frps`\n再打开自启动\n`systemctl enable frps`\n同时\n\n重启 `systemctl restart frps`\n停止 `systemctl stop frps`\n查看应用日志 `systemctl status frps`\n\n\nfrp的客户端就是我们想要真正进行访问的那台设备，大多数情况下应该会是一台Windows主机，因而本文使用Windows主机做例子；Linux配置方法类似，不再赘述。\n同样地，根据客户端设备的情况选择相应的frp程序进行下载，Windows下下载和解压等步骤不再描述。\n假定你下载了“frp_0.22.0_windows_amd64.zip”，将其解压在了C盘根目录下，并且将文件夹重命名为“frp”，可以删除其中的frps和frps.ini文件。\n用文本编辑器打开frpc.ini，与服务端类似，内容如下。\n\n```shell\n[common]\nserver_addr = 182.92.189.71\nserver_port = 7000\ntoken= password\n\n[RDP]\ntype = tcp\nlocal_ip = 127.0.0.1\nlocal_port = 3389\nremote_port = 7001\n\n[VNC]\ntype = tcp\nlocal_ip = 127.0.0.1\nlocal_port = 5900\nremote_port = 7002\n\n[SMB]\ntype = tcp\nlocal_ip = 127.0.0.1\nlocal_port = 445\nremote_port = 7003\n```\n    - 其中common字段下的三项即为服务端的设置。\n    - “server_addr”为服务端IP地址，填入即可。\n    - “server_port”为服务器端口，填入你设置的端口号即可，如果未改变就是7000\n    - “token”是你在服务器上设置的连接口令，原样填入即可。\n\n\n- 自定义规则\nfrp实际使用时，会按照端口号进行对应的转发，\n上面frpc.ini的rdp、smb字段都是自己定义的规则，自定义端口对应时格式如下。\n“[xxx]”表示一个规则名称，自己定义，便于查询即可。\n“type”表示转发的协议类型，有TCP和UDP等选项可以选择，如有需要请自行查询frp手册。\n“local_port”是本地应用的端口号，按照实际应用工作在本机的端口号填写即可。\n“remote_port”是该条规则在服务端开放的端口号，自己填写并记录即可。\nRDP，即Remote Desktop 远程桌面，Windows的RDP默认端口是3389，协议为TCP，建议使用frp远程连接前，在局域网中测试好，能够成功连接后再使用frp穿透连接。\nSMB，即Windows文件共享所使用的协议，默认端口号445，协议TCP，本条规则可实现远程文件访问。\n配置完成frpc.ini后，就可以运行frpc了\nfrpc程序不能直接双击运行！\n使用命令提示符或Powershell进入该目录下\n`cd C:\\frp`\n并执行\n`./frpc -c frpc.ini`\n运行frpc程序，窗口中输出如下内容表示运行正常。\n```shell\n2019/01/12 16:14:56 [I] [service.go:205] login to server success, get run id [2b65b4e58a5917ac], server udp port [0]\n2019/01/12 16:14:56 [I] [proxy_manager.go:136] [2b65b4e58a5917ac] proxy added: [rdp smb]\n2019/01/12 16:14:56 [I] [control.go:143] [smb] start proxy success\n2019/01/12 16:14:56 [I] [control.go:143] [rdp] start proxy success\n```\n不要关闭命令行窗口，此时可以在局域网外使用相应程序访问 x.x.x.x:xxxx （IP为VPS的IP，端口为自定义的remote_port）即可访问到相应服务。\n\n\n此后利用winsw将客户端设置为开机自启动\n编辑`winsw.xml`\n其格式如下：\n```shell\n<service>\n\t<!-- 该服务的唯一标识 -->\n    <id>frpc</id>\n    <!-- 该服务的名称 -->\n    <name>frp</name>\n    <!-- 该服务的描述 -->\n    <description>frpc客户端 这个服务用 frpc 实现内网穿透</description>\n    <!-- 要运行的程序路径 -->\n    <executable>frpc.exe</executable>\n    <!-- 携带的参数 -->\n    <arguments>-c frpc.ini</arguments>\n    <!-- 日志模式 -->\n    <logmode>none</logmode>\n</service>\n```\n\n用cmd进入这一切的目录下\n在命令框输入`winsw.exe install`\n显示 `INFO -Installing the servics with id \"***\"`\n即为成功\n之后打开任务管理器，服务，打开服务，找到这个服务\n将其设置为**失败但不断重复**，之后启动就好，大功告成！\n\n> 现在可以通过 vbs 脚本来启动服务，这样就可以在开机后自动启动了\n\n```vbs\nset ws=wscript.createobject(\"wscript.shell\")\nws.run \"cmd /c C:\\frp_0.51.3_windows_amd64\\frpc -c C:\\frp_0.51.3_windows_amd64\\frpc.ini\",0\n```\n\n-----------------\n\n- Boot up\n`frpc.ini`\n\n```shell\n[common]\nserver_addr = 150.158.17.239\nserver_port = 80\nprivilege_token = 88888888\n\n[RDP]\ntype = tcp\nlocal_ip = 127.0.0.1\nlocal_port = 3389\nremote_port = 8001\n\n[Storage-Computing-System]\ntype = tcp\nlocal_ip = 127.0.0.1\nlocal_port = 22\nremote_port = 8002\n\n[ssh_154]\ntype = tcp\nlocal_ip = 172.17.0.154\nlocal_port = 22\nremote_port = 8003\n\n[ssh_155]\ntype = tcp\nlocal_ip = 172.17.0.155\nlocal_port = 22\nremote_port = 8004\n\n[ssh_156]\ntype = tcp\nlocal_ip = 172.17.0.156\nlocal_port = 22\nremote_port = 8005\n\n[ssh_157]\ntype = tcp\nlocal_ip = 172.17.0.157\nlocal_port = 22\nremote_port = 8006\n\n[ssh_158]\ntype = tcp\nlocal_ip = 172.17.0.158\nlocal_port = 22\nremote_port = 8007\n\n[ssh_159]\ntype = tcp\nlocal_ip = 172.17.0.159\nlocal_port = 22\nremote_port = 8008\n```\n\n\n\n1. Create a systemd service unit file called **frpc.service** on Linux systems.\n`sudo nano /etc/systemd/system/frpc.service`\n\n2. Configuration\n```shell\n[Unit]\nDescription=Frp client\nAfter=network.target\n\n[Service]\nType=simple\nExecStart=/usr/local/frp/frpc -c /usr/local/frp/frpc.ini\nRestart=always\nUser=root\n\n[Install]\nWantedBy=multi-user.target\n```\n\nDescription: Description information of the service.\nAfter: The service needs to start after which services start.\n\nType: Service startup type. simple means that the service will directly execute the commands in ExecStart after startup, and will not fork a new process.\n\nExecStart: The command executed when the service starts.\n\nRestart: How systemd will handle the service when the service is abnormal. always means always restart the service.\n\nUser: The user the service runs as.\n\nWantedBy: The runlevel the service is in.\nIn the above example, the command path and configuration file path in ExecStart need to be modified according to the actual situation.\n\n\n3. Reload the systemd configuration file:\n`sudo systemctl daemon-reload`\n\n4. Start the frpc service:\n`sudo systemctl start frpc`\n\n5. Verify that the service has started:\n`sudo systemctl status frpc`\n\nIf the service is already started, output similar to the following will be displayed\n```bash\n● frpc.service - Frp client\n     Loaded: loaded (/etc/systemd/system/frpc.service; disabled; vendor preset: enabled)\n     Active: active (running) since Sat 2023-03-13 07:30:22 UTC; 15s ago\n   Main PID: 12345 (frpc)\n      Tasks: 7 (limit: 1136)\n     Memory: 2.2M\n     CGroup: /system.slice/frpc.service\n             └─12345 /usr/local/frp/frpc -c /usr/local/frp/frpc.ini\n```\n\n6. Set the service to start automatically at boot:\n`sudo systemctl enable frpc`\n\nNow, the frpc service has been configured to start automatically at boot and run in the background. The service can be stopped with the following command:\n`sudo systemctl stop frpc`\n\nIf you need to disable automatic startup on boot, you can use the following command:\n`sudo systemctl disable frpc`\n\n### 2. Zerotier\nOfficial website: https://www.zerotier.com/\nAccount: sikes60407@loongwin.com\nPassword: yFKjXv46JT@.43d\nNetwork ID: \n- Linux install ZeroTier\n`curl -s https://install.zerotier.com | sudo bash`\n\n- Join the network by ID\n`sudo zerotier-cli join <NETWORK_ID>`\n\n- Go to the official website to authorize\n\n- Check connection status\n`sudo zerotier-cli listnetworks`\n\n- Addition\n```bash\nzerotier-cli leave Network ID   #leave the network\n\nsudo systemctl enable zerotier-one.service\n\nsudo systemctl start zerotier-one.service\n\nsudo zerotier-cli join <NETWORK_ID>\n```\n\n### 3. 花生壳\n\n### 4. tailscale\n国内目前测试比 zerotier 好用一些\n\n### 5. [moonlight](https://github.com/moonlight-stream/moonlight-qt) + [sunshine](https://github.com/LizardByte/Sunshine)\n服务端 sunshine，客户端 moonlight\n\n","source":"_posts/Intranet-penetration.md","raw":"---\ntitle: Intranet penetration\ndate: 2023-04-03 08:59:06\ndeclare: true\ntags:\n    - 内网穿透\ntoc: 1\n---\n### 1 frp\n- 在[官方github](https://github.com/fatedier/frp)下载对应版本<!--more-->\n- 我们只需要关注如下几个文件\n```shell\nfrps\nfrps.ini\nfrpc\nfrpc.ini\n```\n前两个文件（s结尾代表server）分别是服务端程序和服务端配置文件，后两个文件（c结尾代表client）分别是客户端程序和客户端配置文件。\n因为我们正在配置服务端，可以删除客户端的两个文件\n```shell\nrm frpc\nrm frpc.ini\n```\n\n- 然后修改frps.ini文件\n这个文件应有如下格式\n```bash\n[common]\nbind_port = 7000\ndashboard_port = 7500(网页登录端口)\ntoken = meng123456（密码可以自己修改）\ndashboard_user = meng（网页登录帐号）\ndashboard_pwd = meng123456（网页登录密码）\nvhost_http_port = 10080\nvhost_https_port = 10443\n```\n如果没有必要，端口均可使用默认值，token、user和password项请自行设置。\n\n    - “bind_port”表示用于客户端和服务端连接的端口，这个端口号我们之后在配置客户端的时候要用到。\n    - “dashboard_port”是服务端仪表板的端口，若使用7500端口，在配置完成服务启动后可以通过浏览器访问 x.x.x.x:7500 （其中x.x.x.x为VPS的IP）查看frp服务运行信息。\n    - “token”是用于客户端和服务端连接的口令，请自行设置并记录，稍后会用到。\n    - “dashboard_user”和“dashboard_pwd”表示打开仪表板页面登录的用户名和密码，自行设置即可。\n    - “vhost_http_port”和“vhost_https_port”用于反向代理HTTP主机时使用，本文不涉及HTTP协议，因而照抄或者删除这两条均可。\n\n\n- 编辑完成后保存\n\n如果看到屏幕输出这样一段内容，即表示运行正常，如果出现错误提示，请检查上面的步骤。\n```shell\n2019/01/12 15:22:39 [I] [service.go:130] frps tcp listen on 0.0.0.0:7000\n2019/01/12 15:22:39 [I] [service.go:172] http service listen on 0.0.0.0:10080\n2019/01/12 15:22:39 [I] [service.go:193] https service listen on 0.0.0.0:10443\n2019/01/12 15:22:39 [I] [service.go:216] Dashboard listen on 0.0.0.0:7500\n2019/01/12 15:22:39 [I] [root.go:210] Start frps success\n```\n此时访问 x.x.x.x:7500 并使用自己设置的用户名密码登录，即可看到仪表板界面\n\n\n- 服务端后台运行\n\n至此，我们的服务端仅运行在前台，如果Ctrl+C停止或者关闭SSH窗口后，frps均会停止运行，因而我们使用 nohup命令将其运行在后台。\nnohup后台程序管理或关闭相关命令可自行查询资料。\n`nohup ./frps -c frps.ini &`\n输出如下内容即表示正常运行\n```shell\nnohup: ignoring input and appending output to 'nohup.out'\n```\n此时可先使用Ctrl+C关闭nohup，frps依然会在后台运行，使用jobs命令查看后台运行的程序\n`jobs`\n在结果中我们可以看到frps正在后台正常运行\n```shell\n[1]+  Running                 nohup ./frps -c frps.ini &\n```\n\n- 此处附上开机自启动的方式\n`tar -zxvf frp_0.29.0_linux_amd64.tar.gz`\n运行命令\n./frps -c ./frps.ini\n**************************************************************************\n设置自动启动\nvim /lib/systemd/system/frps.service\n写入以下配置\n**************************************************************************\n```shell\n[Unit]\nDescription=frps service\nAfter=network.target network-online.target syslog.target\nWants=network.target network-online.target\n\n[Service]\nType=simple\n\n#启动服务的命令（此处写你的frps的实际安装目录）\nExecStart=/root/frp/frps -c /root/frp/frps.ini\n\n[Install]\nWantedBy=multi-user.target\n```\n**************************************************************************\n然后启动 frps\n`systemctl start frps`\n再打开自启动\n`systemctl enable frps`\n同时\n\n重启 `systemctl restart frps`\n停止 `systemctl stop frps`\n查看应用日志 `systemctl status frps`\n\n\nfrp的客户端就是我们想要真正进行访问的那台设备，大多数情况下应该会是一台Windows主机，因而本文使用Windows主机做例子；Linux配置方法类似，不再赘述。\n同样地，根据客户端设备的情况选择相应的frp程序进行下载，Windows下下载和解压等步骤不再描述。\n假定你下载了“frp_0.22.0_windows_amd64.zip”，将其解压在了C盘根目录下，并且将文件夹重命名为“frp”，可以删除其中的frps和frps.ini文件。\n用文本编辑器打开frpc.ini，与服务端类似，内容如下。\n\n```shell\n[common]\nserver_addr = 182.92.189.71\nserver_port = 7000\ntoken= password\n\n[RDP]\ntype = tcp\nlocal_ip = 127.0.0.1\nlocal_port = 3389\nremote_port = 7001\n\n[VNC]\ntype = tcp\nlocal_ip = 127.0.0.1\nlocal_port = 5900\nremote_port = 7002\n\n[SMB]\ntype = tcp\nlocal_ip = 127.0.0.1\nlocal_port = 445\nremote_port = 7003\n```\n    - 其中common字段下的三项即为服务端的设置。\n    - “server_addr”为服务端IP地址，填入即可。\n    - “server_port”为服务器端口，填入你设置的端口号即可，如果未改变就是7000\n    - “token”是你在服务器上设置的连接口令，原样填入即可。\n\n\n- 自定义规则\nfrp实际使用时，会按照端口号进行对应的转发，\n上面frpc.ini的rdp、smb字段都是自己定义的规则，自定义端口对应时格式如下。\n“[xxx]”表示一个规则名称，自己定义，便于查询即可。\n“type”表示转发的协议类型，有TCP和UDP等选项可以选择，如有需要请自行查询frp手册。\n“local_port”是本地应用的端口号，按照实际应用工作在本机的端口号填写即可。\n“remote_port”是该条规则在服务端开放的端口号，自己填写并记录即可。\nRDP，即Remote Desktop 远程桌面，Windows的RDP默认端口是3389，协议为TCP，建议使用frp远程连接前，在局域网中测试好，能够成功连接后再使用frp穿透连接。\nSMB，即Windows文件共享所使用的协议，默认端口号445，协议TCP，本条规则可实现远程文件访问。\n配置完成frpc.ini后，就可以运行frpc了\nfrpc程序不能直接双击运行！\n使用命令提示符或Powershell进入该目录下\n`cd C:\\frp`\n并执行\n`./frpc -c frpc.ini`\n运行frpc程序，窗口中输出如下内容表示运行正常。\n```shell\n2019/01/12 16:14:56 [I] [service.go:205] login to server success, get run id [2b65b4e58a5917ac], server udp port [0]\n2019/01/12 16:14:56 [I] [proxy_manager.go:136] [2b65b4e58a5917ac] proxy added: [rdp smb]\n2019/01/12 16:14:56 [I] [control.go:143] [smb] start proxy success\n2019/01/12 16:14:56 [I] [control.go:143] [rdp] start proxy success\n```\n不要关闭命令行窗口，此时可以在局域网外使用相应程序访问 x.x.x.x:xxxx （IP为VPS的IP，端口为自定义的remote_port）即可访问到相应服务。\n\n\n此后利用winsw将客户端设置为开机自启动\n编辑`winsw.xml`\n其格式如下：\n```shell\n<service>\n\t<!-- 该服务的唯一标识 -->\n    <id>frpc</id>\n    <!-- 该服务的名称 -->\n    <name>frp</name>\n    <!-- 该服务的描述 -->\n    <description>frpc客户端 这个服务用 frpc 实现内网穿透</description>\n    <!-- 要运行的程序路径 -->\n    <executable>frpc.exe</executable>\n    <!-- 携带的参数 -->\n    <arguments>-c frpc.ini</arguments>\n    <!-- 日志模式 -->\n    <logmode>none</logmode>\n</service>\n```\n\n用cmd进入这一切的目录下\n在命令框输入`winsw.exe install`\n显示 `INFO -Installing the servics with id \"***\"`\n即为成功\n之后打开任务管理器，服务，打开服务，找到这个服务\n将其设置为**失败但不断重复**，之后启动就好，大功告成！\n\n> 现在可以通过 vbs 脚本来启动服务，这样就可以在开机后自动启动了\n\n```vbs\nset ws=wscript.createobject(\"wscript.shell\")\nws.run \"cmd /c C:\\frp_0.51.3_windows_amd64\\frpc -c C:\\frp_0.51.3_windows_amd64\\frpc.ini\",0\n```\n\n-----------------\n\n- Boot up\n`frpc.ini`\n\n```shell\n[common]\nserver_addr = 150.158.17.239\nserver_port = 80\nprivilege_token = 88888888\n\n[RDP]\ntype = tcp\nlocal_ip = 127.0.0.1\nlocal_port = 3389\nremote_port = 8001\n\n[Storage-Computing-System]\ntype = tcp\nlocal_ip = 127.0.0.1\nlocal_port = 22\nremote_port = 8002\n\n[ssh_154]\ntype = tcp\nlocal_ip = 172.17.0.154\nlocal_port = 22\nremote_port = 8003\n\n[ssh_155]\ntype = tcp\nlocal_ip = 172.17.0.155\nlocal_port = 22\nremote_port = 8004\n\n[ssh_156]\ntype = tcp\nlocal_ip = 172.17.0.156\nlocal_port = 22\nremote_port = 8005\n\n[ssh_157]\ntype = tcp\nlocal_ip = 172.17.0.157\nlocal_port = 22\nremote_port = 8006\n\n[ssh_158]\ntype = tcp\nlocal_ip = 172.17.0.158\nlocal_port = 22\nremote_port = 8007\n\n[ssh_159]\ntype = tcp\nlocal_ip = 172.17.0.159\nlocal_port = 22\nremote_port = 8008\n```\n\n\n\n1. Create a systemd service unit file called **frpc.service** on Linux systems.\n`sudo nano /etc/systemd/system/frpc.service`\n\n2. Configuration\n```shell\n[Unit]\nDescription=Frp client\nAfter=network.target\n\n[Service]\nType=simple\nExecStart=/usr/local/frp/frpc -c /usr/local/frp/frpc.ini\nRestart=always\nUser=root\n\n[Install]\nWantedBy=multi-user.target\n```\n\nDescription: Description information of the service.\nAfter: The service needs to start after which services start.\n\nType: Service startup type. simple means that the service will directly execute the commands in ExecStart after startup, and will not fork a new process.\n\nExecStart: The command executed when the service starts.\n\nRestart: How systemd will handle the service when the service is abnormal. always means always restart the service.\n\nUser: The user the service runs as.\n\nWantedBy: The runlevel the service is in.\nIn the above example, the command path and configuration file path in ExecStart need to be modified according to the actual situation.\n\n\n3. Reload the systemd configuration file:\n`sudo systemctl daemon-reload`\n\n4. Start the frpc service:\n`sudo systemctl start frpc`\n\n5. Verify that the service has started:\n`sudo systemctl status frpc`\n\nIf the service is already started, output similar to the following will be displayed\n```bash\n● frpc.service - Frp client\n     Loaded: loaded (/etc/systemd/system/frpc.service; disabled; vendor preset: enabled)\n     Active: active (running) since Sat 2023-03-13 07:30:22 UTC; 15s ago\n   Main PID: 12345 (frpc)\n      Tasks: 7 (limit: 1136)\n     Memory: 2.2M\n     CGroup: /system.slice/frpc.service\n             └─12345 /usr/local/frp/frpc -c /usr/local/frp/frpc.ini\n```\n\n6. Set the service to start automatically at boot:\n`sudo systemctl enable frpc`\n\nNow, the frpc service has been configured to start automatically at boot and run in the background. The service can be stopped with the following command:\n`sudo systemctl stop frpc`\n\nIf you need to disable automatic startup on boot, you can use the following command:\n`sudo systemctl disable frpc`\n\n### 2. Zerotier\nOfficial website: https://www.zerotier.com/\nAccount: sikes60407@loongwin.com\nPassword: yFKjXv46JT@.43d\nNetwork ID: \n- Linux install ZeroTier\n`curl -s https://install.zerotier.com | sudo bash`\n\n- Join the network by ID\n`sudo zerotier-cli join <NETWORK_ID>`\n\n- Go to the official website to authorize\n\n- Check connection status\n`sudo zerotier-cli listnetworks`\n\n- Addition\n```bash\nzerotier-cli leave Network ID   #leave the network\n\nsudo systemctl enable zerotier-one.service\n\nsudo systemctl start zerotier-one.service\n\nsudo zerotier-cli join <NETWORK_ID>\n```\n\n### 3. 花生壳\n\n### 4. tailscale\n国内目前测试比 zerotier 好用一些\n\n### 5. [moonlight](https://github.com/moonlight-stream/moonlight-qt) + [sunshine](https://github.com/LizardByte/Sunshine)\n服务端 sunshine，客户端 moonlight\n\n","slug":"Intranet-penetration","published":1,"updated":"2024-04-25T17:26:46.113Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvjbaqha000q0vn14zfy65yy","content":"<h3 id=\"1-frp\"><a href=\"#1-frp\" class=\"headerlink\" title=\"1 frp\"></a>1 frp</h3><ul>\n<li><p>在<a href=\"https://github.com/fatedier/frp\">官方github</a>下载对应版本<span id=\"more\"></span></p>\n</li>\n<li><p>我们只需要关注如下几个文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">frps</span><br><span class=\"line\">frps.ini</span><br><span class=\"line\">frpc</span><br><span class=\"line\">frpc.ini</span><br></pre></td></tr></table></figure>\n<p>前两个文件（s结尾代表server）分别是服务端程序和服务端配置文件，后两个文件（c结尾代表client）分别是客户端程序和客户端配置文件。<br>因为我们正在配置服务端，可以删除客户端的两个文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rm frpc</span><br><span class=\"line\">rm frpc.ini</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>然后修改frps.ini文件<br>这个文件应有如下格式</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[common]</span><br><span class=\"line\">bind_port = 7000</span><br><span class=\"line\">dashboard_port = 7500(网页登录端口)</span><br><span class=\"line\">token = meng123456（密码可以自己修改）</span><br><span class=\"line\">dashboard_user = meng（网页登录帐号）</span><br><span class=\"line\">dashboard_pwd = meng123456（网页登录密码）</span><br><span class=\"line\">vhost_http_port = 10080</span><br><span class=\"line\">vhost_https_port = 10443</span><br></pre></td></tr></table></figure>\n<p>如果没有必要，端口均可使用默认值，token、user和password项请自行设置。</p>\n<ul>\n<li>“bind_port”表示用于客户端和服务端连接的端口，这个端口号我们之后在配置客户端的时候要用到。</li>\n<li>“dashboard_port”是服务端仪表板的端口，若使用7500端口，在配置完成服务启动后可以通过浏览器访问 x.x.x.x:7500 （其中x.x.x.x为VPS的IP）查看frp服务运行信息。</li>\n<li>“token”是用于客户端和服务端连接的口令，请自行设置并记录，稍后会用到。</li>\n<li>“dashboard_user”和“dashboard_pwd”表示打开仪表板页面登录的用户名和密码，自行设置即可。</li>\n<li>“vhost_http_port”和“vhost_https_port”用于反向代理HTTP主机时使用，本文不涉及HTTP协议，因而照抄或者删除这两条均可。</li>\n</ul>\n</li>\n<li><p>编辑完成后保存</p>\n</li>\n</ul>\n<p>如果看到屏幕输出这样一段内容，即表示运行正常，如果出现错误提示，请检查上面的步骤。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2019/01/12 15:22:39 [I] [service.go:130] frps tcp listen on 0.0.0.0:7000</span><br><span class=\"line\">2019/01/12 15:22:39 [I] [service.go:172] http service listen on 0.0.0.0:10080</span><br><span class=\"line\">2019/01/12 15:22:39 [I] [service.go:193] https service listen on 0.0.0.0:10443</span><br><span class=\"line\">2019/01/12 15:22:39 [I] [service.go:216] Dashboard listen on 0.0.0.0:7500</span><br><span class=\"line\">2019/01/12 15:22:39 [I] [root.go:210] Start frps success</span><br></pre></td></tr></table></figure>\n<p>此时访问 x.x.x.x:7500 并使用自己设置的用户名密码登录，即可看到仪表板界面</p>\n<ul>\n<li>服务端后台运行</li>\n</ul>\n<p>至此，我们的服务端仅运行在前台，如果Ctrl+C停止或者关闭SSH窗口后，frps均会停止运行，因而我们使用 nohup命令将其运行在后台。<br>nohup后台程序管理或关闭相关命令可自行查询资料。<br><code>nohup ./frps -c frps.ini &amp;</code><br>输出如下内容即表示正常运行</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nohup: ignoring input and appending output to &#x27;nohup.out&#x27;</span><br></pre></td></tr></table></figure>\n<p>此时可先使用Ctrl+C关闭nohup，frps依然会在后台运行，使用jobs命令查看后台运行的程序<br><code>jobs</code><br>在结果中我们可以看到frps正在后台正常运行</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[1]+  Running                 nohup ./frps -c frps.ini &amp;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>此处附上开机自启动的方式<br><code>tar -zxvf frp_0.29.0_linux_amd64.tar.gz</code><br>运行命令<br>.&#x2F;frps -c .&#x2F;frps.ini</li>\n</ul>\n<hr>\n<p>设置自动启动<br>vim &#x2F;lib&#x2F;systemd&#x2F;system&#x2F;frps.service<br>写入以下配置</p>\n<hr>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=frps service</span><br><span class=\"line\">After=network.target network-online.target syslog.target</span><br><span class=\"line\">Wants=network.target network-online.target</span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">Type=simple</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">启动服务的命令（此处写你的frps的实际安装目录）</span></span><br><span class=\"line\">ExecStart=/root/frp/frps -c /root/frp/frps.ini</span><br><span class=\"line\"></span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>\n<hr>\n<p>然后启动 frps<br><code>systemctl start frps</code><br>再打开自启动<br><code>systemctl enable frps</code><br>同时</p>\n<p>重启 <code>systemctl restart frps</code><br>停止 <code>systemctl stop frps</code><br>查看应用日志 <code>systemctl status frps</code></p>\n<p>frp的客户端就是我们想要真正进行访问的那台设备，大多数情况下应该会是一台Windows主机，因而本文使用Windows主机做例子；Linux配置方法类似，不再赘述。<br>同样地，根据客户端设备的情况选择相应的frp程序进行下载，Windows下下载和解压等步骤不再描述。<br>假定你下载了“frp_0.22.0_windows_amd64.zip”，将其解压在了C盘根目录下，并且将文件夹重命名为“frp”，可以删除其中的frps和frps.ini文件。<br>用文本编辑器打开frpc.ini，与服务端类似，内容如下。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[common]</span><br><span class=\"line\">server_addr = 182.92.189.71</span><br><span class=\"line\">server_port = 7000</span><br><span class=\"line\">token= password</span><br><span class=\"line\"></span><br><span class=\"line\">[RDP]</span><br><span class=\"line\">type = tcp</span><br><span class=\"line\">local_ip = 127.0.0.1</span><br><span class=\"line\">local_port = 3389</span><br><span class=\"line\">remote_port = 7001</span><br><span class=\"line\"></span><br><span class=\"line\">[VNC]</span><br><span class=\"line\">type = tcp</span><br><span class=\"line\">local_ip = 127.0.0.1</span><br><span class=\"line\">local_port = 5900</span><br><span class=\"line\">remote_port = 7002</span><br><span class=\"line\"></span><br><span class=\"line\">[SMB]</span><br><span class=\"line\">type = tcp</span><br><span class=\"line\">local_ip = 127.0.0.1</span><br><span class=\"line\">local_port = 445</span><br><span class=\"line\">remote_port = 7003</span><br></pre></td></tr></table></figure>\n<pre><code>- 其中common字段下的三项即为服务端的设置。\n- “server_addr”为服务端IP地址，填入即可。\n- “server_port”为服务器端口，填入你设置的端口号即可，如果未改变就是7000\n- “token”是你在服务器上设置的连接口令，原样填入即可。\n</code></pre>\n<ul>\n<li>自定义规则<br>frp实际使用时，会按照端口号进行对应的转发，<br>上面frpc.ini的rdp、smb字段都是自己定义的规则，自定义端口对应时格式如下。<br>“[xxx]”表示一个规则名称，自己定义，便于查询即可。<br>“type”表示转发的协议类型，有TCP和UDP等选项可以选择，如有需要请自行查询frp手册。<br>“local_port”是本地应用的端口号，按照实际应用工作在本机的端口号填写即可。<br>“remote_port”是该条规则在服务端开放的端口号，自己填写并记录即可。<br>RDP，即Remote Desktop 远程桌面，Windows的RDP默认端口是3389，协议为TCP，建议使用frp远程连接前，在局域网中测试好，能够成功连接后再使用frp穿透连接。<br>SMB，即Windows文件共享所使用的协议，默认端口号445，协议TCP，本条规则可实现远程文件访问。<br>配置完成frpc.ini后，就可以运行frpc了<br>frpc程序不能直接双击运行！<br>使用命令提示符或Powershell进入该目录下<br><code>cd C:\\frp</code><br>并执行<br><code>./frpc -c frpc.ini</code><br>运行frpc程序，窗口中输出如下内容表示运行正常。<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2019/01/12 16:14:56 [I] [service.go:205] login to server success, get run id [2b65b4e58a5917ac], server udp port [0]</span><br><span class=\"line\">2019/01/12 16:14:56 [I] [proxy_manager.go:136] [2b65b4e58a5917ac] proxy added: [rdp smb]</span><br><span class=\"line\">2019/01/12 16:14:56 [I] [control.go:143] [smb] start proxy success</span><br><span class=\"line\">2019/01/12 16:14:56 [I] [control.go:143] [rdp] start proxy success</span><br></pre></td></tr></table></figure>\n不要关闭命令行窗口，此时可以在局域网外使用相应程序访问 x.x.x.x:xxxx （IP为VPS的IP，端口为自定义的remote_port）即可访问到相应服务。</li>\n</ul>\n<p>此后利用winsw将客户端设置为开机自启动<br>编辑<code>winsw.xml</code><br>其格式如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;service&gt;</span><br><span class=\"line\">\t&lt;!-- 该服务的唯一标识 --&gt;</span><br><span class=\"line\">    &lt;id&gt;frpc&lt;/id&gt;</span><br><span class=\"line\">    &lt;!-- 该服务的名称 --&gt;</span><br><span class=\"line\">    &lt;name&gt;frp&lt;/name&gt;</span><br><span class=\"line\">    &lt;!-- 该服务的描述 --&gt;</span><br><span class=\"line\">    &lt;description&gt;frpc客户端 这个服务用 frpc 实现内网穿透&lt;/description&gt;</span><br><span class=\"line\">    &lt;!-- 要运行的程序路径 --&gt;</span><br><span class=\"line\">    &lt;executable&gt;frpc.exe&lt;/executable&gt;</span><br><span class=\"line\">    &lt;!-- 携带的参数 --&gt;</span><br><span class=\"line\">    &lt;arguments&gt;-c frpc.ini&lt;/arguments&gt;</span><br><span class=\"line\">    &lt;!-- 日志模式 --&gt;</span><br><span class=\"line\">    &lt;logmode&gt;none&lt;/logmode&gt;</span><br><span class=\"line\">&lt;/service&gt;</span><br></pre></td></tr></table></figure>\n\n<p>用cmd进入这一切的目录下<br>在命令框输入<code>winsw.exe install</code><br>显示 <code>INFO -Installing the servics with id &quot;***&quot;</code><br>即为成功<br>之后打开任务管理器，服务，打开服务，找到这个服务<br>将其设置为<strong>失败但不断重复</strong>，之后启动就好，大功告成！</p>\n<blockquote>\n<p>现在可以通过 vbs 脚本来启动服务，这样就可以在开机后自动启动了</p>\n</blockquote>\n<figure class=\"highlight vbs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">set</span> ws=wscript.<span class=\"built_in\">createobject</span>(<span class=\"string\">&quot;wscript.shell&quot;</span>)</span><br><span class=\"line\">ws.run <span class=\"string\">&quot;cmd /c C:\\frp_0.51.3_windows_amd64\\frpc -c C:\\frp_0.51.3_windows_amd64\\frpc.ini&quot;</span>,<span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<ul>\n<li>Boot up<br><code>frpc.ini</code></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[common]</span><br><span class=\"line\">server_addr = 150.158.17.239</span><br><span class=\"line\">server_port = 80</span><br><span class=\"line\">privilege_token = 88888888</span><br><span class=\"line\"></span><br><span class=\"line\">[RDP]</span><br><span class=\"line\">type = tcp</span><br><span class=\"line\">local_ip = 127.0.0.1</span><br><span class=\"line\">local_port = 3389</span><br><span class=\"line\">remote_port = 8001</span><br><span class=\"line\"></span><br><span class=\"line\">[Storage-Computing-System]</span><br><span class=\"line\">type = tcp</span><br><span class=\"line\">local_ip = 127.0.0.1</span><br><span class=\"line\">local_port = 22</span><br><span class=\"line\">remote_port = 8002</span><br><span class=\"line\"></span><br><span class=\"line\">[ssh_154]</span><br><span class=\"line\">type = tcp</span><br><span class=\"line\">local_ip = 172.17.0.154</span><br><span class=\"line\">local_port = 22</span><br><span class=\"line\">remote_port = 8003</span><br><span class=\"line\"></span><br><span class=\"line\">[ssh_155]</span><br><span class=\"line\">type = tcp</span><br><span class=\"line\">local_ip = 172.17.0.155</span><br><span class=\"line\">local_port = 22</span><br><span class=\"line\">remote_port = 8004</span><br><span class=\"line\"></span><br><span class=\"line\">[ssh_156]</span><br><span class=\"line\">type = tcp</span><br><span class=\"line\">local_ip = 172.17.0.156</span><br><span class=\"line\">local_port = 22</span><br><span class=\"line\">remote_port = 8005</span><br><span class=\"line\"></span><br><span class=\"line\">[ssh_157]</span><br><span class=\"line\">type = tcp</span><br><span class=\"line\">local_ip = 172.17.0.157</span><br><span class=\"line\">local_port = 22</span><br><span class=\"line\">remote_port = 8006</span><br><span class=\"line\"></span><br><span class=\"line\">[ssh_158]</span><br><span class=\"line\">type = tcp</span><br><span class=\"line\">local_ip = 172.17.0.158</span><br><span class=\"line\">local_port = 22</span><br><span class=\"line\">remote_port = 8007</span><br><span class=\"line\"></span><br><span class=\"line\">[ssh_159]</span><br><span class=\"line\">type = tcp</span><br><span class=\"line\">local_ip = 172.17.0.159</span><br><span class=\"line\">local_port = 22</span><br><span class=\"line\">remote_port = 8008</span><br></pre></td></tr></table></figure>\n\n\n\n<ol>\n<li><p>Create a systemd service unit file called <strong>frpc.service</strong> on Linux systems.<br><code>sudo nano /etc/systemd/system/frpc.service</code></p>\n</li>\n<li><p>Configuration</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=Frp client</span><br><span class=\"line\">After=network.target</span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">Type=simple</span><br><span class=\"line\">ExecStart=/usr/local/frp/frpc -c /usr/local/frp/frpc.ini</span><br><span class=\"line\">Restart=always</span><br><span class=\"line\">User=root</span><br><span class=\"line\"></span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>Description: Description information of the service.<br>After: The service needs to start after which services start.</p>\n<p>Type: Service startup type. simple means that the service will directly execute the commands in ExecStart after startup, and will not fork a new process.</p>\n<p>ExecStart: The command executed when the service starts.</p>\n<p>Restart: How systemd will handle the service when the service is abnormal. always means always restart the service.</p>\n<p>User: The user the service runs as.</p>\n<p>WantedBy: The runlevel the service is in.<br>In the above example, the command path and configuration file path in ExecStart need to be modified according to the actual situation.</p>\n<ol start=\"3\">\n<li><p>Reload the systemd configuration file:<br><code>sudo systemctl daemon-reload</code></p>\n</li>\n<li><p>Start the frpc service:<br><code>sudo systemctl start frpc</code></p>\n</li>\n<li><p>Verify that the service has started:<br><code>sudo systemctl status frpc</code></p>\n</li>\n</ol>\n<p>If the service is already started, output similar to the following will be displayed</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">● frpc.service - Frp client</span><br><span class=\"line\">     Loaded: loaded (/etc/systemd/system/frpc.service; disabled; vendor preset: enabled)</span><br><span class=\"line\">     Active: active (running) since Sat 2023-03-13 07:30:22 UTC; 15s ago</span><br><span class=\"line\">   Main PID: 12345 (frpc)</span><br><span class=\"line\">      Tasks: 7 (<span class=\"built_in\">limit</span>: 1136)</span><br><span class=\"line\">     Memory: 2.2M</span><br><span class=\"line\">     CGroup: /system.slice/frpc.service</span><br><span class=\"line\">             └─12345 /usr/local/frp/frpc -c /usr/local/frp/frpc.ini</span><br></pre></td></tr></table></figure>\n\n<ol start=\"6\">\n<li>Set the service to start automatically at boot:<br><code>sudo systemctl enable frpc</code></li>\n</ol>\n<p>Now, the frpc service has been configured to start automatically at boot and run in the background. The service can be stopped with the following command:<br><code>sudo systemctl stop frpc</code></p>\n<p>If you need to disable automatic startup on boot, you can use the following command:<br><code>sudo systemctl disable frpc</code></p>\n<h3 id=\"2-Zerotier\"><a href=\"#2-Zerotier\" class=\"headerlink\" title=\"2. Zerotier\"></a>2. Zerotier</h3><p>Official website: <a href=\"https://www.zerotier.com/\">https://www.zerotier.com/</a><br>Account: <a href=\"mailto:&#x73;&#105;&#x6b;&#101;&#115;&#54;&#x30;&#52;&#48;&#x37;&#64;&#x6c;&#111;&#111;&#110;&#103;&#x77;&#105;&#110;&#46;&#x63;&#x6f;&#x6d;\">&#x73;&#105;&#x6b;&#101;&#115;&#54;&#x30;&#52;&#48;&#x37;&#64;&#x6c;&#111;&#111;&#110;&#103;&#x77;&#105;&#110;&#46;&#x63;&#x6f;&#x6d;</a><br>Password: yFKjXv46JT@.43d<br>Network ID: </p>\n<ul>\n<li><p>Linux install ZeroTier<br><code>curl -s https://install.zerotier.com | sudo bash</code></p>\n</li>\n<li><p>Join the network by ID<br><code>sudo zerotier-cli join &lt;NETWORK_ID&gt;</code></p>\n</li>\n<li><p>Go to the official website to authorize</p>\n</li>\n<li><p>Check connection status<br><code>sudo zerotier-cli listnetworks</code></p>\n</li>\n<li><p>Addition</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zerotier-cli leave Network ID   <span class=\"comment\">#leave the network</span></span><br><span class=\"line\"></span><br><span class=\"line\">sudo systemctl <span class=\"built_in\">enable</span> zerotier-one.service</span><br><span class=\"line\"></span><br><span class=\"line\">sudo systemctl start zerotier-one.service</span><br><span class=\"line\"></span><br><span class=\"line\">sudo zerotier-cli <span class=\"built_in\">join</span> &lt;NETWORK_ID&gt;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"3-花生壳\"><a href=\"#3-花生壳\" class=\"headerlink\" title=\"3. 花生壳\"></a>3. 花生壳</h3><h3 id=\"4-tailscale\"><a href=\"#4-tailscale\" class=\"headerlink\" title=\"4. tailscale\"></a>4. tailscale</h3><p>国内目前测试比 zerotier 好用一些</p>\n<h3 id=\"5-moonlight-sunshine\"><a href=\"#5-moonlight-sunshine\" class=\"headerlink\" title=\"5. moonlight + sunshine\"></a>5. <a href=\"https://github.com/moonlight-stream/moonlight-qt\">moonlight</a> + <a href=\"https://github.com/LizardByte/Sunshine\">sunshine</a></h3><p>服务端 sunshine，客户端 moonlight</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"1-frp\"><a href=\"#1-frp\" class=\"headerlink\" title=\"1 frp\"></a>1 frp</h3><ul>\n<li><p>在<a href=\"https://github.com/fatedier/frp\">官方github</a>下载对应版本</p></li></ul>","more":"<p></p>\n\n<li><p>我们只需要关注如下几个文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">frps</span><br><span class=\"line\">frps.ini</span><br><span class=\"line\">frpc</span><br><span class=\"line\">frpc.ini</span><br></pre></td></tr></table></figure>\n<p>前两个文件（s结尾代表server）分别是服务端程序和服务端配置文件，后两个文件（c结尾代表client）分别是客户端程序和客户端配置文件。<br>因为我们正在配置服务端，可以删除客户端的两个文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rm frpc</span><br><span class=\"line\">rm frpc.ini</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>然后修改frps.ini文件<br>这个文件应有如下格式</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[common]</span><br><span class=\"line\">bind_port = 7000</span><br><span class=\"line\">dashboard_port = 7500(网页登录端口)</span><br><span class=\"line\">token = meng123456（密码可以自己修改）</span><br><span class=\"line\">dashboard_user = meng（网页登录帐号）</span><br><span class=\"line\">dashboard_pwd = meng123456（网页登录密码）</span><br><span class=\"line\">vhost_http_port = 10080</span><br><span class=\"line\">vhost_https_port = 10443</span><br></pre></td></tr></table></figure>\n<p>如果没有必要，端口均可使用默认值，token、user和password项请自行设置。</p>\n<ul>\n<li>“bind_port”表示用于客户端和服务端连接的端口，这个端口号我们之后在配置客户端的时候要用到。</li>\n<li>“dashboard_port”是服务端仪表板的端口，若使用7500端口，在配置完成服务启动后可以通过浏览器访问 x.x.x.x:7500 （其中x.x.x.x为VPS的IP）查看frp服务运行信息。</li>\n<li>“token”是用于客户端和服务端连接的口令，请自行设置并记录，稍后会用到。</li>\n<li>“dashboard_user”和“dashboard_pwd”表示打开仪表板页面登录的用户名和密码，自行设置即可。</li>\n<li>“vhost_http_port”和“vhost_https_port”用于反向代理HTTP主机时使用，本文不涉及HTTP协议，因而照抄或者删除这两条均可。</li>\n</ul>\n</li>\n<li><p>编辑完成后保存</p>\n</li>\n\n<p>如果看到屏幕输出这样一段内容，即表示运行正常，如果出现错误提示，请检查上面的步骤。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2019/01/12 15:22:39 [I] [service.go:130] frps tcp listen on 0.0.0.0:7000</span><br><span class=\"line\">2019/01/12 15:22:39 [I] [service.go:172] http service listen on 0.0.0.0:10080</span><br><span class=\"line\">2019/01/12 15:22:39 [I] [service.go:193] https service listen on 0.0.0.0:10443</span><br><span class=\"line\">2019/01/12 15:22:39 [I] [service.go:216] Dashboard listen on 0.0.0.0:7500</span><br><span class=\"line\">2019/01/12 15:22:39 [I] [root.go:210] Start frps success</span><br></pre></td></tr></table></figure>\n<p>此时访问 x.x.x.x:7500 并使用自己设置的用户名密码登录，即可看到仪表板界面</p>\n<ul>\n<li>服务端后台运行</li>\n</ul>\n<p>至此，我们的服务端仅运行在前台，如果Ctrl+C停止或者关闭SSH窗口后，frps均会停止运行，因而我们使用 nohup命令将其运行在后台。<br>nohup后台程序管理或关闭相关命令可自行查询资料。<br><code>nohup ./frps -c frps.ini &amp;</code><br>输出如下内容即表示正常运行</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nohup: ignoring input and appending output to &#x27;nohup.out&#x27;</span><br></pre></td></tr></table></figure>\n<p>此时可先使用Ctrl+C关闭nohup，frps依然会在后台运行，使用jobs命令查看后台运行的程序<br><code>jobs</code><br>在结果中我们可以看到frps正在后台正常运行</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[1]+  Running                 nohup ./frps -c frps.ini &amp;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>此处附上开机自启动的方式<br><code>tar -zxvf frp_0.29.0_linux_amd64.tar.gz</code><br>运行命令<br>.&#x2F;frps -c .&#x2F;frps.ini</li>\n</ul>\n<hr>\n<p>设置自动启动<br>vim &#x2F;lib&#x2F;systemd&#x2F;system&#x2F;frps.service<br>写入以下配置</p>\n<hr>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=frps service</span><br><span class=\"line\">After=network.target network-online.target syslog.target</span><br><span class=\"line\">Wants=network.target network-online.target</span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">Type=simple</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">启动服务的命令（此处写你的frps的实际安装目录）</span></span><br><span class=\"line\">ExecStart=/root/frp/frps -c /root/frp/frps.ini</span><br><span class=\"line\"></span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>\n<hr>\n<p>然后启动 frps<br><code>systemctl start frps</code><br>再打开自启动<br><code>systemctl enable frps</code><br>同时</p>\n<p>重启 <code>systemctl restart frps</code><br>停止 <code>systemctl stop frps</code><br>查看应用日志 <code>systemctl status frps</code></p>\n<p>frp的客户端就是我们想要真正进行访问的那台设备，大多数情况下应该会是一台Windows主机，因而本文使用Windows主机做例子；Linux配置方法类似，不再赘述。<br>同样地，根据客户端设备的情况选择相应的frp程序进行下载，Windows下下载和解压等步骤不再描述。<br>假定你下载了“frp_0.22.0_windows_amd64.zip”，将其解压在了C盘根目录下，并且将文件夹重命名为“frp”，可以删除其中的frps和frps.ini文件。<br>用文本编辑器打开frpc.ini，与服务端类似，内容如下。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[common]</span><br><span class=\"line\">server_addr = 182.92.189.71</span><br><span class=\"line\">server_port = 7000</span><br><span class=\"line\">token= password</span><br><span class=\"line\"></span><br><span class=\"line\">[RDP]</span><br><span class=\"line\">type = tcp</span><br><span class=\"line\">local_ip = 127.0.0.1</span><br><span class=\"line\">local_port = 3389</span><br><span class=\"line\">remote_port = 7001</span><br><span class=\"line\"></span><br><span class=\"line\">[VNC]</span><br><span class=\"line\">type = tcp</span><br><span class=\"line\">local_ip = 127.0.0.1</span><br><span class=\"line\">local_port = 5900</span><br><span class=\"line\">remote_port = 7002</span><br><span class=\"line\"></span><br><span class=\"line\">[SMB]</span><br><span class=\"line\">type = tcp</span><br><span class=\"line\">local_ip = 127.0.0.1</span><br><span class=\"line\">local_port = 445</span><br><span class=\"line\">remote_port = 7003</span><br></pre></td></tr></table></figure>\n<pre><code>- 其中common字段下的三项即为服务端的设置。\n- “server_addr”为服务端IP地址，填入即可。\n- “server_port”为服务器端口，填入你设置的端口号即可，如果未改变就是7000\n- “token”是你在服务器上设置的连接口令，原样填入即可。\n</code></pre>\n<ul>\n<li>自定义规则<br>frp实际使用时，会按照端口号进行对应的转发，<br>上面frpc.ini的rdp、smb字段都是自己定义的规则，自定义端口对应时格式如下。<br>“[xxx]”表示一个规则名称，自己定义，便于查询即可。<br>“type”表示转发的协议类型，有TCP和UDP等选项可以选择，如有需要请自行查询frp手册。<br>“local_port”是本地应用的端口号，按照实际应用工作在本机的端口号填写即可。<br>“remote_port”是该条规则在服务端开放的端口号，自己填写并记录即可。<br>RDP，即Remote Desktop 远程桌面，Windows的RDP默认端口是3389，协议为TCP，建议使用frp远程连接前，在局域网中测试好，能够成功连接后再使用frp穿透连接。<br>SMB，即Windows文件共享所使用的协议，默认端口号445，协议TCP，本条规则可实现远程文件访问。<br>配置完成frpc.ini后，就可以运行frpc了<br>frpc程序不能直接双击运行！<br>使用命令提示符或Powershell进入该目录下<br><code>cd C:\\frp</code><br>并执行<br><code>./frpc -c frpc.ini</code><br>运行frpc程序，窗口中输出如下内容表示运行正常。<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2019/01/12 16:14:56 [I] [service.go:205] login to server success, get run id [2b65b4e58a5917ac], server udp port [0]</span><br><span class=\"line\">2019/01/12 16:14:56 [I] [proxy_manager.go:136] [2b65b4e58a5917ac] proxy added: [rdp smb]</span><br><span class=\"line\">2019/01/12 16:14:56 [I] [control.go:143] [smb] start proxy success</span><br><span class=\"line\">2019/01/12 16:14:56 [I] [control.go:143] [rdp] start proxy success</span><br></pre></td></tr></table></figure>\n不要关闭命令行窗口，此时可以在局域网外使用相应程序访问 x.x.x.x:xxxx （IP为VPS的IP，端口为自定义的remote_port）即可访问到相应服务。</li>\n</ul>\n<p>此后利用winsw将客户端设置为开机自启动<br>编辑<code>winsw.xml</code><br>其格式如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;service&gt;</span><br><span class=\"line\">\t&lt;!-- 该服务的唯一标识 --&gt;</span><br><span class=\"line\">    &lt;id&gt;frpc&lt;/id&gt;</span><br><span class=\"line\">    &lt;!-- 该服务的名称 --&gt;</span><br><span class=\"line\">    &lt;name&gt;frp&lt;/name&gt;</span><br><span class=\"line\">    &lt;!-- 该服务的描述 --&gt;</span><br><span class=\"line\">    &lt;description&gt;frpc客户端 这个服务用 frpc 实现内网穿透&lt;/description&gt;</span><br><span class=\"line\">    &lt;!-- 要运行的程序路径 --&gt;</span><br><span class=\"line\">    &lt;executable&gt;frpc.exe&lt;/executable&gt;</span><br><span class=\"line\">    &lt;!-- 携带的参数 --&gt;</span><br><span class=\"line\">    &lt;arguments&gt;-c frpc.ini&lt;/arguments&gt;</span><br><span class=\"line\">    &lt;!-- 日志模式 --&gt;</span><br><span class=\"line\">    &lt;logmode&gt;none&lt;/logmode&gt;</span><br><span class=\"line\">&lt;/service&gt;</span><br></pre></td></tr></table></figure>\n\n<p>用cmd进入这一切的目录下<br>在命令框输入<code>winsw.exe install</code><br>显示 <code>INFO -Installing the servics with id &quot;***&quot;</code><br>即为成功<br>之后打开任务管理器，服务，打开服务，找到这个服务<br>将其设置为<strong>失败但不断重复</strong>，之后启动就好，大功告成！</p>\n<blockquote>\n<p>现在可以通过 vbs 脚本来启动服务，这样就可以在开机后自动启动了</p>\n</blockquote>\n<figure class=\"highlight vbs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">set</span> ws=wscript.<span class=\"built_in\">createobject</span>(<span class=\"string\">&quot;wscript.shell&quot;</span>)</span><br><span class=\"line\">ws.run <span class=\"string\">&quot;cmd /c C:\\frp_0.51.3_windows_amd64\\frpc -c C:\\frp_0.51.3_windows_amd64\\frpc.ini&quot;</span>,<span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<ul>\n<li>Boot up<br><code>frpc.ini</code></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[common]</span><br><span class=\"line\">server_addr = 150.158.17.239</span><br><span class=\"line\">server_port = 80</span><br><span class=\"line\">privilege_token = 88888888</span><br><span class=\"line\"></span><br><span class=\"line\">[RDP]</span><br><span class=\"line\">type = tcp</span><br><span class=\"line\">local_ip = 127.0.0.1</span><br><span class=\"line\">local_port = 3389</span><br><span class=\"line\">remote_port = 8001</span><br><span class=\"line\"></span><br><span class=\"line\">[Storage-Computing-System]</span><br><span class=\"line\">type = tcp</span><br><span class=\"line\">local_ip = 127.0.0.1</span><br><span class=\"line\">local_port = 22</span><br><span class=\"line\">remote_port = 8002</span><br><span class=\"line\"></span><br><span class=\"line\">[ssh_154]</span><br><span class=\"line\">type = tcp</span><br><span class=\"line\">local_ip = 172.17.0.154</span><br><span class=\"line\">local_port = 22</span><br><span class=\"line\">remote_port = 8003</span><br><span class=\"line\"></span><br><span class=\"line\">[ssh_155]</span><br><span class=\"line\">type = tcp</span><br><span class=\"line\">local_ip = 172.17.0.155</span><br><span class=\"line\">local_port = 22</span><br><span class=\"line\">remote_port = 8004</span><br><span class=\"line\"></span><br><span class=\"line\">[ssh_156]</span><br><span class=\"line\">type = tcp</span><br><span class=\"line\">local_ip = 172.17.0.156</span><br><span class=\"line\">local_port = 22</span><br><span class=\"line\">remote_port = 8005</span><br><span class=\"line\"></span><br><span class=\"line\">[ssh_157]</span><br><span class=\"line\">type = tcp</span><br><span class=\"line\">local_ip = 172.17.0.157</span><br><span class=\"line\">local_port = 22</span><br><span class=\"line\">remote_port = 8006</span><br><span class=\"line\"></span><br><span class=\"line\">[ssh_158]</span><br><span class=\"line\">type = tcp</span><br><span class=\"line\">local_ip = 172.17.0.158</span><br><span class=\"line\">local_port = 22</span><br><span class=\"line\">remote_port = 8007</span><br><span class=\"line\"></span><br><span class=\"line\">[ssh_159]</span><br><span class=\"line\">type = tcp</span><br><span class=\"line\">local_ip = 172.17.0.159</span><br><span class=\"line\">local_port = 22</span><br><span class=\"line\">remote_port = 8008</span><br></pre></td></tr></table></figure>\n\n\n\n<ol>\n<li><p>Create a systemd service unit file called <strong>frpc.service</strong> on Linux systems.<br><code>sudo nano /etc/systemd/system/frpc.service</code></p>\n</li>\n<li><p>Configuration</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=Frp client</span><br><span class=\"line\">After=network.target</span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">Type=simple</span><br><span class=\"line\">ExecStart=/usr/local/frp/frpc -c /usr/local/frp/frpc.ini</span><br><span class=\"line\">Restart=always</span><br><span class=\"line\">User=root</span><br><span class=\"line\"></span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>Description: Description information of the service.<br>After: The service needs to start after which services start.</p>\n<p>Type: Service startup type. simple means that the service will directly execute the commands in ExecStart after startup, and will not fork a new process.</p>\n<p>ExecStart: The command executed when the service starts.</p>\n<p>Restart: How systemd will handle the service when the service is abnormal. always means always restart the service.</p>\n<p>User: The user the service runs as.</p>\n<p>WantedBy: The runlevel the service is in.<br>In the above example, the command path and configuration file path in ExecStart need to be modified according to the actual situation.</p>\n<ol start=\"3\">\n<li><p>Reload the systemd configuration file:<br><code>sudo systemctl daemon-reload</code></p>\n</li>\n<li><p>Start the frpc service:<br><code>sudo systemctl start frpc</code></p>\n</li>\n<li><p>Verify that the service has started:<br><code>sudo systemctl status frpc</code></p>\n</li>\n</ol>\n<p>If the service is already started, output similar to the following will be displayed</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">● frpc.service - Frp client</span><br><span class=\"line\">     Loaded: loaded (/etc/systemd/system/frpc.service; disabled; vendor preset: enabled)</span><br><span class=\"line\">     Active: active (running) since Sat 2023-03-13 07:30:22 UTC; 15s ago</span><br><span class=\"line\">   Main PID: 12345 (frpc)</span><br><span class=\"line\">      Tasks: 7 (<span class=\"built_in\">limit</span>: 1136)</span><br><span class=\"line\">     Memory: 2.2M</span><br><span class=\"line\">     CGroup: /system.slice/frpc.service</span><br><span class=\"line\">             └─12345 /usr/local/frp/frpc -c /usr/local/frp/frpc.ini</span><br></pre></td></tr></table></figure>\n\n<ol start=\"6\">\n<li>Set the service to start automatically at boot:<br><code>sudo systemctl enable frpc</code></li>\n</ol>\n<p>Now, the frpc service has been configured to start automatically at boot and run in the background. The service can be stopped with the following command:<br><code>sudo systemctl stop frpc</code></p>\n<p>If you need to disable automatic startup on boot, you can use the following command:<br><code>sudo systemctl disable frpc</code></p>\n<h3 id=\"2-Zerotier\"><a href=\"#2-Zerotier\" class=\"headerlink\" title=\"2. Zerotier\"></a>2. Zerotier</h3><p>Official website: <a href=\"https://www.zerotier.com/\">https://www.zerotier.com/</a><br>Account: <a href=\"mailto:&#x73;&#105;&#x6b;&#101;&#115;&#54;&#x30;&#52;&#48;&#x37;&#64;&#x6c;&#111;&#111;&#110;&#103;&#x77;&#105;&#110;&#46;&#x63;&#x6f;&#x6d;\">&#x73;&#105;&#x6b;&#101;&#115;&#54;&#x30;&#52;&#48;&#x37;&#64;&#x6c;&#111;&#111;&#110;&#103;&#x77;&#105;&#110;&#46;&#x63;&#x6f;&#x6d;</a><br>Password: yFKjXv46JT@.43d<br>Network ID: </p>\n<ul>\n<li><p>Linux install ZeroTier<br><code>curl -s https://install.zerotier.com | sudo bash</code></p>\n</li>\n<li><p>Join the network by ID<br><code>sudo zerotier-cli join &lt;NETWORK_ID&gt;</code></p>\n</li>\n<li><p>Go to the official website to authorize</p>\n</li>\n<li><p>Check connection status<br><code>sudo zerotier-cli listnetworks</code></p>\n</li>\n<li><p>Addition</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zerotier-cli leave Network ID   <span class=\"comment\">#leave the network</span></span><br><span class=\"line\"></span><br><span class=\"line\">sudo systemctl <span class=\"built_in\">enable</span> zerotier-one.service</span><br><span class=\"line\"></span><br><span class=\"line\">sudo systemctl start zerotier-one.service</span><br><span class=\"line\"></span><br><span class=\"line\">sudo zerotier-cli <span class=\"built_in\">join</span> &lt;NETWORK_ID&gt;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"3-花生壳\"><a href=\"#3-花生壳\" class=\"headerlink\" title=\"3. 花生壳\"></a>3. 花生壳</h3><h3 id=\"4-tailscale\"><a href=\"#4-tailscale\" class=\"headerlink\" title=\"4. tailscale\"></a>4. tailscale</h3><p>国内目前测试比 zerotier 好用一些</p>\n<h3 id=\"5-moonlight-sunshine\"><a href=\"#5-moonlight-sunshine\" class=\"headerlink\" title=\"5. moonlight + sunshine\"></a>5. <a href=\"https://github.com/moonlight-stream/moonlight-qt\">moonlight</a> + <a href=\"https://github.com/LizardByte/Sunshine\">sunshine</a></h3><p>服务端 sunshine，客户端 moonlight</p>"},{"title":"Linux通过davfs2挂载WebDav网盘","date":"2023-12-10T12:43:30.000Z","_content":"```bash\nsudo apt install davfs2\n\nmkdir /mnt/alist/\nsudo mount.davfs http://locaohost:8080/dav/ /mnt/alist/\n# 输入账号密码并手动连接\n```\n\n---------------\n1. 编辑 `/etc/davfs2/davfs2.conf`，找到其中的 `use_lock` 取消注释，并修改值为 `0`。（用于修正复制剪切文件错误）\n2. 修改 `/etc/davfs2/secrets`，在末尾添加 `http://localhost:8080/dav/ admin password`\n3. 编辑 `/etc/fstab`，在最后一行添加以下内容 `http://localhost:8080/dav/ /mnt/alist/ davfs defaults 0 0`\n4. 映射文件夹 `ln -s /mnt/alist/ /home/alist/`","source":"_posts/Linux通过davfs2挂载WebDav网盘.md","raw":"---\ntitle: Linux通过davfs2挂载WebDav网盘\ndate: 2023-12-10 12:43:30\ntags:\n    - Linux\n    - WebDav\n---\n```bash\nsudo apt install davfs2\n\nmkdir /mnt/alist/\nsudo mount.davfs http://locaohost:8080/dav/ /mnt/alist/\n# 输入账号密码并手动连接\n```\n\n---------------\n1. 编辑 `/etc/davfs2/davfs2.conf`，找到其中的 `use_lock` 取消注释，并修改值为 `0`。（用于修正复制剪切文件错误）\n2. 修改 `/etc/davfs2/secrets`，在末尾添加 `http://localhost:8080/dav/ admin password`\n3. 编辑 `/etc/fstab`，在最后一行添加以下内容 `http://localhost:8080/dav/ /mnt/alist/ davfs defaults 0 0`\n4. 映射文件夹 `ln -s /mnt/alist/ /home/alist/`","slug":"Linux通过davfs2挂载WebDav网盘","published":1,"updated":"2024-04-25T17:26:46.203Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvjbaqhb000s0vn1d91qb8b7","content":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install davfs2</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> /mnt/alist/</span><br><span class=\"line\">sudo mount.davfs http://locaohost:8080/dav/ /mnt/alist/</span><br><span class=\"line\"><span class=\"comment\"># 输入账号密码并手动连接</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<ol>\n<li>编辑 <code>/etc/davfs2/davfs2.conf</code>，找到其中的 <code>use_lock</code> 取消注释，并修改值为 <code>0</code>。（用于修正复制剪切文件错误）</li>\n<li>修改 <code>/etc/davfs2/secrets</code>，在末尾添加 <code>http://localhost:8080/dav/ admin password</code></li>\n<li>编辑 <code>/etc/fstab</code>，在最后一行添加以下内容 <code>http://localhost:8080/dav/ /mnt/alist/ davfs defaults 0 0</code></li>\n<li>映射文件夹 <code>ln -s /mnt/alist/ /home/alist/</code></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install davfs2</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> /mnt/alist/</span><br><span class=\"line\">sudo mount.davfs http://locaohost:8080/dav/ /mnt/alist/</span><br><span class=\"line\"><span class=\"comment\"># 输入账号密码并手动连接</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<ol>\n<li>编辑 <code>/etc/davfs2/davfs2.conf</code>，找到其中的 <code>use_lock</code> 取消注释，并修改值为 <code>0</code>。（用于修正复制剪切文件错误）</li>\n<li>修改 <code>/etc/davfs2/secrets</code>，在末尾添加 <code>http://localhost:8080/dav/ admin password</code></li>\n<li>编辑 <code>/etc/fstab</code>，在最后一行添加以下内容 <code>http://localhost:8080/dav/ /mnt/alist/ davfs defaults 0 0</code></li>\n<li>映射文件夹 <code>ln -s /mnt/alist/ /home/alist/</code></li>\n</ol>\n"},{"title":"Manage github through git","date":"2023-04-08T14:51:45.000Z","declare":true,"_content":"- `git clone <GitHub仓库的URL>`<!--more-->\n- `git add .`\n- `git commit -m \"Commit message\"`\n- `git push origin master`\n- 如果在 GitHub 网站上进行了更改，并且想要在本地存储库中更新更改，则可以使用以下命令\n  - `git pull origin master #这将从 GitHub 仓库中获取更改并将其合并到本地存储库中。`\n- 如果只想更改仓库中特定文件夹中的特定文件，可以使用以下步骤：\n  - `git add <file-path>`\n  - `git commit -m \"Commit message\"`\n  - `git push origin master`\n\n----------------------------------------------------\n如果在项目中正确配置了`.gitignore`文件，但是在执行`git push`后`.vscode`文件夹仍然出现在GitHub上，：\n\n1. **已经提交的文件：** 如果您之前已经将`.vscode`文件夹提交到了Git存储库，那么`.gitignore`的更改不会影响这些已提交的文件。在这种情况下，需要从历史记录中移除`.vscode`文件夹。这可以通过使用`git rm --cached`命令来完成，然后提交更改并推送。\n\n2. **缓存区中的文件：** 如果`.vscode`文件夹在您的Git缓存区中，`.gitignore`规则不会自动应用于已缓存的文件。可以使用以下命令将缓存区中的文件从暂存中移除：\n\n   ```\n   git rm --cached -r .vscode/\n   ```\n\n   然后，提交更改并推送。\n\n\n\n\n---------------------------------------------\n`git push origin master` 和 `git push -u origin master` 是 Git 中的两个不同的推送命令，它们在行为上有一些区别。\n\n1. `git push origin master`：这是一个简单的推送命令，用于将本地的 `master` 分支的提交推送到远程仓库（通常是 `origin` 远程仓库）。该命令将本地的 `master` 分支提交内容推送到远程仓库的 `master` 分支，但不会建立本地分支与远程分支的关联。\n\n2. `git push -u origin master`：这个命令与上述命令相似，但多了一个 `-u` 或 `--set-upstream` 选项。该选项用于在推送同时建立本地分支与远程分支的关联。使用 `-u` 选项后，Git 将会跟踪本地分支与远程分支的关系，之后可以使用简单的 `git push` 命令进行推送，而不需要指定远程仓库和分支。\n\n总结区别：\n- `git push origin master` 简单地将本地的 `master` 分支的提交推送到远程仓库，不会建立本地分支与远程分支的关联。\n- `git push -u origin master` 在推送的同时建立本地分支与远程分支的关联，使得后续可以使用简单的 `git push` 命令进行推送。\n\n通常在第一次推送本地分支到远程仓库时，使用 `git push -u origin master` 是比较常见的，以建立本地分支与远程分支的关联。此后，可以使用简单的 `git push` 命令来推送更新。\n\n----------------------------------------------\n\n> GitHub 在 2021 年 8 月 13 日停止了密码身份验证。现在，GitHub 推荐使用访问令牌（Access Token）或 SSH 密钥进行身份验证。\n\n#### 1. 在 GitHub 账户中生成一个访问令牌。请按照以下步骤进行操作：\n- 在 GitHub 上登录账户，并进入“Settings”（设置）页面。\n- 点击左侧导航栏中的“Developer settings”（开发人员设置），然后选择“Personal access tokens”（个人访问令牌）。\n- 点击“Generate new token”（生成新令牌）。\n- 选择所需的权限，然后点击“Generate token”（生成令牌）。\n- 复制生成的访问令牌。\n\n#### 2. 在本地 Git 存储库中更新身份验证信息。执行以下命令：\n`git config --global credential.helper store`\n这将设置 Git 存储凭据的方式为存储在本地文件中。\n\n#### 3. 现在，执行以下命令将访问令牌添加到 Git 存储库中：\n`git config --global credential.helper 'cache --timeout=3600'`\n在上面的命令中，`3600` 表示凭据缓存的有效时间为 1 小时。可以根据需要调整这个值。\n\n#### 4. 最后，重新执行 push 命令。Git 应该会提示输入用户名和密码。此时，**此时应该输入刚才生成的访问令牌作为密码**。\n`git push origin master`\n在输入访问令牌后，应该可以成功推送更改到 GitHub 仓库中。\n\n> 如果想将凭据信息存储在特定的 Git 存储库中，而不是全局范围内，可以使用 --local 参数代替 --global 参数，例如：`git config --local credential.helper store`\n\n#### 5. 如果想撤消全局设置并将存储方式更改回默认设置，可以使用以下命令：\n`git config --global --unset credential.helper`\n这将删除全局配置中的凭据存储方式，并使 Git 使用默认方式处理凭据信息。\n\n```bash\ngit clone -b 分支名 git@github.com:user/repo.git          # 下载特定分支\ngit init                                                  # 初始化本地git仓库（创建新仓库）\ngit config --global user.name \"xxx\"                       # 配置用户名\ngit config --global user.email \"xxx@xxx.com\"              # 配置邮件\ngit config –-global core.editor vim                        # 配置默认编辑器\ngit config –-global -e                                    # 查看git配置\ngit config --global color.ui true                         # git status等命令自动着色\ngit config --global color.status auto\ngit config --global color.diff auto\ngit config --global color.branch auto\ngit config --global color.interactive auto\ngit config --global --unset http.proxy                    # remove  proxy configuration on git\ngit clone git+ssh://git@192.168.53.168/VT.git             # clone远程仓库\ngit status                                                # 查看当前版本状态（是否修改）\ngit add xyz                                               # 添加xyz文件至index\ngit add .                                                 # 增加当前子目录下所有更改过的文件至index\ngit commit -m 'xxx'                                       # 提交\ngit commit --amend -m 'xxx'                               # 合并上一次提交（用于反复修改）\ngit commit -am 'xxx'                                      # 将add和commit合为一步\ngit rm xxx                                                # 删除index中的文件\ngit rm -r *                                               # 递归删除\ngit log                                                   # 显示提交日志\ngit log -1                                                # 显示1行日志 -n为n行\ngit log -5\ngit log --stat                                            # 显示提交日志及相关变动文件\ngit log -p -m\ngit log --pretty=oneline                                  # --pretty=oneline 指定显示两项最重要的信息：提交的引用ID和为提交记录的消息\ngit show dfb02e6e4f2f7b573337763e5c0013802e392818         # 显示某个提交的详细内容\ngit show dfb02                                            # 可只用commitid的前几位\ngit show HEAD                                             # 显示HEAD提交日志\ngit show HEAD^                                            # 显示HEAD的父（上一个版本）的提交日志 ^^为上两个版本 ^5为上5个版本\ngit tag                                                   # 显示已存在的tag\ngit tag -a v2.0 -m 'xxx'                                  # 增加v2.0的tag\ngit show v2.0                                             # 显示v2.0的日志及详细内容\ngit log v2.0                                              # 显示v2.0的日志\ngit diff                                                  # 显示所有未添加至index的变更\ngit diff --cached                                         # 显示所有已添加index但还未commit的变更\ngit diff HEAD^                                            # 比较与上一个版本的差异\ngit diff HEAD -- ./lib                                    # 比较与HEAD版本lib目录的差异\ngit diff origin/master..master                            # 比较远程分支master上有本地分支master上没有的\ngit diff origin/master..master --stat                     # 只显示差异的文件，不显示具体内容\ngit remote add origin git+ssh://git@192.168.53.168/VT.git # 增加远程定义（用于push/pull/fetch）\ngit branch                                                # 显示本地分支\ngit branch --contains 50089                               # 显示包含提交50089的分支\ngit branch -a                                             # 显示所有分支\ngit branch -r                                             # 显示所有原创分支\ngit branch --merged                                       # 显示所有已合并到当前分支的分支\ngit branch --no-merged                                    # 显示所有未合并到当前分支的分支\ngit branch -m master master_copy                          # 本地分支改名\ngit checkout -b master_copy                               # 从当前分支创建新分支master_copy并检出\ngit checkout -b master master_copy                        # 上面的完整版\ngit checkout features/performance                         # 检出已存在的features/performance分支\ngit checkout --track hotfixes/BJVEP933                    # 检出远程分支hotfixes/BJVEP933并创建本地跟踪分支\ngit checkout v2.0                                         # 检出版本v2.0\ngit checkout -b devel origin/develop                      # 从远程分支develop创建新本地分支devel并检出\ngit checkout -- README                                    # 检出head版本的README文件（可用于修改错误回退）\ngit checkout .                                            # 用于撤销工作目录中所有未提交的更改，恢复到最近一次提交的状态。\ngit checkout \\<commit_id\\>                                # 回到指定的引用ID（commit ID）版本，只需要前6字符.这会分离头指针\ngit merge origin/master                                   # 合并远程master分支至当前分支\ngit cherry-pick ff44785404a8e                             # 合并提交ff44785404a8e的修改\ngit push origin master                                    # 将当前分支push到远程master分支\ngit push origin :hotfixes/BJVEP933                        # 删除远程仓库的hotfixes/BJVEP933分支\ngit push --tags                                           # 把所有tag推送到远程仓库\ngit fetch                                                 # 获取所有远程分支（不更新本地分支，另需merge）\ngit fetch --prune                                         # 获取所有原创分支并清除服务器上已删掉的分支\ngit pull origin master                                    # 获取远程分支master并merge到当前分支\ngit mv README README2                                     # 重命名文件README为README2\ngit reset --hard HEAD                                     # 将当前版本重置为HEAD（通常用于merge失败回退）\ngit rebase\ngit branch -d hotfixes/BJVEP933                           # 删除分支hotfixes/BJVEP933（本分支修改已合并到其他分支）\ngit branch -D hotfixes/BJVEP933                           # 强制删除分支hotfixes/BJVEP933\ngit ls-files                                              # 列出git index包含的文件\ngit show-branch                                           # 图示当前分支历史\ngit show-branch --all                                     # 图示所有分支历史\ngit whatchanged                                           # 显示提交历史对应的文件修改\ngit revert dfb02e6e4f2f7b573337763e5c0013802e392818       # 撤销提交dfb02e6e4f2f7b573337763e5c0013802e392818\ngit ls-tree HEAD                                          # 内部命令：显示某个git对象\ngit rev-parse v2.0                                        # 内部命令：显示某个ref对于的SHA1 HASH\ngit reflog                                                # 显示所有提交，包括孤立节点\ngit show HEAD@{5}\ngit show master@{yesterday}                               # 显示master分支昨天的状态\ngit log --pretty=format:'%h %s' --graph                   # 图示提交日志\ngit show HEAD~3\ngit show -s --pretty=raw 2be7fcb476\ngit stash                                                 # 暂存当前修改，将所有至为HEAD状态\ngit stash list                                            # 查看所有暂存\ngit stash show -p stash@{0}                               # 参考第一次暂存\ngit stash apply stash@{0}                                 # 应用第一次暂存\ngit grep \"delete from\"                                    # 文件中搜索文本“delete from”\ngit grep -e '#define' --and -e SORT_DIRENT\ngit gc\ngit fsck\n```\n\n`git checkout .` 是一个 Git 命令，用于撤销工作目录中所有未提交的更改，恢复到最近一次提交的状态。\n\n具体解释如下：\n\n- `git checkout`：Git 命令，用于切换分支、恢复文件或恢复工作目录中的更改。\n- `.`：表示当前目录。在 `git checkout .` 命令中，`.` 代表当前工作目录下的所有文件和文件夹。\n\n当你执行 `git checkout .` 命令时，Git 会放弃所有未提交的更改，并将工作目录中的所有文件还原到最近一次提交的状态。换句话说，该命令会丢弃你对工作目录中文件的所有修改，将它们还原为最近一次提交的状态。\n\n> 需要注意的是，执行 `git checkout .` 命令会无法恢复被删除的文件，因为 Git 已经无法找到这些文件的历史记录。如果你需要恢复删除的文件，可以使用 `git checkout -- <file>` 命令，其中 `<file>` 是被删除的文件的路径。这将从最近一次提交中恢复该文件。\n\n在使用 `git checkout .` 命令之前，请确保你不再需要保存当前工作目录中的任何未提交的更改，因为这个命令将不可逆地丢弃这些更改。如果有必要，可以先使用 `git stash` 命令将当前的修改暂存起来，以便稍后再应用它们。\n\n--------------------------------------------------\n\n### 当远端和本端不一致时\n例如刚创建仓库，本地立刻创建了文件，远端也创建了文件，由于没有共同历史，此时会出现问题。解决方案如下：\n\n- 使用衍合（rebase）： 使用衍合策略将本地分支重演在远程分支之上。运行以下命令：\n```bash\ngit pull origin master --rebase\n```\n\n- 之后添加remote: `git remote add origin url`\n- 此时`push`就没有问题了: `git push -u origin \"master\"`\n\n-----------------------------\n\n**强制更新本地分支**： 执行以下命令，将远端的内容强制拉取到本地并更新本地分支：\n```bash\ngit fetch origin master\ngit reset --hard origin/master\n```\n\n-------------------------------------------\n\n在本地有未提交的修改，而Git在合并时发现这些修改会被覆盖。为了解决这个问题，有以下几个选项：\n\n### 选项 1: 提交本地修改\n\n```bash\n# 提交本地修改\ngit add _posts/paper.md\ngit commit -m \"Committing local changes to paper.md\"\n\n# 合并远程分支到本地\ngit pull origin source_backup\n```\n\n这样本地修改就被提交了，然后再进行合并操作。\n\n### 选项 2: 暂存本地修改\n\n如果不想提交本地修改，可以使用`git stash`命令将它们暂存起来，执行合并后再恢复这些修改。\n\n```bash\n# 暂存本地修改\ngit stash\n\n# 合并远程分支到本地\ngit pull origin source_backup\n\n# 恢复本地修改\ngit stash apply\n```\n\n### 选项 3: 丢弃本地修改\n\n如果不关心本地的修改，可以直接丢弃它们。\n\n```bash\n# 丢弃本地修改\ngit checkout -- _posts/paper.md\n\n# 合并远程分支到本地\ngit pull origin source_backup\n```\n\n\nReference\n[guweigang/git_toturial](https://gist.github.com/guweigang/9848271)\n[Corner430/git_toturial](https://gist.github.com/Corner430/89b71c356d7129ee174dc9b6609f8a36)\n","source":"_posts/Manage-github-through-git.md","raw":"---\ntitle: Manage github through git\ndate: 2023-04-08 14:51:45\ntags:\n  - git\ndeclare: true\n---\n- `git clone <GitHub仓库的URL>`<!--more-->\n- `git add .`\n- `git commit -m \"Commit message\"`\n- `git push origin master`\n- 如果在 GitHub 网站上进行了更改，并且想要在本地存储库中更新更改，则可以使用以下命令\n  - `git pull origin master #这将从 GitHub 仓库中获取更改并将其合并到本地存储库中。`\n- 如果只想更改仓库中特定文件夹中的特定文件，可以使用以下步骤：\n  - `git add <file-path>`\n  - `git commit -m \"Commit message\"`\n  - `git push origin master`\n\n----------------------------------------------------\n如果在项目中正确配置了`.gitignore`文件，但是在执行`git push`后`.vscode`文件夹仍然出现在GitHub上，：\n\n1. **已经提交的文件：** 如果您之前已经将`.vscode`文件夹提交到了Git存储库，那么`.gitignore`的更改不会影响这些已提交的文件。在这种情况下，需要从历史记录中移除`.vscode`文件夹。这可以通过使用`git rm --cached`命令来完成，然后提交更改并推送。\n\n2. **缓存区中的文件：** 如果`.vscode`文件夹在您的Git缓存区中，`.gitignore`规则不会自动应用于已缓存的文件。可以使用以下命令将缓存区中的文件从暂存中移除：\n\n   ```\n   git rm --cached -r .vscode/\n   ```\n\n   然后，提交更改并推送。\n\n\n\n\n---------------------------------------------\n`git push origin master` 和 `git push -u origin master` 是 Git 中的两个不同的推送命令，它们在行为上有一些区别。\n\n1. `git push origin master`：这是一个简单的推送命令，用于将本地的 `master` 分支的提交推送到远程仓库（通常是 `origin` 远程仓库）。该命令将本地的 `master` 分支提交内容推送到远程仓库的 `master` 分支，但不会建立本地分支与远程分支的关联。\n\n2. `git push -u origin master`：这个命令与上述命令相似，但多了一个 `-u` 或 `--set-upstream` 选项。该选项用于在推送同时建立本地分支与远程分支的关联。使用 `-u` 选项后，Git 将会跟踪本地分支与远程分支的关系，之后可以使用简单的 `git push` 命令进行推送，而不需要指定远程仓库和分支。\n\n总结区别：\n- `git push origin master` 简单地将本地的 `master` 分支的提交推送到远程仓库，不会建立本地分支与远程分支的关联。\n- `git push -u origin master` 在推送的同时建立本地分支与远程分支的关联，使得后续可以使用简单的 `git push` 命令进行推送。\n\n通常在第一次推送本地分支到远程仓库时，使用 `git push -u origin master` 是比较常见的，以建立本地分支与远程分支的关联。此后，可以使用简单的 `git push` 命令来推送更新。\n\n----------------------------------------------\n\n> GitHub 在 2021 年 8 月 13 日停止了密码身份验证。现在，GitHub 推荐使用访问令牌（Access Token）或 SSH 密钥进行身份验证。\n\n#### 1. 在 GitHub 账户中生成一个访问令牌。请按照以下步骤进行操作：\n- 在 GitHub 上登录账户，并进入“Settings”（设置）页面。\n- 点击左侧导航栏中的“Developer settings”（开发人员设置），然后选择“Personal access tokens”（个人访问令牌）。\n- 点击“Generate new token”（生成新令牌）。\n- 选择所需的权限，然后点击“Generate token”（生成令牌）。\n- 复制生成的访问令牌。\n\n#### 2. 在本地 Git 存储库中更新身份验证信息。执行以下命令：\n`git config --global credential.helper store`\n这将设置 Git 存储凭据的方式为存储在本地文件中。\n\n#### 3. 现在，执行以下命令将访问令牌添加到 Git 存储库中：\n`git config --global credential.helper 'cache --timeout=3600'`\n在上面的命令中，`3600` 表示凭据缓存的有效时间为 1 小时。可以根据需要调整这个值。\n\n#### 4. 最后，重新执行 push 命令。Git 应该会提示输入用户名和密码。此时，**此时应该输入刚才生成的访问令牌作为密码**。\n`git push origin master`\n在输入访问令牌后，应该可以成功推送更改到 GitHub 仓库中。\n\n> 如果想将凭据信息存储在特定的 Git 存储库中，而不是全局范围内，可以使用 --local 参数代替 --global 参数，例如：`git config --local credential.helper store`\n\n#### 5. 如果想撤消全局设置并将存储方式更改回默认设置，可以使用以下命令：\n`git config --global --unset credential.helper`\n这将删除全局配置中的凭据存储方式，并使 Git 使用默认方式处理凭据信息。\n\n```bash\ngit clone -b 分支名 git@github.com:user/repo.git          # 下载特定分支\ngit init                                                  # 初始化本地git仓库（创建新仓库）\ngit config --global user.name \"xxx\"                       # 配置用户名\ngit config --global user.email \"xxx@xxx.com\"              # 配置邮件\ngit config –-global core.editor vim                        # 配置默认编辑器\ngit config –-global -e                                    # 查看git配置\ngit config --global color.ui true                         # git status等命令自动着色\ngit config --global color.status auto\ngit config --global color.diff auto\ngit config --global color.branch auto\ngit config --global color.interactive auto\ngit config --global --unset http.proxy                    # remove  proxy configuration on git\ngit clone git+ssh://git@192.168.53.168/VT.git             # clone远程仓库\ngit status                                                # 查看当前版本状态（是否修改）\ngit add xyz                                               # 添加xyz文件至index\ngit add .                                                 # 增加当前子目录下所有更改过的文件至index\ngit commit -m 'xxx'                                       # 提交\ngit commit --amend -m 'xxx'                               # 合并上一次提交（用于反复修改）\ngit commit -am 'xxx'                                      # 将add和commit合为一步\ngit rm xxx                                                # 删除index中的文件\ngit rm -r *                                               # 递归删除\ngit log                                                   # 显示提交日志\ngit log -1                                                # 显示1行日志 -n为n行\ngit log -5\ngit log --stat                                            # 显示提交日志及相关变动文件\ngit log -p -m\ngit log --pretty=oneline                                  # --pretty=oneline 指定显示两项最重要的信息：提交的引用ID和为提交记录的消息\ngit show dfb02e6e4f2f7b573337763e5c0013802e392818         # 显示某个提交的详细内容\ngit show dfb02                                            # 可只用commitid的前几位\ngit show HEAD                                             # 显示HEAD提交日志\ngit show HEAD^                                            # 显示HEAD的父（上一个版本）的提交日志 ^^为上两个版本 ^5为上5个版本\ngit tag                                                   # 显示已存在的tag\ngit tag -a v2.0 -m 'xxx'                                  # 增加v2.0的tag\ngit show v2.0                                             # 显示v2.0的日志及详细内容\ngit log v2.0                                              # 显示v2.0的日志\ngit diff                                                  # 显示所有未添加至index的变更\ngit diff --cached                                         # 显示所有已添加index但还未commit的变更\ngit diff HEAD^                                            # 比较与上一个版本的差异\ngit diff HEAD -- ./lib                                    # 比较与HEAD版本lib目录的差异\ngit diff origin/master..master                            # 比较远程分支master上有本地分支master上没有的\ngit diff origin/master..master --stat                     # 只显示差异的文件，不显示具体内容\ngit remote add origin git+ssh://git@192.168.53.168/VT.git # 增加远程定义（用于push/pull/fetch）\ngit branch                                                # 显示本地分支\ngit branch --contains 50089                               # 显示包含提交50089的分支\ngit branch -a                                             # 显示所有分支\ngit branch -r                                             # 显示所有原创分支\ngit branch --merged                                       # 显示所有已合并到当前分支的分支\ngit branch --no-merged                                    # 显示所有未合并到当前分支的分支\ngit branch -m master master_copy                          # 本地分支改名\ngit checkout -b master_copy                               # 从当前分支创建新分支master_copy并检出\ngit checkout -b master master_copy                        # 上面的完整版\ngit checkout features/performance                         # 检出已存在的features/performance分支\ngit checkout --track hotfixes/BJVEP933                    # 检出远程分支hotfixes/BJVEP933并创建本地跟踪分支\ngit checkout v2.0                                         # 检出版本v2.0\ngit checkout -b devel origin/develop                      # 从远程分支develop创建新本地分支devel并检出\ngit checkout -- README                                    # 检出head版本的README文件（可用于修改错误回退）\ngit checkout .                                            # 用于撤销工作目录中所有未提交的更改，恢复到最近一次提交的状态。\ngit checkout \\<commit_id\\>                                # 回到指定的引用ID（commit ID）版本，只需要前6字符.这会分离头指针\ngit merge origin/master                                   # 合并远程master分支至当前分支\ngit cherry-pick ff44785404a8e                             # 合并提交ff44785404a8e的修改\ngit push origin master                                    # 将当前分支push到远程master分支\ngit push origin :hotfixes/BJVEP933                        # 删除远程仓库的hotfixes/BJVEP933分支\ngit push --tags                                           # 把所有tag推送到远程仓库\ngit fetch                                                 # 获取所有远程分支（不更新本地分支，另需merge）\ngit fetch --prune                                         # 获取所有原创分支并清除服务器上已删掉的分支\ngit pull origin master                                    # 获取远程分支master并merge到当前分支\ngit mv README README2                                     # 重命名文件README为README2\ngit reset --hard HEAD                                     # 将当前版本重置为HEAD（通常用于merge失败回退）\ngit rebase\ngit branch -d hotfixes/BJVEP933                           # 删除分支hotfixes/BJVEP933（本分支修改已合并到其他分支）\ngit branch -D hotfixes/BJVEP933                           # 强制删除分支hotfixes/BJVEP933\ngit ls-files                                              # 列出git index包含的文件\ngit show-branch                                           # 图示当前分支历史\ngit show-branch --all                                     # 图示所有分支历史\ngit whatchanged                                           # 显示提交历史对应的文件修改\ngit revert dfb02e6e4f2f7b573337763e5c0013802e392818       # 撤销提交dfb02e6e4f2f7b573337763e5c0013802e392818\ngit ls-tree HEAD                                          # 内部命令：显示某个git对象\ngit rev-parse v2.0                                        # 内部命令：显示某个ref对于的SHA1 HASH\ngit reflog                                                # 显示所有提交，包括孤立节点\ngit show HEAD@{5}\ngit show master@{yesterday}                               # 显示master分支昨天的状态\ngit log --pretty=format:'%h %s' --graph                   # 图示提交日志\ngit show HEAD~3\ngit show -s --pretty=raw 2be7fcb476\ngit stash                                                 # 暂存当前修改，将所有至为HEAD状态\ngit stash list                                            # 查看所有暂存\ngit stash show -p stash@{0}                               # 参考第一次暂存\ngit stash apply stash@{0}                                 # 应用第一次暂存\ngit grep \"delete from\"                                    # 文件中搜索文本“delete from”\ngit grep -e '#define' --and -e SORT_DIRENT\ngit gc\ngit fsck\n```\n\n`git checkout .` 是一个 Git 命令，用于撤销工作目录中所有未提交的更改，恢复到最近一次提交的状态。\n\n具体解释如下：\n\n- `git checkout`：Git 命令，用于切换分支、恢复文件或恢复工作目录中的更改。\n- `.`：表示当前目录。在 `git checkout .` 命令中，`.` 代表当前工作目录下的所有文件和文件夹。\n\n当你执行 `git checkout .` 命令时，Git 会放弃所有未提交的更改，并将工作目录中的所有文件还原到最近一次提交的状态。换句话说，该命令会丢弃你对工作目录中文件的所有修改，将它们还原为最近一次提交的状态。\n\n> 需要注意的是，执行 `git checkout .` 命令会无法恢复被删除的文件，因为 Git 已经无法找到这些文件的历史记录。如果你需要恢复删除的文件，可以使用 `git checkout -- <file>` 命令，其中 `<file>` 是被删除的文件的路径。这将从最近一次提交中恢复该文件。\n\n在使用 `git checkout .` 命令之前，请确保你不再需要保存当前工作目录中的任何未提交的更改，因为这个命令将不可逆地丢弃这些更改。如果有必要，可以先使用 `git stash` 命令将当前的修改暂存起来，以便稍后再应用它们。\n\n--------------------------------------------------\n\n### 当远端和本端不一致时\n例如刚创建仓库，本地立刻创建了文件，远端也创建了文件，由于没有共同历史，此时会出现问题。解决方案如下：\n\n- 使用衍合（rebase）： 使用衍合策略将本地分支重演在远程分支之上。运行以下命令：\n```bash\ngit pull origin master --rebase\n```\n\n- 之后添加remote: `git remote add origin url`\n- 此时`push`就没有问题了: `git push -u origin \"master\"`\n\n-----------------------------\n\n**强制更新本地分支**： 执行以下命令，将远端的内容强制拉取到本地并更新本地分支：\n```bash\ngit fetch origin master\ngit reset --hard origin/master\n```\n\n-------------------------------------------\n\n在本地有未提交的修改，而Git在合并时发现这些修改会被覆盖。为了解决这个问题，有以下几个选项：\n\n### 选项 1: 提交本地修改\n\n```bash\n# 提交本地修改\ngit add _posts/paper.md\ngit commit -m \"Committing local changes to paper.md\"\n\n# 合并远程分支到本地\ngit pull origin source_backup\n```\n\n这样本地修改就被提交了，然后再进行合并操作。\n\n### 选项 2: 暂存本地修改\n\n如果不想提交本地修改，可以使用`git stash`命令将它们暂存起来，执行合并后再恢复这些修改。\n\n```bash\n# 暂存本地修改\ngit stash\n\n# 合并远程分支到本地\ngit pull origin source_backup\n\n# 恢复本地修改\ngit stash apply\n```\n\n### 选项 3: 丢弃本地修改\n\n如果不关心本地的修改，可以直接丢弃它们。\n\n```bash\n# 丢弃本地修改\ngit checkout -- _posts/paper.md\n\n# 合并远程分支到本地\ngit pull origin source_backup\n```\n\n\nReference\n[guweigang/git_toturial](https://gist.github.com/guweigang/9848271)\n[Corner430/git_toturial](https://gist.github.com/Corner430/89b71c356d7129ee174dc9b6609f8a36)\n","slug":"Manage-github-through-git","published":1,"updated":"2024-04-25T17:26:47.603Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvjbaqhc000t0vn13l6n6cd4","content":"<ul>\n<li><code>git clone &lt;GitHub仓库的URL&gt;</code><span id=\"more\"></span></li>\n<li><code>git add .</code></li>\n<li><code>git commit -m &quot;Commit message&quot;</code></li>\n<li><code>git push origin master</code></li>\n<li>如果在 GitHub 网站上进行了更改，并且想要在本地存储库中更新更改，则可以使用以下命令<ul>\n<li><code>git pull origin master #这将从 GitHub 仓库中获取更改并将其合并到本地存储库中。</code></li>\n</ul>\n</li>\n<li>如果只想更改仓库中特定文件夹中的特定文件，可以使用以下步骤：<ul>\n<li><code>git add &lt;file-path&gt;</code></li>\n<li><code>git commit -m &quot;Commit message&quot;</code></li>\n<li><code>git push origin master</code></li>\n</ul>\n</li>\n</ul>\n<hr>\n<p>如果在项目中正确配置了<code>.gitignore</code>文件，但是在执行<code>git push</code>后<code>.vscode</code>文件夹仍然出现在GitHub上，：</p>\n<ol>\n<li><p><strong>已经提交的文件：</strong> 如果您之前已经将<code>.vscode</code>文件夹提交到了Git存储库，那么<code>.gitignore</code>的更改不会影响这些已提交的文件。在这种情况下，需要从历史记录中移除<code>.vscode</code>文件夹。这可以通过使用<code>git rm --cached</code>命令来完成，然后提交更改并推送。</p>\n</li>\n<li><p><strong>缓存区中的文件：</strong> 如果<code>.vscode</code>文件夹在您的Git缓存区中，<code>.gitignore</code>规则不会自动应用于已缓存的文件。可以使用以下命令将缓存区中的文件从暂存中移除：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rm --cached -r .vscode/</span><br></pre></td></tr></table></figure>\n\n<p>然后，提交更改并推送。</p>\n</li>\n</ol>\n<hr>\n<p><code>git push origin master</code> 和 <code>git push -u origin master</code> 是 Git 中的两个不同的推送命令，它们在行为上有一些区别。</p>\n<ol>\n<li><p><code>git push origin master</code>：这是一个简单的推送命令，用于将本地的 <code>master</code> 分支的提交推送到远程仓库（通常是 <code>origin</code> 远程仓库）。该命令将本地的 <code>master</code> 分支提交内容推送到远程仓库的 <code>master</code> 分支，但不会建立本地分支与远程分支的关联。</p>\n</li>\n<li><p><code>git push -u origin master</code>：这个命令与上述命令相似，但多了一个 <code>-u</code> 或 <code>--set-upstream</code> 选项。该选项用于在推送同时建立本地分支与远程分支的关联。使用 <code>-u</code> 选项后，Git 将会跟踪本地分支与远程分支的关系，之后可以使用简单的 <code>git push</code> 命令进行推送，而不需要指定远程仓库和分支。</p>\n</li>\n</ol>\n<p>总结区别：</p>\n<ul>\n<li><code>git push origin master</code> 简单地将本地的 <code>master</code> 分支的提交推送到远程仓库，不会建立本地分支与远程分支的关联。</li>\n<li><code>git push -u origin master</code> 在推送的同时建立本地分支与远程分支的关联，使得后续可以使用简单的 <code>git push</code> 命令进行推送。</li>\n</ul>\n<p>通常在第一次推送本地分支到远程仓库时，使用 <code>git push -u origin master</code> 是比较常见的，以建立本地分支与远程分支的关联。此后，可以使用简单的 <code>git push</code> 命令来推送更新。</p>\n<hr>\n<blockquote>\n<p>GitHub 在 2021 年 8 月 13 日停止了密码身份验证。现在，GitHub 推荐使用访问令牌（Access Token）或 SSH 密钥进行身份验证。</p>\n</blockquote>\n<h4 id=\"1-在-GitHub-账户中生成一个访问令牌。请按照以下步骤进行操作：\"><a href=\"#1-在-GitHub-账户中生成一个访问令牌。请按照以下步骤进行操作：\" class=\"headerlink\" title=\"1. 在 GitHub 账户中生成一个访问令牌。请按照以下步骤进行操作：\"></a>1. 在 GitHub 账户中生成一个访问令牌。请按照以下步骤进行操作：</h4><ul>\n<li>在 GitHub 上登录账户，并进入“Settings”（设置）页面。</li>\n<li>点击左侧导航栏中的“Developer settings”（开发人员设置），然后选择“Personal access tokens”（个人访问令牌）。</li>\n<li>点击“Generate new token”（生成新令牌）。</li>\n<li>选择所需的权限，然后点击“Generate token”（生成令牌）。</li>\n<li>复制生成的访问令牌。</li>\n</ul>\n<h4 id=\"2-在本地-Git-存储库中更新身份验证信息。执行以下命令：\"><a href=\"#2-在本地-Git-存储库中更新身份验证信息。执行以下命令：\" class=\"headerlink\" title=\"2. 在本地 Git 存储库中更新身份验证信息。执行以下命令：\"></a>2. 在本地 Git 存储库中更新身份验证信息。执行以下命令：</h4><p><code>git config --global credential.helper store</code><br>这将设置 Git 存储凭据的方式为存储在本地文件中。</p>\n<h4 id=\"3-现在，执行以下命令将访问令牌添加到-Git-存储库中：\"><a href=\"#3-现在，执行以下命令将访问令牌添加到-Git-存储库中：\" class=\"headerlink\" title=\"3. 现在，执行以下命令将访问令牌添加到 Git 存储库中：\"></a>3. 现在，执行以下命令将访问令牌添加到 Git 存储库中：</h4><p><code>git config --global credential.helper &#39;cache --timeout=3600&#39;</code><br>在上面的命令中，<code>3600</code> 表示凭据缓存的有效时间为 1 小时。可以根据需要调整这个值。</p>\n<h4 id=\"4-最后，重新执行-push-命令。Git-应该会提示输入用户名和密码。此时，此时应该输入刚才生成的访问令牌作为密码。\"><a href=\"#4-最后，重新执行-push-命令。Git-应该会提示输入用户名和密码。此时，此时应该输入刚才生成的访问令牌作为密码。\" class=\"headerlink\" title=\"4. 最后，重新执行 push 命令。Git 应该会提示输入用户名和密码。此时，此时应该输入刚才生成的访问令牌作为密码。\"></a>4. 最后，重新执行 push 命令。Git 应该会提示输入用户名和密码。此时，<strong>此时应该输入刚才生成的访问令牌作为密码</strong>。</h4><p><code>git push origin master</code><br>在输入访问令牌后，应该可以成功推送更改到 GitHub 仓库中。</p>\n<blockquote>\n<p>如果想将凭据信息存储在特定的 Git 存储库中，而不是全局范围内，可以使用 –local 参数代替 –global 参数，例如：<code>git config --local credential.helper store</code></p>\n</blockquote>\n<h4 id=\"5-如果想撤消全局设置并将存储方式更改回默认设置，可以使用以下命令：\"><a href=\"#5-如果想撤消全局设置并将存储方式更改回默认设置，可以使用以下命令：\" class=\"headerlink\" title=\"5. 如果想撤消全局设置并将存储方式更改回默认设置，可以使用以下命令：\"></a>5. 如果想撤消全局设置并将存储方式更改回默认设置，可以使用以下命令：</h4><p><code>git config --global --unset credential.helper</code><br>这将删除全局配置中的凭据存储方式，并使 Git 使用默认方式处理凭据信息。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> -b 分支名 git@github.com:user/repo.git          <span class=\"comment\"># 下载特定分支</span></span><br><span class=\"line\">git init                                                  <span class=\"comment\"># 初始化本地git仓库（创建新仓库）</span></span><br><span class=\"line\">git config --global user.name <span class=\"string\">&quot;xxx&quot;</span>                       <span class=\"comment\"># 配置用户名</span></span><br><span class=\"line\">git config --global user.email <span class=\"string\">&quot;xxx@xxx.com&quot;</span>              <span class=\"comment\"># 配置邮件</span></span><br><span class=\"line\">git config –-global core.editor vim                        <span class=\"comment\"># 配置默认编辑器</span></span><br><span class=\"line\">git config –-global -e                                    <span class=\"comment\"># 查看git配置</span></span><br><span class=\"line\">git config --global color.ui <span class=\"literal\">true</span>                         <span class=\"comment\"># git status等命令自动着色</span></span><br><span class=\"line\">git config --global color.status auto</span><br><span class=\"line\">git config --global color.diff auto</span><br><span class=\"line\">git config --global color.branch auto</span><br><span class=\"line\">git config --global color.interactive auto</span><br><span class=\"line\">git config --global --<span class=\"built_in\">unset</span> http.proxy                    <span class=\"comment\"># remove  proxy configuration on git</span></span><br><span class=\"line\">git <span class=\"built_in\">clone</span> git+ssh://git@192.168.53.168/VT.git             <span class=\"comment\"># clone远程仓库</span></span><br><span class=\"line\">git status                                                <span class=\"comment\"># 查看当前版本状态（是否修改）</span></span><br><span class=\"line\">git add xyz                                               <span class=\"comment\"># 添加xyz文件至index</span></span><br><span class=\"line\">git add .                                                 <span class=\"comment\"># 增加当前子目录下所有更改过的文件至index</span></span><br><span class=\"line\">git commit -m <span class=\"string\">&#x27;xxx&#x27;</span>                                       <span class=\"comment\"># 提交</span></span><br><span class=\"line\">git commit --amend -m <span class=\"string\">&#x27;xxx&#x27;</span>                               <span class=\"comment\"># 合并上一次提交（用于反复修改）</span></span><br><span class=\"line\">git commit -am <span class=\"string\">&#x27;xxx&#x27;</span>                                      <span class=\"comment\"># 将add和commit合为一步</span></span><br><span class=\"line\">git <span class=\"built_in\">rm</span> xxx                                                <span class=\"comment\"># 删除index中的文件</span></span><br><span class=\"line\">git <span class=\"built_in\">rm</span> -r *                                               <span class=\"comment\"># 递归删除</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span>                                                   <span class=\"comment\"># 显示提交日志</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> -1                                                <span class=\"comment\"># 显示1行日志 -n为n行</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> -5</span><br><span class=\"line\">git <span class=\"built_in\">log</span> --<span class=\"built_in\">stat</span>                                            <span class=\"comment\"># 显示提交日志及相关变动文件</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> -p -m</span><br><span class=\"line\">git <span class=\"built_in\">log</span> --pretty=oneline                                  <span class=\"comment\"># --pretty=oneline 指定显示两项最重要的信息：提交的引用ID和为提交记录的消息</span></span><br><span class=\"line\">git show dfb02e6e4f2f7b573337763e5c0013802e392818         <span class=\"comment\"># 显示某个提交的详细内容</span></span><br><span class=\"line\">git show dfb02                                            <span class=\"comment\"># 可只用commitid的前几位</span></span><br><span class=\"line\">git show HEAD                                             <span class=\"comment\"># 显示HEAD提交日志</span></span><br><span class=\"line\">git show HEAD^                                            <span class=\"comment\"># 显示HEAD的父（上一个版本）的提交日志 ^^为上两个版本 ^5为上5个版本</span></span><br><span class=\"line\">git tag                                                   <span class=\"comment\"># 显示已存在的tag</span></span><br><span class=\"line\">git tag -a v2.0 -m <span class=\"string\">&#x27;xxx&#x27;</span>                                  <span class=\"comment\"># 增加v2.0的tag</span></span><br><span class=\"line\">git show v2.0                                             <span class=\"comment\"># 显示v2.0的日志及详细内容</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> v2.0                                              <span class=\"comment\"># 显示v2.0的日志</span></span><br><span class=\"line\">git diff                                                  <span class=\"comment\"># 显示所有未添加至index的变更</span></span><br><span class=\"line\">git diff --cached                                         <span class=\"comment\"># 显示所有已添加index但还未commit的变更</span></span><br><span class=\"line\">git diff HEAD^                                            <span class=\"comment\"># 比较与上一个版本的差异</span></span><br><span class=\"line\">git diff HEAD -- ./lib                                    <span class=\"comment\"># 比较与HEAD版本lib目录的差异</span></span><br><span class=\"line\">git diff origin/master..master                            <span class=\"comment\"># 比较远程分支master上有本地分支master上没有的</span></span><br><span class=\"line\">git diff origin/master..master --<span class=\"built_in\">stat</span>                     <span class=\"comment\"># 只显示差异的文件，不显示具体内容</span></span><br><span class=\"line\">git remote add origin git+ssh://git@192.168.53.168/VT.git <span class=\"comment\"># 增加远程定义（用于push/pull/fetch）</span></span><br><span class=\"line\">git branch                                                <span class=\"comment\"># 显示本地分支</span></span><br><span class=\"line\">git branch --contains 50089                               <span class=\"comment\"># 显示包含提交50089的分支</span></span><br><span class=\"line\">git branch -a                                             <span class=\"comment\"># 显示所有分支</span></span><br><span class=\"line\">git branch -r                                             <span class=\"comment\"># 显示所有原创分支</span></span><br><span class=\"line\">git branch --merged                                       <span class=\"comment\"># 显示所有已合并到当前分支的分支</span></span><br><span class=\"line\">git branch --no-merged                                    <span class=\"comment\"># 显示所有未合并到当前分支的分支</span></span><br><span class=\"line\">git branch -m master master_copy                          <span class=\"comment\"># 本地分支改名</span></span><br><span class=\"line\">git checkout -b master_copy                               <span class=\"comment\"># 从当前分支创建新分支master_copy并检出</span></span><br><span class=\"line\">git checkout -b master master_copy                        <span class=\"comment\"># 上面的完整版</span></span><br><span class=\"line\">git checkout features/performance                         <span class=\"comment\"># 检出已存在的features/performance分支</span></span><br><span class=\"line\">git checkout --track hotfixes/BJVEP933                    <span class=\"comment\"># 检出远程分支hotfixes/BJVEP933并创建本地跟踪分支</span></span><br><span class=\"line\">git checkout v2.0                                         <span class=\"comment\"># 检出版本v2.0</span></span><br><span class=\"line\">git checkout -b devel origin/develop                      <span class=\"comment\"># 从远程分支develop创建新本地分支devel并检出</span></span><br><span class=\"line\">git checkout -- README                                    <span class=\"comment\"># 检出head版本的README文件（可用于修改错误回退）</span></span><br><span class=\"line\">git checkout .                                            <span class=\"comment\"># 用于撤销工作目录中所有未提交的更改，恢复到最近一次提交的状态。</span></span><br><span class=\"line\">git checkout \\&lt;commit_id\\&gt;                                <span class=\"comment\"># 回到指定的引用ID（commit ID）版本，只需要前6字符.这会分离头指针</span></span><br><span class=\"line\">git merge origin/master                                   <span class=\"comment\"># 合并远程master分支至当前分支</span></span><br><span class=\"line\">git cherry-pick ff44785404a8e                             <span class=\"comment\"># 合并提交ff44785404a8e的修改</span></span><br><span class=\"line\">git push origin master                                    <span class=\"comment\"># 将当前分支push到远程master分支</span></span><br><span class=\"line\">git push origin :hotfixes/BJVEP933                        <span class=\"comment\"># 删除远程仓库的hotfixes/BJVEP933分支</span></span><br><span class=\"line\">git push --tags                                           <span class=\"comment\"># 把所有tag推送到远程仓库</span></span><br><span class=\"line\">git fetch                                                 <span class=\"comment\"># 获取所有远程分支（不更新本地分支，另需merge）</span></span><br><span class=\"line\">git fetch --prune                                         <span class=\"comment\"># 获取所有原创分支并清除服务器上已删掉的分支</span></span><br><span class=\"line\">git pull origin master                                    <span class=\"comment\"># 获取远程分支master并merge到当前分支</span></span><br><span class=\"line\">git <span class=\"built_in\">mv</span> README README2                                     <span class=\"comment\"># 重命名文件README为README2</span></span><br><span class=\"line\">git reset --hard HEAD                                     <span class=\"comment\"># 将当前版本重置为HEAD（通常用于merge失败回退）</span></span><br><span class=\"line\">git rebase</span><br><span class=\"line\">git branch -d hotfixes/BJVEP933                           <span class=\"comment\"># 删除分支hotfixes/BJVEP933（本分支修改已合并到其他分支）</span></span><br><span class=\"line\">git branch -D hotfixes/BJVEP933                           <span class=\"comment\"># 强制删除分支hotfixes/BJVEP933</span></span><br><span class=\"line\">git ls-files                                              <span class=\"comment\"># 列出git index包含的文件</span></span><br><span class=\"line\">git show-branch                                           <span class=\"comment\"># 图示当前分支历史</span></span><br><span class=\"line\">git show-branch --all                                     <span class=\"comment\"># 图示所有分支历史</span></span><br><span class=\"line\">git whatchanged                                           <span class=\"comment\"># 显示提交历史对应的文件修改</span></span><br><span class=\"line\">git revert dfb02e6e4f2f7b573337763e5c0013802e392818       <span class=\"comment\"># 撤销提交dfb02e6e4f2f7b573337763e5c0013802e392818</span></span><br><span class=\"line\">git ls-tree HEAD                                          <span class=\"comment\"># 内部命令：显示某个git对象</span></span><br><span class=\"line\">git rev-parse v2.0                                        <span class=\"comment\"># 内部命令：显示某个ref对于的SHA1 HASH</span></span><br><span class=\"line\">git reflog                                                <span class=\"comment\"># 显示所有提交，包括孤立节点</span></span><br><span class=\"line\">git show HEAD@&#123;5&#125;</span><br><span class=\"line\">git show master@&#123;yesterday&#125;                               <span class=\"comment\"># 显示master分支昨天的状态</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> --pretty=format:<span class=\"string\">&#x27;%h %s&#x27;</span> --graph                   <span class=\"comment\"># 图示提交日志</span></span><br><span class=\"line\">git show HEAD~3</span><br><span class=\"line\">git show -s --pretty=raw 2be7fcb476</span><br><span class=\"line\">git stash                                                 <span class=\"comment\"># 暂存当前修改，将所有至为HEAD状态</span></span><br><span class=\"line\">git stash list                                            <span class=\"comment\"># 查看所有暂存</span></span><br><span class=\"line\">git stash show -p stash@&#123;0&#125;                               <span class=\"comment\"># 参考第一次暂存</span></span><br><span class=\"line\">git stash apply stash@&#123;0&#125;                                 <span class=\"comment\"># 应用第一次暂存</span></span><br><span class=\"line\">git grep <span class=\"string\">&quot;delete from&quot;</span>                                    <span class=\"comment\"># 文件中搜索文本“delete from”</span></span><br><span class=\"line\">git grep -e <span class=\"string\">&#x27;#define&#x27;</span> --and -e SORT_DIRENT</span><br><span class=\"line\">git gc</span><br><span class=\"line\">git fsck</span><br></pre></td></tr></table></figure>\n\n<p><code>git checkout .</code> 是一个 Git 命令，用于撤销工作目录中所有未提交的更改，恢复到最近一次提交的状态。</p>\n<p>具体解释如下：</p>\n<ul>\n<li><code>git checkout</code>：Git 命令，用于切换分支、恢复文件或恢复工作目录中的更改。</li>\n<li><code>.</code>：表示当前目录。在 <code>git checkout .</code> 命令中，<code>.</code> 代表当前工作目录下的所有文件和文件夹。</li>\n</ul>\n<p>当你执行 <code>git checkout .</code> 命令时，Git 会放弃所有未提交的更改，并将工作目录中的所有文件还原到最近一次提交的状态。换句话说，该命令会丢弃你对工作目录中文件的所有修改，将它们还原为最近一次提交的状态。</p>\n<blockquote>\n<p>需要注意的是，执行 <code>git checkout .</code> 命令会无法恢复被删除的文件，因为 Git 已经无法找到这些文件的历史记录。如果你需要恢复删除的文件，可以使用 <code>git checkout -- &lt;file&gt;</code> 命令，其中 <code>&lt;file&gt;</code> 是被删除的文件的路径。这将从最近一次提交中恢复该文件。</p>\n</blockquote>\n<p>在使用 <code>git checkout .</code> 命令之前，请确保你不再需要保存当前工作目录中的任何未提交的更改，因为这个命令将不可逆地丢弃这些更改。如果有必要，可以先使用 <code>git stash</code> 命令将当前的修改暂存起来，以便稍后再应用它们。</p>\n<hr>\n<h3 id=\"当远端和本端不一致时\"><a href=\"#当远端和本端不一致时\" class=\"headerlink\" title=\"当远端和本端不一致时\"></a>当远端和本端不一致时</h3><p>例如刚创建仓库，本地立刻创建了文件，远端也创建了文件，由于没有共同历史，此时会出现问题。解决方案如下：</p>\n<ul>\n<li><p>使用衍合（rebase）： 使用衍合策略将本地分支重演在远程分支之上。运行以下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull origin master --rebase</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>之后添加remote: <code>git remote add origin url</code></p>\n</li>\n<li><p>此时<code>push</code>就没有问题了: <code>git push -u origin &quot;master&quot;</code></p>\n</li>\n</ul>\n<hr>\n<p><strong>强制更新本地分支</strong>： 执行以下命令，将远端的内容强制拉取到本地并更新本地分支：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git fetch origin master</span><br><span class=\"line\">git reset --hard origin/master</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>在本地有未提交的修改，而Git在合并时发现这些修改会被覆盖。为了解决这个问题，有以下几个选项：</p>\n<h3 id=\"选项-1-提交本地修改\"><a href=\"#选项-1-提交本地修改\" class=\"headerlink\" title=\"选项 1: 提交本地修改\"></a>选项 1: 提交本地修改</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 提交本地修改</span></span><br><span class=\"line\">git add _posts/paper.md</span><br><span class=\"line\">git commit -m <span class=\"string\">&quot;Committing local changes to paper.md&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 合并远程分支到本地</span></span><br><span class=\"line\">git pull origin source_backup</span><br></pre></td></tr></table></figure>\n\n<p>这样本地修改就被提交了，然后再进行合并操作。</p>\n<h3 id=\"选项-2-暂存本地修改\"><a href=\"#选项-2-暂存本地修改\" class=\"headerlink\" title=\"选项 2: 暂存本地修改\"></a>选项 2: 暂存本地修改</h3><p>如果不想提交本地修改，可以使用<code>git stash</code>命令将它们暂存起来，执行合并后再恢复这些修改。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 暂存本地修改</span></span><br><span class=\"line\">git stash</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 合并远程分支到本地</span></span><br><span class=\"line\">git pull origin source_backup</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 恢复本地修改</span></span><br><span class=\"line\">git stash apply</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"选项-3-丢弃本地修改\"><a href=\"#选项-3-丢弃本地修改\" class=\"headerlink\" title=\"选项 3: 丢弃本地修改\"></a>选项 3: 丢弃本地修改</h3><p>如果不关心本地的修改，可以直接丢弃它们。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 丢弃本地修改</span></span><br><span class=\"line\">git checkout -- _posts/paper.md</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 合并远程分支到本地</span></span><br><span class=\"line\">git pull origin source_backup</span><br></pre></td></tr></table></figure>\n\n\n<p>Reference<br><a href=\"https://gist.github.com/guweigang/9848271\">guweigang&#x2F;git_toturial</a><br><a href=\"https://gist.github.com/Corner430/89b71c356d7129ee174dc9b6609f8a36\">Corner430&#x2F;git_toturial</a></p>\n","site":{"data":{}},"excerpt":"<ul>\n<li><code>git clone &lt;GitHub仓库的URL&gt;</code></li></ul>","more":"\n<li><code>git add .</code></li>\n<li><code>git commit -m &quot;Commit message&quot;</code></li>\n<li><code>git push origin master</code></li>\n<li>如果在 GitHub 网站上进行了更改，并且想要在本地存储库中更新更改，则可以使用以下命令<ul>\n<li><code>git pull origin master #这将从 GitHub 仓库中获取更改并将其合并到本地存储库中。</code></li>\n</ul>\n</li>\n<li>如果只想更改仓库中特定文件夹中的特定文件，可以使用以下步骤：<ul>\n<li><code>git add &lt;file-path&gt;</code></li>\n<li><code>git commit -m &quot;Commit message&quot;</code></li>\n<li><code>git push origin master</code></li>\n</ul>\n</li>\n\n<hr>\n<p>如果在项目中正确配置了<code>.gitignore</code>文件，但是在执行<code>git push</code>后<code>.vscode</code>文件夹仍然出现在GitHub上，：</p>\n<ol>\n<li><p><strong>已经提交的文件：</strong> 如果您之前已经将<code>.vscode</code>文件夹提交到了Git存储库，那么<code>.gitignore</code>的更改不会影响这些已提交的文件。在这种情况下，需要从历史记录中移除<code>.vscode</code>文件夹。这可以通过使用<code>git rm --cached</code>命令来完成，然后提交更改并推送。</p>\n</li>\n<li><p><strong>缓存区中的文件：</strong> 如果<code>.vscode</code>文件夹在您的Git缓存区中，<code>.gitignore</code>规则不会自动应用于已缓存的文件。可以使用以下命令将缓存区中的文件从暂存中移除：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rm --cached -r .vscode/</span><br></pre></td></tr></table></figure>\n\n<p>然后，提交更改并推送。</p>\n</li>\n</ol>\n<hr>\n<p><code>git push origin master</code> 和 <code>git push -u origin master</code> 是 Git 中的两个不同的推送命令，它们在行为上有一些区别。</p>\n<ol>\n<li><p><code>git push origin master</code>：这是一个简单的推送命令，用于将本地的 <code>master</code> 分支的提交推送到远程仓库（通常是 <code>origin</code> 远程仓库）。该命令将本地的 <code>master</code> 分支提交内容推送到远程仓库的 <code>master</code> 分支，但不会建立本地分支与远程分支的关联。</p>\n</li>\n<li><p><code>git push -u origin master</code>：这个命令与上述命令相似，但多了一个 <code>-u</code> 或 <code>--set-upstream</code> 选项。该选项用于在推送同时建立本地分支与远程分支的关联。使用 <code>-u</code> 选项后，Git 将会跟踪本地分支与远程分支的关系，之后可以使用简单的 <code>git push</code> 命令进行推送，而不需要指定远程仓库和分支。</p>\n</li>\n</ol>\n<p>总结区别：</p>\n<ul>\n<li><code>git push origin master</code> 简单地将本地的 <code>master</code> 分支的提交推送到远程仓库，不会建立本地分支与远程分支的关联。</li>\n<li><code>git push -u origin master</code> 在推送的同时建立本地分支与远程分支的关联，使得后续可以使用简单的 <code>git push</code> 命令进行推送。</li>\n</ul>\n<p>通常在第一次推送本地分支到远程仓库时，使用 <code>git push -u origin master</code> 是比较常见的，以建立本地分支与远程分支的关联。此后，可以使用简单的 <code>git push</code> 命令来推送更新。</p>\n<hr>\n<blockquote>\n<p>GitHub 在 2021 年 8 月 13 日停止了密码身份验证。现在，GitHub 推荐使用访问令牌（Access Token）或 SSH 密钥进行身份验证。</p>\n</blockquote>\n<h4 id=\"1-在-GitHub-账户中生成一个访问令牌。请按照以下步骤进行操作：\"><a href=\"#1-在-GitHub-账户中生成一个访问令牌。请按照以下步骤进行操作：\" class=\"headerlink\" title=\"1. 在 GitHub 账户中生成一个访问令牌。请按照以下步骤进行操作：\"></a>1. 在 GitHub 账户中生成一个访问令牌。请按照以下步骤进行操作：</h4><ul>\n<li>在 GitHub 上登录账户，并进入“Settings”（设置）页面。</li>\n<li>点击左侧导航栏中的“Developer settings”（开发人员设置），然后选择“Personal access tokens”（个人访问令牌）。</li>\n<li>点击“Generate new token”（生成新令牌）。</li>\n<li>选择所需的权限，然后点击“Generate token”（生成令牌）。</li>\n<li>复制生成的访问令牌。</li>\n</ul>\n<h4 id=\"2-在本地-Git-存储库中更新身份验证信息。执行以下命令：\"><a href=\"#2-在本地-Git-存储库中更新身份验证信息。执行以下命令：\" class=\"headerlink\" title=\"2. 在本地 Git 存储库中更新身份验证信息。执行以下命令：\"></a>2. 在本地 Git 存储库中更新身份验证信息。执行以下命令：</h4><p><code>git config --global credential.helper store</code><br>这将设置 Git 存储凭据的方式为存储在本地文件中。</p>\n<h4 id=\"3-现在，执行以下命令将访问令牌添加到-Git-存储库中：\"><a href=\"#3-现在，执行以下命令将访问令牌添加到-Git-存储库中：\" class=\"headerlink\" title=\"3. 现在，执行以下命令将访问令牌添加到 Git 存储库中：\"></a>3. 现在，执行以下命令将访问令牌添加到 Git 存储库中：</h4><p><code>git config --global credential.helper &#39;cache --timeout=3600&#39;</code><br>在上面的命令中，<code>3600</code> 表示凭据缓存的有效时间为 1 小时。可以根据需要调整这个值。</p>\n<h4 id=\"4-最后，重新执行-push-命令。Git-应该会提示输入用户名和密码。此时，此时应该输入刚才生成的访问令牌作为密码。\"><a href=\"#4-最后，重新执行-push-命令。Git-应该会提示输入用户名和密码。此时，此时应该输入刚才生成的访问令牌作为密码。\" class=\"headerlink\" title=\"4. 最后，重新执行 push 命令。Git 应该会提示输入用户名和密码。此时，此时应该输入刚才生成的访问令牌作为密码。\"></a>4. 最后，重新执行 push 命令。Git 应该会提示输入用户名和密码。此时，<strong>此时应该输入刚才生成的访问令牌作为密码</strong>。</h4><p><code>git push origin master</code><br>在输入访问令牌后，应该可以成功推送更改到 GitHub 仓库中。</p>\n<blockquote>\n<p>如果想将凭据信息存储在特定的 Git 存储库中，而不是全局范围内，可以使用 –local 参数代替 –global 参数，例如：<code>git config --local credential.helper store</code></p>\n</blockquote>\n<h4 id=\"5-如果想撤消全局设置并将存储方式更改回默认设置，可以使用以下命令：\"><a href=\"#5-如果想撤消全局设置并将存储方式更改回默认设置，可以使用以下命令：\" class=\"headerlink\" title=\"5. 如果想撤消全局设置并将存储方式更改回默认设置，可以使用以下命令：\"></a>5. 如果想撤消全局设置并将存储方式更改回默认设置，可以使用以下命令：</h4><p><code>git config --global --unset credential.helper</code><br>这将删除全局配置中的凭据存储方式，并使 Git 使用默认方式处理凭据信息。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> -b 分支名 git@github.com:user/repo.git          <span class=\"comment\"># 下载特定分支</span></span><br><span class=\"line\">git init                                                  <span class=\"comment\"># 初始化本地git仓库（创建新仓库）</span></span><br><span class=\"line\">git config --global user.name <span class=\"string\">&quot;xxx&quot;</span>                       <span class=\"comment\"># 配置用户名</span></span><br><span class=\"line\">git config --global user.email <span class=\"string\">&quot;xxx@xxx.com&quot;</span>              <span class=\"comment\"># 配置邮件</span></span><br><span class=\"line\">git config –-global core.editor vim                        <span class=\"comment\"># 配置默认编辑器</span></span><br><span class=\"line\">git config –-global -e                                    <span class=\"comment\"># 查看git配置</span></span><br><span class=\"line\">git config --global color.ui <span class=\"literal\">true</span>                         <span class=\"comment\"># git status等命令自动着色</span></span><br><span class=\"line\">git config --global color.status auto</span><br><span class=\"line\">git config --global color.diff auto</span><br><span class=\"line\">git config --global color.branch auto</span><br><span class=\"line\">git config --global color.interactive auto</span><br><span class=\"line\">git config --global --<span class=\"built_in\">unset</span> http.proxy                    <span class=\"comment\"># remove  proxy configuration on git</span></span><br><span class=\"line\">git <span class=\"built_in\">clone</span> git+ssh://git@192.168.53.168/VT.git             <span class=\"comment\"># clone远程仓库</span></span><br><span class=\"line\">git status                                                <span class=\"comment\"># 查看当前版本状态（是否修改）</span></span><br><span class=\"line\">git add xyz                                               <span class=\"comment\"># 添加xyz文件至index</span></span><br><span class=\"line\">git add .                                                 <span class=\"comment\"># 增加当前子目录下所有更改过的文件至index</span></span><br><span class=\"line\">git commit -m <span class=\"string\">&#x27;xxx&#x27;</span>                                       <span class=\"comment\"># 提交</span></span><br><span class=\"line\">git commit --amend -m <span class=\"string\">&#x27;xxx&#x27;</span>                               <span class=\"comment\"># 合并上一次提交（用于反复修改）</span></span><br><span class=\"line\">git commit -am <span class=\"string\">&#x27;xxx&#x27;</span>                                      <span class=\"comment\"># 将add和commit合为一步</span></span><br><span class=\"line\">git <span class=\"built_in\">rm</span> xxx                                                <span class=\"comment\"># 删除index中的文件</span></span><br><span class=\"line\">git <span class=\"built_in\">rm</span> -r *                                               <span class=\"comment\"># 递归删除</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span>                                                   <span class=\"comment\"># 显示提交日志</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> -1                                                <span class=\"comment\"># 显示1行日志 -n为n行</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> -5</span><br><span class=\"line\">git <span class=\"built_in\">log</span> --<span class=\"built_in\">stat</span>                                            <span class=\"comment\"># 显示提交日志及相关变动文件</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> -p -m</span><br><span class=\"line\">git <span class=\"built_in\">log</span> --pretty=oneline                                  <span class=\"comment\"># --pretty=oneline 指定显示两项最重要的信息：提交的引用ID和为提交记录的消息</span></span><br><span class=\"line\">git show dfb02e6e4f2f7b573337763e5c0013802e392818         <span class=\"comment\"># 显示某个提交的详细内容</span></span><br><span class=\"line\">git show dfb02                                            <span class=\"comment\"># 可只用commitid的前几位</span></span><br><span class=\"line\">git show HEAD                                             <span class=\"comment\"># 显示HEAD提交日志</span></span><br><span class=\"line\">git show HEAD^                                            <span class=\"comment\"># 显示HEAD的父（上一个版本）的提交日志 ^^为上两个版本 ^5为上5个版本</span></span><br><span class=\"line\">git tag                                                   <span class=\"comment\"># 显示已存在的tag</span></span><br><span class=\"line\">git tag -a v2.0 -m <span class=\"string\">&#x27;xxx&#x27;</span>                                  <span class=\"comment\"># 增加v2.0的tag</span></span><br><span class=\"line\">git show v2.0                                             <span class=\"comment\"># 显示v2.0的日志及详细内容</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> v2.0                                              <span class=\"comment\"># 显示v2.0的日志</span></span><br><span class=\"line\">git diff                                                  <span class=\"comment\"># 显示所有未添加至index的变更</span></span><br><span class=\"line\">git diff --cached                                         <span class=\"comment\"># 显示所有已添加index但还未commit的变更</span></span><br><span class=\"line\">git diff HEAD^                                            <span class=\"comment\"># 比较与上一个版本的差异</span></span><br><span class=\"line\">git diff HEAD -- ./lib                                    <span class=\"comment\"># 比较与HEAD版本lib目录的差异</span></span><br><span class=\"line\">git diff origin/master..master                            <span class=\"comment\"># 比较远程分支master上有本地分支master上没有的</span></span><br><span class=\"line\">git diff origin/master..master --<span class=\"built_in\">stat</span>                     <span class=\"comment\"># 只显示差异的文件，不显示具体内容</span></span><br><span class=\"line\">git remote add origin git+ssh://git@192.168.53.168/VT.git <span class=\"comment\"># 增加远程定义（用于push/pull/fetch）</span></span><br><span class=\"line\">git branch                                                <span class=\"comment\"># 显示本地分支</span></span><br><span class=\"line\">git branch --contains 50089                               <span class=\"comment\"># 显示包含提交50089的分支</span></span><br><span class=\"line\">git branch -a                                             <span class=\"comment\"># 显示所有分支</span></span><br><span class=\"line\">git branch -r                                             <span class=\"comment\"># 显示所有原创分支</span></span><br><span class=\"line\">git branch --merged                                       <span class=\"comment\"># 显示所有已合并到当前分支的分支</span></span><br><span class=\"line\">git branch --no-merged                                    <span class=\"comment\"># 显示所有未合并到当前分支的分支</span></span><br><span class=\"line\">git branch -m master master_copy                          <span class=\"comment\"># 本地分支改名</span></span><br><span class=\"line\">git checkout -b master_copy                               <span class=\"comment\"># 从当前分支创建新分支master_copy并检出</span></span><br><span class=\"line\">git checkout -b master master_copy                        <span class=\"comment\"># 上面的完整版</span></span><br><span class=\"line\">git checkout features/performance                         <span class=\"comment\"># 检出已存在的features/performance分支</span></span><br><span class=\"line\">git checkout --track hotfixes/BJVEP933                    <span class=\"comment\"># 检出远程分支hotfixes/BJVEP933并创建本地跟踪分支</span></span><br><span class=\"line\">git checkout v2.0                                         <span class=\"comment\"># 检出版本v2.0</span></span><br><span class=\"line\">git checkout -b devel origin/develop                      <span class=\"comment\"># 从远程分支develop创建新本地分支devel并检出</span></span><br><span class=\"line\">git checkout -- README                                    <span class=\"comment\"># 检出head版本的README文件（可用于修改错误回退）</span></span><br><span class=\"line\">git checkout .                                            <span class=\"comment\"># 用于撤销工作目录中所有未提交的更改，恢复到最近一次提交的状态。</span></span><br><span class=\"line\">git checkout \\&lt;commit_id\\&gt;                                <span class=\"comment\"># 回到指定的引用ID（commit ID）版本，只需要前6字符.这会分离头指针</span></span><br><span class=\"line\">git merge origin/master                                   <span class=\"comment\"># 合并远程master分支至当前分支</span></span><br><span class=\"line\">git cherry-pick ff44785404a8e                             <span class=\"comment\"># 合并提交ff44785404a8e的修改</span></span><br><span class=\"line\">git push origin master                                    <span class=\"comment\"># 将当前分支push到远程master分支</span></span><br><span class=\"line\">git push origin :hotfixes/BJVEP933                        <span class=\"comment\"># 删除远程仓库的hotfixes/BJVEP933分支</span></span><br><span class=\"line\">git push --tags                                           <span class=\"comment\"># 把所有tag推送到远程仓库</span></span><br><span class=\"line\">git fetch                                                 <span class=\"comment\"># 获取所有远程分支（不更新本地分支，另需merge）</span></span><br><span class=\"line\">git fetch --prune                                         <span class=\"comment\"># 获取所有原创分支并清除服务器上已删掉的分支</span></span><br><span class=\"line\">git pull origin master                                    <span class=\"comment\"># 获取远程分支master并merge到当前分支</span></span><br><span class=\"line\">git <span class=\"built_in\">mv</span> README README2                                     <span class=\"comment\"># 重命名文件README为README2</span></span><br><span class=\"line\">git reset --hard HEAD                                     <span class=\"comment\"># 将当前版本重置为HEAD（通常用于merge失败回退）</span></span><br><span class=\"line\">git rebase</span><br><span class=\"line\">git branch -d hotfixes/BJVEP933                           <span class=\"comment\"># 删除分支hotfixes/BJVEP933（本分支修改已合并到其他分支）</span></span><br><span class=\"line\">git branch -D hotfixes/BJVEP933                           <span class=\"comment\"># 强制删除分支hotfixes/BJVEP933</span></span><br><span class=\"line\">git ls-files                                              <span class=\"comment\"># 列出git index包含的文件</span></span><br><span class=\"line\">git show-branch                                           <span class=\"comment\"># 图示当前分支历史</span></span><br><span class=\"line\">git show-branch --all                                     <span class=\"comment\"># 图示所有分支历史</span></span><br><span class=\"line\">git whatchanged                                           <span class=\"comment\"># 显示提交历史对应的文件修改</span></span><br><span class=\"line\">git revert dfb02e6e4f2f7b573337763e5c0013802e392818       <span class=\"comment\"># 撤销提交dfb02e6e4f2f7b573337763e5c0013802e392818</span></span><br><span class=\"line\">git ls-tree HEAD                                          <span class=\"comment\"># 内部命令：显示某个git对象</span></span><br><span class=\"line\">git rev-parse v2.0                                        <span class=\"comment\"># 内部命令：显示某个ref对于的SHA1 HASH</span></span><br><span class=\"line\">git reflog                                                <span class=\"comment\"># 显示所有提交，包括孤立节点</span></span><br><span class=\"line\">git show HEAD@&#123;5&#125;</span><br><span class=\"line\">git show master@&#123;yesterday&#125;                               <span class=\"comment\"># 显示master分支昨天的状态</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> --pretty=format:<span class=\"string\">&#x27;%h %s&#x27;</span> --graph                   <span class=\"comment\"># 图示提交日志</span></span><br><span class=\"line\">git show HEAD~3</span><br><span class=\"line\">git show -s --pretty=raw 2be7fcb476</span><br><span class=\"line\">git stash                                                 <span class=\"comment\"># 暂存当前修改，将所有至为HEAD状态</span></span><br><span class=\"line\">git stash list                                            <span class=\"comment\"># 查看所有暂存</span></span><br><span class=\"line\">git stash show -p stash@&#123;0&#125;                               <span class=\"comment\"># 参考第一次暂存</span></span><br><span class=\"line\">git stash apply stash@&#123;0&#125;                                 <span class=\"comment\"># 应用第一次暂存</span></span><br><span class=\"line\">git grep <span class=\"string\">&quot;delete from&quot;</span>                                    <span class=\"comment\"># 文件中搜索文本“delete from”</span></span><br><span class=\"line\">git grep -e <span class=\"string\">&#x27;#define&#x27;</span> --and -e SORT_DIRENT</span><br><span class=\"line\">git gc</span><br><span class=\"line\">git fsck</span><br></pre></td></tr></table></figure>\n\n<p><code>git checkout .</code> 是一个 Git 命令，用于撤销工作目录中所有未提交的更改，恢复到最近一次提交的状态。</p>\n<p>具体解释如下：</p>\n<ul>\n<li><code>git checkout</code>：Git 命令，用于切换分支、恢复文件或恢复工作目录中的更改。</li>\n<li><code>.</code>：表示当前目录。在 <code>git checkout .</code> 命令中，<code>.</code> 代表当前工作目录下的所有文件和文件夹。</li>\n</ul>\n<p>当你执行 <code>git checkout .</code> 命令时，Git 会放弃所有未提交的更改，并将工作目录中的所有文件还原到最近一次提交的状态。换句话说，该命令会丢弃你对工作目录中文件的所有修改，将它们还原为最近一次提交的状态。</p>\n<blockquote>\n<p>需要注意的是，执行 <code>git checkout .</code> 命令会无法恢复被删除的文件，因为 Git 已经无法找到这些文件的历史记录。如果你需要恢复删除的文件，可以使用 <code>git checkout -- &lt;file&gt;</code> 命令，其中 <code>&lt;file&gt;</code> 是被删除的文件的路径。这将从最近一次提交中恢复该文件。</p>\n</blockquote>\n<p>在使用 <code>git checkout .</code> 命令之前，请确保你不再需要保存当前工作目录中的任何未提交的更改，因为这个命令将不可逆地丢弃这些更改。如果有必要，可以先使用 <code>git stash</code> 命令将当前的修改暂存起来，以便稍后再应用它们。</p>\n<hr>\n<h3 id=\"当远端和本端不一致时\"><a href=\"#当远端和本端不一致时\" class=\"headerlink\" title=\"当远端和本端不一致时\"></a>当远端和本端不一致时</h3><p>例如刚创建仓库，本地立刻创建了文件，远端也创建了文件，由于没有共同历史，此时会出现问题。解决方案如下：</p>\n<ul>\n<li><p>使用衍合（rebase）： 使用衍合策略将本地分支重演在远程分支之上。运行以下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull origin master --rebase</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>之后添加remote: <code>git remote add origin url</code></p>\n</li>\n<li><p>此时<code>push</code>就没有问题了: <code>git push -u origin &quot;master&quot;</code></p>\n</li>\n</ul>\n<hr>\n<p><strong>强制更新本地分支</strong>： 执行以下命令，将远端的内容强制拉取到本地并更新本地分支：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git fetch origin master</span><br><span class=\"line\">git reset --hard origin/master</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>在本地有未提交的修改，而Git在合并时发现这些修改会被覆盖。为了解决这个问题，有以下几个选项：</p>\n<h3 id=\"选项-1-提交本地修改\"><a href=\"#选项-1-提交本地修改\" class=\"headerlink\" title=\"选项 1: 提交本地修改\"></a>选项 1: 提交本地修改</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 提交本地修改</span></span><br><span class=\"line\">git add _posts/paper.md</span><br><span class=\"line\">git commit -m <span class=\"string\">&quot;Committing local changes to paper.md&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 合并远程分支到本地</span></span><br><span class=\"line\">git pull origin source_backup</span><br></pre></td></tr></table></figure>\n\n<p>这样本地修改就被提交了，然后再进行合并操作。</p>\n<h3 id=\"选项-2-暂存本地修改\"><a href=\"#选项-2-暂存本地修改\" class=\"headerlink\" title=\"选项 2: 暂存本地修改\"></a>选项 2: 暂存本地修改</h3><p>如果不想提交本地修改，可以使用<code>git stash</code>命令将它们暂存起来，执行合并后再恢复这些修改。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 暂存本地修改</span></span><br><span class=\"line\">git stash</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 合并远程分支到本地</span></span><br><span class=\"line\">git pull origin source_backup</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 恢复本地修改</span></span><br><span class=\"line\">git stash apply</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"选项-3-丢弃本地修改\"><a href=\"#选项-3-丢弃本地修改\" class=\"headerlink\" title=\"选项 3: 丢弃本地修改\"></a>选项 3: 丢弃本地修改</h3><p>如果不关心本地的修改，可以直接丢弃它们。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 丢弃本地修改</span></span><br><span class=\"line\">git checkout -- _posts/paper.md</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 合并远程分支到本地</span></span><br><span class=\"line\">git pull origin source_backup</span><br></pre></td></tr></table></figure>\n\n\n<p>Reference<br><a href=\"https://gist.github.com/guweigang/9848271\">guweigang&#x2F;git_toturial</a><br><a href=\"https://gist.github.com/Corner430/89b71c356d7129ee174dc9b6609f8a36\">Corner430&#x2F;git_toturial</a></p>"},{"title":"Maximum Likelihood Estimation, Bayesian Estimation, and Maximum A Posteriori Estimation","date":"2023-04-03T21:49:59.000Z","_content":"- [极大似然估计和贝叶斯估计](https://zhuanlan.zhihu.com/p/61593112)\n- [贝叶斯估计、最大似然估计、最大后验概率估计](http://noahsnail.com/2018/05/17/2018-05-17-%E8%B4%9D%E5%8F%B6%E6%96%AF%E4%BC%B0%E8%AE%A1%E3%80%81%E6%9C%80%E5%A4%A7%E4%BC%BC%E7%84%B6%E4%BC%B0%E8%AE%A1%E3%80%81%E6%9C%80%E5%A4%A7%E5%90%8E%E9%AA%8C%E6%A6%82%E7%8E%87%E4%BC%B0%E8%AE%A1/)","source":"_posts/Maximum-Likelihood-Estimation-Bayesian-Estimation-and-Maximum-A-Posteriori-Estimation.md","raw":"---\ntitle: >-\n  Maximum Likelihood Estimation, Bayesian Estimation, and Maximum A Posteriori\n  Estimation\ndate: 2023-04-03 21:49:59\ntags:\n  - 科研\n---\n- [极大似然估计和贝叶斯估计](https://zhuanlan.zhihu.com/p/61593112)\n- [贝叶斯估计、最大似然估计、最大后验概率估计](http://noahsnail.com/2018/05/17/2018-05-17-%E8%B4%9D%E5%8F%B6%E6%96%AF%E4%BC%B0%E8%AE%A1%E3%80%81%E6%9C%80%E5%A4%A7%E4%BC%BC%E7%84%B6%E4%BC%B0%E8%AE%A1%E3%80%81%E6%9C%80%E5%A4%A7%E5%90%8E%E9%AA%8C%E6%A6%82%E7%8E%87%E4%BC%B0%E8%AE%A1/)","slug":"Maximum-Likelihood-Estimation-Bayesian-Estimation-and-Maximum-A-Posteriori-Estimation","published":1,"updated":"2024-04-25T17:26:46.313Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvjbaqhd000v0vn1e27g1wbd","content":"<ul>\n<li><a href=\"https://zhuanlan.zhihu.com/p/61593112\">极大似然估计和贝叶斯估计</a></li>\n<li><a href=\"http://noahsnail.com/2018/05/17/2018-05-17-%E8%B4%9D%E5%8F%B6%E6%96%AF%E4%BC%B0%E8%AE%A1%E3%80%81%E6%9C%80%E5%A4%A7%E4%BC%BC%E7%84%B6%E4%BC%B0%E8%AE%A1%E3%80%81%E6%9C%80%E5%A4%A7%E5%90%8E%E9%AA%8C%E6%A6%82%E7%8E%87%E4%BC%B0%E8%AE%A1/\">贝叶斯估计、最大似然估计、最大后验概率估计</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><a href=\"https://zhuanlan.zhihu.com/p/61593112\">极大似然估计和贝叶斯估计</a></li>\n<li><a href=\"http://noahsnail.com/2018/05/17/2018-05-17-%E8%B4%9D%E5%8F%B6%E6%96%AF%E4%BC%B0%E8%AE%A1%E3%80%81%E6%9C%80%E5%A4%A7%E4%BC%BC%E7%84%B6%E4%BC%B0%E8%AE%A1%E3%80%81%E6%9C%80%E5%A4%A7%E5%90%8E%E9%AA%8C%E6%A6%82%E7%8E%87%E4%BC%B0%E8%AE%A1/\">贝叶斯估计、最大似然估计、最大后验概率估计</a></li>\n</ul>\n"},{"title":"Model Compression","date":"2023-06-26T10:19:41.000Z","declare":true,"top":1,"_content":"- *Model Compression*\n  - *Network Pruning*\n  - *Knowledge Distillation*<!--more-->\n  - *Parameter Quantization*\n  - *Arichitecture Design*\n  - *Dynamic Network*\n\n### *1. Network Pruning*\n\n> 只要它是 NN 就 OK\n\n*Network can be pruned*\n- *Networks are typecally over-parameterized(there is significant redundant **weight or neurons**)*\n\n*[Network Pruning](https://youtu.be/dPp8rCAnU_A?si=aiwzfHoFb99JyAxm&t=383)*\n- *Importance of a weight*\n- *Importance of a neuron: the number of times it wasn't zero on a given data set...*\n- *After pruning, the accuracy will drop(hopefully not too much)*\n- *Fine-tuning on training data for recover*\n- *Don't prune too much at once, or the network won't recover*\n\n> **要反复进行剪枝和微调，直到满足要求为止**\n\n***[Why Pruning?](https://youtu.be/7B8Cx7woQk4?si=M-LSBjyhBL4hISer&t=218)***\n- *How about simply train a smaller network?*\n- *It is widely known that smaller networks is more difficult to learn successfully.*\n  - *Larger network is easier to optimize?*\n\n> 这里有两篇观点完全相反的 *paper: [The Lottery Ticket Hypothesis: Finding Sparse, Trainable Neural Networks](https://arxiv.org/abs/1803.03635) and [Rethinking the Value of Network Pruning](https://arxiv.org/abs/1810.05270)*，进行探讨小模型是否可以直接 *train*\n\n***Network Pruning-Practical Issue***\n- *Weight pruning*\n  - *The network architecture becomes irregular. **Hard to implement, hard to speedup(GPU不好加速)**...*.(为解决这个问题，一般而言不会直接把 weight 剪掉，而是将其设置为 0，这样可以保持网络结构的完整性)\n  - 详细可参考 [Learning Structured Sparsity in Deep Neural Networks](https://arxiv.org/pdf/1608.03665.pdf)，**扔掉 95% 的 weight 都没关系**\n\n- *Neuron pruning*\n  - *The network architecture is regular. Easy to implement, easy to speedup(GPU好加速)...*\n\n\n***[Pruning and Model Compression](https://youtu.be/AgezOkBTV90?si=KQj295FsSMItGArK)***\n- *A three-stage pipeline to reduce the storage requirement of neural nets*\n\n![20230914234233](https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20230914234233.png)\n\n- *Showed a 35x decrease in size of AlexNet from 240MB to 6.9MB with no loss in accuracy*\n- *[Deep Compression: Compressing Deep Neural Networks with Pruning, Trained Quantization and Huffman Coding](https://arxiv.org/abs/1510.00149)*\n\n\n\n------------------------------------------\n### *2. Knowledge Distillation*\n\n> 目前限定在分类问题\n\n- [Knowledge Distillation](https://github.com/Corner430/Knowledge-Distillation)\n- [knowledge distillation papers](https://github.com/lhyfst/knowledge-distillation-papers)\n\n------------------------------------------\n### *3. Parameter Quantization*\n- *1. Using less bits to represent a value*\n- *2. Weight clustering*\n  - *K-means clustering*\n\n![20230914221219](https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20230914221219.png)\n\n- *3. Represent frequent clusters by less bits, represent rare clusters by more bits*\n  - *e.g. Huffman encoding*\n\n\n***[Binary Weights](https://youtu.be/fMsNf0ufYnY?si=IkOm07D8yvhhdqnM&t=162)***\n\n> *BinaryConnect* 有时候效果反而更好，因为**这本质上属于一种正则**\n\n------------------------------------------\n### *4. Arichitecture Design*\n*[Low rank approximation](https://youtu.be/L0TOXlNpCJ8?si=rcPWVvlPtEAE_qJf)*\n- 对于 *FC*, 可以将其分解为两个 *FC*，这样可以减少参数量。**本质上还是和矩阵分解有些关系**\n- 对于 CNN\n\n![20230914223043](https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20230914223043.png)\n\n***[Depthwise Separable Convolution](https://youtu.be/L0TOXlNpCJ8?si=VU8iu_qrtYfC05AQ&t=371)***\n[参数对比](https://youtu.be/f0rOMyZSZi4?si=2lTmL5jp53GoCgIL)，**参数量可以降低 *kernel_size $\\times$ kernel_size*，存在着参数复用**\n\n\n*Learn more ...*\n- [SqueezeNet](https://arxiv.org/abs/1602.07360)\n- SqueezeDet: Fully Convolutional Network for fast object detection\n- [MobileNet](https://arxiv.org/abs/1704.04861)\n- [ShuffleNet](https://arxiv.org/abs/1707.01083)\n- [Xception](https://arxiv.org/abs/1610.02357)\n- SEP-Net: Transforming k × k convolution into binary patterns for reducing model size\n\n------------------------------------------\n### *5. Dynamic Network*\n*Can network adjust the computation power it need?*\n\n*Possible solutions:*\n- *1. Train multiple classifiers*\n- *2. Classifier at the intermedia layer*\n\n参考 [Multi-Scale Dense Networks for Resource Efficient Image Classification](https://arxiv.org/abs/1703.09844)\n\n\n\n\n------------------------------------------\n- 使用训练并剪枝之后的网络权重，去初始化一个更小的网络\n- *weight pruning* 置 0，保存非零权重，利用蒸馏的方法，将剪枝后的网络的知识蒸馏到更小的网络中\n- 家教 + 教授\n- 万能的 NiN\n\n\n\n***Further Studies***\n- *Can we find winning tickets early on in training?(You et al, 2020)*\n- *Do wining tickets generalize across datasets and optimizer?(Morcos et al, 2019)*\n- *Can this hypothesis hold in other domains like text processing/NLP?(Yu et al, 2019)*\n\n***Reading***\n- *Robert T. Lange, Lottery Ticket Hypothesis: A Survey, 2020*\n- *Cheng et al., A Survey of Model Compression and Acceleration for Deep Neural Networks, 2017*\n\n\n------------------------------------------------------\n***Song Han, Lecture 10 - Knowledge Distillation | MIT 6.S965***","source":"_posts/Model-Compression.md","raw":"---\ntitle: Model Compression\ndate: 2023-06-26 10:19:41\ntags:\n  - 科研\ndeclare: true\ntop: 1\n---\n- *Model Compression*\n  - *Network Pruning*\n  - *Knowledge Distillation*<!--more-->\n  - *Parameter Quantization*\n  - *Arichitecture Design*\n  - *Dynamic Network*\n\n### *1. Network Pruning*\n\n> 只要它是 NN 就 OK\n\n*Network can be pruned*\n- *Networks are typecally over-parameterized(there is significant redundant **weight or neurons**)*\n\n*[Network Pruning](https://youtu.be/dPp8rCAnU_A?si=aiwzfHoFb99JyAxm&t=383)*\n- *Importance of a weight*\n- *Importance of a neuron: the number of times it wasn't zero on a given data set...*\n- *After pruning, the accuracy will drop(hopefully not too much)*\n- *Fine-tuning on training data for recover*\n- *Don't prune too much at once, or the network won't recover*\n\n> **要反复进行剪枝和微调，直到满足要求为止**\n\n***[Why Pruning?](https://youtu.be/7B8Cx7woQk4?si=M-LSBjyhBL4hISer&t=218)***\n- *How about simply train a smaller network?*\n- *It is widely known that smaller networks is more difficult to learn successfully.*\n  - *Larger network is easier to optimize?*\n\n> 这里有两篇观点完全相反的 *paper: [The Lottery Ticket Hypothesis: Finding Sparse, Trainable Neural Networks](https://arxiv.org/abs/1803.03635) and [Rethinking the Value of Network Pruning](https://arxiv.org/abs/1810.05270)*，进行探讨小模型是否可以直接 *train*\n\n***Network Pruning-Practical Issue***\n- *Weight pruning*\n  - *The network architecture becomes irregular. **Hard to implement, hard to speedup(GPU不好加速)**...*.(为解决这个问题，一般而言不会直接把 weight 剪掉，而是将其设置为 0，这样可以保持网络结构的完整性)\n  - 详细可参考 [Learning Structured Sparsity in Deep Neural Networks](https://arxiv.org/pdf/1608.03665.pdf)，**扔掉 95% 的 weight 都没关系**\n\n- *Neuron pruning*\n  - *The network architecture is regular. Easy to implement, easy to speedup(GPU好加速)...*\n\n\n***[Pruning and Model Compression](https://youtu.be/AgezOkBTV90?si=KQj295FsSMItGArK)***\n- *A three-stage pipeline to reduce the storage requirement of neural nets*\n\n![20230914234233](https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20230914234233.png)\n\n- *Showed a 35x decrease in size of AlexNet from 240MB to 6.9MB with no loss in accuracy*\n- *[Deep Compression: Compressing Deep Neural Networks with Pruning, Trained Quantization and Huffman Coding](https://arxiv.org/abs/1510.00149)*\n\n\n\n------------------------------------------\n### *2. Knowledge Distillation*\n\n> 目前限定在分类问题\n\n- [Knowledge Distillation](https://github.com/Corner430/Knowledge-Distillation)\n- [knowledge distillation papers](https://github.com/lhyfst/knowledge-distillation-papers)\n\n------------------------------------------\n### *3. Parameter Quantization*\n- *1. Using less bits to represent a value*\n- *2. Weight clustering*\n  - *K-means clustering*\n\n![20230914221219](https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20230914221219.png)\n\n- *3. Represent frequent clusters by less bits, represent rare clusters by more bits*\n  - *e.g. Huffman encoding*\n\n\n***[Binary Weights](https://youtu.be/fMsNf0ufYnY?si=IkOm07D8yvhhdqnM&t=162)***\n\n> *BinaryConnect* 有时候效果反而更好，因为**这本质上属于一种正则**\n\n------------------------------------------\n### *4. Arichitecture Design*\n*[Low rank approximation](https://youtu.be/L0TOXlNpCJ8?si=rcPWVvlPtEAE_qJf)*\n- 对于 *FC*, 可以将其分解为两个 *FC*，这样可以减少参数量。**本质上还是和矩阵分解有些关系**\n- 对于 CNN\n\n![20230914223043](https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20230914223043.png)\n\n***[Depthwise Separable Convolution](https://youtu.be/L0TOXlNpCJ8?si=VU8iu_qrtYfC05AQ&t=371)***\n[参数对比](https://youtu.be/f0rOMyZSZi4?si=2lTmL5jp53GoCgIL)，**参数量可以降低 *kernel_size $\\times$ kernel_size*，存在着参数复用**\n\n\n*Learn more ...*\n- [SqueezeNet](https://arxiv.org/abs/1602.07360)\n- SqueezeDet: Fully Convolutional Network for fast object detection\n- [MobileNet](https://arxiv.org/abs/1704.04861)\n- [ShuffleNet](https://arxiv.org/abs/1707.01083)\n- [Xception](https://arxiv.org/abs/1610.02357)\n- SEP-Net: Transforming k × k convolution into binary patterns for reducing model size\n\n------------------------------------------\n### *5. Dynamic Network*\n*Can network adjust the computation power it need?*\n\n*Possible solutions:*\n- *1. Train multiple classifiers*\n- *2. Classifier at the intermedia layer*\n\n参考 [Multi-Scale Dense Networks for Resource Efficient Image Classification](https://arxiv.org/abs/1703.09844)\n\n\n\n\n------------------------------------------\n- 使用训练并剪枝之后的网络权重，去初始化一个更小的网络\n- *weight pruning* 置 0，保存非零权重，利用蒸馏的方法，将剪枝后的网络的知识蒸馏到更小的网络中\n- 家教 + 教授\n- 万能的 NiN\n\n\n\n***Further Studies***\n- *Can we find winning tickets early on in training?(You et al, 2020)*\n- *Do wining tickets generalize across datasets and optimizer?(Morcos et al, 2019)*\n- *Can this hypothesis hold in other domains like text processing/NLP?(Yu et al, 2019)*\n\n***Reading***\n- *Robert T. Lange, Lottery Ticket Hypothesis: A Survey, 2020*\n- *Cheng et al., A Survey of Model Compression and Acceleration for Deep Neural Networks, 2017*\n\n\n------------------------------------------------------\n***Song Han, Lecture 10 - Knowledge Distillation | MIT 6.S965***","slug":"Model-Compression","published":1,"updated":"2024-04-25T17:26:47.973Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvjbaqhe000w0vn1ggx2g8h3","content":"<ul>\n<li><em>Model Compression</em><ul>\n<li><em>Network Pruning</em></li>\n<li><em>Knowledge Distillation</em><span id=\"more\"></span></li>\n<li><em>Parameter Quantization</em></li>\n<li><em>Arichitecture Design</em></li>\n<li><em>Dynamic Network</em></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"1-Network-Pruning\"><a href=\"#1-Network-Pruning\" class=\"headerlink\" title=\"1. Network Pruning\"></a><em>1. Network Pruning</em></h3><blockquote>\n<p>只要它是 NN 就 OK</p>\n</blockquote>\n<p><em>Network can be pruned</em></p>\n<ul>\n<li><em>Networks are typecally over-parameterized(there is significant redundant <strong>weight or neurons</strong>)</em></li>\n</ul>\n<p><em><a href=\"https://youtu.be/dPp8rCAnU_A?si=aiwzfHoFb99JyAxm&t=383\">Network Pruning</a></em></p>\n<ul>\n<li><em>Importance of a weight</em></li>\n<li><em>Importance of a neuron: the number of times it wasn’t zero on a given data set…</em></li>\n<li><em>After pruning, the accuracy will drop(hopefully not too much)</em></li>\n<li><em>Fine-tuning on training data for recover</em></li>\n<li><em>Don’t prune too much at once, or the network won’t recover</em></li>\n</ul>\n<blockquote>\n<p><strong>要反复进行剪枝和微调，直到满足要求为止</strong></p>\n</blockquote>\n<p><em><strong><a href=\"https://youtu.be/7B8Cx7woQk4?si=M-LSBjyhBL4hISer&t=218\">Why Pruning?</a></strong></em></p>\n<ul>\n<li><em>How about simply train a smaller network?</em></li>\n<li><em>It is widely known that smaller networks is more difficult to learn successfully.</em><ul>\n<li><em>Larger network is easier to optimize?</em></li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>这里有两篇观点完全相反的 *paper: <a href=\"https://arxiv.org/abs/1803.03635\">The Lottery Ticket Hypothesis: Finding Sparse, Trainable Neural Networks</a> and <a href=\"https://arxiv.org/abs/1810.05270\">Rethinking the Value of Network Pruning</a>*，进行探讨小模型是否可以直接 <em>train</em></p>\n</blockquote>\n<p><em><strong>Network Pruning-Practical Issue</strong></em></p>\n<ul>\n<li><p><em>Weight pruning</em></p>\n<ul>\n<li>*The network architecture becomes irregular. <strong>Hard to implement, hard to speedup(GPU不好加速)</strong>…*.(为解决这个问题，一般而言不会直接把 weight 剪掉，而是将其设置为 0，这样可以保持网络结构的完整性)</li>\n<li>详细可参考 <a href=\"https://arxiv.org/pdf/1608.03665.pdf\">Learning Structured Sparsity in Deep Neural Networks</a>，<strong>扔掉 95% 的 weight 都没关系</strong></li>\n</ul>\n</li>\n<li><p><em>Neuron pruning</em></p>\n<ul>\n<li><em>The network architecture is regular. Easy to implement, easy to speedup(GPU好加速)…</em></li>\n</ul>\n</li>\n</ul>\n<p><em><strong><a href=\"https://youtu.be/AgezOkBTV90?si=KQj295FsSMItGArK\">Pruning and Model Compression</a></strong></em></p>\n<ul>\n<li><em>A three-stage pipeline to reduce the storage requirement of neural nets</em></li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20230914234233.png\" alt=\"20230914234233\"></p>\n<ul>\n<li><em>Showed a 35x decrease in size of AlexNet from 240MB to 6.9MB with no loss in accuracy</em></li>\n<li><em><a href=\"https://arxiv.org/abs/1510.00149\">Deep Compression: Compressing Deep Neural Networks with Pruning, Trained Quantization and Huffman Coding</a></em></li>\n</ul>\n<hr>\n<h3 id=\"2-Knowledge-Distillation\"><a href=\"#2-Knowledge-Distillation\" class=\"headerlink\" title=\"2. Knowledge Distillation\"></a><em>2. Knowledge Distillation</em></h3><blockquote>\n<p>目前限定在分类问题</p>\n</blockquote>\n<ul>\n<li><a href=\"https://github.com/Corner430/Knowledge-Distillation\">Knowledge Distillation</a></li>\n<li><a href=\"https://github.com/lhyfst/knowledge-distillation-papers\">knowledge distillation papers</a></li>\n</ul>\n<hr>\n<h3 id=\"3-Parameter-Quantization\"><a href=\"#3-Parameter-Quantization\" class=\"headerlink\" title=\"3. Parameter Quantization\"></a><em>3. Parameter Quantization</em></h3><ul>\n<li><em>1. Using less bits to represent a value</em></li>\n<li><em>2. Weight clustering</em><ul>\n<li><em>K-means clustering</em></li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20230914221219.png\" alt=\"20230914221219\"></p>\n<ul>\n<li><em>3. Represent frequent clusters by less bits, represent rare clusters by more bits</em><ul>\n<li><em>e.g. Huffman encoding</em></li>\n</ul>\n</li>\n</ul>\n<p><em><strong><a href=\"https://youtu.be/fMsNf0ufYnY?si=IkOm07D8yvhhdqnM&t=162\">Binary Weights</a></strong></em></p>\n<blockquote>\n<p><em>BinaryConnect</em> 有时候效果反而更好，因为<strong>这本质上属于一种正则</strong></p>\n</blockquote>\n<hr>\n<h3 id=\"4-Arichitecture-Design\"><a href=\"#4-Arichitecture-Design\" class=\"headerlink\" title=\"4. Arichitecture Design\"></a><em>4. Arichitecture Design</em></h3><p><em><a href=\"https://youtu.be/L0TOXlNpCJ8?si=rcPWVvlPtEAE_qJf\">Low rank approximation</a></em></p>\n<ul>\n<li>对于 <em>FC</em>, 可以将其分解为两个 <em>FC</em>，这样可以减少参数量。<strong>本质上还是和矩阵分解有些关系</strong></li>\n<li>对于 CNN</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20230914223043.png\" alt=\"20230914223043\"></p>\n<p><em><strong><a href=\"https://youtu.be/L0TOXlNpCJ8?si=VU8iu_qrtYfC05AQ&t=371\">Depthwise Separable Convolution</a></strong></em><br><a href=\"https://youtu.be/f0rOMyZSZi4?si=2lTmL5jp53GoCgIL\">参数对比</a>，*<em>参数量可以降低 <em>kernel_size $\\times$ kernel_size</em>，存在着参数复用</em>*</p>\n<p><em>Learn more …</em></p>\n<ul>\n<li><a href=\"https://arxiv.org/abs/1602.07360\">SqueezeNet</a></li>\n<li>SqueezeDet: Fully Convolutional Network for fast object detection</li>\n<li><a href=\"https://arxiv.org/abs/1704.04861\">MobileNet</a></li>\n<li><a href=\"https://arxiv.org/abs/1707.01083\">ShuffleNet</a></li>\n<li><a href=\"https://arxiv.org/abs/1610.02357\">Xception</a></li>\n<li>SEP-Net: Transforming k × k convolution into binary patterns for reducing model size</li>\n</ul>\n<hr>\n<h3 id=\"5-Dynamic-Network\"><a href=\"#5-Dynamic-Network\" class=\"headerlink\" title=\"5. Dynamic Network\"></a><em>5. Dynamic Network</em></h3><p><em>Can network adjust the computation power it need?</em></p>\n<p><em>Possible solutions:</em></p>\n<ul>\n<li><em>1. Train multiple classifiers</em></li>\n<li><em>2. Classifier at the intermedia layer</em></li>\n</ul>\n<p>参考 <a href=\"https://arxiv.org/abs/1703.09844\">Multi-Scale Dense Networks for Resource Efficient Image Classification</a></p>\n<hr>\n<ul>\n<li>使用训练并剪枝之后的网络权重，去初始化一个更小的网络</li>\n<li><em>weight pruning</em> 置 0，保存非零权重，利用蒸馏的方法，将剪枝后的网络的知识蒸馏到更小的网络中</li>\n<li>家教 + 教授</li>\n<li>万能的 NiN</li>\n</ul>\n<p><em><strong>Further Studies</strong></em></p>\n<ul>\n<li><em>Can we find winning tickets early on in training?(You et al, 2020)</em></li>\n<li><em>Do wining tickets generalize across datasets and optimizer?(Morcos et al, 2019)</em></li>\n<li><em>Can this hypothesis hold in other domains like text processing&#x2F;NLP?(Yu et al, 2019)</em></li>\n</ul>\n<p><em><strong>Reading</strong></em></p>\n<ul>\n<li><em>Robert T. Lange, Lottery Ticket Hypothesis: A Survey, 2020</em></li>\n<li><em>Cheng et al., A Survey of Model Compression and Acceleration for Deep Neural Networks, 2017</em></li>\n</ul>\n<hr>\n<p><em><strong>Song Han, Lecture 10 - Knowledge Distillation | MIT 6.S965</strong></em></p>\n","site":{"data":{}},"excerpt":"<ul>\n<li><em>Model Compression</em><ul>\n<li><em>Network Pruning</em></li>\n<li><em>Knowledge Distillation</em></li></ul></li></ul>","more":"\n<li><em>Parameter Quantization</em></li>\n<li><em>Arichitecture Design</em></li>\n<li><em>Dynamic Network</em></li>\n\n\n\n<h3 id=\"1-Network-Pruning\"><a href=\"#1-Network-Pruning\" class=\"headerlink\" title=\"1. Network Pruning\"></a><em>1. Network Pruning</em></h3><blockquote>\n<p>只要它是 NN 就 OK</p>\n</blockquote>\n<p><em>Network can be pruned</em></p>\n<ul>\n<li><em>Networks are typecally over-parameterized(there is significant redundant <strong>weight or neurons</strong>)</em></li>\n</ul>\n<p><em><a href=\"https://youtu.be/dPp8rCAnU_A?si=aiwzfHoFb99JyAxm&t=383\">Network Pruning</a></em></p>\n<ul>\n<li><em>Importance of a weight</em></li>\n<li><em>Importance of a neuron: the number of times it wasn’t zero on a given data set…</em></li>\n<li><em>After pruning, the accuracy will drop(hopefully not too much)</em></li>\n<li><em>Fine-tuning on training data for recover</em></li>\n<li><em>Don’t prune too much at once, or the network won’t recover</em></li>\n</ul>\n<blockquote>\n<p><strong>要反复进行剪枝和微调，直到满足要求为止</strong></p>\n</blockquote>\n<p><em><strong><a href=\"https://youtu.be/7B8Cx7woQk4?si=M-LSBjyhBL4hISer&t=218\">Why Pruning?</a></strong></em></p>\n<ul>\n<li><em>How about simply train a smaller network?</em></li>\n<li><em>It is widely known that smaller networks is more difficult to learn successfully.</em><ul>\n<li><em>Larger network is easier to optimize?</em></li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>这里有两篇观点完全相反的 *paper: <a href=\"https://arxiv.org/abs/1803.03635\">The Lottery Ticket Hypothesis: Finding Sparse, Trainable Neural Networks</a> and <a href=\"https://arxiv.org/abs/1810.05270\">Rethinking the Value of Network Pruning</a>*，进行探讨小模型是否可以直接 <em>train</em></p>\n</blockquote>\n<p><em><strong>Network Pruning-Practical Issue</strong></em></p>\n<ul>\n<li><p><em>Weight pruning</em></p>\n<ul>\n<li>*The network architecture becomes irregular. <strong>Hard to implement, hard to speedup(GPU不好加速)</strong>…*.(为解决这个问题，一般而言不会直接把 weight 剪掉，而是将其设置为 0，这样可以保持网络结构的完整性)</li>\n<li>详细可参考 <a href=\"https://arxiv.org/pdf/1608.03665.pdf\">Learning Structured Sparsity in Deep Neural Networks</a>，<strong>扔掉 95% 的 weight 都没关系</strong></li>\n</ul>\n</li>\n<li><p><em>Neuron pruning</em></p>\n<ul>\n<li><em>The network architecture is regular. Easy to implement, easy to speedup(GPU好加速)…</em></li>\n</ul>\n</li>\n</ul>\n<p><em><strong><a href=\"https://youtu.be/AgezOkBTV90?si=KQj295FsSMItGArK\">Pruning and Model Compression</a></strong></em></p>\n<ul>\n<li><em>A three-stage pipeline to reduce the storage requirement of neural nets</em></li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20230914234233.png\" alt=\"20230914234233\"></p>\n<ul>\n<li><em>Showed a 35x decrease in size of AlexNet from 240MB to 6.9MB with no loss in accuracy</em></li>\n<li><em><a href=\"https://arxiv.org/abs/1510.00149\">Deep Compression: Compressing Deep Neural Networks with Pruning, Trained Quantization and Huffman Coding</a></em></li>\n</ul>\n<hr>\n<h3 id=\"2-Knowledge-Distillation\"><a href=\"#2-Knowledge-Distillation\" class=\"headerlink\" title=\"2. Knowledge Distillation\"></a><em>2. Knowledge Distillation</em></h3><blockquote>\n<p>目前限定在分类问题</p>\n</blockquote>\n<ul>\n<li><a href=\"https://github.com/Corner430/Knowledge-Distillation\">Knowledge Distillation</a></li>\n<li><a href=\"https://github.com/lhyfst/knowledge-distillation-papers\">knowledge distillation papers</a></li>\n</ul>\n<hr>\n<h3 id=\"3-Parameter-Quantization\"><a href=\"#3-Parameter-Quantization\" class=\"headerlink\" title=\"3. Parameter Quantization\"></a><em>3. Parameter Quantization</em></h3><ul>\n<li><em>1. Using less bits to represent a value</em></li>\n<li><em>2. Weight clustering</em><ul>\n<li><em>K-means clustering</em></li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20230914221219.png\" alt=\"20230914221219\"></p>\n<ul>\n<li><em>3. Represent frequent clusters by less bits, represent rare clusters by more bits</em><ul>\n<li><em>e.g. Huffman encoding</em></li>\n</ul>\n</li>\n</ul>\n<p><em><strong><a href=\"https://youtu.be/fMsNf0ufYnY?si=IkOm07D8yvhhdqnM&t=162\">Binary Weights</a></strong></em></p>\n<blockquote>\n<p><em>BinaryConnect</em> 有时候效果反而更好，因为<strong>这本质上属于一种正则</strong></p>\n</blockquote>\n<hr>\n<h3 id=\"4-Arichitecture-Design\"><a href=\"#4-Arichitecture-Design\" class=\"headerlink\" title=\"4. Arichitecture Design\"></a><em>4. Arichitecture Design</em></h3><p><em><a href=\"https://youtu.be/L0TOXlNpCJ8?si=rcPWVvlPtEAE_qJf\">Low rank approximation</a></em></p>\n<ul>\n<li>对于 <em>FC</em>, 可以将其分解为两个 <em>FC</em>，这样可以减少参数量。<strong>本质上还是和矩阵分解有些关系</strong></li>\n<li>对于 CNN</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20230914223043.png\" alt=\"20230914223043\"></p>\n<p><em><strong><a href=\"https://youtu.be/L0TOXlNpCJ8?si=VU8iu_qrtYfC05AQ&t=371\">Depthwise Separable Convolution</a></strong></em><br><a href=\"https://youtu.be/f0rOMyZSZi4?si=2lTmL5jp53GoCgIL\">参数对比</a>，*<em>参数量可以降低 <em>kernel_size $\\times$ kernel_size</em>，存在着参数复用</em>*</p>\n<p><em>Learn more …</em></p>\n<ul>\n<li><a href=\"https://arxiv.org/abs/1602.07360\">SqueezeNet</a></li>\n<li>SqueezeDet: Fully Convolutional Network for fast object detection</li>\n<li><a href=\"https://arxiv.org/abs/1704.04861\">MobileNet</a></li>\n<li><a href=\"https://arxiv.org/abs/1707.01083\">ShuffleNet</a></li>\n<li><a href=\"https://arxiv.org/abs/1610.02357\">Xception</a></li>\n<li>SEP-Net: Transforming k × k convolution into binary patterns for reducing model size</li>\n</ul>\n<hr>\n<h3 id=\"5-Dynamic-Network\"><a href=\"#5-Dynamic-Network\" class=\"headerlink\" title=\"5. Dynamic Network\"></a><em>5. Dynamic Network</em></h3><p><em>Can network adjust the computation power it need?</em></p>\n<p><em>Possible solutions:</em></p>\n<ul>\n<li><em>1. Train multiple classifiers</em></li>\n<li><em>2. Classifier at the intermedia layer</em></li>\n</ul>\n<p>参考 <a href=\"https://arxiv.org/abs/1703.09844\">Multi-Scale Dense Networks for Resource Efficient Image Classification</a></p>\n<hr>\n<ul>\n<li>使用训练并剪枝之后的网络权重，去初始化一个更小的网络</li>\n<li><em>weight pruning</em> 置 0，保存非零权重，利用蒸馏的方法，将剪枝后的网络的知识蒸馏到更小的网络中</li>\n<li>家教 + 教授</li>\n<li>万能的 NiN</li>\n</ul>\n<p><em><strong>Further Studies</strong></em></p>\n<ul>\n<li><em>Can we find winning tickets early on in training?(You et al, 2020)</em></li>\n<li><em>Do wining tickets generalize across datasets and optimizer?(Morcos et al, 2019)</em></li>\n<li><em>Can this hypothesis hold in other domains like text processing&#x2F;NLP?(Yu et al, 2019)</em></li>\n</ul>\n<p><em><strong>Reading</strong></em></p>\n<ul>\n<li><em>Robert T. Lange, Lottery Ticket Hypothesis: A Survey, 2020</em></li>\n<li><em>Cheng et al., A Survey of Model Compression and Acceleration for Deep Neural Networks, 2017</em></li>\n</ul>\n<hr>\n<p><em><strong>Song Han, Lecture 10 - Knowledge Distillation | MIT 6.S965</strong></em></p>"},{"title":"Pytorch of Machine Learning","date":"2023-06-08T10:53:14.000Z","declare":true,"_content":"[Github Repository](https://github.com/Corner430/Pytorch-of-Machine-Learning)\n\n- [西瓜书笔记](https://github.com/Corner430/Pytorch-of-Machine-Learning/blob/main/1.%E8%A5%BF%E7%93%9C%E4%B9%A6%E7%AC%94%E8%AE%B0/index.md)<!--more-->\n\n----------------------------------------\n\n### 线性模型\n\n- [Logistic回归](https://github.com/Corner430/Pytorch-of-Machine-Learning/blob/main/2.%E7%BA%BF%E6%80%A7%E6%A8%A1%E5%9E%8B/Logistic_Regression.py)\n- [Logistic回归-jupyter版](https://github.com/Corner430/Pytorch-of-Machine-Learning/blob/main/2.%E7%BA%BF%E6%80%A7%E6%A8%A1%E5%9E%8B/Logistic_Regression.ipynb)\n    - 数据集来自西瓜书，数据集路径：`2.线性模型/watermelon3_0_Ch.csv`\n    - 仅有17个样本，所以采用了交叉验证的方式进行评估\n\n\n\n\n\n\n\n\n\n----------------------------------------\nReference:\n- 《西瓜书》\n- 《机器学习实战》-Peter Harrington\n","source":"_posts/Pytorch-of-Machine-Learning.md","raw":"---\ntitle: Pytorch of Machine Learning\ndate: 2023-06-08 10:53:14\ntags:\n    - 科研\n    - pytorch\ndeclare: true\n---\n[Github Repository](https://github.com/Corner430/Pytorch-of-Machine-Learning)\n\n- [西瓜书笔记](https://github.com/Corner430/Pytorch-of-Machine-Learning/blob/main/1.%E8%A5%BF%E7%93%9C%E4%B9%A6%E7%AC%94%E8%AE%B0/index.md)<!--more-->\n\n----------------------------------------\n\n### 线性模型\n\n- [Logistic回归](https://github.com/Corner430/Pytorch-of-Machine-Learning/blob/main/2.%E7%BA%BF%E6%80%A7%E6%A8%A1%E5%9E%8B/Logistic_Regression.py)\n- [Logistic回归-jupyter版](https://github.com/Corner430/Pytorch-of-Machine-Learning/blob/main/2.%E7%BA%BF%E6%80%A7%E6%A8%A1%E5%9E%8B/Logistic_Regression.ipynb)\n    - 数据集来自西瓜书，数据集路径：`2.线性模型/watermelon3_0_Ch.csv`\n    - 仅有17个样本，所以采用了交叉验证的方式进行评估\n\n\n\n\n\n\n\n\n\n----------------------------------------\nReference:\n- 《西瓜书》\n- 《机器学习实战》-Peter Harrington\n","slug":"Pytorch-of-Machine-Learning","published":1,"updated":"2024-04-25T17:26:47.663Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvjbaqhg000z0vn11u4i975m","content":"<p><a href=\"https://github.com/Corner430/Pytorch-of-Machine-Learning\">Github Repository</a></p>\n<ul>\n<li><a href=\"https://github.com/Corner430/Pytorch-of-Machine-Learning/blob/main/1.%E8%A5%BF%E7%93%9C%E4%B9%A6%E7%AC%94%E8%AE%B0/index.md\">西瓜书笔记</a><span id=\"more\"></span></li>\n</ul>\n<hr>\n<h3 id=\"线性模型\"><a href=\"#线性模型\" class=\"headerlink\" title=\"线性模型\"></a>线性模型</h3><ul>\n<li><a href=\"https://github.com/Corner430/Pytorch-of-Machine-Learning/blob/main/2.%E7%BA%BF%E6%80%A7%E6%A8%A1%E5%9E%8B/Logistic_Regression.py\">Logistic回归</a></li>\n<li><a href=\"https://github.com/Corner430/Pytorch-of-Machine-Learning/blob/main/2.%E7%BA%BF%E6%80%A7%E6%A8%A1%E5%9E%8B/Logistic_Regression.ipynb\">Logistic回归-jupyter版</a><ul>\n<li>数据集来自西瓜书，数据集路径：<code>2.线性模型/watermelon3_0_Ch.csv</code></li>\n<li>仅有17个样本，所以采用了交叉验证的方式进行评估</li>\n</ul>\n</li>\n</ul>\n<hr>\n<p>Reference:</p>\n<ul>\n<li>《西瓜书》</li>\n<li>《机器学习实战》-Peter Harrington</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p><a href=\"https://github.com/Corner430/Pytorch-of-Machine-Learning\">Github Repository</a></p>\n<ul>\n<li><a href=\"https://github.com/Corner430/Pytorch-of-Machine-Learning/blob/main/1.%E8%A5%BF%E7%93%9C%E4%B9%A6%E7%AC%94%E8%AE%B0/index.md\">西瓜书笔记</a></li></ul>","more":"\n\n<hr>\n<h3 id=\"线性模型\"><a href=\"#线性模型\" class=\"headerlink\" title=\"线性模型\"></a>线性模型</h3><ul>\n<li><a href=\"https://github.com/Corner430/Pytorch-of-Machine-Learning/blob/main/2.%E7%BA%BF%E6%80%A7%E6%A8%A1%E5%9E%8B/Logistic_Regression.py\">Logistic回归</a></li>\n<li><a href=\"https://github.com/Corner430/Pytorch-of-Machine-Learning/blob/main/2.%E7%BA%BF%E6%80%A7%E6%A8%A1%E5%9E%8B/Logistic_Regression.ipynb\">Logistic回归-jupyter版</a><ul>\n<li>数据集来自西瓜书，数据集路径：<code>2.线性模型/watermelon3_0_Ch.csv</code></li>\n<li>仅有17个样本，所以采用了交叉验证的方式进行评估</li>\n</ul>\n</li>\n</ul>\n<hr>\n<p>Reference:</p>\n<ul>\n<li>《西瓜书》</li>\n<li>《机器学习实战》-Peter Harrington</li>\n</ul>"},{"title":"R-CNN、Fast_R-CNN和Faster_R-CNN","date":"2023-10-28T22:03:55.000Z","declare":true,"_content":"### R-CNN、Fast R-CNN 和 Faster R-CNN\n\n**R-CNN**<!--more-->\n\n![20231028222707](https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20231028222707.png)\n\nR-CNN 是 2014 年由 Ross Girshick 等人提出的第一个基于深度学习的目标检测算法。R-CNN 的整体框架如下：\n\n1. 使用 Selective Search 算法从图像中提取约 2000 个候选区域（Region Proposal）。\n2. 将候选区域输入到 ImageNet 预训练的 CNN 中提取特征。\n3. 使用支持向量机（SVM）对候选区域进行分类。\n4. 使用边界框回归（Bounding Box Regression）对候选区域进行边界框的微调。\n\nR-CNN 的优点是：\n\n* 首次将深度学习应用于目标检测，取得了突破性的进展。\n* 可以检测多种目标，如人、车、动物等。\n\nR-CNN 的缺点是：\n\n* 候选区域的生成需要额外的计算。\n* SVM 分类和边界框回归需要额外的存储空间。\n\n-------------------------------------------\n\n**Fast R-CNN**\n\n![20231028222749](https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20231028222749.png)\n\nFast R-CNN 是 2015 年由 Ross Girshick 等人提出的改进版，主要解决了 R-CNN 中候选区域生成和特征提取冗余的问题。Fast R-CNN 的整体框架如下：\n\n1. 使用 Selective Search 算法从图像中提取约 2000 个候选区域。\n2. 将整张图像输入到 CNN 中提取特征。\n3. 使用 RoI pooling 层将候选区域映射到 CNN 的最后一层特征图上。\n4. 使用全连接层对候选区域进行分类和边界框回归。\n\nFast R-CNN 的优点是：\n\n* 解决了候选区域生成和特征提取冗余的问题，提高了效率。\n* 可以与其他目标检测算法结合使用，提高性能。\n\n-------------------------------------------\n\n**Faster R-CNN**\n\nFaster R-CNN 是 2015 年由 Ross Girshick 等人提出的进一步改进版，主要解决了 Fast R-CNN 中候选区域生成的准确性问题。Faster R-CNN 的整体框架如下：\n\n1. 使用 Region Proposal Network（RPN）生成候选区域。\n2. 将整张图像输入到 CNN 中提取特征。\n3. 使用 RoI pooling 层将候选区域映射到 CNN 的最后一层特征图上。\n4. 使用全连接层对候选区域进行分类和边界框回归。\n\nFaster R-CNN 的优点是：\n\n* 使用 RPN 生成候选区域，提高了准确性。\n* 可以与其他目标检测算法结合使用，提高性能。\n\n**R-CNN、Fast R-CNN 和 Faster R-CNN 的区别**\n\nR-CNN、Fast R-CNN 和 Faster R-CNN 的主要区别如下表所示：\n\n| 算法 | 候选区域生成 | 特征提取 | 分类 | 边界框回归 |\n|---|---|---|---|---|\n| R-CNN | Selective Search | ImageNet 预训练的 CNN | SVM | 边界框回归 |\n| Fast R-CNN | Selective Search | ImageNet 预训练的 CNN | RoI pooling 层 | 全连接层 |\n| Faster R-CNN | RPN | ImageNet 预训练的 CNN | RoI pooling 层 | 全连接层 |\n\n**结论**\n\nR-CNN、Fast R-CNN 和 Faster R-CNN 是目标检测领域的里程碑，它们在提高目标检测的准确性和效率方面做出了重要贡献。Faster R-CNN 是目前最常用的目标检测算法之一，它已经被广泛应用于各种视觉任务，如图像分类、物体检测、人脸识别等。\n\n----------------------------------\n\n### References\n- [Rich feature hierarchies for accurate object detection and semantic segmentation](https://arxiv.org/abs/1311.2524)\n- [Fast R-CNN](https://arxiv.org/abs/1504.08083)\n- [Faster R-CNN: Towards Real-Time Object Detection with Region Proposal Networks](https://arxiv.org/abs/1506.01497)\n","source":"_posts/R-CNN、Fast-R-CNN和Faster-R-CNN.md","raw":"---\ntitle: R-CNN、Fast_R-CNN和Faster_R-CNN\ndate: 2023-10-28 22:03:55\ntags:\n    - 科研\ndeclare: true\n---\n### R-CNN、Fast R-CNN 和 Faster R-CNN\n\n**R-CNN**<!--more-->\n\n![20231028222707](https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20231028222707.png)\n\nR-CNN 是 2014 年由 Ross Girshick 等人提出的第一个基于深度学习的目标检测算法。R-CNN 的整体框架如下：\n\n1. 使用 Selective Search 算法从图像中提取约 2000 个候选区域（Region Proposal）。\n2. 将候选区域输入到 ImageNet 预训练的 CNN 中提取特征。\n3. 使用支持向量机（SVM）对候选区域进行分类。\n4. 使用边界框回归（Bounding Box Regression）对候选区域进行边界框的微调。\n\nR-CNN 的优点是：\n\n* 首次将深度学习应用于目标检测，取得了突破性的进展。\n* 可以检测多种目标，如人、车、动物等。\n\nR-CNN 的缺点是：\n\n* 候选区域的生成需要额外的计算。\n* SVM 分类和边界框回归需要额外的存储空间。\n\n-------------------------------------------\n\n**Fast R-CNN**\n\n![20231028222749](https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20231028222749.png)\n\nFast R-CNN 是 2015 年由 Ross Girshick 等人提出的改进版，主要解决了 R-CNN 中候选区域生成和特征提取冗余的问题。Fast R-CNN 的整体框架如下：\n\n1. 使用 Selective Search 算法从图像中提取约 2000 个候选区域。\n2. 将整张图像输入到 CNN 中提取特征。\n3. 使用 RoI pooling 层将候选区域映射到 CNN 的最后一层特征图上。\n4. 使用全连接层对候选区域进行分类和边界框回归。\n\nFast R-CNN 的优点是：\n\n* 解决了候选区域生成和特征提取冗余的问题，提高了效率。\n* 可以与其他目标检测算法结合使用，提高性能。\n\n-------------------------------------------\n\n**Faster R-CNN**\n\nFaster R-CNN 是 2015 年由 Ross Girshick 等人提出的进一步改进版，主要解决了 Fast R-CNN 中候选区域生成的准确性问题。Faster R-CNN 的整体框架如下：\n\n1. 使用 Region Proposal Network（RPN）生成候选区域。\n2. 将整张图像输入到 CNN 中提取特征。\n3. 使用 RoI pooling 层将候选区域映射到 CNN 的最后一层特征图上。\n4. 使用全连接层对候选区域进行分类和边界框回归。\n\nFaster R-CNN 的优点是：\n\n* 使用 RPN 生成候选区域，提高了准确性。\n* 可以与其他目标检测算法结合使用，提高性能。\n\n**R-CNN、Fast R-CNN 和 Faster R-CNN 的区别**\n\nR-CNN、Fast R-CNN 和 Faster R-CNN 的主要区别如下表所示：\n\n| 算法 | 候选区域生成 | 特征提取 | 分类 | 边界框回归 |\n|---|---|---|---|---|\n| R-CNN | Selective Search | ImageNet 预训练的 CNN | SVM | 边界框回归 |\n| Fast R-CNN | Selective Search | ImageNet 预训练的 CNN | RoI pooling 层 | 全连接层 |\n| Faster R-CNN | RPN | ImageNet 预训练的 CNN | RoI pooling 层 | 全连接层 |\n\n**结论**\n\nR-CNN、Fast R-CNN 和 Faster R-CNN 是目标检测领域的里程碑，它们在提高目标检测的准确性和效率方面做出了重要贡献。Faster R-CNN 是目前最常用的目标检测算法之一，它已经被广泛应用于各种视觉任务，如图像分类、物体检测、人脸识别等。\n\n----------------------------------\n\n### References\n- [Rich feature hierarchies for accurate object detection and semantic segmentation](https://arxiv.org/abs/1311.2524)\n- [Fast R-CNN](https://arxiv.org/abs/1504.08083)\n- [Faster R-CNN: Towards Real-Time Object Detection with Region Proposal Networks](https://arxiv.org/abs/1506.01497)\n","slug":"R-CNN、Fast-R-CNN和Faster-R-CNN","published":1,"updated":"2024-04-25T17:26:47.893Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvjbaqhh00100vn12hndb0ce","content":"<h3 id=\"R-CNN、Fast-R-CNN-和-Faster-R-CNN\"><a href=\"#R-CNN、Fast-R-CNN-和-Faster-R-CNN\" class=\"headerlink\" title=\"R-CNN、Fast R-CNN 和 Faster R-CNN\"></a>R-CNN、Fast R-CNN 和 Faster R-CNN</h3><p><strong>R-CNN</strong><span id=\"more\"></span></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20231028222707.png\" alt=\"20231028222707\"></p>\n<p>R-CNN 是 2014 年由 Ross Girshick 等人提出的第一个基于深度学习的目标检测算法。R-CNN 的整体框架如下：</p>\n<ol>\n<li>使用 Selective Search 算法从图像中提取约 2000 个候选区域（Region Proposal）。</li>\n<li>将候选区域输入到 ImageNet 预训练的 CNN 中提取特征。</li>\n<li>使用支持向量机（SVM）对候选区域进行分类。</li>\n<li>使用边界框回归（Bounding Box Regression）对候选区域进行边界框的微调。</li>\n</ol>\n<p>R-CNN 的优点是：</p>\n<ul>\n<li>首次将深度学习应用于目标检测，取得了突破性的进展。</li>\n<li>可以检测多种目标，如人、车、动物等。</li>\n</ul>\n<p>R-CNN 的缺点是：</p>\n<ul>\n<li>候选区域的生成需要额外的计算。</li>\n<li>SVM 分类和边界框回归需要额外的存储空间。</li>\n</ul>\n<hr>\n<p><strong>Fast R-CNN</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20231028222749.png\" alt=\"20231028222749\"></p>\n<p>Fast R-CNN 是 2015 年由 Ross Girshick 等人提出的改进版，主要解决了 R-CNN 中候选区域生成和特征提取冗余的问题。Fast R-CNN 的整体框架如下：</p>\n<ol>\n<li>使用 Selective Search 算法从图像中提取约 2000 个候选区域。</li>\n<li>将整张图像输入到 CNN 中提取特征。</li>\n<li>使用 RoI pooling 层将候选区域映射到 CNN 的最后一层特征图上。</li>\n<li>使用全连接层对候选区域进行分类和边界框回归。</li>\n</ol>\n<p>Fast R-CNN 的优点是：</p>\n<ul>\n<li>解决了候选区域生成和特征提取冗余的问题，提高了效率。</li>\n<li>可以与其他目标检测算法结合使用，提高性能。</li>\n</ul>\n<hr>\n<p><strong>Faster R-CNN</strong></p>\n<p>Faster R-CNN 是 2015 年由 Ross Girshick 等人提出的进一步改进版，主要解决了 Fast R-CNN 中候选区域生成的准确性问题。Faster R-CNN 的整体框架如下：</p>\n<ol>\n<li>使用 Region Proposal Network（RPN）生成候选区域。</li>\n<li>将整张图像输入到 CNN 中提取特征。</li>\n<li>使用 RoI pooling 层将候选区域映射到 CNN 的最后一层特征图上。</li>\n<li>使用全连接层对候选区域进行分类和边界框回归。</li>\n</ol>\n<p>Faster R-CNN 的优点是：</p>\n<ul>\n<li>使用 RPN 生成候选区域，提高了准确性。</li>\n<li>可以与其他目标检测算法结合使用，提高性能。</li>\n</ul>\n<p><strong>R-CNN、Fast R-CNN 和 Faster R-CNN 的区别</strong></p>\n<p>R-CNN、Fast R-CNN 和 Faster R-CNN 的主要区别如下表所示：</p>\n<table>\n<thead>\n<tr>\n<th>算法</th>\n<th>候选区域生成</th>\n<th>特征提取</th>\n<th>分类</th>\n<th>边界框回归</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>R-CNN</td>\n<td>Selective Search</td>\n<td>ImageNet 预训练的 CNN</td>\n<td>SVM</td>\n<td>边界框回归</td>\n</tr>\n<tr>\n<td>Fast R-CNN</td>\n<td>Selective Search</td>\n<td>ImageNet 预训练的 CNN</td>\n<td>RoI pooling 层</td>\n<td>全连接层</td>\n</tr>\n<tr>\n<td>Faster R-CNN</td>\n<td>RPN</td>\n<td>ImageNet 预训练的 CNN</td>\n<td>RoI pooling 层</td>\n<td>全连接层</td>\n</tr>\n</tbody></table>\n<p><strong>结论</strong></p>\n<p>R-CNN、Fast R-CNN 和 Faster R-CNN 是目标检测领域的里程碑，它们在提高目标检测的准确性和效率方面做出了重要贡献。Faster R-CNN 是目前最常用的目标检测算法之一，它已经被广泛应用于各种视觉任务，如图像分类、物体检测、人脸识别等。</p>\n<hr>\n<h3 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h3><ul>\n<li><a href=\"https://arxiv.org/abs/1311.2524\">Rich feature hierarchies for accurate object detection and semantic segmentation</a></li>\n<li><a href=\"https://arxiv.org/abs/1504.08083\">Fast R-CNN</a></li>\n<li><a href=\"https://arxiv.org/abs/1506.01497\">Faster R-CNN: Towards Real-Time Object Detection with Region Proposal Networks</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<h3 id=\"R-CNN、Fast-R-CNN-和-Faster-R-CNN\"><a href=\"#R-CNN、Fast-R-CNN-和-Faster-R-CNN\" class=\"headerlink\" title=\"R-CNN、Fast R-CNN 和 Faster R-CNN\"></a>R-CNN、Fast R-CNN 和 Faster R-CNN</h3><p><strong>R-CNN</strong></p>","more":"<p></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20231028222707.png\" alt=\"20231028222707\"></p>\n<p>R-CNN 是 2014 年由 Ross Girshick 等人提出的第一个基于深度学习的目标检测算法。R-CNN 的整体框架如下：</p>\n<ol>\n<li>使用 Selective Search 算法从图像中提取约 2000 个候选区域（Region Proposal）。</li>\n<li>将候选区域输入到 ImageNet 预训练的 CNN 中提取特征。</li>\n<li>使用支持向量机（SVM）对候选区域进行分类。</li>\n<li>使用边界框回归（Bounding Box Regression）对候选区域进行边界框的微调。</li>\n</ol>\n<p>R-CNN 的优点是：</p>\n<ul>\n<li>首次将深度学习应用于目标检测，取得了突破性的进展。</li>\n<li>可以检测多种目标，如人、车、动物等。</li>\n</ul>\n<p>R-CNN 的缺点是：</p>\n<ul>\n<li>候选区域的生成需要额外的计算。</li>\n<li>SVM 分类和边界框回归需要额外的存储空间。</li>\n</ul>\n<hr>\n<p><strong>Fast R-CNN</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20231028222749.png\" alt=\"20231028222749\"></p>\n<p>Fast R-CNN 是 2015 年由 Ross Girshick 等人提出的改进版，主要解决了 R-CNN 中候选区域生成和特征提取冗余的问题。Fast R-CNN 的整体框架如下：</p>\n<ol>\n<li>使用 Selective Search 算法从图像中提取约 2000 个候选区域。</li>\n<li>将整张图像输入到 CNN 中提取特征。</li>\n<li>使用 RoI pooling 层将候选区域映射到 CNN 的最后一层特征图上。</li>\n<li>使用全连接层对候选区域进行分类和边界框回归。</li>\n</ol>\n<p>Fast R-CNN 的优点是：</p>\n<ul>\n<li>解决了候选区域生成和特征提取冗余的问题，提高了效率。</li>\n<li>可以与其他目标检测算法结合使用，提高性能。</li>\n</ul>\n<hr>\n<p><strong>Faster R-CNN</strong></p>\n<p>Faster R-CNN 是 2015 年由 Ross Girshick 等人提出的进一步改进版，主要解决了 Fast R-CNN 中候选区域生成的准确性问题。Faster R-CNN 的整体框架如下：</p>\n<ol>\n<li>使用 Region Proposal Network（RPN）生成候选区域。</li>\n<li>将整张图像输入到 CNN 中提取特征。</li>\n<li>使用 RoI pooling 层将候选区域映射到 CNN 的最后一层特征图上。</li>\n<li>使用全连接层对候选区域进行分类和边界框回归。</li>\n</ol>\n<p>Faster R-CNN 的优点是：</p>\n<ul>\n<li>使用 RPN 生成候选区域，提高了准确性。</li>\n<li>可以与其他目标检测算法结合使用，提高性能。</li>\n</ul>\n<p><strong>R-CNN、Fast R-CNN 和 Faster R-CNN 的区别</strong></p>\n<p>R-CNN、Fast R-CNN 和 Faster R-CNN 的主要区别如下表所示：</p>\n<table>\n<thead>\n<tr>\n<th>算法</th>\n<th>候选区域生成</th>\n<th>特征提取</th>\n<th>分类</th>\n<th>边界框回归</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>R-CNN</td>\n<td>Selective Search</td>\n<td>ImageNet 预训练的 CNN</td>\n<td>SVM</td>\n<td>边界框回归</td>\n</tr>\n<tr>\n<td>Fast R-CNN</td>\n<td>Selective Search</td>\n<td>ImageNet 预训练的 CNN</td>\n<td>RoI pooling 层</td>\n<td>全连接层</td>\n</tr>\n<tr>\n<td>Faster R-CNN</td>\n<td>RPN</td>\n<td>ImageNet 预训练的 CNN</td>\n<td>RoI pooling 层</td>\n<td>全连接层</td>\n</tr>\n</tbody></table>\n<p><strong>结论</strong></p>\n<p>R-CNN、Fast R-CNN 和 Faster R-CNN 是目标检测领域的里程碑，它们在提高目标检测的准确性和效率方面做出了重要贡献。Faster R-CNN 是目前最常用的目标检测算法之一，它已经被广泛应用于各种视觉任务，如图像分类、物体检测、人脸识别等。</p>\n<hr>\n<h3 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h3><ul>\n<li><a href=\"https://arxiv.org/abs/1311.2524\">Rich feature hierarchies for accurate object detection and semantic segmentation</a></li>\n<li><a href=\"https://arxiv.org/abs/1504.08083\">Fast R-CNN</a></li>\n<li><a href=\"https://arxiv.org/abs/1506.01497\">Faster R-CNN: Towards Real-Time Object Detection with Region Proposal Networks</a></li>\n</ul>"},{"title":"R2S固件","date":"2023-06-02T20:10:57.000Z","declare":true,"_content":"- [Openwrt for Nanopi R1S R2S R4S R5S 香橙派 R1 Plus 固件编译 纯净版与大杂烩](https://github.com/stupidloud/nanopi-openwrt)\n- [R2S固件下载合集](https://mmensee.gitbook.io/r2s-r4s/gu-jian-xia-zai-shua-ji-fang-fa/r2s-gu-jian-xia-zai-he-ji)\n- [R2S、R4S 最新的 OpenWrt 固件合集](https://uzbox.com/tech/openwrt/r2s-r4s.html)<!--more-->\n- [恩山 sirpdboy编译固件](https://www.right.com.cn/forum/thread-4387071-1-1.html)\n- [骷髅头编译固件](https://github.com/thomaswcy)\n- [klever 1988编译固件](https://github.com/QiuSimons/R2S-OpenWrt/releases/)\n\n------------------------------------\nopenwrt固件\n- https://openwrt.cc/\n- [下载或定制适用于您设备的OpenWrt固件](https://supes.top/?target=x86%2F64&id=generic)：这个很好，只是需要自己下载软件\n- [Openwrt-AIO](https://github.com/Chikage0o0/Openwrt-AIO)\n- [精品小包Openwrt x86更新最新5.4内核](https://www.right.com.cn/forum/forum.php?mod=viewthread&tid=8233404&extra=page%3D1&page=1&mobile=no)\n- [高大全Openwrt x86更新最新5.4内核](https://www.right.com.cn/forum/thread-8226979-1-1.html)\n- [lede](https://github.com/coolsnowwolf/lede)\n- [esirPG](https://drive.google.com/drive/folders/1dqNUrMf9n7i3y1aSh68U5Yf44WQ3KCuh)\n\n---------------------------------------------------------------\n- [ImmortalWrt](https://downloads.immortalwrt.org/)\n- [immortalwrt_github](https://github.com/immortalwrt/immortalwrt)\n- [ImmortalWrt Firmware Selector](https://firmware-selector.immortalwrt.org/)\n> 不要用这个，这是最原版的系统","source":"_posts/R2S固件.md","raw":"---\ntitle: R2S固件\ndate: 2023-06-02 20:10:57\ntags:\n    - openwrt\n    - 路由器\ndeclare: true\n---\n- [Openwrt for Nanopi R1S R2S R4S R5S 香橙派 R1 Plus 固件编译 纯净版与大杂烩](https://github.com/stupidloud/nanopi-openwrt)\n- [R2S固件下载合集](https://mmensee.gitbook.io/r2s-r4s/gu-jian-xia-zai-shua-ji-fang-fa/r2s-gu-jian-xia-zai-he-ji)\n- [R2S、R4S 最新的 OpenWrt 固件合集](https://uzbox.com/tech/openwrt/r2s-r4s.html)<!--more-->\n- [恩山 sirpdboy编译固件](https://www.right.com.cn/forum/thread-4387071-1-1.html)\n- [骷髅头编译固件](https://github.com/thomaswcy)\n- [klever 1988编译固件](https://github.com/QiuSimons/R2S-OpenWrt/releases/)\n\n------------------------------------\nopenwrt固件\n- https://openwrt.cc/\n- [下载或定制适用于您设备的OpenWrt固件](https://supes.top/?target=x86%2F64&id=generic)：这个很好，只是需要自己下载软件\n- [Openwrt-AIO](https://github.com/Chikage0o0/Openwrt-AIO)\n- [精品小包Openwrt x86更新最新5.4内核](https://www.right.com.cn/forum/forum.php?mod=viewthread&tid=8233404&extra=page%3D1&page=1&mobile=no)\n- [高大全Openwrt x86更新最新5.4内核](https://www.right.com.cn/forum/thread-8226979-1-1.html)\n- [lede](https://github.com/coolsnowwolf/lede)\n- [esirPG](https://drive.google.com/drive/folders/1dqNUrMf9n7i3y1aSh68U5Yf44WQ3KCuh)\n\n---------------------------------------------------------------\n- [ImmortalWrt](https://downloads.immortalwrt.org/)\n- [immortalwrt_github](https://github.com/immortalwrt/immortalwrt)\n- [ImmortalWrt Firmware Selector](https://firmware-selector.immortalwrt.org/)\n> 不要用这个，这是最原版的系统","slug":"R2S固件","published":1,"updated":"2024-04-25T17:26:50.673Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvjbaqhj00130vn1ak4xg9bg","content":"<ul>\n<li><a href=\"https://github.com/stupidloud/nanopi-openwrt\">Openwrt for Nanopi R1S R2S R4S R5S 香橙派 R1 Plus 固件编译 纯净版与大杂烩</a></li>\n<li><a href=\"https://mmensee.gitbook.io/r2s-r4s/gu-jian-xia-zai-shua-ji-fang-fa/r2s-gu-jian-xia-zai-he-ji\">R2S固件下载合集</a></li>\n<li><a href=\"https://uzbox.com/tech/openwrt/r2s-r4s.html\">R2S、R4S 最新的 OpenWrt 固件合集</a><span id=\"more\"></span></li>\n<li><a href=\"https://www.right.com.cn/forum/thread-4387071-1-1.html\">恩山 sirpdboy编译固件</a></li>\n<li><a href=\"https://github.com/thomaswcy\">骷髅头编译固件</a></li>\n<li><a href=\"https://github.com/QiuSimons/R2S-OpenWrt/releases/\">klever 1988编译固件</a></li>\n</ul>\n<hr>\n<p>openwrt固件</p>\n<ul>\n<li><a href=\"https://openwrt.cc/\">https://openwrt.cc/</a></li>\n<li><a href=\"https://supes.top/?target=x86/64&id=generic\">下载或定制适用于您设备的OpenWrt固件</a>：这个很好，只是需要自己下载软件</li>\n<li><a href=\"https://github.com/Chikage0o0/Openwrt-AIO\">Openwrt-AIO</a></li>\n<li><a href=\"https://www.right.com.cn/forum/forum.php?mod=viewthread&tid=8233404&extra=page=1&page=1&mobile=no\">精品小包Openwrt x86更新最新5.4内核</a></li>\n<li><a href=\"https://www.right.com.cn/forum/thread-8226979-1-1.html\">高大全Openwrt x86更新最新5.4内核</a></li>\n<li><a href=\"https://github.com/coolsnowwolf/lede\">lede</a></li>\n<li><a href=\"https://drive.google.com/drive/folders/1dqNUrMf9n7i3y1aSh68U5Yf44WQ3KCuh\">esirPG</a></li>\n</ul>\n<hr>\n<ul>\n<li><a href=\"https://downloads.immortalwrt.org/\">ImmortalWrt</a></li>\n<li><a href=\"https://github.com/immortalwrt/immortalwrt\">immortalwrt_github</a></li>\n<li><a href=\"https://firmware-selector.immortalwrt.org/\">ImmortalWrt Firmware Selector</a><blockquote>\n<p>不要用这个，这是最原版的系统</p>\n</blockquote>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<ul>\n<li><a href=\"https://github.com/stupidloud/nanopi-openwrt\">Openwrt for Nanopi R1S R2S R4S R5S 香橙派 R1 Plus 固件编译 纯净版与大杂烩</a></li>\n<li><a href=\"https://mmensee.gitbook.io/r2s-r4s/gu-jian-xia-zai-shua-ji-fang-fa/r2s-gu-jian-xia-zai-he-ji\">R2S固件下载合集</a></li>\n<li><a href=\"https://uzbox.com/tech/openwrt/r2s-r4s.html\">R2S、R4S 最新的 OpenWrt 固件合集</a></li></ul>","more":"\n<li><a href=\"https://www.right.com.cn/forum/thread-4387071-1-1.html\">恩山 sirpdboy编译固件</a></li>\n<li><a href=\"https://github.com/thomaswcy\">骷髅头编译固件</a></li>\n<li><a href=\"https://github.com/QiuSimons/R2S-OpenWrt/releases/\">klever 1988编译固件</a></li>\n\n<hr>\n<p>openwrt固件</p>\n<ul>\n<li><a href=\"https://openwrt.cc/\">https://openwrt.cc/</a></li>\n<li><a href=\"https://supes.top/?target=x86/64&id=generic\">下载或定制适用于您设备的OpenWrt固件</a>：这个很好，只是需要自己下载软件</li>\n<li><a href=\"https://github.com/Chikage0o0/Openwrt-AIO\">Openwrt-AIO</a></li>\n<li><a href=\"https://www.right.com.cn/forum/forum.php?mod=viewthread&tid=8233404&extra=page=1&page=1&mobile=no\">精品小包Openwrt x86更新最新5.4内核</a></li>\n<li><a href=\"https://www.right.com.cn/forum/thread-8226979-1-1.html\">高大全Openwrt x86更新最新5.4内核</a></li>\n<li><a href=\"https://github.com/coolsnowwolf/lede\">lede</a></li>\n<li><a href=\"https://drive.google.com/drive/folders/1dqNUrMf9n7i3y1aSh68U5Yf44WQ3KCuh\">esirPG</a></li>\n</ul>\n<hr>\n<ul>\n<li><a href=\"https://downloads.immortalwrt.org/\">ImmortalWrt</a></li>\n<li><a href=\"https://github.com/immortalwrt/immortalwrt\">immortalwrt_github</a></li>\n<li><a href=\"https://firmware-selector.immortalwrt.org/\">ImmortalWrt Firmware Selector</a><blockquote>\n<p>不要用这个，这是最原版的系统</p>\n</blockquote>\n</li>\n</ul>"},{"title":"RAID10","date":"2023-04-03T18:28:37.000Z","declare":true,"_content":"##### 1. RAID\n- RAID 0 acceleration without backup\n- RAID 1 backups are not accelerated\n- RAID 5 parity, accelerated backup for low cost\n- RAID 10 RAID 0 + RAID 1 RAID1 is formed first, backup is not accelerated, and then RAID0 is formed, acceleration is not backed up. Unless all hard disks in one group fail. The utilization rate is 50%. high cost\n<!--more-->\n##### 2. virtual four parallel disks\n\n##### 3. `/dev`check disk\n\n##### 4. make an array card\n\n`sudo mdadm -Cv /dev/md0 -a yes -n 4 -l 10 /dev/sdb /dev/sdc /dev/sdd /dev/sde`\n- The mdadm command is used to manage the software RAID hard disk array in the Linux system\n- The -C parameter represents creating a RAID array card\n- The -v parameter displays the creation process, and the appended /dev/md0 is the name of the RAID disk array after creation\n- -a yes represents automatic creation of device files\n- -n 4 parameters represent using 4 fast hard disks for deployment\n- -l 10 specifies the RAID level as RAID 10 scheme\n- The last is the name of the 4 hard disk devices\n\n##### 5. format\n`mkfs.ext4 /dev/md0`\n\n##### 6. mount\n```shell\nmkdir /RAID\nmount /dev/md0  /RAID\ndf -h\n```\n\n回显\n```shell\nFilesystem                        Size  Used Avail Use% Mounted on\n/dev/mapper/rhel_linuxprobe-root   18G  2.9G   15G  17% /\ndevtmpfs                          905M     0  905M   0% /dev\ntmpfs                             914M   92K  914M   1% /dev/shm\ntmpfs                             914M  8.8M  905M   1% /run\ntmpfs                             914M     0  914M   0% /sys/fs/cgroup\n/dev/sda1                         497M  119M  379M  24% /boot\n/dev/md0                           40G   49M   38G   1% /RAID\n```\n\n##### 7. Persistence\n`/etc/fstab写入'/dev/md0                     /RAID                       ext4    defaults        0 0'`\n\n##### 8. check status\n` mdadm -D /dev/md0`\n回显\nmdadm: must be super-user to perform this action\n```shell\n[corner@linuxprobe ~]$ sudo mdadm -D /dev/md0\n/dev/md0:\n        Version : 1.2\n  Creation Time : Thu Mar  9 14:46:13 2023\n     Raid Level : raid10\n     Array Size : 41909248 (39.97 GiB 42.92 GB)\n  Used Dev Size : 20954624 (19.98 GiB 21.46 GB)\n   Raid Devices : 4\n  Total Devices : 4\n    Persistence : Superblock is persistent\n\n    Update Time : Thu Mar  9 14:49:17 2023\n          State : active, resyncing\n Active Devices : 4\nWorking Devices : 4\n Failed Devices : 0\n  Spare Devices : 0\n\n         Layout : near=2\n     Chunk Size : 512K\n\n  Resync Status : 90% complete\n\n           Name : linuxprobe.com:0  (local to host linuxprobe.com)\n           UUID : 677b3bb3:5ab19c7d:9b2b8460:3dbacc6c\n         Events : 15\n\n    Number   Major   Minor   RaidDevice State\n       0       8       16        0      active sync   /dev/sdb\n       1       8       32        1      active sync   /dev/sdc\n       2       8       48        2      active sync   /dev/sdd\n       3       8       64        3      active sync   /dev/sde\n\n```\n\n\n##### 9. Set the default data storage location: You can set the default data storage location by changing the user's home directory, for example:\n`sudo usermod -d /mnt/raid10/username username`\nThis will change **username**'s home directory to **/mnt/raid10/username** and the default data storage location to the RAID10 disk.\n\n##### 10. 重启\nAll operations and resulting files should now be stored on the RAID10 disk.\n\nattached\n`fdisk /dev/sdb` manages disk partitions\n","source":"_posts/RAID10.md","raw":"---\ntitle: RAID10\ndate: 2023-04-03 18:28:37\ntags:\n   - Linux\n   - RAID\ndeclare: true\n---\n##### 1. RAID\n- RAID 0 acceleration without backup\n- RAID 1 backups are not accelerated\n- RAID 5 parity, accelerated backup for low cost\n- RAID 10 RAID 0 + RAID 1 RAID1 is formed first, backup is not accelerated, and then RAID0 is formed, acceleration is not backed up. Unless all hard disks in one group fail. The utilization rate is 50%. high cost\n<!--more-->\n##### 2. virtual four parallel disks\n\n##### 3. `/dev`check disk\n\n##### 4. make an array card\n\n`sudo mdadm -Cv /dev/md0 -a yes -n 4 -l 10 /dev/sdb /dev/sdc /dev/sdd /dev/sde`\n- The mdadm command is used to manage the software RAID hard disk array in the Linux system\n- The -C parameter represents creating a RAID array card\n- The -v parameter displays the creation process, and the appended /dev/md0 is the name of the RAID disk array after creation\n- -a yes represents automatic creation of device files\n- -n 4 parameters represent using 4 fast hard disks for deployment\n- -l 10 specifies the RAID level as RAID 10 scheme\n- The last is the name of the 4 hard disk devices\n\n##### 5. format\n`mkfs.ext4 /dev/md0`\n\n##### 6. mount\n```shell\nmkdir /RAID\nmount /dev/md0  /RAID\ndf -h\n```\n\n回显\n```shell\nFilesystem                        Size  Used Avail Use% Mounted on\n/dev/mapper/rhel_linuxprobe-root   18G  2.9G   15G  17% /\ndevtmpfs                          905M     0  905M   0% /dev\ntmpfs                             914M   92K  914M   1% /dev/shm\ntmpfs                             914M  8.8M  905M   1% /run\ntmpfs                             914M     0  914M   0% /sys/fs/cgroup\n/dev/sda1                         497M  119M  379M  24% /boot\n/dev/md0                           40G   49M   38G   1% /RAID\n```\n\n##### 7. Persistence\n`/etc/fstab写入'/dev/md0                     /RAID                       ext4    defaults        0 0'`\n\n##### 8. check status\n` mdadm -D /dev/md0`\n回显\nmdadm: must be super-user to perform this action\n```shell\n[corner@linuxprobe ~]$ sudo mdadm -D /dev/md0\n/dev/md0:\n        Version : 1.2\n  Creation Time : Thu Mar  9 14:46:13 2023\n     Raid Level : raid10\n     Array Size : 41909248 (39.97 GiB 42.92 GB)\n  Used Dev Size : 20954624 (19.98 GiB 21.46 GB)\n   Raid Devices : 4\n  Total Devices : 4\n    Persistence : Superblock is persistent\n\n    Update Time : Thu Mar  9 14:49:17 2023\n          State : active, resyncing\n Active Devices : 4\nWorking Devices : 4\n Failed Devices : 0\n  Spare Devices : 0\n\n         Layout : near=2\n     Chunk Size : 512K\n\n  Resync Status : 90% complete\n\n           Name : linuxprobe.com:0  (local to host linuxprobe.com)\n           UUID : 677b3bb3:5ab19c7d:9b2b8460:3dbacc6c\n         Events : 15\n\n    Number   Major   Minor   RaidDevice State\n       0       8       16        0      active sync   /dev/sdb\n       1       8       32        1      active sync   /dev/sdc\n       2       8       48        2      active sync   /dev/sdd\n       3       8       64        3      active sync   /dev/sde\n\n```\n\n\n##### 9. Set the default data storage location: You can set the default data storage location by changing the user's home directory, for example:\n`sudo usermod -d /mnt/raid10/username username`\nThis will change **username**'s home directory to **/mnt/raid10/username** and the default data storage location to the RAID10 disk.\n\n##### 10. 重启\nAll operations and resulting files should now be stored on the RAID10 disk.\n\nattached\n`fdisk /dev/sdb` manages disk partitions\n","slug":"RAID10","published":1,"updated":"2024-04-25T17:26:48.443Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvjbaqhk00150vn17pitbvyn","content":"<h5 id=\"1-RAID\"><a href=\"#1-RAID\" class=\"headerlink\" title=\"1. RAID\"></a>1. RAID</h5><ul>\n<li>RAID 0 acceleration without backup</li>\n<li>RAID 1 backups are not accelerated</li>\n<li>RAID 5 parity, accelerated backup for low cost</li>\n<li>RAID 10 RAID 0 + RAID 1 RAID1 is formed first, backup is not accelerated, and then RAID0 is formed, acceleration is not backed up. Unless all hard disks in one group fail. The utilization rate is 50%. high cost<span id=\"more\"></span></li>\n</ul>\n<h5 id=\"2-virtual-four-parallel-disks\"><a href=\"#2-virtual-four-parallel-disks\" class=\"headerlink\" title=\"2. virtual four parallel disks\"></a>2. virtual four parallel disks</h5><h5 id=\"3-devcheck-disk\"><a href=\"#3-devcheck-disk\" class=\"headerlink\" title=\"3. /devcheck disk\"></a>3. <code>/dev</code>check disk</h5><h5 id=\"4-make-an-array-card\"><a href=\"#4-make-an-array-card\" class=\"headerlink\" title=\"4. make an array card\"></a>4. make an array card</h5><p><code>sudo mdadm -Cv /dev/md0 -a yes -n 4 -l 10 /dev/sdb /dev/sdc /dev/sdd /dev/sde</code></p>\n<ul>\n<li>The mdadm command is used to manage the software RAID hard disk array in the Linux system</li>\n<li>The -C parameter represents creating a RAID array card</li>\n<li>The -v parameter displays the creation process, and the appended &#x2F;dev&#x2F;md0 is the name of the RAID disk array after creation</li>\n<li>-a yes represents automatic creation of device files</li>\n<li>-n 4 parameters represent using 4 fast hard disks for deployment</li>\n<li>-l 10 specifies the RAID level as RAID 10 scheme</li>\n<li>The last is the name of the 4 hard disk devices</li>\n</ul>\n<h5 id=\"5-format\"><a href=\"#5-format\" class=\"headerlink\" title=\"5. format\"></a>5. format</h5><p><code>mkfs.ext4 /dev/md0</code></p>\n<h5 id=\"6-mount\"><a href=\"#6-mount\" class=\"headerlink\" title=\"6. mount\"></a>6. mount</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /RAID</span><br><span class=\"line\">mount /dev/md0  /RAID</span><br><span class=\"line\">df -h</span><br></pre></td></tr></table></figure>\n\n<p>回显</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Filesystem                        Size  Used Avail Use% Mounted on</span><br><span class=\"line\">/dev/mapper/rhel_linuxprobe-root   18G  2.9G   15G  17% /</span><br><span class=\"line\">devtmpfs                          905M     0  905M   0% /dev</span><br><span class=\"line\">tmpfs                             914M   92K  914M   1% /dev/shm</span><br><span class=\"line\">tmpfs                             914M  8.8M  905M   1% /run</span><br><span class=\"line\">tmpfs                             914M     0  914M   0% /sys/fs/cgroup</span><br><span class=\"line\">/dev/sda1                         497M  119M  379M  24% /boot</span><br><span class=\"line\">/dev/md0                           40G   49M   38G   1% /RAID</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"7-Persistence\"><a href=\"#7-Persistence\" class=\"headerlink\" title=\"7. Persistence\"></a>7. Persistence</h5><p><code>/etc/fstab写入&#39;/dev/md0                     /RAID                       ext4    defaults        0 0&#39;</code></p>\n<h5 id=\"8-check-status\"><a href=\"#8-check-status\" class=\"headerlink\" title=\"8. check status\"></a>8. check status</h5><p><code> mdadm -D /dev/md0</code><br>回显<br>mdadm: must be super-user to perform this action</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[corner@linuxprobe ~]$ sudo mdadm -D /dev/md0</span><br><span class=\"line\">/dev/md0:</span><br><span class=\"line\">        Version : 1.2</span><br><span class=\"line\">  Creation Time : Thu Mar  9 14:46:13 2023</span><br><span class=\"line\">     Raid Level : raid10</span><br><span class=\"line\">     Array Size : 41909248 (39.97 GiB 42.92 GB)</span><br><span class=\"line\">  Used Dev Size : 20954624 (19.98 GiB 21.46 GB)</span><br><span class=\"line\">   Raid Devices : 4</span><br><span class=\"line\">  Total Devices : 4</span><br><span class=\"line\">    Persistence : Superblock is persistent</span><br><span class=\"line\"></span><br><span class=\"line\">    Update Time : Thu Mar  9 14:49:17 2023</span><br><span class=\"line\">          State : active, resyncing</span><br><span class=\"line\"> Active Devices : 4</span><br><span class=\"line\">Working Devices : 4</span><br><span class=\"line\"> Failed Devices : 0</span><br><span class=\"line\">  Spare Devices : 0</span><br><span class=\"line\"></span><br><span class=\"line\">         Layout : near=2</span><br><span class=\"line\">     Chunk Size : 512K</span><br><span class=\"line\"></span><br><span class=\"line\">  Resync Status : 90% complete</span><br><span class=\"line\"></span><br><span class=\"line\">           Name : linuxprobe.com:0  (local to host linuxprobe.com)</span><br><span class=\"line\">           UUID : 677b3bb3:5ab19c7d:9b2b8460:3dbacc6c</span><br><span class=\"line\">         Events : 15</span><br><span class=\"line\"></span><br><span class=\"line\">    Number   Major   Minor   RaidDevice State</span><br><span class=\"line\">       0       8       16        0      active sync   /dev/sdb</span><br><span class=\"line\">       1       8       32        1      active sync   /dev/sdc</span><br><span class=\"line\">       2       8       48        2      active sync   /dev/sdd</span><br><span class=\"line\">       3       8       64        3      active sync   /dev/sde</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<h5 id=\"9-Set-the-default-data-storage-location-You-can-set-the-default-data-storage-location-by-changing-the-user’s-home-directory-for-example\"><a href=\"#9-Set-the-default-data-storage-location-You-can-set-the-default-data-storage-location-by-changing-the-user’s-home-directory-for-example\" class=\"headerlink\" title=\"9. Set the default data storage location: You can set the default data storage location by changing the user’s home directory, for example:\"></a>9. Set the default data storage location: You can set the default data storage location by changing the user’s home directory, for example:</h5><p><code>sudo usermod -d /mnt/raid10/username username</code><br>This will change <strong>username</strong>‘s home directory to <strong>&#x2F;mnt&#x2F;raid10&#x2F;username</strong> and the default data storage location to the RAID10 disk.</p>\n<h5 id=\"10-重启\"><a href=\"#10-重启\" class=\"headerlink\" title=\"10. 重启\"></a>10. 重启</h5><p>All operations and resulting files should now be stored on the RAID10 disk.</p>\n<p>attached<br><code>fdisk /dev/sdb</code> manages disk partitions</p>\n","site":{"data":{}},"excerpt":"<h5 id=\"1-RAID\"><a href=\"#1-RAID\" class=\"headerlink\" title=\"1. RAID\"></a>1. RAID</h5><ul>\n<li>RAID 0 acceleration without backup</li>\n<li>RAID 1 backups are not accelerated</li>\n<li>RAID 5 parity, accelerated backup for low cost</li>\n<li>RAID 10 RAID 0 + RAID 1 RAID1 is formed first, backup is not accelerated, and then RAID0 is formed, acceleration is not backed up. Unless all hard disks in one group fail. The utilization rate is 50%. high cost</li></ul>","more":"\n\n<h5 id=\"2-virtual-four-parallel-disks\"><a href=\"#2-virtual-four-parallel-disks\" class=\"headerlink\" title=\"2. virtual four parallel disks\"></a>2. virtual four parallel disks</h5><h5 id=\"3-devcheck-disk\"><a href=\"#3-devcheck-disk\" class=\"headerlink\" title=\"3. /devcheck disk\"></a>3. <code>/dev</code>check disk</h5><h5 id=\"4-make-an-array-card\"><a href=\"#4-make-an-array-card\" class=\"headerlink\" title=\"4. make an array card\"></a>4. make an array card</h5><p><code>sudo mdadm -Cv /dev/md0 -a yes -n 4 -l 10 /dev/sdb /dev/sdc /dev/sdd /dev/sde</code></p>\n<ul>\n<li>The mdadm command is used to manage the software RAID hard disk array in the Linux system</li>\n<li>The -C parameter represents creating a RAID array card</li>\n<li>The -v parameter displays the creation process, and the appended &#x2F;dev&#x2F;md0 is the name of the RAID disk array after creation</li>\n<li>-a yes represents automatic creation of device files</li>\n<li>-n 4 parameters represent using 4 fast hard disks for deployment</li>\n<li>-l 10 specifies the RAID level as RAID 10 scheme</li>\n<li>The last is the name of the 4 hard disk devices</li>\n</ul>\n<h5 id=\"5-format\"><a href=\"#5-format\" class=\"headerlink\" title=\"5. format\"></a>5. format</h5><p><code>mkfs.ext4 /dev/md0</code></p>\n<h5 id=\"6-mount\"><a href=\"#6-mount\" class=\"headerlink\" title=\"6. mount\"></a>6. mount</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /RAID</span><br><span class=\"line\">mount /dev/md0  /RAID</span><br><span class=\"line\">df -h</span><br></pre></td></tr></table></figure>\n\n<p>回显</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Filesystem                        Size  Used Avail Use% Mounted on</span><br><span class=\"line\">/dev/mapper/rhel_linuxprobe-root   18G  2.9G   15G  17% /</span><br><span class=\"line\">devtmpfs                          905M     0  905M   0% /dev</span><br><span class=\"line\">tmpfs                             914M   92K  914M   1% /dev/shm</span><br><span class=\"line\">tmpfs                             914M  8.8M  905M   1% /run</span><br><span class=\"line\">tmpfs                             914M     0  914M   0% /sys/fs/cgroup</span><br><span class=\"line\">/dev/sda1                         497M  119M  379M  24% /boot</span><br><span class=\"line\">/dev/md0                           40G   49M   38G   1% /RAID</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"7-Persistence\"><a href=\"#7-Persistence\" class=\"headerlink\" title=\"7. Persistence\"></a>7. Persistence</h5><p><code>/etc/fstab写入&#39;/dev/md0                     /RAID                       ext4    defaults        0 0&#39;</code></p>\n<h5 id=\"8-check-status\"><a href=\"#8-check-status\" class=\"headerlink\" title=\"8. check status\"></a>8. check status</h5><p><code> mdadm -D /dev/md0</code><br>回显<br>mdadm: must be super-user to perform this action</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[corner@linuxprobe ~]$ sudo mdadm -D /dev/md0</span><br><span class=\"line\">/dev/md0:</span><br><span class=\"line\">        Version : 1.2</span><br><span class=\"line\">  Creation Time : Thu Mar  9 14:46:13 2023</span><br><span class=\"line\">     Raid Level : raid10</span><br><span class=\"line\">     Array Size : 41909248 (39.97 GiB 42.92 GB)</span><br><span class=\"line\">  Used Dev Size : 20954624 (19.98 GiB 21.46 GB)</span><br><span class=\"line\">   Raid Devices : 4</span><br><span class=\"line\">  Total Devices : 4</span><br><span class=\"line\">    Persistence : Superblock is persistent</span><br><span class=\"line\"></span><br><span class=\"line\">    Update Time : Thu Mar  9 14:49:17 2023</span><br><span class=\"line\">          State : active, resyncing</span><br><span class=\"line\"> Active Devices : 4</span><br><span class=\"line\">Working Devices : 4</span><br><span class=\"line\"> Failed Devices : 0</span><br><span class=\"line\">  Spare Devices : 0</span><br><span class=\"line\"></span><br><span class=\"line\">         Layout : near=2</span><br><span class=\"line\">     Chunk Size : 512K</span><br><span class=\"line\"></span><br><span class=\"line\">  Resync Status : 90% complete</span><br><span class=\"line\"></span><br><span class=\"line\">           Name : linuxprobe.com:0  (local to host linuxprobe.com)</span><br><span class=\"line\">           UUID : 677b3bb3:5ab19c7d:9b2b8460:3dbacc6c</span><br><span class=\"line\">         Events : 15</span><br><span class=\"line\"></span><br><span class=\"line\">    Number   Major   Minor   RaidDevice State</span><br><span class=\"line\">       0       8       16        0      active sync   /dev/sdb</span><br><span class=\"line\">       1       8       32        1      active sync   /dev/sdc</span><br><span class=\"line\">       2       8       48        2      active sync   /dev/sdd</span><br><span class=\"line\">       3       8       64        3      active sync   /dev/sde</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<h5 id=\"9-Set-the-default-data-storage-location-You-can-set-the-default-data-storage-location-by-changing-the-user’s-home-directory-for-example\"><a href=\"#9-Set-the-default-data-storage-location-You-can-set-the-default-data-storage-location-by-changing-the-user’s-home-directory-for-example\" class=\"headerlink\" title=\"9. Set the default data storage location: You can set the default data storage location by changing the user’s home directory, for example:\"></a>9. Set the default data storage location: You can set the default data storage location by changing the user’s home directory, for example:</h5><p><code>sudo usermod -d /mnt/raid10/username username</code><br>This will change <strong>username</strong>‘s home directory to <strong>&#x2F;mnt&#x2F;raid10&#x2F;username</strong> and the default data storage location to the RAID10 disk.</p>\n<h5 id=\"10-重启\"><a href=\"#10-重启\" class=\"headerlink\" title=\"10. 重启\"></a>10. 重启</h5><p>All operations and resulting files should now be stored on the RAID10 disk.</p>\n<p>attached<br><code>fdisk /dev/sdb</code> manages disk partitions</p>"},{"title":"Sipser The third edition of theory of computation solutions","date":"2023-04-06T22:50:35.000Z","declare":true,"_content":"[Corner430/sipser-computation-3rd-solutions](https://github.com/Corner430/sipser-computation-3rd-solutions)","source":"_posts/Sipser-The-third-edition-of-theory-of-computation-solutions.md","raw":"---\ntitle: Sipser The third edition of theory of computation solutions\ndate: 2023-04-06 22:50:35\ntags:\n    - 学习\n    - 笔记\ndeclare: true\n---\n[Corner430/sipser-computation-3rd-solutions](https://github.com/Corner430/sipser-computation-3rd-solutions)","slug":"Sipser-The-third-edition-of-theory-of-computation-solutions","published":1,"updated":"2024-04-25T17:26:47.763Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvjbaqhn00180vn16qcr6o5s","content":"<p><a href=\"https://github.com/Corner430/sipser-computation-3rd-solutions\">Corner430&#x2F;sipser-computation-3rd-solutions</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://github.com/Corner430/sipser-computation-3rd-solutions\">Corner430&#x2F;sipser-computation-3rd-solutions</a></p>\n"},{"title":"Solve Connecting to raw.githubusercontent.com :443... failed: Connection refused.","date":"2023-04-03T16:55:37.000Z","_content":"- get ip\nUse the URL: https://www.ipaddress.com/ to get the ip address of the raw.githubusercontent.com website: 185.199.108.133.\n\n- modify the hosts file\n`sudo vim /etc/hosts`\nAdd in the last line: `185.199.108.133 raw.githubusercontent.com`\n","source":"_posts/Solve-Connecting-to-raw-githubusercontent-com-443-failed-Connection-refused.md","raw":"---\ntitle: >-\n  Solve Connecting to raw.githubusercontent.com :443... failed: Connection\n  refused.\ndate: 2023-04-03 16:55:37\ntags:\n  - hosts\n  - raw.githubusercontent.com\n---\n- get ip\nUse the URL: https://www.ipaddress.com/ to get the ip address of the raw.githubusercontent.com website: 185.199.108.133.\n\n- modify the hosts file\n`sudo vim /etc/hosts`\nAdd in the last line: `185.199.108.133 raw.githubusercontent.com`\n","slug":"Solve-Connecting-to-raw-githubusercontent-com-443-failed-Connection-refused","published":1,"updated":"2024-04-25T17:26:46.733Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvjbaqho001a0vn12yu67pvn","content":"<ul>\n<li><p>get ip<br>Use the URL: <a href=\"https://www.ipaddress.com/\">https://www.ipaddress.com/</a> to get the ip address of the raw.githubusercontent.com website: 185.199.108.133.</p>\n</li>\n<li><p>modify the hosts file<br><code>sudo vim /etc/hosts</code><br>Add in the last line: <code>185.199.108.133 raw.githubusercontent.com</code></p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><p>get ip<br>Use the URL: <a href=\"https://www.ipaddress.com/\">https://www.ipaddress.com/</a> to get the ip address of the raw.githubusercontent.com website: 185.199.108.133.</p>\n</li>\n<li><p>modify the hosts file<br><code>sudo vim /etc/hosts</code><br>Add in the last line: <code>185.199.108.133 raw.githubusercontent.com</code></p>\n</li>\n</ul>\n"},{"title":"Tiny精简系统","date":"2023-04-22T21:48:54.000Z","declare":true,"_content":"[Tiny10 下载地址](https://archive.org/details/tiny-10-NTDEV)\n[Tiny11 下载地址](https://archive.org/details/tiny-11-NTDEV?utm_source=iplaysoft.com&hmsr=iplaysoft.com)\n[tiny11builder](https://github.com/ntdevlabs/tiny11builder)\n\nTiny10 需要启动**window update**相关服务才可以下载中文语言包<!--more-->\n![20230422215509](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230422215509.png)\n\n---------------------------------------------------------------------\nTiny有这么四个版本\n![20230514081715](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230514081715.png)\n\n这四个版本都是Windows 11的beta版本，但是它们之间有一些区别。Beta1和Beta2是两个不同的beta版本，Beta2(no sysreq)是Beta2的一个变体，没有系统要求。R1是Windows 11的正式版本，也有可能是ARM平台架构的版本。\n\nBeta1和Beta2之间的区别我没有找到明确的信息，但是我在[Reddit上看到了一个帖子](https://www.reddit.com/r/Tiny11/comments/118u057/the_difference_between_b1_b2_editions/)，其中有人说他们认为Beta2比Beta1更好。\n\nTiny11是一个可以将标准Windows 11安装缩小到大约8GB并且在只有2GB RAM的系统上“运行良好”的操作系统。\n\n![20230514082002](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230514082002.png)\n\n-----------------------------------------------------\n类似的精简系统还有：\n- [AtlasOS](https://atlasos.net/)，专为游戏而生的win10精简版系统。[github链接](https://github.com/Atlas-OS/Atlas)\n  - [安装教程](https://docs.atlasos.net/getting-started/installation/#download-an-iso)\n- [ReviOS](https://revi.cc/) - 专为游戏优化的 Win11 / Win10 精简版系统！性能与稳定兼备 (类似 Atlas / LTSC)\n- [Windsys Project](https://windsys.win/)\n","source":"_posts/Tiny精简系统.md","raw":"---\ntitle: Tiny精简系统\ndate: 2023-04-22 21:48:54\ntags:\n  - windows\ndeclare: true\n---\n[Tiny10 下载地址](https://archive.org/details/tiny-10-NTDEV)\n[Tiny11 下载地址](https://archive.org/details/tiny-11-NTDEV?utm_source=iplaysoft.com&hmsr=iplaysoft.com)\n[tiny11builder](https://github.com/ntdevlabs/tiny11builder)\n\nTiny10 需要启动**window update**相关服务才可以下载中文语言包<!--more-->\n![20230422215509](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230422215509.png)\n\n---------------------------------------------------------------------\nTiny有这么四个版本\n![20230514081715](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230514081715.png)\n\n这四个版本都是Windows 11的beta版本，但是它们之间有一些区别。Beta1和Beta2是两个不同的beta版本，Beta2(no sysreq)是Beta2的一个变体，没有系统要求。R1是Windows 11的正式版本，也有可能是ARM平台架构的版本。\n\nBeta1和Beta2之间的区别我没有找到明确的信息，但是我在[Reddit上看到了一个帖子](https://www.reddit.com/r/Tiny11/comments/118u057/the_difference_between_b1_b2_editions/)，其中有人说他们认为Beta2比Beta1更好。\n\nTiny11是一个可以将标准Windows 11安装缩小到大约8GB并且在只有2GB RAM的系统上“运行良好”的操作系统。\n\n![20230514082002](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230514082002.png)\n\n-----------------------------------------------------\n类似的精简系统还有：\n- [AtlasOS](https://atlasos.net/)，专为游戏而生的win10精简版系统。[github链接](https://github.com/Atlas-OS/Atlas)\n  - [安装教程](https://docs.atlasos.net/getting-started/installation/#download-an-iso)\n- [ReviOS](https://revi.cc/) - 专为游戏优化的 Win11 / Win10 精简版系统！性能与稳定兼备 (类似 Atlas / LTSC)\n- [Windsys Project](https://windsys.win/)\n","slug":"Tiny精简系统","published":1,"updated":"2024-04-25T17:26:47.583Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvjbaqhq001d0vn11xnggp6d","content":"<p><a href=\"https://archive.org/details/tiny-10-NTDEV\">Tiny10 下载地址</a><br><a href=\"https://archive.org/details/tiny-11-NTDEV?utm_source=iplaysoft.com&hmsr=iplaysoft.com\">Tiny11 下载地址</a><br><a href=\"https://github.com/ntdevlabs/tiny11builder\">tiny11builder</a></p>\n<p>Tiny10 需要启动<strong>window update</strong>相关服务才可以下载中文语言包<span id=\"more\"></span><br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230422215509.png\" alt=\"20230422215509\"></p>\n<hr>\n<p>Tiny有这么四个版本<br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230514081715.png\" alt=\"20230514081715\"></p>\n<p>这四个版本都是Windows 11的beta版本，但是它们之间有一些区别。Beta1和Beta2是两个不同的beta版本，Beta2(no sysreq)是Beta2的一个变体，没有系统要求。R1是Windows 11的正式版本，也有可能是ARM平台架构的版本。</p>\n<p>Beta1和Beta2之间的区别我没有找到明确的信息，但是我在<a href=\"https://www.reddit.com/r/Tiny11/comments/118u057/the_difference_between_b1_b2_editions/\">Reddit上看到了一个帖子</a>，其中有人说他们认为Beta2比Beta1更好。</p>\n<p>Tiny11是一个可以将标准Windows 11安装缩小到大约8GB并且在只有2GB RAM的系统上“运行良好”的操作系统。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230514082002.png\" alt=\"20230514082002\"></p>\n<hr>\n<p>类似的精简系统还有：</p>\n<ul>\n<li><a href=\"https://atlasos.net/\">AtlasOS</a>，专为游戏而生的win10精简版系统。<a href=\"https://github.com/Atlas-OS/Atlas\">github链接</a><ul>\n<li><a href=\"https://docs.atlasos.net/getting-started/installation/#download-an-iso\">安装教程</a></li>\n</ul>\n</li>\n<li><a href=\"https://revi.cc/\">ReviOS</a> - 专为游戏优化的 Win11 &#x2F; Win10 精简版系统！性能与稳定兼备 (类似 Atlas &#x2F; LTSC)</li>\n<li><a href=\"https://windsys.win/\">Windsys Project</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p><a href=\"https://archive.org/details/tiny-10-NTDEV\">Tiny10 下载地址</a><br><a href=\"https://archive.org/details/tiny-11-NTDEV?utm_source=iplaysoft.com&hmsr=iplaysoft.com\">Tiny11 下载地址</a><br><a href=\"https://github.com/ntdevlabs/tiny11builder\">tiny11builder</a></p>\n<p>Tiny10 需要启动<strong>window update</strong>相关服务才可以下载中文语言包</p>","more":"<br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230422215509.png\" alt=\"20230422215509\"><p></p>\n<hr>\n<p>Tiny有这么四个版本<br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230514081715.png\" alt=\"20230514081715\"></p>\n<p>这四个版本都是Windows 11的beta版本，但是它们之间有一些区别。Beta1和Beta2是两个不同的beta版本，Beta2(no sysreq)是Beta2的一个变体，没有系统要求。R1是Windows 11的正式版本，也有可能是ARM平台架构的版本。</p>\n<p>Beta1和Beta2之间的区别我没有找到明确的信息，但是我在<a href=\"https://www.reddit.com/r/Tiny11/comments/118u057/the_difference_between_b1_b2_editions/\">Reddit上看到了一个帖子</a>，其中有人说他们认为Beta2比Beta1更好。</p>\n<p>Tiny11是一个可以将标准Windows 11安装缩小到大约8GB并且在只有2GB RAM的系统上“运行良好”的操作系统。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230514082002.png\" alt=\"20230514082002\"></p>\n<hr>\n<p>类似的精简系统还有：</p>\n<ul>\n<li><a href=\"https://atlasos.net/\">AtlasOS</a>，专为游戏而生的win10精简版系统。<a href=\"https://github.com/Atlas-OS/Atlas\">github链接</a><ul>\n<li><a href=\"https://docs.atlasos.net/getting-started/installation/#download-an-iso\">安装教程</a></li>\n</ul>\n</li>\n<li><a href=\"https://revi.cc/\">ReviOS</a> - 专为游戏优化的 Win11 &#x2F; Win10 精简版系统！性能与稳定兼备 (类似 Atlas &#x2F; LTSC)</li>\n<li><a href=\"https://windsys.win/\">Windsys Project</a></li>\n</ul>"},{"title":"Transfer data via gpg","date":"2023-04-03T19:14:18.000Z","declare":true,"_content":"Here are the steps to encrypt data with GPG on CentOS 7 and transfer it with friends:\n1. Install GPG\nFirst, GPG needs to be installed on CentOS 7. It can be installed with the following command:\n`sudo yum install gnupg2`\n<!--more-->\n2. Generate a key pair\nTo encrypt and decrypt using GPG, a key pair needs to be generated. A key pair can be generated with the following command:\n`gpg --full-generate-key`\n\nEnter your name, email address, and password when prompted. You can choose the default options, or make custom configurations according to your needs. Generating the key pair may take some time, depending on the speed of your computer and the encryption algorithm selected.\n\n3. Export the public key\nAfter generating the key pair, you need to export your public key and share it with your friends so that they can use your public key to decrypt the encrypted data you send. You can export your own public key with the following command:\n`gpg --armor --output mypubkey.gpg --export myemail@example.com`\n\nWhere **myemail@example.com** is the email address you entered when generating the key pair, you can replace it with the actual value. The **--armor** parameter converts the output to ASCII for sharing in email or text messages.\n\nSend the **mypubkey.gpg** file to your friends.\n\n4. Key import\nYour friend needs to import your public key into their GPG keyring to be able to encrypt data with your public key and send it to you. The public key can be imported with the following command:\n`gpg --import mypubkey.gpg`\n\nwhere **mypubkey.gpg** is the name and path of your exported public key file.\n\n5. Encrypted data\nNow you can encrypt your data with GPG and send it to your friends. Files can be encrypted with the following command:\n`gpg --output myfile.gpg --encrypt --recipient myemail@example.com myfile.txt`\n\nwhere myfile.txt is the name and path of the file to encrypt, and myemail@example.com is your friend's email address, which can be replaced with actual values. The --output parameter specifies the output filename of the encrypted file, the --encrypt parameter specifies the file to be encrypted, and the --recipient parameter specifies the recipient's email address.\n\nSend the encrypted myfile.gpg file to your friend.\n\n6. Decrypt data\nYour friend can use GPG to decrypt received encrypted data. The file can be decrypted with the following command:\n`gpg --output myfile.txt --decrypt myfile.gpg`\n\nwhere myfile.gpg is the name and path of the received encrypted file and myfile.txt is the output filename of the decrypted file.\n\nThat concludes the steps to use GPG to encrypt data and transfer with friends on CentOS 7.","source":"_posts/Transfer-data-via-gpg.md","raw":"---\ntitle: Transfer data via gpg\ndate: 2023-04-03 19:14:18\ntags:\n    - gpg 加密\n    - Linux\ndeclare: true\n---\nHere are the steps to encrypt data with GPG on CentOS 7 and transfer it with friends:\n1. Install GPG\nFirst, GPG needs to be installed on CentOS 7. It can be installed with the following command:\n`sudo yum install gnupg2`\n<!--more-->\n2. Generate a key pair\nTo encrypt and decrypt using GPG, a key pair needs to be generated. A key pair can be generated with the following command:\n`gpg --full-generate-key`\n\nEnter your name, email address, and password when prompted. You can choose the default options, or make custom configurations according to your needs. Generating the key pair may take some time, depending on the speed of your computer and the encryption algorithm selected.\n\n3. Export the public key\nAfter generating the key pair, you need to export your public key and share it with your friends so that they can use your public key to decrypt the encrypted data you send. You can export your own public key with the following command:\n`gpg --armor --output mypubkey.gpg --export myemail@example.com`\n\nWhere **myemail@example.com** is the email address you entered when generating the key pair, you can replace it with the actual value. The **--armor** parameter converts the output to ASCII for sharing in email or text messages.\n\nSend the **mypubkey.gpg** file to your friends.\n\n4. Key import\nYour friend needs to import your public key into their GPG keyring to be able to encrypt data with your public key and send it to you. The public key can be imported with the following command:\n`gpg --import mypubkey.gpg`\n\nwhere **mypubkey.gpg** is the name and path of your exported public key file.\n\n5. Encrypted data\nNow you can encrypt your data with GPG and send it to your friends. Files can be encrypted with the following command:\n`gpg --output myfile.gpg --encrypt --recipient myemail@example.com myfile.txt`\n\nwhere myfile.txt is the name and path of the file to encrypt, and myemail@example.com is your friend's email address, which can be replaced with actual values. The --output parameter specifies the output filename of the encrypted file, the --encrypt parameter specifies the file to be encrypted, and the --recipient parameter specifies the recipient's email address.\n\nSend the encrypted myfile.gpg file to your friend.\n\n6. Decrypt data\nYour friend can use GPG to decrypt received encrypted data. The file can be decrypted with the following command:\n`gpg --output myfile.txt --decrypt myfile.gpg`\n\nwhere myfile.gpg is the name and path of the received encrypted file and myfile.txt is the output filename of the decrypted file.\n\nThat concludes the steps to use GPG to encrypt data and transfer with friends on CentOS 7.","slug":"Transfer-data-via-gpg","published":1,"updated":"2024-04-25T17:26:47.273Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvjbaqhr001f0vn1d1pbdn2y","content":"<p>Here are the steps to encrypt data with GPG on CentOS 7 and transfer it with friends:</p>\n<ol>\n<li>Install GPG<br>First, GPG needs to be installed on CentOS 7. It can be installed with the following command:<br><code>sudo yum install gnupg2</code><span id=\"more\"></span></li>\n<li>Generate a key pair<br>To encrypt and decrypt using GPG, a key pair needs to be generated. A key pair can be generated with the following command:<br><code>gpg --full-generate-key</code></li>\n</ol>\n<p>Enter your name, email address, and password when prompted. You can choose the default options, or make custom configurations according to your needs. Generating the key pair may take some time, depending on the speed of your computer and the encryption algorithm selected.</p>\n<ol start=\"3\">\n<li>Export the public key<br>After generating the key pair, you need to export your public key and share it with your friends so that they can use your public key to decrypt the encrypted data you send. You can export your own public key with the following command:<br><code>gpg --armor --output mypubkey.gpg --export myemail@example.com</code></li>\n</ol>\n<p>Where <strong><a href=\"mailto:&#109;&#121;&#101;&#109;&#97;&#x69;&#x6c;&#x40;&#x65;&#120;&#x61;&#x6d;&#112;&#x6c;&#101;&#46;&#x63;&#111;&#x6d;\">&#109;&#121;&#101;&#109;&#97;&#x69;&#x6c;&#x40;&#x65;&#120;&#x61;&#x6d;&#112;&#x6c;&#101;&#46;&#x63;&#111;&#x6d;</a></strong> is the email address you entered when generating the key pair, you can replace it with the actual value. The <strong>–armor</strong> parameter converts the output to ASCII for sharing in email or text messages.</p>\n<p>Send the <strong>mypubkey.gpg</strong> file to your friends.</p>\n<ol start=\"4\">\n<li>Key import<br>Your friend needs to import your public key into their GPG keyring to be able to encrypt data with your public key and send it to you. The public key can be imported with the following command:<br><code>gpg --import mypubkey.gpg</code></li>\n</ol>\n<p>where <strong>mypubkey.gpg</strong> is the name and path of your exported public key file.</p>\n<ol start=\"5\">\n<li>Encrypted data<br>Now you can encrypt your data with GPG and send it to your friends. Files can be encrypted with the following command:<br><code>gpg --output myfile.gpg --encrypt --recipient myemail@example.com myfile.txt</code></li>\n</ol>\n<p>where myfile.txt is the name and path of the file to encrypt, and <a href=\"mailto:&#109;&#121;&#101;&#x6d;&#97;&#x69;&#x6c;&#x40;&#x65;&#x78;&#97;&#x6d;&#x70;&#x6c;&#x65;&#46;&#99;&#111;&#109;\">&#109;&#121;&#101;&#x6d;&#97;&#x69;&#x6c;&#x40;&#x65;&#x78;&#97;&#x6d;&#x70;&#x6c;&#x65;&#46;&#99;&#111;&#109;</a> is your friend’s email address, which can be replaced with actual values. The –output parameter specifies the output filename of the encrypted file, the –encrypt parameter specifies the file to be encrypted, and the –recipient parameter specifies the recipient’s email address.</p>\n<p>Send the encrypted myfile.gpg file to your friend.</p>\n<ol start=\"6\">\n<li>Decrypt data<br>Your friend can use GPG to decrypt received encrypted data. The file can be decrypted with the following command:<br><code>gpg --output myfile.txt --decrypt myfile.gpg</code></li>\n</ol>\n<p>where myfile.gpg is the name and path of the received encrypted file and myfile.txt is the output filename of the decrypted file.</p>\n<p>That concludes the steps to use GPG to encrypt data and transfer with friends on CentOS 7.</p>\n","site":{"data":{}},"excerpt":"<p>Here are the steps to encrypt data with GPG on CentOS 7 and transfer it with friends:</p>\n<ol>\n<li>Install GPG<br>First, GPG needs to be installed on CentOS 7. It can be installed with the following command:<br><code>sudo yum install gnupg2</code></li></ol>","more":"\n<li>Generate a key pair<br>To encrypt and decrypt using GPG, a key pair needs to be generated. A key pair can be generated with the following command:<br><code>gpg --full-generate-key</code></li>\n\n<p>Enter your name, email address, and password when prompted. You can choose the default options, or make custom configurations according to your needs. Generating the key pair may take some time, depending on the speed of your computer and the encryption algorithm selected.</p>\n<ol start=\"3\">\n<li>Export the public key<br>After generating the key pair, you need to export your public key and share it with your friends so that they can use your public key to decrypt the encrypted data you send. You can export your own public key with the following command:<br><code>gpg --armor --output mypubkey.gpg --export myemail@example.com</code></li>\n</ol>\n<p>Where <strong><a href=\"mailto:&#109;&#121;&#101;&#109;&#97;&#x69;&#x6c;&#x40;&#x65;&#120;&#x61;&#x6d;&#112;&#x6c;&#101;&#46;&#x63;&#111;&#x6d;\">&#109;&#121;&#101;&#109;&#97;&#x69;&#x6c;&#x40;&#x65;&#120;&#x61;&#x6d;&#112;&#x6c;&#101;&#46;&#x63;&#111;&#x6d;</a></strong> is the email address you entered when generating the key pair, you can replace it with the actual value. The <strong>–armor</strong> parameter converts the output to ASCII for sharing in email or text messages.</p>\n<p>Send the <strong>mypubkey.gpg</strong> file to your friends.</p>\n<ol start=\"4\">\n<li>Key import<br>Your friend needs to import your public key into their GPG keyring to be able to encrypt data with your public key and send it to you. The public key can be imported with the following command:<br><code>gpg --import mypubkey.gpg</code></li>\n</ol>\n<p>where <strong>mypubkey.gpg</strong> is the name and path of your exported public key file.</p>\n<ol start=\"5\">\n<li>Encrypted data<br>Now you can encrypt your data with GPG and send it to your friends. Files can be encrypted with the following command:<br><code>gpg --output myfile.gpg --encrypt --recipient myemail@example.com myfile.txt</code></li>\n</ol>\n<p>where myfile.txt is the name and path of the file to encrypt, and <a href=\"mailto:&#109;&#121;&#101;&#x6d;&#97;&#x69;&#x6c;&#x40;&#x65;&#x78;&#97;&#x6d;&#x70;&#x6c;&#x65;&#46;&#99;&#111;&#109;\">&#109;&#121;&#101;&#x6d;&#97;&#x69;&#x6c;&#x40;&#x65;&#x78;&#97;&#x6d;&#x70;&#x6c;&#x65;&#46;&#99;&#111;&#109;</a> is your friend’s email address, which can be replaced with actual values. The –output parameter specifies the output filename of the encrypted file, the –encrypt parameter specifies the file to be encrypted, and the –recipient parameter specifies the recipient’s email address.</p>\n<p>Send the encrypted myfile.gpg file to your friend.</p>\n<ol start=\"6\">\n<li>Decrypt data<br>Your friend can use GPG to decrypt received encrypted data. The file can be decrypted with the following command:<br><code>gpg --output myfile.txt --decrypt myfile.gpg</code></li>\n</ol>\n<p>where myfile.gpg is the name and path of the received encrypted file and myfile.txt is the output filename of the decrypted file.</p>\n<p>That concludes the steps to use GPG to encrypt data and transfer with friends on CentOS 7.</p>"},{"title":"Ubuntu NAT","date":"2023-04-03T18:17:31.000Z","declare":true,"_content":"\n### NAT\nTo allow Ubuntu in the LAN to access the Internet, you need to set Ubuntu as a gateway and enable Network Address Translation (NAT).\n<!--more-->\n- Make sure Ubuntu is connected to the Internet and can access the Internet.\n\n- Enable IP forwarding:\n`sudo sysctl net.ipv4.ip_forward=1`\n\n- On the other four Ubuntu computers, set the default gateway to the IP address of the computer that can access the Internet. You can enter the following command in Terminal to set the default gateway:\n`sudo route add default gw <gateway_IP_address>`\nMake sure to replace **<gateway_IP_address>** with the IP address of an Ubuntu computer with Internet access.\n\nIn recent versions of Ubuntu, the `route` command has been replaced by the `ip route` command. Therefore, you can set the default gateway to the IP address of a computer with Internet access using the following command:\n`sudo ip route add default via <gateway_IP_address>`\n\n- Add DNS resolution configuration in /etc/resolv.conf\n```bash\nnameserver 114.114.114.114\nnameserver 8.8.8.8\nnameserver 8.8.4.4\n```\n\nAfter completing these steps, your Ubuntu will be configured as a gateway with Network Address Translation (NAT) enabled. This way, other computers can connect to the internet through Ubuntu.\n\nStatic ip configuration: `/etc/netplan/00-installer-config.yaml`\nThe configuration takes effect: `sudo netplan apply`\n\n\n---------------------\n\nSet mirror source\n\n- Backup\n`sudo cp /etc/apt/sources.list /etc/apt/sources.list.backup`\n\n- Open the **/etc/apt/sources.list** file.\n\n- Replace with the following\n```shell\ndeb http://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiverse \ndeb http://mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiverse \ndeb http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiverse \ndeb http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse \ndeb http://mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiverse \ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiverse \ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiverse \ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiverse \ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security main restricted universe multiverse \n```\n\n- Update\n`sudo apt update`\n\n- Solve vim problems\n```shell\nsudo apt-get remove vim-common\nsudo apt-get install vim\n```\n","source":"_posts/Ubuntu-NAT.md","raw":"---\ntitle: Ubuntu NAT\ndate: 2023-04-03 18:17:31\ntags:\n    - Ubuntu\n    - 网络\ndeclare: true\n---\n\n### NAT\nTo allow Ubuntu in the LAN to access the Internet, you need to set Ubuntu as a gateway and enable Network Address Translation (NAT).\n<!--more-->\n- Make sure Ubuntu is connected to the Internet and can access the Internet.\n\n- Enable IP forwarding:\n`sudo sysctl net.ipv4.ip_forward=1`\n\n- On the other four Ubuntu computers, set the default gateway to the IP address of the computer that can access the Internet. You can enter the following command in Terminal to set the default gateway:\n`sudo route add default gw <gateway_IP_address>`\nMake sure to replace **<gateway_IP_address>** with the IP address of an Ubuntu computer with Internet access.\n\nIn recent versions of Ubuntu, the `route` command has been replaced by the `ip route` command. Therefore, you can set the default gateway to the IP address of a computer with Internet access using the following command:\n`sudo ip route add default via <gateway_IP_address>`\n\n- Add DNS resolution configuration in /etc/resolv.conf\n```bash\nnameserver 114.114.114.114\nnameserver 8.8.8.8\nnameserver 8.8.4.4\n```\n\nAfter completing these steps, your Ubuntu will be configured as a gateway with Network Address Translation (NAT) enabled. This way, other computers can connect to the internet through Ubuntu.\n\nStatic ip configuration: `/etc/netplan/00-installer-config.yaml`\nThe configuration takes effect: `sudo netplan apply`\n\n\n---------------------\n\nSet mirror source\n\n- Backup\n`sudo cp /etc/apt/sources.list /etc/apt/sources.list.backup`\n\n- Open the **/etc/apt/sources.list** file.\n\n- Replace with the following\n```shell\ndeb http://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiverse \ndeb http://mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiverse \ndeb http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiverse \ndeb http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse \ndeb http://mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiverse \ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiverse \ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiverse \ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiverse \ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security main restricted universe multiverse \n```\n\n- Update\n`sudo apt update`\n\n- Solve vim problems\n```shell\nsudo apt-get remove vim-common\nsudo apt-get install vim\n```\n","slug":"Ubuntu-NAT","published":1,"updated":"2024-04-25T17:26:48.003Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvjbaqht001h0vn1csuvanug","content":"<h3 id=\"NAT\"><a href=\"#NAT\" class=\"headerlink\" title=\"NAT\"></a>NAT</h3><p>To allow Ubuntu in the LAN to access the Internet, you need to set Ubuntu as a gateway and enable Network Address Translation (NAT).</p>\n<span id=\"more\"></span>\n<ul>\n<li><p>Make sure Ubuntu is connected to the Internet and can access the Internet.</p>\n</li>\n<li><p>Enable IP forwarding:<br><code>sudo sysctl net.ipv4.ip_forward=1</code></p>\n</li>\n<li><p>On the other four Ubuntu computers, set the default gateway to the IP address of the computer that can access the Internet. You can enter the following command in Terminal to set the default gateway:<br><code>sudo route add default gw &lt;gateway_IP_address&gt;</code><br>Make sure to replace <strong><gateway_IP_address></gateway_IP_address></strong> with the IP address of an Ubuntu computer with Internet access.</p>\n</li>\n</ul>\n<p>In recent versions of Ubuntu, the <code>route</code> command has been replaced by the <code>ip route</code> command. Therefore, you can set the default gateway to the IP address of a computer with Internet access using the following command:<br><code>sudo ip route add default via &lt;gateway_IP_address&gt;</code></p>\n<ul>\n<li>Add DNS resolution configuration in &#x2F;etc&#x2F;resolv.conf<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nameserver 114.114.114.114</span><br><span class=\"line\">nameserver 8.8.8.8</span><br><span class=\"line\">nameserver 8.8.4.4</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>After completing these steps, your Ubuntu will be configured as a gateway with Network Address Translation (NAT) enabled. This way, other computers can connect to the internet through Ubuntu.</p>\n<p>Static ip configuration: <code>/etc/netplan/00-installer-config.yaml</code><br>The configuration takes effect: <code>sudo netplan apply</code></p>\n<hr>\n<p>Set mirror source</p>\n<ul>\n<li><p>Backup<br><code>sudo cp /etc/apt/sources.list /etc/apt/sources.list.backup</code></p>\n</li>\n<li><p>Open the <strong>&#x2F;etc&#x2F;apt&#x2F;sources.list</strong> file.</p>\n</li>\n<li><p>Replace with the following</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deb http://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiverse </span><br><span class=\"line\">deb http://mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiverse </span><br><span class=\"line\">deb http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiverse </span><br><span class=\"line\">deb http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse </span><br><span class=\"line\">deb http://mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiverse </span><br><span class=\"line\">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiverse </span><br><span class=\"line\">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiverse </span><br><span class=\"line\">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiverse </span><br><span class=\"line\">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security main restricted universe multiverse </span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Update<br><code>sudo apt update</code></p>\n</li>\n<li><p>Solve vim problems</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get remove vim-common</span><br><span class=\"line\">sudo apt-get install vim</span><br></pre></td></tr></table></figure></li>\n</ul>\n","site":{"data":{}},"excerpt":"<h3 id=\"NAT\"><a href=\"#NAT\" class=\"headerlink\" title=\"NAT\"></a>NAT</h3><p>To allow Ubuntu in the LAN to access the Internet, you need to set Ubuntu as a gateway and enable Network Address Translation (NAT).</p>","more":"<ul>\n<li><p>Make sure Ubuntu is connected to the Internet and can access the Internet.</p>\n</li>\n<li><p>Enable IP forwarding:<br><code>sudo sysctl net.ipv4.ip_forward=1</code></p>\n</li>\n<li><p>On the other four Ubuntu computers, set the default gateway to the IP address of the computer that can access the Internet. You can enter the following command in Terminal to set the default gateway:<br><code>sudo route add default gw &lt;gateway_IP_address&gt;</code><br>Make sure to replace <strong><gateway_IP_address></gateway_IP_address></strong> with the IP address of an Ubuntu computer with Internet access.</p>\n</li>\n</ul>\n<p>In recent versions of Ubuntu, the <code>route</code> command has been replaced by the <code>ip route</code> command. Therefore, you can set the default gateway to the IP address of a computer with Internet access using the following command:<br><code>sudo ip route add default via &lt;gateway_IP_address&gt;</code></p>\n<ul>\n<li>Add DNS resolution configuration in &#x2F;etc&#x2F;resolv.conf<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nameserver 114.114.114.114</span><br><span class=\"line\">nameserver 8.8.8.8</span><br><span class=\"line\">nameserver 8.8.4.4</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>After completing these steps, your Ubuntu will be configured as a gateway with Network Address Translation (NAT) enabled. This way, other computers can connect to the internet through Ubuntu.</p>\n<p>Static ip configuration: <code>/etc/netplan/00-installer-config.yaml</code><br>The configuration takes effect: <code>sudo netplan apply</code></p>\n<hr>\n<p>Set mirror source</p>\n<ul>\n<li><p>Backup<br><code>sudo cp /etc/apt/sources.list /etc/apt/sources.list.backup</code></p>\n</li>\n<li><p>Open the <strong>&#x2F;etc&#x2F;apt&#x2F;sources.list</strong> file.</p>\n</li>\n<li><p>Replace with the following</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deb http://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiverse </span><br><span class=\"line\">deb http://mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiverse </span><br><span class=\"line\">deb http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiverse </span><br><span class=\"line\">deb http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse </span><br><span class=\"line\">deb http://mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiverse </span><br><span class=\"line\">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiverse </span><br><span class=\"line\">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiverse </span><br><span class=\"line\">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiverse </span><br><span class=\"line\">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security main restricted universe multiverse </span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Update<br><code>sudo apt update</code></p>\n</li>\n<li><p>Solve vim problems</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get remove vim-common</span><br><span class=\"line\">sudo apt-get install vim</span><br></pre></td></tr></table></figure></li>\n</ul>"},{"title":"Ubuntu安全防护","date":"2023-05-07T20:27:38.000Z","declare":true,"_content":"ClamAV是一个开源的杀毒软件，可以通过命令行进行使用。<!--more-->\n\n1. 安装ClamAV：\n```shell\nsudo apt-get update\nsudo apt-get install clamav\n```\n2. 查看是否运行：`sudo systemctl status clamav-freshclam.service`\n3. 停止服务：`sudo systemctl stop clamav-freshclam.service`\n4. 更新ClamAV病毒库文件：`sudo freshclam`\n5. 对系统进行扫描：`sudo clamscan -r /`\n\n--------------------------\n- 修改root用户密码：`sudo passwd root`\n- 查看当前在Linux系统中已创建的所有用户和用户组：\n```shell\ncat /etc/passwd    # 查看用户\ncat /etc/group     # 查看用户组\n```\n- 删除用户：`sudo userdel <用户名>`\n> 请注意，如果该用户有属于他的文件或目录，这些文件和目录将不会自动删除。为了删除这些文件和目录，请使用以下命令：\n`sudo userdel -r <用户名>`\n- 删除用户组：`sudo groupdel <用户组名>`\n> 请注意，如果该用户组有属于它的文件或目录，这些文件和目录将不会自动删除。为了删除这些文件和目录，请先将它们的所属组修改为其他组或新建一个用户组并将其所属组修改为新的用户组，然后再删除旧用户组。\n\n-----------------------------------------------\n使用ufw防火墙\n1. 检查防火墙状态：`sudo ufw status`\n2. 启用防火墙：`sudo ufw enable`，这将启用防火墙，并默认情况下阻止所有传入的连接。\n3. 允许特定端口的传入连接：`sudo ufw allow <port>/<protocol>`\n   - 例如，要允许HTTP传入连接，可以使用以下命令：`sudo ufw allow 80/tcp`，这将允许TCP协议下的端口80的传入连接。\n4. 允许特定IP地址的传入连接：`sudo ufw allow from <ip_address>`\n   - 例如，要允许IP地址为192.168.0.100的主机的传入连接，可以使用以下命令：`sudo ufw allow from 192.168.0.100`\n5. 查看当前防火墙规则：`sudo ufw status`，这将显示当前的防火墙规则，包括允许和拒绝的连接。\n6. 禁用防火墙：`sudo ufw disable`，这将禁用防火墙，并允许所有传入的连接。","source":"_posts/Ubuntu安全防护.md","raw":"---\ntitle: Ubuntu安全防护\ndate: 2023-05-07 20:27:38\ntags:\n   - Ubuntu\ndeclare: true\n---\nClamAV是一个开源的杀毒软件，可以通过命令行进行使用。<!--more-->\n\n1. 安装ClamAV：\n```shell\nsudo apt-get update\nsudo apt-get install clamav\n```\n2. 查看是否运行：`sudo systemctl status clamav-freshclam.service`\n3. 停止服务：`sudo systemctl stop clamav-freshclam.service`\n4. 更新ClamAV病毒库文件：`sudo freshclam`\n5. 对系统进行扫描：`sudo clamscan -r /`\n\n--------------------------\n- 修改root用户密码：`sudo passwd root`\n- 查看当前在Linux系统中已创建的所有用户和用户组：\n```shell\ncat /etc/passwd    # 查看用户\ncat /etc/group     # 查看用户组\n```\n- 删除用户：`sudo userdel <用户名>`\n> 请注意，如果该用户有属于他的文件或目录，这些文件和目录将不会自动删除。为了删除这些文件和目录，请使用以下命令：\n`sudo userdel -r <用户名>`\n- 删除用户组：`sudo groupdel <用户组名>`\n> 请注意，如果该用户组有属于它的文件或目录，这些文件和目录将不会自动删除。为了删除这些文件和目录，请先将它们的所属组修改为其他组或新建一个用户组并将其所属组修改为新的用户组，然后再删除旧用户组。\n\n-----------------------------------------------\n使用ufw防火墙\n1. 检查防火墙状态：`sudo ufw status`\n2. 启用防火墙：`sudo ufw enable`，这将启用防火墙，并默认情况下阻止所有传入的连接。\n3. 允许特定端口的传入连接：`sudo ufw allow <port>/<protocol>`\n   - 例如，要允许HTTP传入连接，可以使用以下命令：`sudo ufw allow 80/tcp`，这将允许TCP协议下的端口80的传入连接。\n4. 允许特定IP地址的传入连接：`sudo ufw allow from <ip_address>`\n   - 例如，要允许IP地址为192.168.0.100的主机的传入连接，可以使用以下命令：`sudo ufw allow from 192.168.0.100`\n5. 查看当前防火墙规则：`sudo ufw status`，这将显示当前的防火墙规则，包括允许和拒绝的连接。\n6. 禁用防火墙：`sudo ufw disable`，这将禁用防火墙，并允许所有传入的连接。","slug":"Ubuntu安全防护","published":1,"updated":"2024-04-25T17:26:46.963Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvjbaqhu001j0vn15jwt6fvf","content":"<p>ClamAV是一个开源的杀毒软件，可以通过命令行进行使用。<span id=\"more\"></span></p>\n<ol>\n<li>安装ClamAV：<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install clamav</span><br></pre></td></tr></table></figure></li>\n<li>查看是否运行：<code>sudo systemctl status clamav-freshclam.service</code></li>\n<li>停止服务：<code>sudo systemctl stop clamav-freshclam.service</code></li>\n<li>更新ClamAV病毒库文件：<code>sudo freshclam</code></li>\n<li>对系统进行扫描：<code>sudo clamscan -r /</code></li>\n</ol>\n<hr>\n<ul>\n<li>修改root用户密码：<code>sudo passwd root</code></li>\n<li>查看当前在Linux系统中已创建的所有用户和用户组：<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat /etc/passwd    # 查看用户</span><br><span class=\"line\">cat /etc/group     # 查看用户组</span><br></pre></td></tr></table></figure></li>\n<li>删除用户：<code>sudo userdel &lt;用户名&gt;</code><blockquote>\n<p>请注意，如果该用户有属于他的文件或目录，这些文件和目录将不会自动删除。为了删除这些文件和目录，请使用以下命令：<br><code>sudo userdel -r &lt;用户名&gt;</code></p>\n</blockquote>\n</li>\n<li>删除用户组：<code>sudo groupdel &lt;用户组名&gt;</code><blockquote>\n<p>请注意，如果该用户组有属于它的文件或目录，这些文件和目录将不会自动删除。为了删除这些文件和目录，请先将它们的所属组修改为其他组或新建一个用户组并将其所属组修改为新的用户组，然后再删除旧用户组。</p>\n</blockquote>\n</li>\n</ul>\n<hr>\n<p>使用ufw防火墙</p>\n<ol>\n<li>检查防火墙状态：<code>sudo ufw status</code></li>\n<li>启用防火墙：<code>sudo ufw enable</code>，这将启用防火墙，并默认情况下阻止所有传入的连接。</li>\n<li>允许特定端口的传入连接：<code>sudo ufw allow &lt;port&gt;/&lt;protocol&gt;</code><ul>\n<li>例如，要允许HTTP传入连接，可以使用以下命令：<code>sudo ufw allow 80/tcp</code>，这将允许TCP协议下的端口80的传入连接。</li>\n</ul>\n</li>\n<li>允许特定IP地址的传入连接：<code>sudo ufw allow from &lt;ip_address&gt;</code><ul>\n<li>例如，要允许IP地址为192.168.0.100的主机的传入连接，可以使用以下命令：<code>sudo ufw allow from 192.168.0.100</code></li>\n</ul>\n</li>\n<li>查看当前防火墙规则：<code>sudo ufw status</code>，这将显示当前的防火墙规则，包括允许和拒绝的连接。</li>\n<li>禁用防火墙：<code>sudo ufw disable</code>，这将禁用防火墙，并允许所有传入的连接。</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>ClamAV是一个开源的杀毒软件，可以通过命令行进行使用。</p>","more":"<p></p>\n<ol>\n<li>安装ClamAV：<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install clamav</span><br></pre></td></tr></table></figure></li>\n<li>查看是否运行：<code>sudo systemctl status clamav-freshclam.service</code></li>\n<li>停止服务：<code>sudo systemctl stop clamav-freshclam.service</code></li>\n<li>更新ClamAV病毒库文件：<code>sudo freshclam</code></li>\n<li>对系统进行扫描：<code>sudo clamscan -r /</code></li>\n</ol>\n<hr>\n<ul>\n<li>修改root用户密码：<code>sudo passwd root</code></li>\n<li>查看当前在Linux系统中已创建的所有用户和用户组：<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat /etc/passwd    # 查看用户</span><br><span class=\"line\">cat /etc/group     # 查看用户组</span><br></pre></td></tr></table></figure></li>\n<li>删除用户：<code>sudo userdel &lt;用户名&gt;</code><blockquote>\n<p>请注意，如果该用户有属于他的文件或目录，这些文件和目录将不会自动删除。为了删除这些文件和目录，请使用以下命令：<br><code>sudo userdel -r &lt;用户名&gt;</code></p>\n</blockquote>\n</li>\n<li>删除用户组：<code>sudo groupdel &lt;用户组名&gt;</code><blockquote>\n<p>请注意，如果该用户组有属于它的文件或目录，这些文件和目录将不会自动删除。为了删除这些文件和目录，请先将它们的所属组修改为其他组或新建一个用户组并将其所属组修改为新的用户组，然后再删除旧用户组。</p>\n</blockquote>\n</li>\n</ul>\n<hr>\n<p>使用ufw防火墙</p>\n<ol>\n<li>检查防火墙状态：<code>sudo ufw status</code></li>\n<li>启用防火墙：<code>sudo ufw enable</code>，这将启用防火墙，并默认情况下阻止所有传入的连接。</li>\n<li>允许特定端口的传入连接：<code>sudo ufw allow &lt;port&gt;/&lt;protocol&gt;</code><ul>\n<li>例如，要允许HTTP传入连接，可以使用以下命令：<code>sudo ufw allow 80/tcp</code>，这将允许TCP协议下的端口80的传入连接。</li>\n</ul>\n</li>\n<li>允许特定IP地址的传入连接：<code>sudo ufw allow from &lt;ip_address&gt;</code><ul>\n<li>例如，要允许IP地址为192.168.0.100的主机的传入连接，可以使用以下命令：<code>sudo ufw allow from 192.168.0.100</code></li>\n</ul>\n</li>\n<li>查看当前防火墙规则：<code>sudo ufw status</code>，这将显示当前的防火墙规则，包括允许和拒绝的连接。</li>\n<li>禁用防火墙：<code>sudo ufw disable</code>，这将禁用防火墙，并允许所有传入的连接。</li>\n</ol>"},{"title":"Ubuntu挂载NAS网络驱动器","date":"2023-07-23T14:13:38.000Z","delcare":true,"_content":"校外向校内服务器传输数据极为不便，唯有NAS可完美解决问题，并实现**储算分离**<!--more-->\n```shell\nsudo apt update\nsudo apt install smbclient\nsudo apt install samba\n\n# 列出 \\\\nas地址下的文件夹，其中nas为nas所在地址\nsmbclient -L \\\\nas -U <username>\n```\n然后按提示输入账号对应的密码\n\n将//nas/main文件夹映射到本地文件夹/mnt/nas\n`sudo mount -t cifs -o username=<username>,password=<password>,vers=1.0 //nas/main /mnt/nas`\n\n-----------------------------------\n针对实验室服务器，改成开机自动挂载，并为每个人分配**限额文件夹或者单独的限额账户**即可\n问题在于这样仍然在内网，如果同步外网数据呢？此时就要用到**Cloud Sync**，便可不限速不限额的完美解决一切问题\n甚至单独搭建一个git server都是没有问题的\n\n----------------------\n[Ubuntu 挂载 NAS 网络驱动器](https://yangruoqi.site/ubuntu-nas/)","source":"_posts/Ubuntu挂载NAS网络驱动器.md","raw":"---\ntitle: Ubuntu挂载NAS网络驱动器\ndate: 2023-07-23 14:13:38\ntags:\n    - NAS\n    - Ubuntu\ndelcare: true\n---\n校外向校内服务器传输数据极为不便，唯有NAS可完美解决问题，并实现**储算分离**<!--more-->\n```shell\nsudo apt update\nsudo apt install smbclient\nsudo apt install samba\n\n# 列出 \\\\nas地址下的文件夹，其中nas为nas所在地址\nsmbclient -L \\\\nas -U <username>\n```\n然后按提示输入账号对应的密码\n\n将//nas/main文件夹映射到本地文件夹/mnt/nas\n`sudo mount -t cifs -o username=<username>,password=<password>,vers=1.0 //nas/main /mnt/nas`\n\n-----------------------------------\n针对实验室服务器，改成开机自动挂载，并为每个人分配**限额文件夹或者单独的限额账户**即可\n问题在于这样仍然在内网，如果同步外网数据呢？此时就要用到**Cloud Sync**，便可不限速不限额的完美解决一切问题\n甚至单独搭建一个git server都是没有问题的\n\n----------------------\n[Ubuntu 挂载 NAS 网络驱动器](https://yangruoqi.site/ubuntu-nas/)","slug":"Ubuntu挂载NAS网络驱动器","published":1,"updated":"2024-04-25T17:26:46.003Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvjbaqhv001l0vn1c2z94nqh","content":"<p>校外向校内服务器传输数据极为不便，唯有NAS可完美解决问题，并实现<strong>储算分离</strong><span id=\"more\"></span></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt update</span><br><span class=\"line\">sudo apt install smbclient</span><br><span class=\"line\">sudo apt install samba</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">列出 \\\\nas地址下的文件夹，其中nas为nas所在地址</span></span><br><span class=\"line\">smbclient -L \\\\nas -U &lt;username&gt;</span><br></pre></td></tr></table></figure>\n<p>然后按提示输入账号对应的密码</p>\n<p>将&#x2F;&#x2F;nas&#x2F;main文件夹映射到本地文件夹&#x2F;mnt&#x2F;nas<br><code>sudo mount -t cifs -o username=&lt;username&gt;,password=&lt;password&gt;,vers=1.0 //nas/main /mnt/nas</code></p>\n<hr>\n<p>针对实验室服务器，改成开机自动挂载，并为每个人分配<strong>限额文件夹或者单独的限额账户</strong>即可<br>问题在于这样仍然在内网，如果同步外网数据呢？此时就要用到<strong>Cloud Sync</strong>，便可不限速不限额的完美解决一切问题<br>甚至单独搭建一个git server都是没有问题的</p>\n<hr>\n<p><a href=\"https://yangruoqi.site/ubuntu-nas/\">Ubuntu 挂载 NAS 网络驱动器</a></p>\n","site":{"data":{}},"excerpt":"<p>校外向校内服务器传输数据极为不便，唯有NAS可完美解决问题，并实现<strong>储算分离</strong></p>","more":"<p></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt update</span><br><span class=\"line\">sudo apt install smbclient</span><br><span class=\"line\">sudo apt install samba</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">列出 \\\\nas地址下的文件夹，其中nas为nas所在地址</span></span><br><span class=\"line\">smbclient -L \\\\nas -U &lt;username&gt;</span><br></pre></td></tr></table></figure>\n<p>然后按提示输入账号对应的密码</p>\n<p>将&#x2F;&#x2F;nas&#x2F;main文件夹映射到本地文件夹&#x2F;mnt&#x2F;nas<br><code>sudo mount -t cifs -o username=&lt;username&gt;,password=&lt;password&gt;,vers=1.0 //nas/main /mnt/nas</code></p>\n<hr>\n<p>针对实验室服务器，改成开机自动挂载，并为每个人分配<strong>限额文件夹或者单独的限额账户</strong>即可<br>问题在于这样仍然在内网，如果同步外网数据呢？此时就要用到<strong>Cloud Sync</strong>，便可不限速不限额的完美解决一切问题<br>甚至单独搭建一个git server都是没有问题的</p>\n<hr>\n<p><a href=\"https://yangruoqi.site/ubuntu-nas/\">Ubuntu 挂载 NAS 网络驱动器</a></p>"},{"title":"Ubuntu新用户创建初始化","date":"2023-05-09T19:26:51.000Z","declare":true,"_content":"## 在Ubuntu中创建新用户并允许其使用sudo命令，您可以按照以下步骤进行操作：\n- 以root用户身份登录系统，或使用已经拥有sudo权限的用户账户登录。<!--more-->\n- 执行以下命令创建新用户，其中\"newuser\"是您要创建的新用户名：`sudo adduser newuser`\n- 您需要为新用户设置密码，以及其他相关的信息，例如全名、电话等。按照提示输入相关信息即可。\n- 接下来，将新用户添加到sudo用户组中，使其拥有sudo权限：`sudo usermod -aG sudo newuser`\n- 现在，新用户应该已经可以使用sudo命令了。您可以切换到新用户身份进行测试：\n```shell\nsu - newuser\nsudo ls\n```\n> 如果没有出现权限不足的提示，说明新用户已经拥有sudo权限。\n- 配置Shell环境：默认情况下，新用户的Shell环境是Bash。您可以根据需要修改其Shell环境。例如，如果您希望将其Shell环境更改为Zsh，可以使用以下命令：\n`sudo chsh -s /usr/bin/zsh username`\n- 配置SSH访问：如果您希望新用户可以通过SSH访问系统，您需要为其生成SSH密钥对，并将公钥添加到系统的authorized_keys文件中。您可以使用以下命令为新用户生成SSH密钥对：`sudo -u username ssh-keygen -t rsa`\n- 将公钥添加到系统的authorized_keys文件中：`sudo -u username cat ~/.ssh/id_rsa.pub >> ~/.ssh/authorized_keys`","source":"_posts/Ubuntu新用户创建初始化.md","raw":"---\ntitle: Ubuntu新用户创建初始化\ndate: 2023-05-09 19:26:51\ntags:\n    - Ubuntu\ndeclare: true\n---\n## 在Ubuntu中创建新用户并允许其使用sudo命令，您可以按照以下步骤进行操作：\n- 以root用户身份登录系统，或使用已经拥有sudo权限的用户账户登录。<!--more-->\n- 执行以下命令创建新用户，其中\"newuser\"是您要创建的新用户名：`sudo adduser newuser`\n- 您需要为新用户设置密码，以及其他相关的信息，例如全名、电话等。按照提示输入相关信息即可。\n- 接下来，将新用户添加到sudo用户组中，使其拥有sudo权限：`sudo usermod -aG sudo newuser`\n- 现在，新用户应该已经可以使用sudo命令了。您可以切换到新用户身份进行测试：\n```shell\nsu - newuser\nsudo ls\n```\n> 如果没有出现权限不足的提示，说明新用户已经拥有sudo权限。\n- 配置Shell环境：默认情况下，新用户的Shell环境是Bash。您可以根据需要修改其Shell环境。例如，如果您希望将其Shell环境更改为Zsh，可以使用以下命令：\n`sudo chsh -s /usr/bin/zsh username`\n- 配置SSH访问：如果您希望新用户可以通过SSH访问系统，您需要为其生成SSH密钥对，并将公钥添加到系统的authorized_keys文件中。您可以使用以下命令为新用户生成SSH密钥对：`sudo -u username ssh-keygen -t rsa`\n- 将公钥添加到系统的authorized_keys文件中：`sudo -u username cat ~/.ssh/id_rsa.pub >> ~/.ssh/authorized_keys`","slug":"Ubuntu新用户创建初始化","published":1,"updated":"2024-04-25T17:26:48.043Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvjbaqhw001o0vn108axhr1k","content":"<h2 id=\"在Ubuntu中创建新用户并允许其使用sudo命令，您可以按照以下步骤进行操作：\"><a href=\"#在Ubuntu中创建新用户并允许其使用sudo命令，您可以按照以下步骤进行操作：\" class=\"headerlink\" title=\"在Ubuntu中创建新用户并允许其使用sudo命令，您可以按照以下步骤进行操作：\"></a>在Ubuntu中创建新用户并允许其使用sudo命令，您可以按照以下步骤进行操作：</h2><ul>\n<li>以root用户身份登录系统，或使用已经拥有sudo权限的用户账户登录。<span id=\"more\"></span></li>\n<li>执行以下命令创建新用户，其中”newuser”是您要创建的新用户名：<code>sudo adduser newuser</code></li>\n<li>您需要为新用户设置密码，以及其他相关的信息，例如全名、电话等。按照提示输入相关信息即可。</li>\n<li>接下来，将新用户添加到sudo用户组中，使其拥有sudo权限：<code>sudo usermod -aG sudo newuser</code></li>\n<li>现在，新用户应该已经可以使用sudo命令了。您可以切换到新用户身份进行测试：<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">su - newuser</span><br><span class=\"line\">sudo ls</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>如果没有出现权限不足的提示，说明新用户已经拥有sudo权限。</p>\n</blockquote>\n</li>\n<li>配置Shell环境：默认情况下，新用户的Shell环境是Bash。您可以根据需要修改其Shell环境。例如，如果您希望将其Shell环境更改为Zsh，可以使用以下命令：<br><code>sudo chsh -s /usr/bin/zsh username</code></li>\n<li>配置SSH访问：如果您希望新用户可以通过SSH访问系统，您需要为其生成SSH密钥对，并将公钥添加到系统的authorized_keys文件中。您可以使用以下命令为新用户生成SSH密钥对：<code>sudo -u username ssh-keygen -t rsa</code></li>\n<li>将公钥添加到系统的authorized_keys文件中：<code>sudo -u username cat ~/.ssh/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys</code></li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"在Ubuntu中创建新用户并允许其使用sudo命令，您可以按照以下步骤进行操作：\"><a href=\"#在Ubuntu中创建新用户并允许其使用sudo命令，您可以按照以下步骤进行操作：\" class=\"headerlink\" title=\"在Ubuntu中创建新用户并允许其使用sudo命令，您可以按照以下步骤进行操作：\"></a>在Ubuntu中创建新用户并允许其使用sudo命令，您可以按照以下步骤进行操作：</h2><ul>\n<li>以root用户身份登录系统，或使用已经拥有sudo权限的用户账户登录。</li></ul>","more":"\n<li>执行以下命令创建新用户，其中”newuser”是您要创建的新用户名：<code>sudo adduser newuser</code></li>\n<li>您需要为新用户设置密码，以及其他相关的信息，例如全名、电话等。按照提示输入相关信息即可。</li>\n<li>接下来，将新用户添加到sudo用户组中，使其拥有sudo权限：<code>sudo usermod -aG sudo newuser</code></li>\n<li>现在，新用户应该已经可以使用sudo命令了。您可以切换到新用户身份进行测试：<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">su - newuser</span><br><span class=\"line\">sudo ls</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>如果没有出现权限不足的提示，说明新用户已经拥有sudo权限。</p>\n</blockquote>\n</li>\n<li>配置Shell环境：默认情况下，新用户的Shell环境是Bash。您可以根据需要修改其Shell环境。例如，如果您希望将其Shell环境更改为Zsh，可以使用以下命令：<br><code>sudo chsh -s /usr/bin/zsh username</code></li>\n<li>配置SSH访问：如果您希望新用户可以通过SSH访问系统，您需要为其生成SSH密钥对，并将公钥添加到系统的authorized_keys文件中。您可以使用以下命令为新用户生成SSH密钥对：<code>sudo -u username ssh-keygen -t rsa</code></li>\n<li>将公钥添加到系统的authorized_keys文件中：<code>sudo -u username cat ~/.ssh/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys</code></li>\n"},{"title":"Ubuntu科学上网","date":"2023-04-11T17:48:36.000Z","declare":true,"doc":1,"_content":"## clash\n### 带桌面版本<!--more-->\n#### 1. 去[github](https://github.com/Fndroid/clash_for_windows_pkg/releases)下载Linux版本的clash for windows\n![20230411191443](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230411191443.png)\n\n- 下载到的文件结构如下：\n```\nLICENSE.electron.txt    chrome_100_percent.pak   libEGL.so             libvulkan.so.1  snapshot_blob.bin\nLICENSES.chromium.html  chrome_200_percent.pak   libGLESv2.so          locales         v8_context_snapshot.bin\ncfw                     chrome_crashpad_handler  libffmpeg.so          resources       vk_swiftshader_icd.json\nchrome-sandbox          icudtl.dat               libvk_swiftshader.so  resources.pak\n```\n- 其中**cfw**是clash for windows的缩写\n`./cfw`就可以运行clash for windows\n\n#### 2. 设置为应用\n```bash\ncd ~/.local/share/applications  #个人应用的放置地点\nvim clash.desktop   # 编辑应用信息\nchmod +x clash.desktop\n```\n\nclash.desktop的文件信息如下：\n```bash\n[Desktop Entry]\nName=clash for windows\nIcon=   # 图标路径\nExec=~/clash/cfw    # cfw的路径\nType=Application\n```\n\n#### 3. 搜索clash for windows即可\n\n---------------------------------------------\n\n### 终端版本\n#### 1. 去[github](https://github.com/Dreamacro/clash/releases)下载Linux版本的clash-core\n![20230411193200](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230411193200.png)\n\n#### 2. 解压之后仅有一个文件，要给权限\n`chmod +x clash`\n\n#### 3. 加配置文件\n```bash\nmkdir /opt/clash    #将clash可执行文件和yaml文件放在此目录下\n./clash -f config.yaml  #指定配置文件\n```\nconfig.yaml为配置文件，如果不指定，默认配置文件在`~/.config/clash`\n\n#### 4. 配置为系统服务\n```bash\nvim /etc/systemd/system/clash.service\n```\nclash.service文件内容如下:\n```bash\n[Unit]\nDescription=clash-core\n[Service]\nType=simple\nExecStart=/opt/clash/clash -f /opt/clash/config.yaml\n```\n\n- 启用即可\n```bash\nsystemctl daemon-reload\nsystemctl start clash\nsystemctl status clash\n```\n\n#### 5. 终端上网\n[How do I use clash proxy wsl in windows?](https://corner430.github.io/2023/04/05/How-do-I-use-clash-proxy-wsl-in-windows/#more)\n\n可以在`~/.bashrc`中通过`alias`命令进行变量开关定义\n```bash\nalias proxy=\"export http_proxy=http://127.0.0.1:7890;export https_proxy=http://127.0.0.1:7890\"\nalias unproxy=\"unset http_proxy;unset https_proxy;\"\n```\n> 记得source ~/.bashrc\n\n-----------------------------------------------\n\n#### 6. 下载UI\n![20230411195232](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230411195232.png)\n在`/opt/clash`下建一个`ui`文件夹，并将文件ui的文件移动到该目录下：\nCNAME  assets  index.html  manifest.webmanifest  sw.js  workbox-e0782b83.js\n- 其中index.html即为页面，需要在clash的config.yaml文件中指向一下\n    - 在`external-controller: 0.0.0.0:9090`的下方添加`external-ui: /opt/clash/ui`\n    - `systemctl restart clash`\n    - 通过`127.0.0.1:9090/ui`访问即可\n\n---------------------------------------------------\n\n### docker版本\n```bash\nsudo apt install docker.io\ndocker -v\n```\n在[docker官网](https://hub.docker.com/)查找镜像`dreamacro/clash`\n```bash\ndocker pull dreamacro/clash\ndocker run -d --name clash -p 7890:7890 -p 7891:7891 -p 9090:9090 -v /opt/clash/config.yaml:/root/.config/clash/config.yaml -v /opt/clash/ui:/opt/clash/ui dreamacro/clash\n```\n- `--name clash`: 名字起做clash\n- `-p`: 端口映射\n- `-v`: 文件映射\n- `dreamacro/clash`: 启动镜像的名字\n\n使用`docker logs -f 容器ID`查看日志\n`docker ps`查看可查看容器ID\n\n-----------------------------------------------\n### 实验室服务器\n```bash\n# 设置代理\nalias proxy=\"export http_proxy=http://127.0.0.1:7890; export https_proxy=http://127.0.0.1:7890\"\n\n# 取消代理\nalias unproxy=\"unset http_proxy; unset https_proxy\"\n\n# 启动 clash\nalias startclash=\"nohup /home/corner/.local/opt/clash -f /home/corner/.local/opt/config.yaml > /home/corner/.local/opt/output.log 2>&1 &\"\n\n# 停止 clash\nalias stopclash=\"pkill -f '/home/corner/.local/opt/clash -f /home/corner/.local/opt/config.yaml'\"\n\n```\n\n\n### References\n[最全Linux科学上网三种方式-长风分享](https://www.youtube.com/watch?v=VOlWdNZAq_o&list=WL&index=15&t=942s&ab_channel=%E9%95%BF%E9%A3%8E%E5%88%86%E4%BA%AB)\n\n## V2ray\n- 下载 [v2ray core](https://github.com/v2ray/v2ray-core)的Linux版本，例如 `v2ray-linux-64.zip`\n\n- `unzip`\n其中的 `v2ray` 为可执行文件，`config.json` 为配置文件，配置文件可以通过 `v2rayN` 的 **导出所选服务器为客户端配置** 进行导出。\n\n- `./v2ray -config config.json` 运行即可，回显如下：\n\n```bash\nV2Ray 4.28.2 (V2Fly, a community-driven edition of V2Ray.) Custom (go1.15.2 linux/amd64)\nA unified platform for anti-censorship.\n2023/11/21 07:15:11 [Info] v2ray.com/core/common/platform/ctlcmd: <v2ctl message>\nv2ctl> Read config:  config.json\n2023/11/21 07:15:11 [Warning] v2ray.com/core: V2Ray 4.28.2 started\n```","source":"_posts/Ubuntu科学上网.md","raw":"---\ntitle: Ubuntu科学上网\ndate: 2023-04-11 17:48:36\ntags:\n    - Ubuntu\n    - 科学上网\ndeclare: true\ndoc: 1\n---\n## clash\n### 带桌面版本<!--more-->\n#### 1. 去[github](https://github.com/Fndroid/clash_for_windows_pkg/releases)下载Linux版本的clash for windows\n![20230411191443](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230411191443.png)\n\n- 下载到的文件结构如下：\n```\nLICENSE.electron.txt    chrome_100_percent.pak   libEGL.so             libvulkan.so.1  snapshot_blob.bin\nLICENSES.chromium.html  chrome_200_percent.pak   libGLESv2.so          locales         v8_context_snapshot.bin\ncfw                     chrome_crashpad_handler  libffmpeg.so          resources       vk_swiftshader_icd.json\nchrome-sandbox          icudtl.dat               libvk_swiftshader.so  resources.pak\n```\n- 其中**cfw**是clash for windows的缩写\n`./cfw`就可以运行clash for windows\n\n#### 2. 设置为应用\n```bash\ncd ~/.local/share/applications  #个人应用的放置地点\nvim clash.desktop   # 编辑应用信息\nchmod +x clash.desktop\n```\n\nclash.desktop的文件信息如下：\n```bash\n[Desktop Entry]\nName=clash for windows\nIcon=   # 图标路径\nExec=~/clash/cfw    # cfw的路径\nType=Application\n```\n\n#### 3. 搜索clash for windows即可\n\n---------------------------------------------\n\n### 终端版本\n#### 1. 去[github](https://github.com/Dreamacro/clash/releases)下载Linux版本的clash-core\n![20230411193200](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230411193200.png)\n\n#### 2. 解压之后仅有一个文件，要给权限\n`chmod +x clash`\n\n#### 3. 加配置文件\n```bash\nmkdir /opt/clash    #将clash可执行文件和yaml文件放在此目录下\n./clash -f config.yaml  #指定配置文件\n```\nconfig.yaml为配置文件，如果不指定，默认配置文件在`~/.config/clash`\n\n#### 4. 配置为系统服务\n```bash\nvim /etc/systemd/system/clash.service\n```\nclash.service文件内容如下:\n```bash\n[Unit]\nDescription=clash-core\n[Service]\nType=simple\nExecStart=/opt/clash/clash -f /opt/clash/config.yaml\n```\n\n- 启用即可\n```bash\nsystemctl daemon-reload\nsystemctl start clash\nsystemctl status clash\n```\n\n#### 5. 终端上网\n[How do I use clash proxy wsl in windows?](https://corner430.github.io/2023/04/05/How-do-I-use-clash-proxy-wsl-in-windows/#more)\n\n可以在`~/.bashrc`中通过`alias`命令进行变量开关定义\n```bash\nalias proxy=\"export http_proxy=http://127.0.0.1:7890;export https_proxy=http://127.0.0.1:7890\"\nalias unproxy=\"unset http_proxy;unset https_proxy;\"\n```\n> 记得source ~/.bashrc\n\n-----------------------------------------------\n\n#### 6. 下载UI\n![20230411195232](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230411195232.png)\n在`/opt/clash`下建一个`ui`文件夹，并将文件ui的文件移动到该目录下：\nCNAME  assets  index.html  manifest.webmanifest  sw.js  workbox-e0782b83.js\n- 其中index.html即为页面，需要在clash的config.yaml文件中指向一下\n    - 在`external-controller: 0.0.0.0:9090`的下方添加`external-ui: /opt/clash/ui`\n    - `systemctl restart clash`\n    - 通过`127.0.0.1:9090/ui`访问即可\n\n---------------------------------------------------\n\n### docker版本\n```bash\nsudo apt install docker.io\ndocker -v\n```\n在[docker官网](https://hub.docker.com/)查找镜像`dreamacro/clash`\n```bash\ndocker pull dreamacro/clash\ndocker run -d --name clash -p 7890:7890 -p 7891:7891 -p 9090:9090 -v /opt/clash/config.yaml:/root/.config/clash/config.yaml -v /opt/clash/ui:/opt/clash/ui dreamacro/clash\n```\n- `--name clash`: 名字起做clash\n- `-p`: 端口映射\n- `-v`: 文件映射\n- `dreamacro/clash`: 启动镜像的名字\n\n使用`docker logs -f 容器ID`查看日志\n`docker ps`查看可查看容器ID\n\n-----------------------------------------------\n### 实验室服务器\n```bash\n# 设置代理\nalias proxy=\"export http_proxy=http://127.0.0.1:7890; export https_proxy=http://127.0.0.1:7890\"\n\n# 取消代理\nalias unproxy=\"unset http_proxy; unset https_proxy\"\n\n# 启动 clash\nalias startclash=\"nohup /home/corner/.local/opt/clash -f /home/corner/.local/opt/config.yaml > /home/corner/.local/opt/output.log 2>&1 &\"\n\n# 停止 clash\nalias stopclash=\"pkill -f '/home/corner/.local/opt/clash -f /home/corner/.local/opt/config.yaml'\"\n\n```\n\n\n### References\n[最全Linux科学上网三种方式-长风分享](https://www.youtube.com/watch?v=VOlWdNZAq_o&list=WL&index=15&t=942s&ab_channel=%E9%95%BF%E9%A3%8E%E5%88%86%E4%BA%AB)\n\n## V2ray\n- 下载 [v2ray core](https://github.com/v2ray/v2ray-core)的Linux版本，例如 `v2ray-linux-64.zip`\n\n- `unzip`\n其中的 `v2ray` 为可执行文件，`config.json` 为配置文件，配置文件可以通过 `v2rayN` 的 **导出所选服务器为客户端配置** 进行导出。\n\n- `./v2ray -config config.json` 运行即可，回显如下：\n\n```bash\nV2Ray 4.28.2 (V2Fly, a community-driven edition of V2Ray.) Custom (go1.15.2 linux/amd64)\nA unified platform for anti-censorship.\n2023/11/21 07:15:11 [Info] v2ray.com/core/common/platform/ctlcmd: <v2ctl message>\nv2ctl> Read config:  config.json\n2023/11/21 07:15:11 [Warning] v2ray.com/core: V2Ray 4.28.2 started\n```","slug":"Ubuntu科学上网","published":1,"updated":"2024-04-25T17:26:47.493Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvjbaqhx001q0vn14528618j","content":"<h2 id=\"clash\"><a href=\"#clash\" class=\"headerlink\" title=\"clash\"></a>clash</h2><h3 id=\"带桌面版本\"><a href=\"#带桌面版本\" class=\"headerlink\" title=\"带桌面版本\"></a>带桌面版本<span id=\"more\"></span></h3><h4 id=\"1-去github下载Linux版本的clash-for-windows\"><a href=\"#1-去github下载Linux版本的clash-for-windows\" class=\"headerlink\" title=\"1. 去github下载Linux版本的clash for windows\"></a>1. 去<a href=\"https://github.com/Fndroid/clash_for_windows_pkg/releases\">github</a>下载Linux版本的clash for windows</h4><p><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230411191443.png\" alt=\"20230411191443\"></p>\n<ul>\n<li>下载到的文件结构如下：<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LICENSE.electron.txt    chrome_100_percent.pak   libEGL.so             libvulkan.so.1  snapshot_blob.bin</span><br><span class=\"line\">LICENSES.chromium.html  chrome_200_percent.pak   libGLESv2.so          locales         v8_context_snapshot.bin</span><br><span class=\"line\">cfw                     chrome_crashpad_handler  libffmpeg.so          resources       vk_swiftshader_icd.json</span><br><span class=\"line\">chrome-sandbox          icudtl.dat               libvk_swiftshader.so  resources.pak</span><br></pre></td></tr></table></figure></li>\n<li>其中<strong>cfw</strong>是clash for windows的缩写<br><code>./cfw</code>就可以运行clash for windows</li>\n</ul>\n<h4 id=\"2-设置为应用\"><a href=\"#2-设置为应用\" class=\"headerlink\" title=\"2. 设置为应用\"></a>2. 设置为应用</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~/.local/share/applications  <span class=\"comment\">#个人应用的放置地点</span></span><br><span class=\"line\">vim clash.desktop   <span class=\"comment\"># 编辑应用信息</span></span><br><span class=\"line\"><span class=\"built_in\">chmod</span> +x clash.desktop</span><br></pre></td></tr></table></figure>\n\n<p>clash.desktop的文件信息如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Desktop Entry]</span><br><span class=\"line\">Name=clash <span class=\"keyword\">for</span> windows</span><br><span class=\"line\">Icon=   <span class=\"comment\"># 图标路径</span></span><br><span class=\"line\">Exec=~/clash/cfw    <span class=\"comment\"># cfw的路径</span></span><br><span class=\"line\">Type=Application</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-搜索clash-for-windows即可\"><a href=\"#3-搜索clash-for-windows即可\" class=\"headerlink\" title=\"3. 搜索clash for windows即可\"></a>3. 搜索clash for windows即可</h4><hr>\n<h3 id=\"终端版本\"><a href=\"#终端版本\" class=\"headerlink\" title=\"终端版本\"></a>终端版本</h3><h4 id=\"1-去github下载Linux版本的clash-core\"><a href=\"#1-去github下载Linux版本的clash-core\" class=\"headerlink\" title=\"1. 去github下载Linux版本的clash-core\"></a>1. 去<a href=\"https://github.com/Dreamacro/clash/releases\">github</a>下载Linux版本的clash-core</h4><p><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230411193200.png\" alt=\"20230411193200\"></p>\n<h4 id=\"2-解压之后仅有一个文件，要给权限\"><a href=\"#2-解压之后仅有一个文件，要给权限\" class=\"headerlink\" title=\"2. 解压之后仅有一个文件，要给权限\"></a>2. 解压之后仅有一个文件，要给权限</h4><p><code>chmod +x clash</code></p>\n<h4 id=\"3-加配置文件\"><a href=\"#3-加配置文件\" class=\"headerlink\" title=\"3. 加配置文件\"></a>3. 加配置文件</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> /opt/clash    <span class=\"comment\">#将clash可执行文件和yaml文件放在此目录下</span></span><br><span class=\"line\">./clash -f config.yaml  <span class=\"comment\">#指定配置文件</span></span><br></pre></td></tr></table></figure>\n<p>config.yaml为配置文件，如果不指定，默认配置文件在<code>~/.config/clash</code></p>\n<h4 id=\"4-配置为系统服务\"><a href=\"#4-配置为系统服务\" class=\"headerlink\" title=\"4. 配置为系统服务\"></a>4. 配置为系统服务</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/systemd/system/clash.service</span><br></pre></td></tr></table></figure>\n<p>clash.service文件内容如下:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=clash-core</span><br><span class=\"line\">[Service]</span><br><span class=\"line\">Type=simple</span><br><span class=\"line\">ExecStart=/opt/clash/clash -f /opt/clash/config.yaml</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>启用即可<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl daemon-reload</span><br><span class=\"line\">systemctl start clash</span><br><span class=\"line\">systemctl status clash</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"5-终端上网\"><a href=\"#5-终端上网\" class=\"headerlink\" title=\"5. 终端上网\"></a>5. 终端上网</h4><p><a href=\"https://corner430.github.io/2023/04/05/How-do-I-use-clash-proxy-wsl-in-windows/#more\">How do I use clash proxy wsl in windows?</a></p>\n<p>可以在<code>~/.bashrc</code>中通过<code>alias</code>命令进行变量开关定义</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">alias</span> proxy=<span class=\"string\">&quot;export http_proxy=http://127.0.0.1:7890;export https_proxy=http://127.0.0.1:7890&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> unproxy=<span class=\"string\">&quot;unset http_proxy;unset https_proxy;&quot;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>记得source ~&#x2F;.bashrc</p>\n</blockquote>\n<hr>\n<h4 id=\"6-下载UI\"><a href=\"#6-下载UI\" class=\"headerlink\" title=\"6. 下载UI\"></a>6. 下载UI</h4><p><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230411195232.png\" alt=\"20230411195232\"><br>在<code>/opt/clash</code>下建一个<code>ui</code>文件夹，并将文件ui的文件移动到该目录下：<br>CNAME  assets  index.html  manifest.webmanifest  sw.js  workbox-e0782b83.js</p>\n<ul>\n<li>其中index.html即为页面，需要在clash的config.yaml文件中指向一下<ul>\n<li>在<code>external-controller: 0.0.0.0:9090</code>的下方添加<code>external-ui: /opt/clash/ui</code></li>\n<li><code>systemctl restart clash</code></li>\n<li>通过<code>127.0.0.1:9090/ui</code>访问即可</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"docker版本\"><a href=\"#docker版本\" class=\"headerlink\" title=\"docker版本\"></a>docker版本</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install docker.io</span><br><span class=\"line\">docker -v</span><br></pre></td></tr></table></figure>\n<p>在<a href=\"https://hub.docker.com/\">docker官网</a>查找镜像<code>dreamacro/clash</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull dreamacro/clash</span><br><span class=\"line\">docker run -d --name clash -p 7890:7890 -p 7891:7891 -p 9090:9090 -v /opt/clash/config.yaml:/root/.config/clash/config.yaml -v /opt/clash/ui:/opt/clash/ui dreamacro/clash</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>--name clash</code>: 名字起做clash</li>\n<li><code>-p</code>: 端口映射</li>\n<li><code>-v</code>: 文件映射</li>\n<li><code>dreamacro/clash</code>: 启动镜像的名字</li>\n</ul>\n<p>使用<code>docker logs -f 容器ID</code>查看日志<br><code>docker ps</code>查看可查看容器ID</p>\n<hr>\n<h3 id=\"实验室服务器\"><a href=\"#实验室服务器\" class=\"headerlink\" title=\"实验室服务器\"></a>实验室服务器</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 设置代理</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> proxy=<span class=\"string\">&quot;export http_proxy=http://127.0.0.1:7890; export https_proxy=http://127.0.0.1:7890&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 取消代理</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> unproxy=<span class=\"string\">&quot;unset http_proxy; unset https_proxy&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 启动 clash</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> startclash=<span class=\"string\">&quot;nohup /home/corner/.local/opt/clash -f /home/corner/.local/opt/config.yaml &gt; /home/corner/.local/opt/output.log 2&gt;&amp;1 &amp;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 停止 clash</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> stopclash=<span class=\"string\">&quot;pkill -f &#x27;/home/corner/.local/opt/clash -f /home/corner/.local/opt/config.yaml&#x27;&quot;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h3><p><a href=\"https://www.youtube.com/watch?v=VOlWdNZAq_o&list=WL&index=15&t=942s&ab_channel=%E9%95%BF%E9%A3%8E%E5%88%86%E4%BA%AB\">最全Linux科学上网三种方式-长风分享</a></p>\n<h2 id=\"V2ray\"><a href=\"#V2ray\" class=\"headerlink\" title=\"V2ray\"></a>V2ray</h2><ul>\n<li><p>下载 <a href=\"https://github.com/v2ray/v2ray-core\">v2ray core</a>的Linux版本，例如 <code>v2ray-linux-64.zip</code></p>\n</li>\n<li><p><code>unzip</code><br>其中的 <code>v2ray</code> 为可执行文件，<code>config.json</code> 为配置文件，配置文件可以通过 <code>v2rayN</code> 的 <strong>导出所选服务器为客户端配置</strong> 进行导出。</p>\n</li>\n<li><p><code>./v2ray -config config.json</code> 运行即可，回显如下：</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">V2Ray 4.28.2 (V2Fly, a community-driven edition of V2Ray.) Custom (go1.15.2 linux/amd64)</span><br><span class=\"line\">A unified platform <span class=\"keyword\">for</span> anti-censorship.</span><br><span class=\"line\">2023/11/21 07:15:11 [Info] v2ray.com/core/common/platform/ctlcmd: &lt;v2ctl message&gt;</span><br><span class=\"line\">v2ctl&gt; Read config:  config.json</span><br><span class=\"line\">2023/11/21 07:15:11 [Warning] v2ray.com/core: V2Ray 4.28.2 started</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h2 id=\"clash\"><a href=\"#clash\" class=\"headerlink\" title=\"clash\"></a>clash</h2><h3 id=\"带桌面版本\"><a href=\"#带桌面版本\" class=\"headerlink\" title=\"带桌面版本\"></a>带桌面版本</h3>","more":"<h4 id=\"1-去github下载Linux版本的clash-for-windows\"><a href=\"#1-去github下载Linux版本的clash-for-windows\" class=\"headerlink\" title=\"1. 去github下载Linux版本的clash for windows\"></a>1. 去<a href=\"https://github.com/Fndroid/clash_for_windows_pkg/releases\">github</a>下载Linux版本的clash for windows</h4><p><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230411191443.png\" alt=\"20230411191443\"></p>\n<ul>\n<li>下载到的文件结构如下：<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LICENSE.electron.txt    chrome_100_percent.pak   libEGL.so             libvulkan.so.1  snapshot_blob.bin</span><br><span class=\"line\">LICENSES.chromium.html  chrome_200_percent.pak   libGLESv2.so          locales         v8_context_snapshot.bin</span><br><span class=\"line\">cfw                     chrome_crashpad_handler  libffmpeg.so          resources       vk_swiftshader_icd.json</span><br><span class=\"line\">chrome-sandbox          icudtl.dat               libvk_swiftshader.so  resources.pak</span><br></pre></td></tr></table></figure></li>\n<li>其中<strong>cfw</strong>是clash for windows的缩写<br><code>./cfw</code>就可以运行clash for windows</li>\n</ul>\n<h4 id=\"2-设置为应用\"><a href=\"#2-设置为应用\" class=\"headerlink\" title=\"2. 设置为应用\"></a>2. 设置为应用</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~/.local/share/applications  <span class=\"comment\">#个人应用的放置地点</span></span><br><span class=\"line\">vim clash.desktop   <span class=\"comment\"># 编辑应用信息</span></span><br><span class=\"line\"><span class=\"built_in\">chmod</span> +x clash.desktop</span><br></pre></td></tr></table></figure>\n\n<p>clash.desktop的文件信息如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Desktop Entry]</span><br><span class=\"line\">Name=clash <span class=\"keyword\">for</span> windows</span><br><span class=\"line\">Icon=   <span class=\"comment\"># 图标路径</span></span><br><span class=\"line\">Exec=~/clash/cfw    <span class=\"comment\"># cfw的路径</span></span><br><span class=\"line\">Type=Application</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-搜索clash-for-windows即可\"><a href=\"#3-搜索clash-for-windows即可\" class=\"headerlink\" title=\"3. 搜索clash for windows即可\"></a>3. 搜索clash for windows即可</h4><hr>\n<h3 id=\"终端版本\"><a href=\"#终端版本\" class=\"headerlink\" title=\"终端版本\"></a>终端版本</h3><h4 id=\"1-去github下载Linux版本的clash-core\"><a href=\"#1-去github下载Linux版本的clash-core\" class=\"headerlink\" title=\"1. 去github下载Linux版本的clash-core\"></a>1. 去<a href=\"https://github.com/Dreamacro/clash/releases\">github</a>下载Linux版本的clash-core</h4><p><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230411193200.png\" alt=\"20230411193200\"></p>\n<h4 id=\"2-解压之后仅有一个文件，要给权限\"><a href=\"#2-解压之后仅有一个文件，要给权限\" class=\"headerlink\" title=\"2. 解压之后仅有一个文件，要给权限\"></a>2. 解压之后仅有一个文件，要给权限</h4><p><code>chmod +x clash</code></p>\n<h4 id=\"3-加配置文件\"><a href=\"#3-加配置文件\" class=\"headerlink\" title=\"3. 加配置文件\"></a>3. 加配置文件</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> /opt/clash    <span class=\"comment\">#将clash可执行文件和yaml文件放在此目录下</span></span><br><span class=\"line\">./clash -f config.yaml  <span class=\"comment\">#指定配置文件</span></span><br></pre></td></tr></table></figure>\n<p>config.yaml为配置文件，如果不指定，默认配置文件在<code>~/.config/clash</code></p>\n<h4 id=\"4-配置为系统服务\"><a href=\"#4-配置为系统服务\" class=\"headerlink\" title=\"4. 配置为系统服务\"></a>4. 配置为系统服务</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/systemd/system/clash.service</span><br></pre></td></tr></table></figure>\n<p>clash.service文件内容如下:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=clash-core</span><br><span class=\"line\">[Service]</span><br><span class=\"line\">Type=simple</span><br><span class=\"line\">ExecStart=/opt/clash/clash -f /opt/clash/config.yaml</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>启用即可<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl daemon-reload</span><br><span class=\"line\">systemctl start clash</span><br><span class=\"line\">systemctl status clash</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"5-终端上网\"><a href=\"#5-终端上网\" class=\"headerlink\" title=\"5. 终端上网\"></a>5. 终端上网</h4><p><a href=\"https://corner430.github.io/2023/04/05/How-do-I-use-clash-proxy-wsl-in-windows/#more\">How do I use clash proxy wsl in windows?</a></p>\n<p>可以在<code>~/.bashrc</code>中通过<code>alias</code>命令进行变量开关定义</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">alias</span> proxy=<span class=\"string\">&quot;export http_proxy=http://127.0.0.1:7890;export https_proxy=http://127.0.0.1:7890&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> unproxy=<span class=\"string\">&quot;unset http_proxy;unset https_proxy;&quot;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>记得source ~&#x2F;.bashrc</p>\n</blockquote>\n<hr>\n<h4 id=\"6-下载UI\"><a href=\"#6-下载UI\" class=\"headerlink\" title=\"6. 下载UI\"></a>6. 下载UI</h4><p><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230411195232.png\" alt=\"20230411195232\"><br>在<code>/opt/clash</code>下建一个<code>ui</code>文件夹，并将文件ui的文件移动到该目录下：<br>CNAME  assets  index.html  manifest.webmanifest  sw.js  workbox-e0782b83.js</p>\n<ul>\n<li>其中index.html即为页面，需要在clash的config.yaml文件中指向一下<ul>\n<li>在<code>external-controller: 0.0.0.0:9090</code>的下方添加<code>external-ui: /opt/clash/ui</code></li>\n<li><code>systemctl restart clash</code></li>\n<li>通过<code>127.0.0.1:9090/ui</code>访问即可</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"docker版本\"><a href=\"#docker版本\" class=\"headerlink\" title=\"docker版本\"></a>docker版本</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install docker.io</span><br><span class=\"line\">docker -v</span><br></pre></td></tr></table></figure>\n<p>在<a href=\"https://hub.docker.com/\">docker官网</a>查找镜像<code>dreamacro/clash</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull dreamacro/clash</span><br><span class=\"line\">docker run -d --name clash -p 7890:7890 -p 7891:7891 -p 9090:9090 -v /opt/clash/config.yaml:/root/.config/clash/config.yaml -v /opt/clash/ui:/opt/clash/ui dreamacro/clash</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>--name clash</code>: 名字起做clash</li>\n<li><code>-p</code>: 端口映射</li>\n<li><code>-v</code>: 文件映射</li>\n<li><code>dreamacro/clash</code>: 启动镜像的名字</li>\n</ul>\n<p>使用<code>docker logs -f 容器ID</code>查看日志<br><code>docker ps</code>查看可查看容器ID</p>\n<hr>\n<h3 id=\"实验室服务器\"><a href=\"#实验室服务器\" class=\"headerlink\" title=\"实验室服务器\"></a>实验室服务器</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 设置代理</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> proxy=<span class=\"string\">&quot;export http_proxy=http://127.0.0.1:7890; export https_proxy=http://127.0.0.1:7890&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 取消代理</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> unproxy=<span class=\"string\">&quot;unset http_proxy; unset https_proxy&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 启动 clash</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> startclash=<span class=\"string\">&quot;nohup /home/corner/.local/opt/clash -f /home/corner/.local/opt/config.yaml &gt; /home/corner/.local/opt/output.log 2&gt;&amp;1 &amp;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 停止 clash</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> stopclash=<span class=\"string\">&quot;pkill -f &#x27;/home/corner/.local/opt/clash -f /home/corner/.local/opt/config.yaml&#x27;&quot;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h3><p><a href=\"https://www.youtube.com/watch?v=VOlWdNZAq_o&list=WL&index=15&t=942s&ab_channel=%E9%95%BF%E9%A3%8E%E5%88%86%E4%BA%AB\">最全Linux科学上网三种方式-长风分享</a></p>\n<h2 id=\"V2ray\"><a href=\"#V2ray\" class=\"headerlink\" title=\"V2ray\"></a>V2ray</h2><ul>\n<li><p>下载 <a href=\"https://github.com/v2ray/v2ray-core\">v2ray core</a>的Linux版本，例如 <code>v2ray-linux-64.zip</code></p>\n</li>\n<li><p><code>unzip</code><br>其中的 <code>v2ray</code> 为可执行文件，<code>config.json</code> 为配置文件，配置文件可以通过 <code>v2rayN</code> 的 <strong>导出所选服务器为客户端配置</strong> 进行导出。</p>\n</li>\n<li><p><code>./v2ray -config config.json</code> 运行即可，回显如下：</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">V2Ray 4.28.2 (V2Fly, a community-driven edition of V2Ray.) Custom (go1.15.2 linux/amd64)</span><br><span class=\"line\">A unified platform <span class=\"keyword\">for</span> anti-censorship.</span><br><span class=\"line\">2023/11/21 07:15:11 [Info] v2ray.com/core/common/platform/ctlcmd: &lt;v2ctl message&gt;</span><br><span class=\"line\">v2ctl&gt; Read config:  config.json</span><br><span class=\"line\">2023/11/21 07:15:11 [Warning] v2ray.com/core: V2Ray 4.28.2 started</span><br></pre></td></tr></table></figure>"},{"title":"Ubuntu设置网络唤醒","date":"2023-05-24T18:55:57.000Z","declare":true,"_content":"1. 确保计算机的BIOS设置中已启用唤醒功能。<!--more-->\n2. 安装ethtool工具：\n```shell\nsudo apt install ethtool\n```\n3. 确认网卡支持唤醒功能。在终端中运行以下命令来检查：\n```shell\nifconfig   # 查看网络接口的名称\nsudo ethtool <interface>\n\n# 其中，<interface>是网络接口的名称，如eth0或enp2s0。在ethtool输出中，查找Wake-on:的行，如果它的值为d表示该接口支持唤醒功能。\n```\n\n4. 激活唤醒功能。在终端中运行以下命令：\n```shell\nsudo ethtool -s <interface> wol g\n\n# 其中，<interface>是网络接口的名称，如eth0或enp2s0。此命令将启用接口的唤醒功能，并将其设置为通过网络唤醒（magicpacket）来唤醒计算机。\n```\n\n5. 确认唤醒功能已经激活。在终端中运行以下命令：\n```shell\nsudo ethtool <interface>\n\n# 再次查找Wake-on:的行，如果它的值为g表示该接口已经成功启用唤醒功能。\n```\n\n-----------------------------------------------------------\n- 创建一个开机自启动的服务来执行`sudo ethtool -s enp2s0 wol g`命令。\n1. 创建一个新的服务单元文件。在终端中输入以下命令创建一个新的服务单元文件：`sudo vim /etc/systemd/system/wol.service`\n2. 在打开的文件中，输入以下内容：\n```bash\n[Unit]\nDescription=Wake-on-LAN Configuration\nAfter=network.target\n\n[Service]\nExecStart=/usr/sbin/ethtool -s enp2s0 wol g\n\n[Install]\nWantedBy=default.target\n```\n> 请确保将enp2s0替换为要启用网络唤醒的网络接口的正确名称。\n\n3. 启用服务并重新启动系统测试即可","source":"_posts/Ubuntu设置网络唤醒.md","raw":"---\ntitle: Ubuntu设置网络唤醒\ndate: 2023-05-24 18:55:57\ntags:\n    - Ubuntu\ndeclare: true\n---\n1. 确保计算机的BIOS设置中已启用唤醒功能。<!--more-->\n2. 安装ethtool工具：\n```shell\nsudo apt install ethtool\n```\n3. 确认网卡支持唤醒功能。在终端中运行以下命令来检查：\n```shell\nifconfig   # 查看网络接口的名称\nsudo ethtool <interface>\n\n# 其中，<interface>是网络接口的名称，如eth0或enp2s0。在ethtool输出中，查找Wake-on:的行，如果它的值为d表示该接口支持唤醒功能。\n```\n\n4. 激活唤醒功能。在终端中运行以下命令：\n```shell\nsudo ethtool -s <interface> wol g\n\n# 其中，<interface>是网络接口的名称，如eth0或enp2s0。此命令将启用接口的唤醒功能，并将其设置为通过网络唤醒（magicpacket）来唤醒计算机。\n```\n\n5. 确认唤醒功能已经激活。在终端中运行以下命令：\n```shell\nsudo ethtool <interface>\n\n# 再次查找Wake-on:的行，如果它的值为g表示该接口已经成功启用唤醒功能。\n```\n\n-----------------------------------------------------------\n- 创建一个开机自启动的服务来执行`sudo ethtool -s enp2s0 wol g`命令。\n1. 创建一个新的服务单元文件。在终端中输入以下命令创建一个新的服务单元文件：`sudo vim /etc/systemd/system/wol.service`\n2. 在打开的文件中，输入以下内容：\n```bash\n[Unit]\nDescription=Wake-on-LAN Configuration\nAfter=network.target\n\n[Service]\nExecStart=/usr/sbin/ethtool -s enp2s0 wol g\n\n[Install]\nWantedBy=default.target\n```\n> 请确保将enp2s0替换为要启用网络唤醒的网络接口的正确名称。\n\n3. 启用服务并重新启动系统测试即可","slug":"Ubuntu设置网络唤醒","published":1,"updated":"2024-04-25T17:26:46.933Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvjbaqhy001t0vn1bewjch0l","content":"<ol>\n<li><p>确保计算机的BIOS设置中已启用唤醒功能。<span id=\"more\"></span></p>\n</li>\n<li><p>安装ethtool工具：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install ethtool</span><br></pre></td></tr></table></figure></li>\n<li><p>确认网卡支持唤醒功能。在终端中运行以下命令来检查：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ifconfig   # 查看网络接口的名称</span><br><span class=\"line\">sudo ethtool &lt;interface&gt;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">其中，&lt;interface&gt;是网络接口的名称，如eth0或enp2s0。在ethtool输出中，查找Wake-on:的行，如果它的值为d表示该接口支持唤醒功能。</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>激活唤醒功能。在终端中运行以下命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ethtool -s &lt;interface&gt; wol g</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">其中，&lt;interface&gt;是网络接口的名称，如eth0或enp2s0。此命令将启用接口的唤醒功能，并将其设置为通过网络唤醒（magicpacket）来唤醒计算机。</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>确认唤醒功能已经激活。在终端中运行以下命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ethtool &lt;interface&gt;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">再次查找Wake-on:的行，如果它的值为g表示该接口已经成功启用唤醒功能。</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<hr>\n<ul>\n<li>创建一个开机自启动的服务来执行<code>sudo ethtool -s enp2s0 wol g</code>命令。</li>\n</ul>\n<ol>\n<li><p>创建一个新的服务单元文件。在终端中输入以下命令创建一个新的服务单元文件：<code>sudo vim /etc/systemd/system/wol.service</code></p>\n</li>\n<li><p>在打开的文件中，输入以下内容：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=Wake-on-LAN Configuration</span><br><span class=\"line\">After=network.target</span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">ExecStart=/usr/sbin/ethtool -s enp2s0 wol g</span><br><span class=\"line\"></span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=default.target</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>请确保将enp2s0替换为要启用网络唤醒的网络接口的正确名称。</p>\n</blockquote>\n</li>\n<li><p>启用服务并重新启动系统测试即可</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<ol>\n<li><p>确保计算机的BIOS设置中已启用唤醒功能。</p></li></ol>","more":"<p></p>\n\n<li><p>安装ethtool工具：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install ethtool</span><br></pre></td></tr></table></figure></li>\n<li><p>确认网卡支持唤醒功能。在终端中运行以下命令来检查：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ifconfig   # 查看网络接口的名称</span><br><span class=\"line\">sudo ethtool &lt;interface&gt;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">其中，&lt;interface&gt;是网络接口的名称，如eth0或enp2s0。在ethtool输出中，查找Wake-on:的行，如果它的值为d表示该接口支持唤醒功能。</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>激活唤醒功能。在终端中运行以下命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ethtool -s &lt;interface&gt; wol g</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">其中，&lt;interface&gt;是网络接口的名称，如eth0或enp2s0。此命令将启用接口的唤醒功能，并将其设置为通过网络唤醒（magicpacket）来唤醒计算机。</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>确认唤醒功能已经激活。在终端中运行以下命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ethtool &lt;interface&gt;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">再次查找Wake-on:的行，如果它的值为g表示该接口已经成功启用唤醒功能。</span></span><br></pre></td></tr></table></figure></li>\n\n<hr>\n<ul>\n<li>创建一个开机自启动的服务来执行<code>sudo ethtool -s enp2s0 wol g</code>命令。</li>\n</ul>\n<ol>\n<li><p>创建一个新的服务单元文件。在终端中输入以下命令创建一个新的服务单元文件：<code>sudo vim /etc/systemd/system/wol.service</code></p>\n</li>\n<li><p>在打开的文件中，输入以下内容：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=Wake-on-LAN Configuration</span><br><span class=\"line\">After=network.target</span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">ExecStart=/usr/sbin/ethtool -s enp2s0 wol g</span><br><span class=\"line\"></span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=default.target</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>请确保将enp2s0替换为要启用网络唤醒的网络接口的正确名称。</p>\n</blockquote>\n</li>\n<li><p>启用服务并重新启动系统测试即可</p>\n</li>\n</ol>"},{"title":"Ubuntu进入grub界面","date":"2023-05-21T10:05:55.000Z","declare":true,"_content":"1. 开机时候长按Shift，进入grub界面\n2. 输入password更改root密码","source":"_posts/Ubuntu进入grub界面.md","raw":"---\ntitle: Ubuntu进入grub界面\ndate: 2023-05-21 10:05:55\ntags:\n    - Ubuntu\ndeclare: true\n---\n1. 开机时候长按Shift，进入grub界面\n2. 输入password更改root密码","slug":"Ubuntu进入grub界面","published":1,"updated":"2024-04-25T17:26:46.943Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvjbaqhz001v0vn14vl8hcew","content":"<ol>\n<li>开机时候长按Shift，进入grub界面</li>\n<li>输入password更改root密码</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li>开机时候长按Shift，进入grub界面</li>\n<li>输入password更改root密码</li>\n</ol>\n"},{"title":"WSL modify the default installation directory to another disk","date":"2023-04-03T16:13:30.000Z","_content":"- Check out the WSL distribution\nEnter the following command in Windows PowerShell:\n`wsl -l -v`<!--more-->\n\n- Export the distribution version as a tar file to the D drive\n`wsl --export Ubuntu-20.04 d:\\wsl-ubuntu20.04.tar`\n\n- Unregister the current distribution\n`wsl --unregister Ubuntu-20.04`\n\n- Re-import and install WSL in d:\\wsl-ubuntu20.04\n`wsl --import Ubuntu-20.04 d:\\wsl-ubuntu20.04 d:\\wsl-ubuntu20.04.tar --version 2`\n\n- Set the default login user as the user name during installation\n`ubuntu2004 config --default-user corner`\n\n- Delete tar file (optional)\n`del d:\\wsl-ubuntu20.04.tar`\n\n- Reference\n[WSL修改默认安装目录到其他盘](https://www.cnblogs.com/tl542475736/p/14855863.html) \n[WSL2是否可以安装到非C盘的其它位置？](https://answers.microsoft.com/zh-hans/windows/forum/all/wsl2%E6%98%AF%E5%90%A6%E5%8F%AF%E4%BB%A5%E5%AE%89/608a35fd-a8d6-40cc-854d-65bead8ef49d)\n\n","source":"_posts/WSL-modify-the-default-installation-directory-to-another-disk.md","raw":"---\ntitle: WSL modify the default installation directory to another disk\ndate: 2023-04-03 16:13:30\ntags:\n    - windows\n    - WSL\n---\n- Check out the WSL distribution\nEnter the following command in Windows PowerShell:\n`wsl -l -v`<!--more-->\n\n- Export the distribution version as a tar file to the D drive\n`wsl --export Ubuntu-20.04 d:\\wsl-ubuntu20.04.tar`\n\n- Unregister the current distribution\n`wsl --unregister Ubuntu-20.04`\n\n- Re-import and install WSL in d:\\wsl-ubuntu20.04\n`wsl --import Ubuntu-20.04 d:\\wsl-ubuntu20.04 d:\\wsl-ubuntu20.04.tar --version 2`\n\n- Set the default login user as the user name during installation\n`ubuntu2004 config --default-user corner`\n\n- Delete tar file (optional)\n`del d:\\wsl-ubuntu20.04.tar`\n\n- Reference\n[WSL修改默认安装目录到其他盘](https://www.cnblogs.com/tl542475736/p/14855863.html) \n[WSL2是否可以安装到非C盘的其它位置？](https://answers.microsoft.com/zh-hans/windows/forum/all/wsl2%E6%98%AF%E5%90%A6%E5%8F%AF%E4%BB%A5%E5%AE%89/608a35fd-a8d6-40cc-854d-65bead8ef49d)\n\n","slug":"WSL-modify-the-default-installation-directory-to-another-disk","published":1,"updated":"2024-04-25T17:26:47.103Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvjbaqi0001y0vn11m5ubq3d","content":"<ul>\n<li><p>Check out the WSL distribution<br>Enter the following command in Windows PowerShell:<br><code>wsl -l -v</code><span id=\"more\"></span></p>\n</li>\n<li><p>Export the distribution version as a tar file to the D drive<br><code>wsl --export Ubuntu-20.04 d:\\wsl-ubuntu20.04.tar</code></p>\n</li>\n<li><p>Unregister the current distribution<br><code>wsl --unregister Ubuntu-20.04</code></p>\n</li>\n<li><p>Re-import and install WSL in d:\\wsl-ubuntu20.04<br><code>wsl --import Ubuntu-20.04 d:\\wsl-ubuntu20.04 d:\\wsl-ubuntu20.04.tar --version 2</code></p>\n</li>\n<li><p>Set the default login user as the user name during installation<br><code>ubuntu2004 config --default-user corner</code></p>\n</li>\n<li><p>Delete tar file (optional)<br><code>del d:\\wsl-ubuntu20.04.tar</code></p>\n</li>\n<li><p>Reference<br><a href=\"https://www.cnblogs.com/tl542475736/p/14855863.html\">WSL修改默认安装目录到其他盘</a><br><a href=\"https://answers.microsoft.com/zh-hans/windows/forum/all/wsl2%E6%98%AF%E5%90%A6%E5%8F%AF%E4%BB%A5%E5%AE%89/608a35fd-a8d6-40cc-854d-65bead8ef49d\">WSL2是否可以安装到非C盘的其它位置？</a></p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<ul>\n<li><p>Check out the WSL distribution<br>Enter the following command in Windows PowerShell:<br><code>wsl -l -v</code></p></li></ul>","more":"<p></p>\n\n<li><p>Export the distribution version as a tar file to the D drive<br><code>wsl --export Ubuntu-20.04 d:\\wsl-ubuntu20.04.tar</code></p>\n</li>\n<li><p>Unregister the current distribution<br><code>wsl --unregister Ubuntu-20.04</code></p>\n</li>\n<li><p>Re-import and install WSL in d:\\wsl-ubuntu20.04<br><code>wsl --import Ubuntu-20.04 d:\\wsl-ubuntu20.04 d:\\wsl-ubuntu20.04.tar --version 2</code></p>\n</li>\n<li><p>Set the default login user as the user name during installation<br><code>ubuntu2004 config --default-user corner</code></p>\n</li>\n<li><p>Delete tar file (optional)<br><code>del d:\\wsl-ubuntu20.04.tar</code></p>\n</li>\n<li><p>Reference<br><a href=\"https://www.cnblogs.com/tl542475736/p/14855863.html\">WSL修改默认安装目录到其他盘</a><br><a href=\"https://answers.microsoft.com/zh-hans/windows/forum/all/wsl2%E6%98%AF%E5%90%A6%E5%8F%AF%E4%BB%A5%E5%AE%89/608a35fd-a8d6-40cc-854d-65bead8ef49d\">WSL2是否可以安装到非C盘的其它位置？</a></p>\n</li>\n"},{"title":"WSL开机自启动并在后台运行","date":"2023-05-25T15:07:30.000Z","declare":true,"_content":"- 在Windows中创建一个vbs脚本文件，例如wsl.vbs，该文件包含以下内容：\n```shell\nws = CreateObject(\"Wscript.Shell\").run \"wsl -d <distribution_name>\", 0\n```\n> 其中，`<distribution_name>`是您的WSL发行版的名称。例如，如果您的发行版名称为Ubuntu，则应将其替换为Ubuntu。\n> `0`是一个常量，它指示在调用Shell函数时，所调用程序的窗口样式是隐藏的。0表示隐藏窗口，1表示正常窗口，2表示最小化窗口。\n- 将vbs脚本文件复制到Windows启动文件夹中。要打开Windows启动文件夹，请按`Win + R`键，输入`shell:startup`，然后单击`确定`。\n- 重新启动计算机以使更改生效。\n- references [Dev-blog by WS](https://www.cnblogs.com/wswind/p/17201979.html)","source":"_posts/WSL开机自启动并在后台运行.md","raw":"---\ntitle: WSL开机自启动并在后台运行\ndate: 2023-05-25 15:07:30\ntags:\n    - windows\n    - WSL\ndeclare: true\n---\n- 在Windows中创建一个vbs脚本文件，例如wsl.vbs，该文件包含以下内容：\n```shell\nws = CreateObject(\"Wscript.Shell\").run \"wsl -d <distribution_name>\", 0\n```\n> 其中，`<distribution_name>`是您的WSL发行版的名称。例如，如果您的发行版名称为Ubuntu，则应将其替换为Ubuntu。\n> `0`是一个常量，它指示在调用Shell函数时，所调用程序的窗口样式是隐藏的。0表示隐藏窗口，1表示正常窗口，2表示最小化窗口。\n- 将vbs脚本文件复制到Windows启动文件夹中。要打开Windows启动文件夹，请按`Win + R`键，输入`shell:startup`，然后单击`确定`。\n- 重新启动计算机以使更改生效。\n- references [Dev-blog by WS](https://www.cnblogs.com/wswind/p/17201979.html)","slug":"WSL开机自启动并在后台运行","published":1,"updated":"2024-04-25T17:26:47.233Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvjbaqi100200vn16annc3ux","content":"<ul>\n<li>在Windows中创建一个vbs脚本文件，例如wsl.vbs，该文件包含以下内容：<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ws = CreateObject(&quot;Wscript.Shell&quot;).run &quot;wsl -d &lt;distribution_name&gt;&quot;, 0</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>其中，<code>&lt;distribution_name&gt;</code>是您的WSL发行版的名称。例如，如果您的发行版名称为Ubuntu，则应将其替换为Ubuntu。<br><code>0</code>是一个常量，它指示在调用Shell函数时，所调用程序的窗口样式是隐藏的。0表示隐藏窗口，1表示正常窗口，2表示最小化窗口。</p>\n</blockquote>\n</li>\n<li>将vbs脚本文件复制到Windows启动文件夹中。要打开Windows启动文件夹，请按<code>Win + R</code>键，输入<code>shell:startup</code>，然后单击<code>确定</code>。</li>\n<li>重新启动计算机以使更改生效。</li>\n<li>references <a href=\"https://www.cnblogs.com/wswind/p/17201979.html\">Dev-blog by WS</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>在Windows中创建一个vbs脚本文件，例如wsl.vbs，该文件包含以下内容：<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ws = CreateObject(&quot;Wscript.Shell&quot;).run &quot;wsl -d &lt;distribution_name&gt;&quot;, 0</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>其中，<code>&lt;distribution_name&gt;</code>是您的WSL发行版的名称。例如，如果您的发行版名称为Ubuntu，则应将其替换为Ubuntu。<br><code>0</code>是一个常量，它指示在调用Shell函数时，所调用程序的窗口样式是隐藏的。0表示隐藏窗口，1表示正常窗口，2表示最小化窗口。</p>\n</blockquote>\n</li>\n<li>将vbs脚本文件复制到Windows启动文件夹中。要打开Windows启动文件夹，请按<code>Win + R</code>键，输入<code>shell:startup</code>，然后单击<code>确定</code>。</li>\n<li>重新启动计算机以使更改生效。</li>\n<li>references <a href=\"https://www.cnblogs.com/wswind/p/17201979.html\">Dev-blog by WS</a></li>\n</ul>\n"},{"title":"Windows 11 修改Edge占用Alt + Table","date":"2023-07-24T12:58:42.000Z","declare":true,"_content":"搜索alt<!--more-->\n![20230724125954](https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20230724125954.png)","source":"_posts/Windows-11-修改Edge占用Alt-Table.md","raw":"---\ntitle: Windows 11 修改Edge占用Alt + Table\ndate: 2023-07-24 12:58:42\ntags:\n    - windows\ndeclare: true\n---\n搜索alt<!--more-->\n![20230724125954](https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20230724125954.png)","slug":"Windows-11-修改Edge占用Alt-Table","published":1,"updated":"2024-04-25T17:26:46.263Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvjbaqi200220vn1hsnvc5m6","content":"<p>搜索alt<span id=\"more\"></span><br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20230724125954.png\" alt=\"20230724125954\"></p>\n","site":{"data":{}},"excerpt":"<p>搜索alt</p>","more":"<br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20230724125954.png\" alt=\"20230724125954\"><p></p>"},{"title":"Windows font","date":"2023-04-03T18:25:28.000Z","declare":true,"_content":"Original font: **msyh.ttc**<!--more-->\n\n----------------\n\n`regedit`\nRun the command prompt `regedit` as an administrator, open the registry, and navigate to `HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\WindowsNT\\CurrentVersion\\Fonts`\nFind the font you are satisfied with and right click - modify - copy value data\nFind `Microsoft YaHei & Microsoft YaHei UI (TrueType)` and change the following `msyh.ttc` to the font you want. Note: only change the value data, the value name should not be changed\n\nAfter the modification, exit the registry and restart!\nCheck if the font has changed?\n\n> Recommended font: **arial.ttf**","source":"_posts/Windows-font.md","raw":"---\ntitle: Windows font\ndate: 2023-04-03 18:25:28\ntags:\n    - Windows\ndeclare: true\n---\nOriginal font: **msyh.ttc**<!--more-->\n\n----------------\n\n`regedit`\nRun the command prompt `regedit` as an administrator, open the registry, and navigate to `HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\WindowsNT\\CurrentVersion\\Fonts`\nFind the font you are satisfied with and right click - modify - copy value data\nFind `Microsoft YaHei & Microsoft YaHei UI (TrueType)` and change the following `msyh.ttc` to the font you want. Note: only change the value data, the value name should not be changed\n\nAfter the modification, exit the registry and restart!\nCheck if the font has changed?\n\n> Recommended font: **arial.ttf**","slug":"Windows-font","published":1,"updated":"2024-04-25T17:26:46.203Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvjbaqi300240vn104aa79me","content":"<p>Original font: <strong>msyh.ttc</strong><span id=\"more\"></span></p>\n<hr>\n<p><code>regedit</code><br>Run the command prompt <code>regedit</code> as an administrator, open the registry, and navigate to <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\WindowsNT\\CurrentVersion\\Fonts</code><br>Find the font you are satisfied with and right click - modify - copy value data<br>Find <code>Microsoft YaHei &amp; Microsoft YaHei UI (TrueType)</code> and change the following <code>msyh.ttc</code> to the font you want. Note: only change the value data, the value name should not be changed</p>\n<p>After the modification, exit the registry and restart!<br>Check if the font has changed?</p>\n<blockquote>\n<p>Recommended font: <strong>arial.ttf</strong></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>Original font: <strong>msyh.ttc</strong></p>","more":"<p></p>\n<hr>\n<p><code>regedit</code><br>Run the command prompt <code>regedit</code> as an administrator, open the registry, and navigate to <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\WindowsNT\\CurrentVersion\\Fonts</code><br>Find the font you are satisfied with and right click - modify - copy value data<br>Find <code>Microsoft YaHei &amp; Microsoft YaHei UI (TrueType)</code> and change the following <code>msyh.ttc</code> to the font you want. Note: only change the value data, the value name should not be changed</p>\n<p>After the modification, exit the registry and restart!<br>Check if the font has changed?</p>\n<blockquote>\n<p>Recommended font: <strong>arial.ttf</strong></p>\n</blockquote>"},{"title":"all in one 装机","date":"2023-11-09T15:34:30.000Z","_content":"| 配件 | 价格 | 备注 |\n| :---: | :---: | :---: |\n| E5-2643 v4 | ￥ 150 | 超出135-140 不买 |\n| 精粤 JY-X99M-H D4 | ￥ 220 |\n| ECC 32G DDR4 2400 * 2 | ￥ 406 | 拼多多406，淘宝460，2133 淘宝仅 362 元 |\n| ECC 16G DDR4 2133 * 2 | ￥ 172 | 淘宝镁光，2R比4R好 |\n| RX 5600 XT 6G | ￥ 655 | TUF版本 |\n| RX 580 8G 2048 | ￥ 308 | 蓝宝石或迪兰，否则和X99平台冲突 |\n| M.2 1T NVMe | ￥ 299 | 威刚s20 |\n| 4 铜管散热器 | ￥ 33.3 | 拼多多 冰蝶 |\n| 长城额定 500W | ￥ 128 | 神威 6000(SW) |\n| 机箱 航嘉暗夜猎手5 | ￥ 83.7 | 拼多多 |\n| 机箱风扇 * 3 | ￥ 12.74 | 拼多多 |\n| 合计 | ￥ 1408.74/1642.74/1989.74 |  |\n\n> 主机装 windows11 打游戏和办公，wsl 24小时不停，Hyper-V 运行 NAS 和 Ubuntu Server。再加上 安卓子系统，五系统并行不关机。\n","source":"_posts/all-in-one-装机.md","raw":"---\ntitle: all in one 装机\ndate: 2023-11-09 15:34:30\ntags:\n    - DIY\n---\n| 配件 | 价格 | 备注 |\n| :---: | :---: | :---: |\n| E5-2643 v4 | ￥ 150 | 超出135-140 不买 |\n| 精粤 JY-X99M-H D4 | ￥ 220 |\n| ECC 32G DDR4 2400 * 2 | ￥ 406 | 拼多多406，淘宝460，2133 淘宝仅 362 元 |\n| ECC 16G DDR4 2133 * 2 | ￥ 172 | 淘宝镁光，2R比4R好 |\n| RX 5600 XT 6G | ￥ 655 | TUF版本 |\n| RX 580 8G 2048 | ￥ 308 | 蓝宝石或迪兰，否则和X99平台冲突 |\n| M.2 1T NVMe | ￥ 299 | 威刚s20 |\n| 4 铜管散热器 | ￥ 33.3 | 拼多多 冰蝶 |\n| 长城额定 500W | ￥ 128 | 神威 6000(SW) |\n| 机箱 航嘉暗夜猎手5 | ￥ 83.7 | 拼多多 |\n| 机箱风扇 * 3 | ￥ 12.74 | 拼多多 |\n| 合计 | ￥ 1408.74/1642.74/1989.74 |  |\n\n> 主机装 windows11 打游戏和办公，wsl 24小时不停，Hyper-V 运行 NAS 和 Ubuntu Server。再加上 安卓子系统，五系统并行不关机。\n","slug":"all-in-one-装机","published":1,"updated":"2024-04-25T17:26:48.173Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvjbaqi400260vn18pg4534q","content":"<table>\n<thead>\n<tr>\n<th align=\"center\">配件</th>\n<th align=\"center\">价格</th>\n<th align=\"center\">备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">E5-2643 v4</td>\n<td align=\"center\">￥ 150</td>\n<td align=\"center\">超出135-140 不买</td>\n</tr>\n<tr>\n<td align=\"center\">精粤 JY-X99M-H D4</td>\n<td align=\"center\">￥ 220</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">ECC 32G DDR4 2400 * 2</td>\n<td align=\"center\">￥ 406</td>\n<td align=\"center\">拼多多406，淘宝460，2133 淘宝仅 362 元</td>\n</tr>\n<tr>\n<td align=\"center\">ECC 16G DDR4 2133 * 2</td>\n<td align=\"center\">￥ 172</td>\n<td align=\"center\">淘宝镁光，2R比4R好</td>\n</tr>\n<tr>\n<td align=\"center\">RX 5600 XT 6G</td>\n<td align=\"center\">￥ 655</td>\n<td align=\"center\">TUF版本</td>\n</tr>\n<tr>\n<td align=\"center\">RX 580 8G 2048</td>\n<td align=\"center\">￥ 308</td>\n<td align=\"center\">蓝宝石或迪兰，否则和X99平台冲突</td>\n</tr>\n<tr>\n<td align=\"center\">M.2 1T NVMe</td>\n<td align=\"center\">￥ 299</td>\n<td align=\"center\">威刚s20</td>\n</tr>\n<tr>\n<td align=\"center\">4 铜管散热器</td>\n<td align=\"center\">￥ 33.3</td>\n<td align=\"center\">拼多多 冰蝶</td>\n</tr>\n<tr>\n<td align=\"center\">长城额定 500W</td>\n<td align=\"center\">￥ 128</td>\n<td align=\"center\">神威 6000(SW)</td>\n</tr>\n<tr>\n<td align=\"center\">机箱 航嘉暗夜猎手5</td>\n<td align=\"center\">￥ 83.7</td>\n<td align=\"center\">拼多多</td>\n</tr>\n<tr>\n<td align=\"center\">机箱风扇 * 3</td>\n<td align=\"center\">￥ 12.74</td>\n<td align=\"center\">拼多多</td>\n</tr>\n<tr>\n<td align=\"center\">合计</td>\n<td align=\"center\">￥ 1408.74&#x2F;1642.74&#x2F;1989.74</td>\n<td align=\"center\"></td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>主机装 windows11 打游戏和办公，wsl 24小时不停，Hyper-V 运行 NAS 和 Ubuntu Server。再加上 安卓子系统，五系统并行不关机。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<table>\n<thead>\n<tr>\n<th align=\"center\">配件</th>\n<th align=\"center\">价格</th>\n<th align=\"center\">备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">E5-2643 v4</td>\n<td align=\"center\">￥ 150</td>\n<td align=\"center\">超出135-140 不买</td>\n</tr>\n<tr>\n<td align=\"center\">精粤 JY-X99M-H D4</td>\n<td align=\"center\">￥ 220</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">ECC 32G DDR4 2400 * 2</td>\n<td align=\"center\">￥ 406</td>\n<td align=\"center\">拼多多406，淘宝460，2133 淘宝仅 362 元</td>\n</tr>\n<tr>\n<td align=\"center\">ECC 16G DDR4 2133 * 2</td>\n<td align=\"center\">￥ 172</td>\n<td align=\"center\">淘宝镁光，2R比4R好</td>\n</tr>\n<tr>\n<td align=\"center\">RX 5600 XT 6G</td>\n<td align=\"center\">￥ 655</td>\n<td align=\"center\">TUF版本</td>\n</tr>\n<tr>\n<td align=\"center\">RX 580 8G 2048</td>\n<td align=\"center\">￥ 308</td>\n<td align=\"center\">蓝宝石或迪兰，否则和X99平台冲突</td>\n</tr>\n<tr>\n<td align=\"center\">M.2 1T NVMe</td>\n<td align=\"center\">￥ 299</td>\n<td align=\"center\">威刚s20</td>\n</tr>\n<tr>\n<td align=\"center\">4 铜管散热器</td>\n<td align=\"center\">￥ 33.3</td>\n<td align=\"center\">拼多多 冰蝶</td>\n</tr>\n<tr>\n<td align=\"center\">长城额定 500W</td>\n<td align=\"center\">￥ 128</td>\n<td align=\"center\">神威 6000(SW)</td>\n</tr>\n<tr>\n<td align=\"center\">机箱 航嘉暗夜猎手5</td>\n<td align=\"center\">￥ 83.7</td>\n<td align=\"center\">拼多多</td>\n</tr>\n<tr>\n<td align=\"center\">机箱风扇 * 3</td>\n<td align=\"center\">￥ 12.74</td>\n<td align=\"center\">拼多多</td>\n</tr>\n<tr>\n<td align=\"center\">合计</td>\n<td align=\"center\">￥ 1408.74&#x2F;1642.74&#x2F;1989.74</td>\n<td align=\"center\"></td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>主机装 windows11 打游戏和办公，wsl 24小时不停，Hyper-V 运行 NAS 和 Ubuntu Server。再加上 安卓子系统，五系统并行不关机。</p>\n</blockquote>\n"},{"title":"bilibili custom double speed","date":"2022-04-24T18:02:05.000Z","_content":"- On the playback page of station b, **press f12 to open the console**\n- Copy the following code in the console, change 1.75 to the playback speed you want\n`document.querySelector('video').playbackRate = 1.75`<!--more-->\n- Just press Enter after copying and pasting, and press the up and down keys to search for the command you entered before when you want to modify it next time\n\n---\nReference from [Cai Mavericks Blog](https://www.cnblogs.com/cirry/p/12989304.html)","source":"_posts/bilibili-custom-double-speed.md","raw":"---\ntitle: bilibili custom double speed\ndate: 2022-04-24 18:02:05\ntags:\n    - bilibili\n---\n- On the playback page of station b, **press f12 to open the console**\n- Copy the following code in the console, change 1.75 to the playback speed you want\n`document.querySelector('video').playbackRate = 1.75`<!--more-->\n- Just press Enter after copying and pasting, and press the up and down keys to search for the command you entered before when you want to modify it next time\n\n---\nReference from [Cai Mavericks Blog](https://www.cnblogs.com/cirry/p/12989304.html)","slug":"bilibili-custom-double-speed","published":1,"updated":"2024-04-25T17:26:46.043Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvjbaqi500290vn14vl18fbt","content":"<ul>\n<li>On the playback page of station b, <strong>press f12 to open the console</strong></li>\n<li>Copy the following code in the console, change 1.75 to the playback speed you want<br><code>document.querySelector(&#39;video&#39;).playbackRate = 1.75</code><span id=\"more\"></span></li>\n<li>Just press Enter after copying and pasting, and press the up and down keys to search for the command you entered before when you want to modify it next time</li>\n</ul>\n<hr>\n<p>Reference from <a href=\"https://www.cnblogs.com/cirry/p/12989304.html\">Cai Mavericks Blog</a></p>\n","site":{"data":{}},"excerpt":"<ul>\n<li>On the playback page of station b, <strong>press f12 to open the console</strong></li>\n<li>Copy the following code in the console, change 1.75 to the playback speed you want<br><code>document.querySelector(&#39;video&#39;).playbackRate = 1.75</code></li></ul>","more":"\n<li>Just press Enter after copying and pasting, and press the up and down keys to search for the command you entered before when you want to modify it next time</li>\n\n<hr>\n<p>Reference from <a href=\"https://www.cnblogs.com/cirry/p/12989304.html\">Cai Mavericks Blog</a></p>"},{"title":"chatgpt 一直转圈圈问题","date":"2023-05-12T16:01:27.000Z","declare":true,"_content":"- 去[ip111](http://www.ip111.cn/)查ip\n- 进入[platform](https://platform.openai.com/)查看报错信息，**最好在无痕模式查看**，一般还是网络问题<!--more-->\n![20230512225439](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230512225439.png)\n- 设置规则\n![20230512230532](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230512230532.png)\n![20230512230552](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230512230552.png)\n![20230512230611](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230512230611.png)\n\n> 都没用！！！","source":"_posts/chatgpt-一直转圈圈问题.md","raw":"---\ntitle: chatgpt 一直转圈圈问题\ndate: 2023-05-12 16:01:27\ntags:\n    - chatgpt\ndeclare: true\n---\n- 去[ip111](http://www.ip111.cn/)查ip\n- 进入[platform](https://platform.openai.com/)查看报错信息，**最好在无痕模式查看**，一般还是网络问题<!--more-->\n![20230512225439](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230512225439.png)\n- 设置规则\n![20230512230532](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230512230532.png)\n![20230512230552](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230512230552.png)\n![20230512230611](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230512230611.png)\n\n> 都没用！！！","slug":"chatgpt-一直转圈圈问题","published":1,"updated":"2024-04-25T17:26:48.523Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvjbaqi6002b0vn1826s64t1","content":"<ul>\n<li>去<a href=\"http://www.ip111.cn/\">ip111</a>查ip</li>\n<li>进入<a href=\"https://platform.openai.com/\">platform</a>查看报错信息，<strong>最好在无痕模式查看</strong>，一般还是网络问题<span id=\"more\"></span><br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230512225439.png\" alt=\"20230512225439\"></li>\n<li>设置规则<br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230512230532.png\" alt=\"20230512230532\"><br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230512230552.png\" alt=\"20230512230552\"><br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230512230611.png\" alt=\"20230512230611\"></li>\n</ul>\n<blockquote>\n<p>都没用！！！</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<ul>\n<li>去<a href=\"http://www.ip111.cn/\">ip111</a>查ip</li>\n<li>进入<a href=\"https://platform.openai.com/\">platform</a>查看报错信息，<strong>最好在无痕模式查看</strong>，一般还是网络问题</li></ul>","more":"<br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230512225439.png\" alt=\"20230512225439\">\n<li>设置规则<br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230512230532.png\" alt=\"20230512230532\"><br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230512230552.png\" alt=\"20230512230552\"><br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230512230611.png\" alt=\"20230512230611\"></li>\n\n<blockquote>\n<p>都没用！！！</p>\n</blockquote>"},{"title":"chrome 设置黑暗模式","date":"2023-12-17T09:40:05.000Z","_content":"1. `chrome://flags/#enable-force-dark`\n2. `设置 Auto Dark Mode for Web Contents` 为 `Enabled`","source":"_posts/chrome-设置黑暗模式.md","raw":"---\ntitle: chrome 设置黑暗模式\ndate: 2023-12-17 09:40:05\ntags:\n    - chrome\n---\n1. `chrome://flags/#enable-force-dark`\n2. `设置 Auto Dark Mode for Web Contents` 为 `Enabled`","slug":"chrome-设置黑暗模式","published":1,"updated":"2024-04-25T17:26:47.093Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvjbaqi8002e0vn1hdn0f0jy","content":"<ol>\n<li><code>chrome://flags/#enable-force-dark</code></li>\n<li><code>设置 Auto Dark Mode for Web Contents</code> 为 <code>Enabled</code></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li><code>chrome://flags/#enable-force-dark</code></li>\n<li><code>设置 Auto Dark Mode for Web Contents</code> 为 <code>Enabled</code></li>\n</ol>\n"},{"title":"clash load balancing","date":"2023-04-04T09:38:31.000Z","declare":true,"toc":1,"_content":"### 1. The computer uses Paesers to achieve load balancing <!--more-->\nReplace the content in **setting->Profiles->Parsers** with the following:\n```shell\nparsers:\n  - reg: 'slbable$'\n    yaml:\n      append-proxy-groups:\n        - name: ⚖️ 负载均衡-散列\n          type: load-balance\n          url: 'http://www.google.com/generate_204'\n          interval: 300\n          strategy: consistent-hashing\n        - name: ⚖️ 负载均衡-轮询\n          type: load-balance\n          url: 'http://www.google.com/generate_204'\n          interval: 300\n          strategy: round-robin\n      commands:\n        - proxy-groups.⚖️ 负载均衡-散列.proxies=[]proxyNames\n        - proxy-groups.0.proxies.0+⚖️ 负载均衡-散列\n        - proxy-groups.⚖️ 负载均衡-轮询.proxies=[]proxyNames\n        - proxy-groups.0.proxies.0+⚖️ 负载均衡-轮询\n```\n- `reg: 'slbable$'`Triggered when the suffix of the url is `slbable`\n- **负载均衡-轮询**Representatives use different ip to access\n- **负载均衡-散列**Hash algorithm is used on behalf of the same second-level domain name, and high-quality nodes are selected for access. Avoid ip risk control problems.\n- `interval: 300`Represents a speed measurement and conversion every 300 seconds, and nodes that time out are not counted\n\n### 2. On the computer side, the `.yaml` file is dragged in to take effect\n1. Export url through v2ray.\n2. Use [subconverter](https://github.com/tindy2013/subconverter) and [简易版转换工具](https://bulianglin.com/archives/51.html) to achieve subscription conversion.\n3. Open the converted link in the browser.\n4. Save as `.yaml` file\n5. Fill in `file\\\\file path#slbable` in `setting->url` to trigger subscription refresh, the essence is to refer to local files.\n\n### 3. Rewrite the .yaml file, common to all platforms.\n1. Open the .yaml file with an editor, vscode is the best.\n2. Find **proxy-groups->proxies (first)**, add two options\n```shell\n#Added to the first proxy policy group\n      - ⚖️ 负载均衡-轮询\n      - ⚖️ 负载均衡-散列\n```\n3. Find the last group and add the following content after it.\n```shell\n#Add proxy policy group\n  - name: ⚖️ 负载均衡-散列\n    type: load-balance\n    url: http://www.google.com/generate_204\n    interval: 300\n    strategy: consistent-hashing\n    proxies:\n      - P1\n      - P2\n      - P3\n  - name: ⚖️ 负载均衡-轮询\n    type: load-balance\n    url: http://www.google.com/generate_204\n    interval: 300\n    strategy: round-robin\n    proxies:\n      - P1\n      - P2\n      - P3\n```\nAmong them, P1, P2, and P3 represent nodes.\n4. Import the configuration file to the required device.","source":"_posts/clash-load-balancing.md","raw":"---\ntitle: clash load balancing\ndate: 2023-04-04 09:38:31\ntags:\n  - clash\n  - 科学上网\ndeclare: true\ntoc: 1\n---\n### 1. The computer uses Paesers to achieve load balancing <!--more-->\nReplace the content in **setting->Profiles->Parsers** with the following:\n```shell\nparsers:\n  - reg: 'slbable$'\n    yaml:\n      append-proxy-groups:\n        - name: ⚖️ 负载均衡-散列\n          type: load-balance\n          url: 'http://www.google.com/generate_204'\n          interval: 300\n          strategy: consistent-hashing\n        - name: ⚖️ 负载均衡-轮询\n          type: load-balance\n          url: 'http://www.google.com/generate_204'\n          interval: 300\n          strategy: round-robin\n      commands:\n        - proxy-groups.⚖️ 负载均衡-散列.proxies=[]proxyNames\n        - proxy-groups.0.proxies.0+⚖️ 负载均衡-散列\n        - proxy-groups.⚖️ 负载均衡-轮询.proxies=[]proxyNames\n        - proxy-groups.0.proxies.0+⚖️ 负载均衡-轮询\n```\n- `reg: 'slbable$'`Triggered when the suffix of the url is `slbable`\n- **负载均衡-轮询**Representatives use different ip to access\n- **负载均衡-散列**Hash algorithm is used on behalf of the same second-level domain name, and high-quality nodes are selected for access. Avoid ip risk control problems.\n- `interval: 300`Represents a speed measurement and conversion every 300 seconds, and nodes that time out are not counted\n\n### 2. On the computer side, the `.yaml` file is dragged in to take effect\n1. Export url through v2ray.\n2. Use [subconverter](https://github.com/tindy2013/subconverter) and [简易版转换工具](https://bulianglin.com/archives/51.html) to achieve subscription conversion.\n3. Open the converted link in the browser.\n4. Save as `.yaml` file\n5. Fill in `file\\\\file path#slbable` in `setting->url` to trigger subscription refresh, the essence is to refer to local files.\n\n### 3. Rewrite the .yaml file, common to all platforms.\n1. Open the .yaml file with an editor, vscode is the best.\n2. Find **proxy-groups->proxies (first)**, add two options\n```shell\n#Added to the first proxy policy group\n      - ⚖️ 负载均衡-轮询\n      - ⚖️ 负载均衡-散列\n```\n3. Find the last group and add the following content after it.\n```shell\n#Add proxy policy group\n  - name: ⚖️ 负载均衡-散列\n    type: load-balance\n    url: http://www.google.com/generate_204\n    interval: 300\n    strategy: consistent-hashing\n    proxies:\n      - P1\n      - P2\n      - P3\n  - name: ⚖️ 负载均衡-轮询\n    type: load-balance\n    url: http://www.google.com/generate_204\n    interval: 300\n    strategy: round-robin\n    proxies:\n      - P1\n      - P2\n      - P3\n```\nAmong them, P1, P2, and P3 represent nodes.\n4. Import the configuration file to the required device.","slug":"clash-load-balancing","published":1,"updated":"2024-04-25T17:26:46.243Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvjbaqi9002g0vn1d7yf3sdu","content":"<h3 id=\"1-The-computer-uses-Paesers-to-achieve-load-balancing\"><a href=\"#1-The-computer-uses-Paesers-to-achieve-load-balancing\" class=\"headerlink\" title=\"1. The computer uses Paesers to achieve load balancing \"></a>1. The computer uses Paesers to achieve load balancing <span id=\"more\"></span></h3><p>Replace the content in <strong>setting-&gt;Profiles-&gt;Parsers</strong> with the following:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">parsers:</span><br><span class=\"line\">  - reg: &#x27;slbable$&#x27;</span><br><span class=\"line\">    yaml:</span><br><span class=\"line\">      append-proxy-groups:</span><br><span class=\"line\">        - name: ⚖️ 负载均衡-散列</span><br><span class=\"line\">          type: load-balance</span><br><span class=\"line\">          url: &#x27;http://www.google.com/generate_204&#x27;</span><br><span class=\"line\">          interval: 300</span><br><span class=\"line\">          strategy: consistent-hashing</span><br><span class=\"line\">        - name: ⚖️ 负载均衡-轮询</span><br><span class=\"line\">          type: load-balance</span><br><span class=\"line\">          url: &#x27;http://www.google.com/generate_204&#x27;</span><br><span class=\"line\">          interval: 300</span><br><span class=\"line\">          strategy: round-robin</span><br><span class=\"line\">      commands:</span><br><span class=\"line\">        - proxy-groups.⚖️ 负载均衡-散列.proxies=[]proxyNames</span><br><span class=\"line\">        - proxy-groups.0.proxies.0+⚖️ 负载均衡-散列</span><br><span class=\"line\">        - proxy-groups.⚖️ 负载均衡-轮询.proxies=[]proxyNames</span><br><span class=\"line\">        - proxy-groups.0.proxies.0+⚖️ 负载均衡-轮询</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>reg: &#39;slbable$&#39;</code>Triggered when the suffix of the url is <code>slbable</code></li>\n<li><strong>负载均衡-轮询</strong>Representatives use different ip to access</li>\n<li><strong>负载均衡-散列</strong>Hash algorithm is used on behalf of the same second-level domain name, and high-quality nodes are selected for access. Avoid ip risk control problems.</li>\n<li><code>interval: 300</code>Represents a speed measurement and conversion every 300 seconds, and nodes that time out are not counted</li>\n</ul>\n<h3 id=\"2-On-the-computer-side-the-yaml-file-is-dragged-in-to-take-effect\"><a href=\"#2-On-the-computer-side-the-yaml-file-is-dragged-in-to-take-effect\" class=\"headerlink\" title=\"2. On the computer side, the .yaml file is dragged in to take effect\"></a>2. On the computer side, the <code>.yaml</code> file is dragged in to take effect</h3><ol>\n<li>Export url through v2ray.</li>\n<li>Use <a href=\"https://github.com/tindy2013/subconverter\">subconverter</a> and <a href=\"https://bulianglin.com/archives/51.html\">简易版转换工具</a> to achieve subscription conversion.</li>\n<li>Open the converted link in the browser.</li>\n<li>Save as <code>.yaml</code> file</li>\n<li>Fill in <code>file\\\\file path#slbable</code> in <code>setting-&gt;url</code> to trigger subscription refresh, the essence is to refer to local files.</li>\n</ol>\n<h3 id=\"3-Rewrite-the-yaml-file-common-to-all-platforms\"><a href=\"#3-Rewrite-the-yaml-file-common-to-all-platforms\" class=\"headerlink\" title=\"3. Rewrite the .yaml file, common to all platforms.\"></a>3. Rewrite the .yaml file, common to all platforms.</h3><ol>\n<li>Open the .yaml file with an editor, vscode is the best.</li>\n<li>Find <strong>proxy-groups-&gt;proxies (first)</strong>, add two options<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">Added to the first proxy policy group</span></span><br><span class=\"line\">      - ⚖️ 负载均衡-轮询</span><br><span class=\"line\">      - ⚖️ 负载均衡-散列</span><br></pre></td></tr></table></figure></li>\n<li>Find the last group and add the following content after it.<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">Add proxy policy group</span></span><br><span class=\"line\">  - name: ⚖️ 负载均衡-散列</span><br><span class=\"line\">    type: load-balance</span><br><span class=\"line\">    url: http://www.google.com/generate_204</span><br><span class=\"line\">    interval: 300</span><br><span class=\"line\">    strategy: consistent-hashing</span><br><span class=\"line\">    proxies:</span><br><span class=\"line\">      - P1</span><br><span class=\"line\">      - P2</span><br><span class=\"line\">      - P3</span><br><span class=\"line\">  - name: ⚖️ 负载均衡-轮询</span><br><span class=\"line\">    type: load-balance</span><br><span class=\"line\">    url: http://www.google.com/generate_204</span><br><span class=\"line\">    interval: 300</span><br><span class=\"line\">    strategy: round-robin</span><br><span class=\"line\">    proxies:</span><br><span class=\"line\">      - P1</span><br><span class=\"line\">      - P2</span><br><span class=\"line\">      - P3</span><br></pre></td></tr></table></figure>\nAmong them, P1, P2, and P3 represent nodes.</li>\n<li>Import the configuration file to the required device.</li>\n</ol>\n","site":{"data":{}},"excerpt":"<h3 id=\"1-The-computer-uses-Paesers-to-achieve-load-balancing\"><a href=\"#1-The-computer-uses-Paesers-to-achieve-load-balancing\" class=\"headerlink\" title=\"1. The computer uses Paesers to achieve load balancing \"></a>1. The computer uses Paesers to achieve load balancing</h3>","more":"<p>Replace the content in <strong>setting-&gt;Profiles-&gt;Parsers</strong> with the following:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">parsers:</span><br><span class=\"line\">  - reg: &#x27;slbable$&#x27;</span><br><span class=\"line\">    yaml:</span><br><span class=\"line\">      append-proxy-groups:</span><br><span class=\"line\">        - name: ⚖️ 负载均衡-散列</span><br><span class=\"line\">          type: load-balance</span><br><span class=\"line\">          url: &#x27;http://www.google.com/generate_204&#x27;</span><br><span class=\"line\">          interval: 300</span><br><span class=\"line\">          strategy: consistent-hashing</span><br><span class=\"line\">        - name: ⚖️ 负载均衡-轮询</span><br><span class=\"line\">          type: load-balance</span><br><span class=\"line\">          url: &#x27;http://www.google.com/generate_204&#x27;</span><br><span class=\"line\">          interval: 300</span><br><span class=\"line\">          strategy: round-robin</span><br><span class=\"line\">      commands:</span><br><span class=\"line\">        - proxy-groups.⚖️ 负载均衡-散列.proxies=[]proxyNames</span><br><span class=\"line\">        - proxy-groups.0.proxies.0+⚖️ 负载均衡-散列</span><br><span class=\"line\">        - proxy-groups.⚖️ 负载均衡-轮询.proxies=[]proxyNames</span><br><span class=\"line\">        - proxy-groups.0.proxies.0+⚖️ 负载均衡-轮询</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>reg: &#39;slbable$&#39;</code>Triggered when the suffix of the url is <code>slbable</code></li>\n<li><strong>负载均衡-轮询</strong>Representatives use different ip to access</li>\n<li><strong>负载均衡-散列</strong>Hash algorithm is used on behalf of the same second-level domain name, and high-quality nodes are selected for access. Avoid ip risk control problems.</li>\n<li><code>interval: 300</code>Represents a speed measurement and conversion every 300 seconds, and nodes that time out are not counted</li>\n</ul>\n<h3 id=\"2-On-the-computer-side-the-yaml-file-is-dragged-in-to-take-effect\"><a href=\"#2-On-the-computer-side-the-yaml-file-is-dragged-in-to-take-effect\" class=\"headerlink\" title=\"2. On the computer side, the .yaml file is dragged in to take effect\"></a>2. On the computer side, the <code>.yaml</code> file is dragged in to take effect</h3><ol>\n<li>Export url through v2ray.</li>\n<li>Use <a href=\"https://github.com/tindy2013/subconverter\">subconverter</a> and <a href=\"https://bulianglin.com/archives/51.html\">简易版转换工具</a> to achieve subscription conversion.</li>\n<li>Open the converted link in the browser.</li>\n<li>Save as <code>.yaml</code> file</li>\n<li>Fill in <code>file\\\\file path#slbable</code> in <code>setting-&gt;url</code> to trigger subscription refresh, the essence is to refer to local files.</li>\n</ol>\n<h3 id=\"3-Rewrite-the-yaml-file-common-to-all-platforms\"><a href=\"#3-Rewrite-the-yaml-file-common-to-all-platforms\" class=\"headerlink\" title=\"3. Rewrite the .yaml file, common to all platforms.\"></a>3. Rewrite the .yaml file, common to all platforms.</h3><ol>\n<li>Open the .yaml file with an editor, vscode is the best.</li>\n<li>Find <strong>proxy-groups-&gt;proxies (first)</strong>, add two options<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">Added to the first proxy policy group</span></span><br><span class=\"line\">      - ⚖️ 负载均衡-轮询</span><br><span class=\"line\">      - ⚖️ 负载均衡-散列</span><br></pre></td></tr></table></figure></li>\n<li>Find the last group and add the following content after it.<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">Add proxy policy group</span></span><br><span class=\"line\">  - name: ⚖️ 负载均衡-散列</span><br><span class=\"line\">    type: load-balance</span><br><span class=\"line\">    url: http://www.google.com/generate_204</span><br><span class=\"line\">    interval: 300</span><br><span class=\"line\">    strategy: consistent-hashing</span><br><span class=\"line\">    proxies:</span><br><span class=\"line\">      - P1</span><br><span class=\"line\">      - P2</span><br><span class=\"line\">      - P3</span><br><span class=\"line\">  - name: ⚖️ 负载均衡-轮询</span><br><span class=\"line\">    type: load-balance</span><br><span class=\"line\">    url: http://www.google.com/generate_204</span><br><span class=\"line\">    interval: 300</span><br><span class=\"line\">    strategy: round-robin</span><br><span class=\"line\">    proxies:</span><br><span class=\"line\">      - P1</span><br><span class=\"line\">      - P2</span><br><span class=\"line\">      - P3</span><br></pre></td></tr></table></figure>\nAmong them, P1, P2, and P3 represent nodes.</li>\n<li>Import the configuration file to the required device.</li>\n</ol>"},{"title":"emoji备忘录","date":"2023-07-04T14:59:31.000Z","_content":"[emoji备忘录](https://www.webfx.com/tools/emoji-cheat-sheet/)，可用于Github","source":"_posts/emoji备忘录.md","raw":"---\ntitle: emoji备忘录\ndate: 2023-07-04 14:59:31\ntags:\n    - emoji\n---\n[emoji备忘录](https://www.webfx.com/tools/emoji-cheat-sheet/)，可用于Github","slug":"emoji备忘录","published":1,"updated":"2024-04-25T17:26:46.233Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvjbaqib002j0vn1bg9thbmw","content":"<p><a href=\"https://www.webfx.com/tools/emoji-cheat-sheet/\">emoji备忘录</a>，可用于Github</p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://www.webfx.com/tools/emoji-cheat-sheet/\">emoji备忘录</a>，可用于Github</p>\n"},{"title":"firewalld常用命令","date":"2023-12-10T16:55:16.000Z","_content":"Firewalld是Linux系统上用于管理iptables规则的工具，它提供了一个动态的、易于使用的防火墙管理工具。以下是一些firewalld的常用命令：<!--more-->\n\n1. **启动/停止/重启firewalld服务：**\n   - 启动：`sudo systemctl start firewalld`\n   - 停止：`sudo systemctl stop firewalld`\n   - 重启：`sudo systemctl restart firewalld`\n\n2. **设置firewalld开机启动：**\n   - `sudo systemctl enable firewalld`\n\n3. **查看firewalld状态：**\n   - `sudo systemctl status firewalld`\n\n4. **查看所有防火墙规则：**\n   - `sudo firewall-cmd --list-all`\n\n5. **查看特定区域的规则：**\n   - `sudo firewall-cmd --zone=public --list-all`\n\n6. **打开/关闭防火墙：**\n   - 打开：`sudo firewall-cmd --state`\n   - 关闭：`sudo systemctl stop firewalld`\n\n7. **添加/移除服务：**\n   - 添加：`sudo firewall-cmd --add-service=service_name`\n   - 移除：`sudo firewall-cmd --remove-service=service_name`\n\n8. **添加/移除端口：**\n   - 添加：`sudo firewall-cmd --add-port=port_number/tcp`\n   - 移除：`sudo firewall-cmd --remove-port=port_number/tcp`\n\n9. **指定接口的区域：**\n   - `sudo firewall-cmd --zone=public --change-interface=eth0`\n\n10. **允许/拒绝/移除IP地址：**\n    - 允许：`sudo firewall-cmd --add-source=ip_address`\n    - 拒绝：`sudo firewall-cmd --add-rich-rule='rule family=\"ipv4\" source address=\"ip_address\" reject'`\n    - 移除：`sudo firewall-cmd --remove-source=ip_address`\n\n11. **设置默认区域：**\n    - `sudo firewall-cmd --set-default-zone=public`\n","source":"_posts/firewalld常用命令.md","raw":"---\ntitle: firewalld常用命令\ndate: 2023-12-10 16:55:16\ntags:\n    - Linux\n---\nFirewalld是Linux系统上用于管理iptables规则的工具，它提供了一个动态的、易于使用的防火墙管理工具。以下是一些firewalld的常用命令：<!--more-->\n\n1. **启动/停止/重启firewalld服务：**\n   - 启动：`sudo systemctl start firewalld`\n   - 停止：`sudo systemctl stop firewalld`\n   - 重启：`sudo systemctl restart firewalld`\n\n2. **设置firewalld开机启动：**\n   - `sudo systemctl enable firewalld`\n\n3. **查看firewalld状态：**\n   - `sudo systemctl status firewalld`\n\n4. **查看所有防火墙规则：**\n   - `sudo firewall-cmd --list-all`\n\n5. **查看特定区域的规则：**\n   - `sudo firewall-cmd --zone=public --list-all`\n\n6. **打开/关闭防火墙：**\n   - 打开：`sudo firewall-cmd --state`\n   - 关闭：`sudo systemctl stop firewalld`\n\n7. **添加/移除服务：**\n   - 添加：`sudo firewall-cmd --add-service=service_name`\n   - 移除：`sudo firewall-cmd --remove-service=service_name`\n\n8. **添加/移除端口：**\n   - 添加：`sudo firewall-cmd --add-port=port_number/tcp`\n   - 移除：`sudo firewall-cmd --remove-port=port_number/tcp`\n\n9. **指定接口的区域：**\n   - `sudo firewall-cmd --zone=public --change-interface=eth0`\n\n10. **允许/拒绝/移除IP地址：**\n    - 允许：`sudo firewall-cmd --add-source=ip_address`\n    - 拒绝：`sudo firewall-cmd --add-rich-rule='rule family=\"ipv4\" source address=\"ip_address\" reject'`\n    - 移除：`sudo firewall-cmd --remove-source=ip_address`\n\n11. **设置默认区域：**\n    - `sudo firewall-cmd --set-default-zone=public`\n","slug":"firewalld常用命令","published":1,"updated":"2024-04-25T17:26:45.863Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvjbaqic002l0vn14h2ccrls","content":"<p>Firewalld是Linux系统上用于管理iptables规则的工具，它提供了一个动态的、易于使用的防火墙管理工具。以下是一些firewalld的常用命令：<span id=\"more\"></span></p>\n<ol>\n<li><p><strong>启动&#x2F;停止&#x2F;重启firewalld服务：</strong></p>\n<ul>\n<li>启动：<code>sudo systemctl start firewalld</code></li>\n<li>停止：<code>sudo systemctl stop firewalld</code></li>\n<li>重启：<code>sudo systemctl restart firewalld</code></li>\n</ul>\n</li>\n<li><p><strong>设置firewalld开机启动：</strong></p>\n<ul>\n<li><code>sudo systemctl enable firewalld</code></li>\n</ul>\n</li>\n<li><p><strong>查看firewalld状态：</strong></p>\n<ul>\n<li><code>sudo systemctl status firewalld</code></li>\n</ul>\n</li>\n<li><p><strong>查看所有防火墙规则：</strong></p>\n<ul>\n<li><code>sudo firewall-cmd --list-all</code></li>\n</ul>\n</li>\n<li><p><strong>查看特定区域的规则：</strong></p>\n<ul>\n<li><code>sudo firewall-cmd --zone=public --list-all</code></li>\n</ul>\n</li>\n<li><p><strong>打开&#x2F;关闭防火墙：</strong></p>\n<ul>\n<li>打开：<code>sudo firewall-cmd --state</code></li>\n<li>关闭：<code>sudo systemctl stop firewalld</code></li>\n</ul>\n</li>\n<li><p><strong>添加&#x2F;移除服务：</strong></p>\n<ul>\n<li>添加：<code>sudo firewall-cmd --add-service=service_name</code></li>\n<li>移除：<code>sudo firewall-cmd --remove-service=service_name</code></li>\n</ul>\n</li>\n<li><p><strong>添加&#x2F;移除端口：</strong></p>\n<ul>\n<li>添加：<code>sudo firewall-cmd --add-port=port_number/tcp</code></li>\n<li>移除：<code>sudo firewall-cmd --remove-port=port_number/tcp</code></li>\n</ul>\n</li>\n<li><p><strong>指定接口的区域：</strong></p>\n<ul>\n<li><code>sudo firewall-cmd --zone=public --change-interface=eth0</code></li>\n</ul>\n</li>\n<li><p><strong>允许&#x2F;拒绝&#x2F;移除IP地址：</strong></p>\n<ul>\n<li>允许：<code>sudo firewall-cmd --add-source=ip_address</code></li>\n<li>拒绝：<code>sudo firewall-cmd --add-rich-rule=&#39;rule family=&quot;ipv4&quot; source address=&quot;ip_address&quot; reject&#39;</code></li>\n<li>移除：<code>sudo firewall-cmd --remove-source=ip_address</code></li>\n</ul>\n</li>\n<li><p><strong>设置默认区域：</strong></p>\n<ul>\n<li><code>sudo firewall-cmd --set-default-zone=public</code></li>\n</ul>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>Firewalld是Linux系统上用于管理iptables规则的工具，它提供了一个动态的、易于使用的防火墙管理工具。以下是一些firewalld的常用命令：</p>","more":"<p></p>\n<ol>\n<li><p><strong>启动&#x2F;停止&#x2F;重启firewalld服务：</strong></p>\n<ul>\n<li>启动：<code>sudo systemctl start firewalld</code></li>\n<li>停止：<code>sudo systemctl stop firewalld</code></li>\n<li>重启：<code>sudo systemctl restart firewalld</code></li>\n</ul>\n</li>\n<li><p><strong>设置firewalld开机启动：</strong></p>\n<ul>\n<li><code>sudo systemctl enable firewalld</code></li>\n</ul>\n</li>\n<li><p><strong>查看firewalld状态：</strong></p>\n<ul>\n<li><code>sudo systemctl status firewalld</code></li>\n</ul>\n</li>\n<li><p><strong>查看所有防火墙规则：</strong></p>\n<ul>\n<li><code>sudo firewall-cmd --list-all</code></li>\n</ul>\n</li>\n<li><p><strong>查看特定区域的规则：</strong></p>\n<ul>\n<li><code>sudo firewall-cmd --zone=public --list-all</code></li>\n</ul>\n</li>\n<li><p><strong>打开&#x2F;关闭防火墙：</strong></p>\n<ul>\n<li>打开：<code>sudo firewall-cmd --state</code></li>\n<li>关闭：<code>sudo systemctl stop firewalld</code></li>\n</ul>\n</li>\n<li><p><strong>添加&#x2F;移除服务：</strong></p>\n<ul>\n<li>添加：<code>sudo firewall-cmd --add-service=service_name</code></li>\n<li>移除：<code>sudo firewall-cmd --remove-service=service_name</code></li>\n</ul>\n</li>\n<li><p><strong>添加&#x2F;移除端口：</strong></p>\n<ul>\n<li>添加：<code>sudo firewall-cmd --add-port=port_number/tcp</code></li>\n<li>移除：<code>sudo firewall-cmd --remove-port=port_number/tcp</code></li>\n</ul>\n</li>\n<li><p><strong>指定接口的区域：</strong></p>\n<ul>\n<li><code>sudo firewall-cmd --zone=public --change-interface=eth0</code></li>\n</ul>\n</li>\n<li><p><strong>允许&#x2F;拒绝&#x2F;移除IP地址：</strong></p>\n<ul>\n<li>允许：<code>sudo firewall-cmd --add-source=ip_address</code></li>\n<li>拒绝：<code>sudo firewall-cmd --add-rich-rule=&#39;rule family=&quot;ipv4&quot; source address=&quot;ip_address&quot; reject&#39;</code></li>\n<li>移除：<code>sudo firewall-cmd --remove-source=ip_address</code></li>\n</ul>\n</li>\n<li><p><strong>设置默认区域：</strong></p>\n<ul>\n<li><code>sudo firewall-cmd --set-default-zone=public</code></li>\n</ul>\n</li>\n</ol>"},{"title":"gdb调试C语言","date":"2023-04-22T22:17:15.000Z","declare":true,"_content":"- 编译 `gcc -std=c11 -g test.cpp -o test` `-g` 选项是为了生成调试信息。\n- `./test` 运行程序\n- `gdb test` 进入调试模式 <--!more-->\n\n| 命令 | 描述 |\n| :---: | :--- |\n| `(r)un` | 运行程序 |\n| `(b)reak` | 设置断点 |\n| `disable b` | 禁用断点 |\n| `enable` | 启用断点 |\n| `(n)ext` | 执行下一行代码 |\n| `nexti` | 执行下一行汇编代码 |\n| `step` | 执行下一条指令，进入函数 |\n| `(l)ist` | 显示代码 |\n| `(p)rint x` | 显示变量的值 |\n| `(q)uit` | 退出GDB |\n| `clear` | 清除所有断点 |\n| `continue` | 继续正常执行 |\n| `info b` | 查看断点信息 |\n| `watch(expr)` | 监视变量expr的变化 |\n| `ref` | 刷新屏幕 |\n| `info registers` | 查看寄存器信息 |\n\n```gdb\n(gdb) p &a\n$2 = (int *) 0x7fffffffe17c\n\n(gdb) x/4xw 0x7fffffffe17c\n0x7fffffffe17c:\t0x00000001\t0x55555310\t0x00005555\t0xf7af809b\n\n(gdb) x/10xw &a\n\n(gdb) x/4i 0x7fffffffe17c\n   0x7fffffffe17c:\tadd    %eax,(%rax)\n   0x7fffffffe17e:\tadd    %al,(%rax)\n   0x7fffffffe180:\tadc    %dl,0x55(%rbx)\n   0x7fffffffe183:\tpush   %rbp\n(gdb) disas\n```\n\n`lay next` 会显示一些代码以一种比较好的视图\n","source":"_posts/gdb调试C语言.md","raw":"---\ntitle: gdb调试C语言\ndate: 2023-04-22 22:17:15\ntags:\n    - gdb\n    - C/C++\ndeclare: true\n---\n- 编译 `gcc -std=c11 -g test.cpp -o test` `-g` 选项是为了生成调试信息。\n- `./test` 运行程序\n- `gdb test` 进入调试模式 <--!more-->\n\n| 命令 | 描述 |\n| :---: | :--- |\n| `(r)un` | 运行程序 |\n| `(b)reak` | 设置断点 |\n| `disable b` | 禁用断点 |\n| `enable` | 启用断点 |\n| `(n)ext` | 执行下一行代码 |\n| `nexti` | 执行下一行汇编代码 |\n| `step` | 执行下一条指令，进入函数 |\n| `(l)ist` | 显示代码 |\n| `(p)rint x` | 显示变量的值 |\n| `(q)uit` | 退出GDB |\n| `clear` | 清除所有断点 |\n| `continue` | 继续正常执行 |\n| `info b` | 查看断点信息 |\n| `watch(expr)` | 监视变量expr的变化 |\n| `ref` | 刷新屏幕 |\n| `info registers` | 查看寄存器信息 |\n\n```gdb\n(gdb) p &a\n$2 = (int *) 0x7fffffffe17c\n\n(gdb) x/4xw 0x7fffffffe17c\n0x7fffffffe17c:\t0x00000001\t0x55555310\t0x00005555\t0xf7af809b\n\n(gdb) x/10xw &a\n\n(gdb) x/4i 0x7fffffffe17c\n   0x7fffffffe17c:\tadd    %eax,(%rax)\n   0x7fffffffe17e:\tadd    %al,(%rax)\n   0x7fffffffe180:\tadc    %dl,0x55(%rbx)\n   0x7fffffffe183:\tpush   %rbp\n(gdb) disas\n```\n\n`lay next` 会显示一些代码以一种比较好的视图\n","slug":"gdb调试C语言","published":1,"updated":"2024-04-25T17:26:47.053Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvjbaqie002n0vn1clfc75zt","content":"<ul>\n<li>编译 <code>gcc -std=c11 -g test.cpp -o test</code> <code>-g</code> 选项是为了生成调试信息。</li>\n<li><code>./test</code> 运行程序</li>\n<li><code>gdb test</code> 进入调试模式 &lt;–!more–&gt;</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\">命令</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\"><code>(r)un</code></td>\n<td align=\"left\">运行程序</td>\n</tr>\n<tr>\n<td align=\"center\"><code>(b)reak</code></td>\n<td align=\"left\">设置断点</td>\n</tr>\n<tr>\n<td align=\"center\"><code>disable b</code></td>\n<td align=\"left\">禁用断点</td>\n</tr>\n<tr>\n<td align=\"center\"><code>enable</code></td>\n<td align=\"left\">启用断点</td>\n</tr>\n<tr>\n<td align=\"center\"><code>(n)ext</code></td>\n<td align=\"left\">执行下一行代码</td>\n</tr>\n<tr>\n<td align=\"center\"><code>nexti</code></td>\n<td align=\"left\">执行下一行汇编代码</td>\n</tr>\n<tr>\n<td align=\"center\"><code>step</code></td>\n<td align=\"left\">执行下一条指令，进入函数</td>\n</tr>\n<tr>\n<td align=\"center\"><code>(l)ist</code></td>\n<td align=\"left\">显示代码</td>\n</tr>\n<tr>\n<td align=\"center\"><code>(p)rint x</code></td>\n<td align=\"left\">显示变量的值</td>\n</tr>\n<tr>\n<td align=\"center\"><code>(q)uit</code></td>\n<td align=\"left\">退出GDB</td>\n</tr>\n<tr>\n<td align=\"center\"><code>clear</code></td>\n<td align=\"left\">清除所有断点</td>\n</tr>\n<tr>\n<td align=\"center\"><code>continue</code></td>\n<td align=\"left\">继续正常执行</td>\n</tr>\n<tr>\n<td align=\"center\"><code>info b</code></td>\n<td align=\"left\">查看断点信息</td>\n</tr>\n<tr>\n<td align=\"center\"><code>watch(expr)</code></td>\n<td align=\"left\">监视变量expr的变化</td>\n</tr>\n<tr>\n<td align=\"center\"><code>ref</code></td>\n<td align=\"left\">刷新屏幕</td>\n</tr>\n<tr>\n<td align=\"center\"><code>info registers</code></td>\n<td align=\"left\">查看寄存器信息</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(gdb) p &amp;a</span><br><span class=\"line\">$2 = (int *) 0x7fffffffe17c</span><br><span class=\"line\"></span><br><span class=\"line\">(gdb) x/4xw 0x7fffffffe17c</span><br><span class=\"line\">0x7fffffffe17c:\t0x00000001\t0x55555310\t0x00005555\t0xf7af809b</span><br><span class=\"line\"></span><br><span class=\"line\">(gdb) x/10xw &amp;a</span><br><span class=\"line\"></span><br><span class=\"line\">(gdb) x/4i 0x7fffffffe17c</span><br><span class=\"line\">   0x7fffffffe17c:\tadd    %eax,(%rax)</span><br><span class=\"line\">   0x7fffffffe17e:\tadd    %al,(%rax)</span><br><span class=\"line\">   0x7fffffffe180:\tadc    %dl,0x55(%rbx)</span><br><span class=\"line\">   0x7fffffffe183:\tpush   %rbp</span><br><span class=\"line\">(gdb) disas</span><br></pre></td></tr></table></figure>\n\n<p><code>lay next</code> 会显示一些代码以一种比较好的视图</p>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>编译 <code>gcc -std=c11 -g test.cpp -o test</code> <code>-g</code> 选项是为了生成调试信息。</li>\n<li><code>./test</code> 运行程序</li>\n<li><code>gdb test</code> 进入调试模式 &lt;–!more–&gt;</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\">命令</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\"><code>(r)un</code></td>\n<td align=\"left\">运行程序</td>\n</tr>\n<tr>\n<td align=\"center\"><code>(b)reak</code></td>\n<td align=\"left\">设置断点</td>\n</tr>\n<tr>\n<td align=\"center\"><code>disable b</code></td>\n<td align=\"left\">禁用断点</td>\n</tr>\n<tr>\n<td align=\"center\"><code>enable</code></td>\n<td align=\"left\">启用断点</td>\n</tr>\n<tr>\n<td align=\"center\"><code>(n)ext</code></td>\n<td align=\"left\">执行下一行代码</td>\n</tr>\n<tr>\n<td align=\"center\"><code>nexti</code></td>\n<td align=\"left\">执行下一行汇编代码</td>\n</tr>\n<tr>\n<td align=\"center\"><code>step</code></td>\n<td align=\"left\">执行下一条指令，进入函数</td>\n</tr>\n<tr>\n<td align=\"center\"><code>(l)ist</code></td>\n<td align=\"left\">显示代码</td>\n</tr>\n<tr>\n<td align=\"center\"><code>(p)rint x</code></td>\n<td align=\"left\">显示变量的值</td>\n</tr>\n<tr>\n<td align=\"center\"><code>(q)uit</code></td>\n<td align=\"left\">退出GDB</td>\n</tr>\n<tr>\n<td align=\"center\"><code>clear</code></td>\n<td align=\"left\">清除所有断点</td>\n</tr>\n<tr>\n<td align=\"center\"><code>continue</code></td>\n<td align=\"left\">继续正常执行</td>\n</tr>\n<tr>\n<td align=\"center\"><code>info b</code></td>\n<td align=\"left\">查看断点信息</td>\n</tr>\n<tr>\n<td align=\"center\"><code>watch(expr)</code></td>\n<td align=\"left\">监视变量expr的变化</td>\n</tr>\n<tr>\n<td align=\"center\"><code>ref</code></td>\n<td align=\"left\">刷新屏幕</td>\n</tr>\n<tr>\n<td align=\"center\"><code>info registers</code></td>\n<td align=\"left\">查看寄存器信息</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(gdb) p &amp;a</span><br><span class=\"line\">$2 = (int *) 0x7fffffffe17c</span><br><span class=\"line\"></span><br><span class=\"line\">(gdb) x/4xw 0x7fffffffe17c</span><br><span class=\"line\">0x7fffffffe17c:\t0x00000001\t0x55555310\t0x00005555\t0xf7af809b</span><br><span class=\"line\"></span><br><span class=\"line\">(gdb) x/10xw &amp;a</span><br><span class=\"line\"></span><br><span class=\"line\">(gdb) x/4i 0x7fffffffe17c</span><br><span class=\"line\">   0x7fffffffe17c:\tadd    %eax,(%rax)</span><br><span class=\"line\">   0x7fffffffe17e:\tadd    %al,(%rax)</span><br><span class=\"line\">   0x7fffffffe180:\tadc    %dl,0x55(%rbx)</span><br><span class=\"line\">   0x7fffffffe183:\tpush   %rbp</span><br><span class=\"line\">(gdb) disas</span><br></pre></td></tr></table></figure>\n\n<p><code>lay next</code> 会显示一些代码以一种比较好的视图</p>\n"},{"title":"Hello World","date":"2021-04-01T20:51:39.000Z","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).<!--more-->\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ndate: 2021-04-01 20:51:39\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).<!--more-->\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"updated":"2024-04-25T17:26:47.533Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvjbaqif002p0vn1cczb05pf","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.<span id=\"more\"></span></p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>","more":"<p></p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>"},{"title":"hexo d报错问题","date":"2023-04-23T19:51:52.000Z","declare":true,"_content":"`hexo d` 和 `ssh -T git@github.com`报错\n```shell\nkex_exchange_identification: Connection closed by remote host Connection closed by 20.205.243.166 port 22\n```\n<!--more-->\n原因，代理冲突，22端口冲突。\n解决方案：\n```shell\nvim ~/.ssh/config\n# 添加如下内容\nHostName ssh.github.com\nPort 443\n\n# 或者添加如下内容\nHost github.com\nHostName ssh.github.com\nUser git\nPort 443\n```\n------------------------------------------------\n> 方式一是为了直接连接到 GitHub 的 SSH 服务器（ssh.github.com）而使用的。**它将覆盖默认的 SSH 配置**，并指定了 GitHub 的主机名和端口号。这种方式可以通过简单地运行 ssh git@github.com 来连接到 GitHub。\n\n> 方式二使用了 SSH 的别名（Alias）功能，它定义了一个名为 github.com 的主机别名，实际连接的是 ssh.github.com。这样做的好处是可以通过运行 ssh github.com 来连接到 GitHub，而不需要指定完整的主机名和用户。它还指定了连接时使用的用户名为 git（应该改成自己的用户名），并将端口号设置为 443。\n\n- 总结：\n方式一是直接修改默认的 SSH 配置，可以快速连接到 GitHub，但在连接其他 SSH 主机时可能需要手动指定其他参数。\n方式二通过别名的方式，提供了一个更简洁的连接方式，并且可以与其他 SSH 主机的配置相分离，使得管理更加灵活。\n> 推荐使用方式二\n\n-----------------------------------------------\n- 使用https访问\n\n参考\n['ssh -vT git@github.com' results in error \"kex_exchange_identification: Connection closed by remote host\"](https://stackoverflow.com/questions/59692874/ssh-vt-gitgithub-com-results-in-error-kex-exchange-identification-connecti)\n\n[Github SSH 协议拉取代码报错 Connection closed by *.*.*.* port 22](https://blog.csdn.net/Eric_q8666/article/details/127179501)\n\n[Github ssh的连接问题](https://segmentfault.com/a/1190000041889603)","source":"_posts/hexo-d报错问题.md","raw":"---\ntitle: hexo d报错问题\ndate: 2023-04-23 19:51:52\ntags:\n    - hexo\n    - ssh\ndeclare: true\n---\n`hexo d` 和 `ssh -T git@github.com`报错\n```shell\nkex_exchange_identification: Connection closed by remote host Connection closed by 20.205.243.166 port 22\n```\n<!--more-->\n原因，代理冲突，22端口冲突。\n解决方案：\n```shell\nvim ~/.ssh/config\n# 添加如下内容\nHostName ssh.github.com\nPort 443\n\n# 或者添加如下内容\nHost github.com\nHostName ssh.github.com\nUser git\nPort 443\n```\n------------------------------------------------\n> 方式一是为了直接连接到 GitHub 的 SSH 服务器（ssh.github.com）而使用的。**它将覆盖默认的 SSH 配置**，并指定了 GitHub 的主机名和端口号。这种方式可以通过简单地运行 ssh git@github.com 来连接到 GitHub。\n\n> 方式二使用了 SSH 的别名（Alias）功能，它定义了一个名为 github.com 的主机别名，实际连接的是 ssh.github.com。这样做的好处是可以通过运行 ssh github.com 来连接到 GitHub，而不需要指定完整的主机名和用户。它还指定了连接时使用的用户名为 git（应该改成自己的用户名），并将端口号设置为 443。\n\n- 总结：\n方式一是直接修改默认的 SSH 配置，可以快速连接到 GitHub，但在连接其他 SSH 主机时可能需要手动指定其他参数。\n方式二通过别名的方式，提供了一个更简洁的连接方式，并且可以与其他 SSH 主机的配置相分离，使得管理更加灵活。\n> 推荐使用方式二\n\n-----------------------------------------------\n- 使用https访问\n\n参考\n['ssh -vT git@github.com' results in error \"kex_exchange_identification: Connection closed by remote host\"](https://stackoverflow.com/questions/59692874/ssh-vt-gitgithub-com-results-in-error-kex-exchange-identification-connecti)\n\n[Github SSH 协议拉取代码报错 Connection closed by *.*.*.* port 22](https://blog.csdn.net/Eric_q8666/article/details/127179501)\n\n[Github ssh的连接问题](https://segmentfault.com/a/1190000041889603)","slug":"hexo-d报错问题","published":1,"updated":"2024-04-25T17:26:47.523Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvjbaqig002r0vn171u2gryb","content":"<h2 id=\"hexo-d-和-ssh-T-git-github-com报错原因，代理冲突，22端口冲突。解决方案：\"><a href=\"#hexo-d-和-ssh-T-git-github-com报错原因，代理冲突，22端口冲突。解决方案：\" class=\"headerlink\" title=\"hexo d 和 ssh -T git@github.com报错原因，代理冲突，22端口冲突。解决方案：\"></a><code>hexo d</code> 和 <code>ssh -T git@github.com</code>报错<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kex_exchange_identification: Connection closed by remote host Connection closed by 20.205.243.166 port 22</span><br></pre></td></tr></table></figure><br><span id=\"more\"></span><br>原因，代理冲突，22端口冲突。<br>解决方案：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim ~/.ssh/config</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">添加如下内容</span></span><br><span class=\"line\">HostName ssh.github.com</span><br><span class=\"line\">Port 443</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">或者添加如下内容</span></span><br><span class=\"line\">Host github.com</span><br><span class=\"line\">HostName ssh.github.com</span><br><span class=\"line\">User git</span><br><span class=\"line\">Port 443</span><br></pre></td></tr></table></figure></h2><blockquote>\n<p>方式一是为了直接连接到 GitHub 的 SSH 服务器（ssh.github.com）而使用的。<strong>它将覆盖默认的 SSH 配置</strong>，并指定了 GitHub 的主机名和端口号。这种方式可以通过简单地运行 ssh <a href=\"mailto:&#x67;&#105;&#116;&#64;&#x67;&#x69;&#116;&#104;&#117;&#98;&#46;&#99;&#111;&#109;\">&#x67;&#105;&#116;&#64;&#x67;&#x69;&#116;&#104;&#117;&#98;&#46;&#99;&#111;&#109;</a> 来连接到 GitHub。</p>\n</blockquote>\n<blockquote>\n<p>方式二使用了 SSH 的别名（Alias）功能，它定义了一个名为 github.com 的主机别名，实际连接的是 ssh.github.com。这样做的好处是可以通过运行 ssh github.com 来连接到 GitHub，而不需要指定完整的主机名和用户。它还指定了连接时使用的用户名为 git（应该改成自己的用户名），并将端口号设置为 443。</p>\n</blockquote>\n<ul>\n<li>总结：<br>方式一是直接修改默认的 SSH 配置，可以快速连接到 GitHub，但在连接其他 SSH 主机时可能需要手动指定其他参数。<br>方式二通过别名的方式，提供了一个更简洁的连接方式，并且可以与其他 SSH 主机的配置相分离，使得管理更加灵活。<blockquote>\n<p>推荐使用方式二</p>\n</blockquote>\n</li>\n</ul>\n<hr>\n<ul>\n<li>使用https访问</li>\n</ul>\n<p>参考<br><a href=\"https://stackoverflow.com/questions/59692874/ssh-vt-gitgithub-com-results-in-error-kex-exchange-identification-connecti\">‘ssh -vT git@github.com' results in error \"kex_exchange_identification: Connection closed by remote host”</a></p>\n<p><a href=\"https://blog.csdn.net/Eric_q8666/article/details/127179501\">Github SSH 协议拉取代码报错 Connection closed by <em>.</em>.<em>.</em> port 22</a></p>\n<p><a href=\"https://segmentfault.com/a/1190000041889603\">Github ssh的连接问题</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"hexo-d-和-ssh-T-git-github-com报错原因，代理冲突，22端口冲突。解决方案：\"><a href=\"#hexo-d-和-ssh-T-git-github-com报错原因，代理冲突，22端口冲突。解决方案：\" class=\"headerlink\" title=\"hexo d 和 ssh -T git@github.com报错原因，代理冲突，22端口冲突。解决方案：\"></a><code>hexo d</code> 和 <code>ssh -T git@github.com</code>报错<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kex_exchange_identification: Connection closed by remote host Connection closed by 20.205.243.166 port 22</span><br></pre></td></tr></table></figure><br></h2>","more":"<br>原因，代理冲突，22端口冲突。<br>解决方案：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim ~/.ssh/config</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">添加如下内容</span></span><br><span class=\"line\">HostName ssh.github.com</span><br><span class=\"line\">Port 443</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">或者添加如下内容</span></span><br><span class=\"line\">Host github.com</span><br><span class=\"line\">HostName ssh.github.com</span><br><span class=\"line\">User git</span><br><span class=\"line\">Port 443</span><br></pre></td></tr></table></figure><blockquote>\n<p>方式一是为了直接连接到 GitHub 的 SSH 服务器（ssh.github.com）而使用的。<strong>它将覆盖默认的 SSH 配置</strong>，并指定了 GitHub 的主机名和端口号。这种方式可以通过简单地运行 ssh <a href=\"mailto:&#x67;&#105;&#116;&#64;&#x67;&#x69;&#116;&#104;&#117;&#98;&#46;&#99;&#111;&#109;\">&#x67;&#105;&#116;&#64;&#x67;&#x69;&#116;&#104;&#117;&#98;&#46;&#99;&#111;&#109;</a> 来连接到 GitHub。</p>\n</blockquote>\n<blockquote>\n<p>方式二使用了 SSH 的别名（Alias）功能，它定义了一个名为 github.com 的主机别名，实际连接的是 ssh.github.com。这样做的好处是可以通过运行 ssh github.com 来连接到 GitHub，而不需要指定完整的主机名和用户。它还指定了连接时使用的用户名为 git（应该改成自己的用户名），并将端口号设置为 443。</p>\n</blockquote>\n<ul>\n<li>总结：<br>方式一是直接修改默认的 SSH 配置，可以快速连接到 GitHub，但在连接其他 SSH 主机时可能需要手动指定其他参数。<br>方式二通过别名的方式，提供了一个更简洁的连接方式，并且可以与其他 SSH 主机的配置相分离，使得管理更加灵活。<blockquote>\n<p>推荐使用方式二</p>\n</blockquote>\n</li>\n</ul>\n<hr>\n<ul>\n<li>使用https访问</li>\n</ul>\n<p>参考<br><a href=\"https://stackoverflow.com/questions/59692874/ssh-vt-gitgithub-com-results-in-error-kex-exchange-identification-connecti\">‘ssh -vT git@github.com' results in error \"kex_exchange_identification: Connection closed by remote host”</a></p>\n<p><a href=\"https://blog.csdn.net/Eric_q8666/article/details/127179501\">Github SSH 协议拉取代码报错 Connection closed by <em>.</em>.<em>.</em> port 22</a></p>\n<p><a href=\"https://segmentfault.com/a/1190000041889603\">Github ssh的连接问题</a></p>"},{"title":"hexo g 报错 expected variable end","date":"2023-11-27T22:53:40.000Z","declare":true,"_content":"- [Troubleshooting](https://hexo.io/docs/troubleshooting.html)<!--more-->\n\nHexo uses **Nunjucks** to render posts (**Swig** was used in the older version, which shares a similar syntax). Content wrapped with `{{ }}` or `{% %}` will get parsed and may cause problems. You can skip the parsing by wrapping it with the raw tag plugin, a single backtick `{{ }}` or a triple backtick.\nfor example:\n\n```\n{% raw %}\nHello {{ world }}\n{% endraw %}\n```","source":"_posts/hexo-g-报错-expected-variable-end.md","raw":"---\ntitle: hexo g 报错 expected variable end\ndate: 2023-11-27 22:53:40\ntags:\n    - hexo\ndeclare: true\n---\n- [Troubleshooting](https://hexo.io/docs/troubleshooting.html)<!--more-->\n\nHexo uses **Nunjucks** to render posts (**Swig** was used in the older version, which shares a similar syntax). Content wrapped with `{{ }}` or `{% %}` will get parsed and may cause problems. You can skip the parsing by wrapping it with the raw tag plugin, a single backtick `{{ }}` or a triple backtick.\nfor example:\n\n```\n{% raw %}\nHello {{ world }}\n{% endraw %}\n```","slug":"hexo-g-报错-expected-variable-end","published":1,"updated":"2024-04-25T17:26:45.943Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvjbaqih002t0vn11nz35w0d","content":"<ul>\n<li><a href=\"https://hexo.io/docs/troubleshooting.html\">Troubleshooting</a><span id=\"more\"></span></li>\n</ul>\n<p>Hexo uses <strong>Nunjucks</strong> to render posts (<strong>Swig</strong> was used in the older version, which shares a similar syntax). Content wrapped with <code>&#123;&#123; &#125;&#125;</code> or <code>&#123;% %&#125;</code> will get parsed and may cause problems. You can skip the parsing by wrapping it with the raw tag plugin, a single backtick <code>&#123;&#123; &#125;&#125;</code> or a triple backtick.<br>for example:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% raw %&#125;</span><br><span class=\"line\">Hello &#123;&#123; world &#125;&#125;</span><br><span class=\"line\">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<ul>\n<li><a href=\"https://hexo.io/docs/troubleshooting.html\">Troubleshooting</a></li></ul>","more":"\n\n<p>Hexo uses <strong>Nunjucks</strong> to render posts (<strong>Swig</strong> was used in the older version, which shares a similar syntax). Content wrapped with <code>&#123;&#123; &#125;&#125;</code> or <code>&#123;% %&#125;</code> will get parsed and may cause problems. You can skip the parsing by wrapping it with the raw tag plugin, a single backtick <code>&#123;&#123; &#125;&#125;</code> or a triple backtick.<br>for example:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% raw %&#125;</span><br><span class=\"line\">Hello &#123;&#123; world &#125;&#125;</span><br><span class=\"line\">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>"},{"title":"iKuai(爱快)软路由","date":"2023-10-31T21:40:30.000Z","_content":"\n使用 iKuai 进行网络管理要方便很多，也更加简洁优雅。其中的虚拟机功能和 Docker 功能，可以在软路由上运行更多的服务，比如：NAS、下载机、媒体服务器等等。<!--more-->\n\niKuai 还拥有自己的穿透方式，并适合 iKuai + lede(openwrt) 这种方案，其中 lede 装在虚拟机中。\n\n> 但 iKuai 有一个致命的缺陷，lan-wan 端口复用没那么方便。\n\n二者必须满足其一，才可使用：\n- 交换机有web管理界面\n- 多网口台式机（例如工控机）","source":"_posts/iKuai-爱快-软路由.md","raw":"---\ntitle: iKuai(爱快)软路由\ndate: 2023-10-31 21:40:30\ntags:\n    - 路由器\n---\n\n使用 iKuai 进行网络管理要方便很多，也更加简洁优雅。其中的虚拟机功能和 Docker 功能，可以在软路由上运行更多的服务，比如：NAS、下载机、媒体服务器等等。<!--more-->\n\niKuai 还拥有自己的穿透方式，并适合 iKuai + lede(openwrt) 这种方案，其中 lede 装在虚拟机中。\n\n> 但 iKuai 有一个致命的缺陷，lan-wan 端口复用没那么方便。\n\n二者必须满足其一，才可使用：\n- 交换机有web管理界面\n- 多网口台式机（例如工控机）","slug":"iKuai-爱快-软路由","published":1,"updated":"2024-04-25T17:26:45.703Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvjbaqii002w0vn12w4n19ol","content":"<p>使用 iKuai 进行网络管理要方便很多，也更加简洁优雅。其中的虚拟机功能和 Docker 功能，可以在软路由上运行更多的服务，比如：NAS、下载机、媒体服务器等等。<span id=\"more\"></span></p>\n<p>iKuai 还拥有自己的穿透方式，并适合 iKuai + lede(openwrt) 这种方案，其中 lede 装在虚拟机中。</p>\n<blockquote>\n<p>但 iKuai 有一个致命的缺陷，lan-wan 端口复用没那么方便。</p>\n</blockquote>\n<p>二者必须满足其一，才可使用：</p>\n<ul>\n<li>交换机有web管理界面</li>\n<li>多网口台式机（例如工控机）</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>使用 iKuai 进行网络管理要方便很多，也更加简洁优雅。其中的虚拟机功能和 Docker 功能，可以在软路由上运行更多的服务，比如：NAS、下载机、媒体服务器等等。</p>","more":"<p></p>\n<p>iKuai 还拥有自己的穿透方式，并适合 iKuai + lede(openwrt) 这种方案，其中 lede 装在虚拟机中。</p>\n<blockquote>\n<p>但 iKuai 有一个致命的缺陷，lan-wan 端口复用没那么方便。</p>\n</blockquote>\n<p>二者必须满足其一，才可使用：</p>\n<ul>\n<li>交换机有web管理界面</li>\n<li>多网口台式机（例如工控机）</li>\n</ul>"},{"title":"if __name__ == '__main__'","date":"2023-07-14T20:15:28.000Z","declare":true,"_content":"在Python中，`if __name__ == \"__main__\"`的作用是判断当前模块是否作为主程序直接运行，而不是作为被导入的模块。<!--more-->\n\n当一个Python文件被直接执行时，Python解释器会将该文件的`__name__`属性设置为`\"__main__\"`。而当一个Python文件被作为模块导入时，`__name__`属性会被设置为该模块的名称。\n\n因此，通过使用`if __name__ == \"__main__\"`条件语句，我们可以将一些代码块限定为仅在该文件作为主程序运行时才执行，而在被导入时不执行。这样可以实现一些特定的逻辑，例如在模块被导入时只定义函数和类，而在作为主程序运行时执行一些测试或执行主要逻辑。\n\n下面是一个示例代码，演示了`if __name__ == \"__main__\"`的使用：\n\n```python\n# 模块代码\n\ndef foo():\n    print(\"函数 foo() 被调用\")\n\nclass MyClass:\n    def __init__(self, name):\n        self.name = name\n\n    def greet(self):\n        print(f\"Hello, {self.name}!\")\n\nif __name__ == \"__main__\":\n    # 仅在作为主程序运行时执行的代码\n    print(\"这是主程序\")\n    foo()\n    obj = MyClass(\"Alice\")\n    obj.greet()\n```\n\n当该模块作为主程序运行时，输出为：\n\n```\n这是主程序\n函数 foo() 被调用\nHello, Alice!\n```\n\n但如果该模块被其他模块导入时，`if __name__ == \"__main__\"`之后的代码块不会执行。这可以避免一些不必要的代码执行，同时保持模块的可导入性和可重用性。\n\n综上所述，`if __name__ == \"__main__\"`的作用是提供一个保护块，使得部分代码仅在模块作为主程序运行时执行，而在被导入时不执行。这样可以增强模块的灵活性和可维护性。","source":"_posts/if-name-main.md","raw":"---\ntitle: if __name__ == '__main__'\ndate: 2023-07-14 20:15:28\ntags:\n    - Python\ndeclare: true\n---\n在Python中，`if __name__ == \"__main__\"`的作用是判断当前模块是否作为主程序直接运行，而不是作为被导入的模块。<!--more-->\n\n当一个Python文件被直接执行时，Python解释器会将该文件的`__name__`属性设置为`\"__main__\"`。而当一个Python文件被作为模块导入时，`__name__`属性会被设置为该模块的名称。\n\n因此，通过使用`if __name__ == \"__main__\"`条件语句，我们可以将一些代码块限定为仅在该文件作为主程序运行时才执行，而在被导入时不执行。这样可以实现一些特定的逻辑，例如在模块被导入时只定义函数和类，而在作为主程序运行时执行一些测试或执行主要逻辑。\n\n下面是一个示例代码，演示了`if __name__ == \"__main__\"`的使用：\n\n```python\n# 模块代码\n\ndef foo():\n    print(\"函数 foo() 被调用\")\n\nclass MyClass:\n    def __init__(self, name):\n        self.name = name\n\n    def greet(self):\n        print(f\"Hello, {self.name}!\")\n\nif __name__ == \"__main__\":\n    # 仅在作为主程序运行时执行的代码\n    print(\"这是主程序\")\n    foo()\n    obj = MyClass(\"Alice\")\n    obj.greet()\n```\n\n当该模块作为主程序运行时，输出为：\n\n```\n这是主程序\n函数 foo() 被调用\nHello, Alice!\n```\n\n但如果该模块被其他模块导入时，`if __name__ == \"__main__\"`之后的代码块不会执行。这可以避免一些不必要的代码执行，同时保持模块的可导入性和可重用性。\n\n综上所述，`if __name__ == \"__main__\"`的作用是提供一个保护块，使得部分代码仅在模块作为主程序运行时执行，而在被导入时不执行。这样可以增强模块的灵活性和可维护性。","slug":"if-name-main","published":1,"updated":"2024-04-25T17:26:45.813Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvjbaqij002x0vn1hhl5dp21","content":"<p>在Python中，<code>if __name__ == &quot;__main__&quot;</code>的作用是判断当前模块是否作为主程序直接运行，而不是作为被导入的模块。<span id=\"more\"></span></p>\n<p>当一个Python文件被直接执行时，Python解释器会将该文件的<code>__name__</code>属性设置为<code>&quot;__main__&quot;</code>。而当一个Python文件被作为模块导入时，<code>__name__</code>属性会被设置为该模块的名称。</p>\n<p>因此，通过使用<code>if __name__ == &quot;__main__&quot;</code>条件语句，我们可以将一些代码块限定为仅在该文件作为主程序运行时才执行，而在被导入时不执行。这样可以实现一些特定的逻辑，例如在模块被导入时只定义函数和类，而在作为主程序运行时执行一些测试或执行主要逻辑。</p>\n<p>下面是一个示例代码，演示了<code>if __name__ == &quot;__main__&quot;</code>的使用：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 模块代码</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">foo</span>():</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;函数 foo() 被调用&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyClass</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, name</span>):</span><br><span class=\"line\">        self.name = name</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">greet</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;Hello, <span class=\"subst\">&#123;self.name&#125;</span>!&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    <span class=\"comment\"># 仅在作为主程序运行时执行的代码</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;这是主程序&quot;</span>)</span><br><span class=\"line\">    foo()</span><br><span class=\"line\">    obj = MyClass(<span class=\"string\">&quot;Alice&quot;</span>)</span><br><span class=\"line\">    obj.greet()</span><br></pre></td></tr></table></figure>\n\n<p>当该模块作为主程序运行时，输出为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这是主程序</span><br><span class=\"line\">函数 foo() 被调用</span><br><span class=\"line\">Hello, Alice!</span><br></pre></td></tr></table></figure>\n\n<p>但如果该模块被其他模块导入时，<code>if __name__ == &quot;__main__&quot;</code>之后的代码块不会执行。这可以避免一些不必要的代码执行，同时保持模块的可导入性和可重用性。</p>\n<p>综上所述，<code>if __name__ == &quot;__main__&quot;</code>的作用是提供一个保护块，使得部分代码仅在模块作为主程序运行时执行，而在被导入时不执行。这样可以增强模块的灵活性和可维护性。</p>\n","site":{"data":{}},"excerpt":"<p>在Python中，<code>if __name__ == &quot;__main__&quot;</code>的作用是判断当前模块是否作为主程序直接运行，而不是作为被导入的模块。</p>","more":"<p></p>\n<p>当一个Python文件被直接执行时，Python解释器会将该文件的<code>__name__</code>属性设置为<code>&quot;__main__&quot;</code>。而当一个Python文件被作为模块导入时，<code>__name__</code>属性会被设置为该模块的名称。</p>\n<p>因此，通过使用<code>if __name__ == &quot;__main__&quot;</code>条件语句，我们可以将一些代码块限定为仅在该文件作为主程序运行时才执行，而在被导入时不执行。这样可以实现一些特定的逻辑，例如在模块被导入时只定义函数和类，而在作为主程序运行时执行一些测试或执行主要逻辑。</p>\n<p>下面是一个示例代码，演示了<code>if __name__ == &quot;__main__&quot;</code>的使用：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 模块代码</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">foo</span>():</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;函数 foo() 被调用&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyClass</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, name</span>):</span><br><span class=\"line\">        self.name = name</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">greet</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;Hello, <span class=\"subst\">&#123;self.name&#125;</span>!&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    <span class=\"comment\"># 仅在作为主程序运行时执行的代码</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;这是主程序&quot;</span>)</span><br><span class=\"line\">    foo()</span><br><span class=\"line\">    obj = MyClass(<span class=\"string\">&quot;Alice&quot;</span>)</span><br><span class=\"line\">    obj.greet()</span><br></pre></td></tr></table></figure>\n\n<p>当该模块作为主程序运行时，输出为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这是主程序</span><br><span class=\"line\">函数 foo() 被调用</span><br><span class=\"line\">Hello, Alice!</span><br></pre></td></tr></table></figure>\n\n<p>但如果该模块被其他模块导入时，<code>if __name__ == &quot;__main__&quot;</code>之后的代码块不会执行。这可以避免一些不必要的代码执行，同时保持模块的可导入性和可重用性。</p>\n<p>综上所述，<code>if __name__ == &quot;__main__&quot;</code>的作用是提供一个保护块，使得部分代码仅在模块作为主程序运行时执行，而在被导入时不执行。这样可以增强模块的灵活性和可维护性。</p>"},{"title":"learn more study less","date":"2023-04-08T23:02:28.000Z","_content":"1. 每周休息一天\n2. 对于难点90分钟专注专项解决\n3. 早起解决问题，戒除熬夜\n4. 不拖延，周/日目标体系（也就是做计划）\n5. 批处理（类似的工作一起完成）\n6. 费曼学习法\n7. 项目学习法\n8. 适当锻炼\n<!--more-->\n\n----------------------\n费马大定理：我有一个绝妙的证明，但空白处太少了，写不下。","source":"_posts/learn-more-study-less.md","raw":"---\ntitle: learn more study less\ndate: 2023-04-08 23:02:28\ntags:\n    - 其它\n---\n1. 每周休息一天\n2. 对于难点90分钟专注专项解决\n3. 早起解决问题，戒除熬夜\n4. 不拖延，周/日目标体系（也就是做计划）\n5. 批处理（类似的工作一起完成）\n6. 费曼学习法\n7. 项目学习法\n8. 适当锻炼\n<!--more-->\n\n----------------------\n费马大定理：我有一个绝妙的证明，但空白处太少了，写不下。","slug":"learn-more-study-less","published":1,"updated":"2024-04-25T17:26:47.673Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvjbaqik002z0vn1ct0b9dbt","content":"<ol>\n<li>每周休息一天</li>\n<li>对于难点90分钟专注专项解决</li>\n<li>早起解决问题，戒除熬夜</li>\n<li>不拖延，周&#x2F;日目标体系（也就是做计划）</li>\n<li>批处理（类似的工作一起完成）</li>\n<li>费曼学习法</li>\n<li>项目学习法</li>\n<li>适当锻炼<span id=\"more\"></span></li>\n</ol>\n<hr>\n<p>费马大定理：我有一个绝妙的证明，但空白处太少了，写不下。</p>\n","site":{"data":{}},"excerpt":"<ol>\n<li>每周休息一天</li>\n<li>对于难点90分钟专注专项解决</li>\n<li>早起解决问题，戒除熬夜</li>\n<li>不拖延，周&#x2F;日目标体系（也就是做计划）</li>\n<li>批处理（类似的工作一起完成）</li>\n<li>费曼学习法</li>\n<li>项目学习法</li>\n<li>适当锻炼</li></ol>","more":"\n\n<hr>\n<p>费马大定理：我有一个绝妙的证明，但空白处太少了，写不下。</p>"},{"title":"manjaro初始化","date":"2023-05-08T12:51:44.000Z","declare":true,"_content":"1. 更新系统：`sudo pacman -Syu`<!--more-->\n\n> 报错`Failed to prepare transaction`，解决方法：`sudo pamac updata`\n\n2. 安装输入法：`sudo pacman -S fcitx-im fcitx-configtool`\n3. 更改镜像源：\n```shell\nsudo pacman-mirrors -c China -m rank\nsudo pacman -Syyu\n```\n4. 安装软件：\n```shell\nsudo pacman -S vim\nsudo pacman -S yay\nsudo pacman -S debtap\nsudo pacman -S docker\nyay -S google-chrome\nyay  -S  wemeet\n```\n\n-----------------------------------\n添加清华大学的软件源：\n1. 打开/etc/pacman.conf文件，并将以下内容添加到文件末尾：\n```shell\n[archlinuxcn]\nSigLevel = Optional TrustedOnly\n# SigLevel = Never\nServer = https://mirrors.tuna.tsinghua.edu.cn/archlinuxcn/$arch\n```\n\n2. 打开终端，并使用以下命令导入清华大学的公钥：`sudo pacman -Syy && sudo pacman -S archlinuxcn-keyring`\n3. 更新系统的软件包缓存，以获取从清华大学的软件源中提供的软件包信息：`sudo pacman -Syyu`\n\n> 请注意，清华大学的软件源和其他第三方软件源可能包含不受信任的软件包。在使用这些源时，请务必小心谨慎，只从可信的来源安装软件包。\n\n-------------------------------\n[配置bash](https://corner430.github.io/2023/04/03/Configure-oh-my-zsh/#more)\n\n-------------------------------\n# 桌面美化\n[如何将 Linux 美化成 MacOS 风格？](https://youtu.be/fzwnHKdpbWM)\n[Manjaro-Kde美化 最后一次发桌面美化](https://www.bilibili.com/video/BV1pJ411N75i/?share_source=copy_web&vd_source=a7ae9163cb2cd121bfd86ea1f4ecd2ef)\n[[Linux]4分钟完成manjaro系统美化](https://www.bilibili.com/video/BV1yE411J7Z8/?share_source=copy_web&vd_source=a7ae9163cb2cd121bfd86ea1f4ecd2ef)\n[你的Manjaro能有多漂亮和有效率？简单美化教程，deepin又被我干掉了](https://www.bilibili.com/video/BV1Lt41167bp/?share_source=copy_web&vd_source=a7ae9163cb2cd121bfd86ea1f4ecd2ef)\n[漂亮的Linux桌面环境，这才是电脑系统应该有的样子](https://www.bilibili.com/video/BV1vt411E7GP/?share_source=copy_web&vd_source=a7ae9163cb2cd121bfd86ea1f4ecd2ef)\n\n---------------------------------\n# pacman使用\nPacman 是 Arch Linux 中的一个命令行软件包管理器，可以用于安装、更新、卸载软件包，以及管理系统的依赖关系。下面是一些常用的 Pacman 命令：\n- 更新软件包数据库：`sudo pacman -Syy`\n- 安装软件包：`sudo pacman -S package_name`\n- 更新已安装的软件包：`sudo pacman -Syu`\n- 搜索软件包：`pacman -Ss package_name`\n- 显示已安装的软件包：`pacman -Q`\n- 显示已安装软件包的详细信息：`pacman -Qi package_name`\n- 卸载软件包：`sudo pacman -R package_name`\n- 卸载软件包及其依赖项：`sudo pacman -Rs package_name`\n- 清理已下载的软件包：`sudo pacman -Sc`\n- 清理已下载的软件包和旧版本的软件包：`sudo pacman -Scc`\n> 在这些命令中，`sudo` 表示以管理员权限运行命令，`-S` 表示安装软件包，`-Ss` 表示搜索软件包，`-Q` 表示列出已安装的软件包，`-R` 表示卸载软件包，`-Syu` 表示更新已安装的软件包等等。\n\n\n------------------------------------\n# 常用软件安装\n- yay是一个用Go语言写的一个AUR助手，有些时候官方仓库没有你想要的软件，就需要通过yay来安装：`sudo pacman -S yay`\n- [Manjaro-KDE安装配置全攻略 - ayamir的文章 - 知乎](https://zhuanlan.zhihu.com/p/114296129)\n\n----------------------------\n安装向日葵\n```shell\nyay -Sy sunloginclient\nsudo systemctl start runsunloginclient.service\nsudo systemctl enable runsunloginclient.service\n```\n\n----------------------------\ndeb转换为pacman\n```shell\nsudo debtap -u\nsudo debtap -q *.deb\nsudo pacman -U *.pkg.tar.xz\n```\n\n----------------------------\n安装 N 卡驱动\n```shell\nsudo mhwd -a pci nonfree 0300   # 官方的方法，但是不好用\nmhwd-kernel -li​             # 查看内核\n​sudo pacman -S nvidia​​    # 根据上述内核安装驱动\n# 安装 390xx 还是 470xx 还是 510xx 可以去图形化硬件信息，看看现在推荐的是哪个版本\n# 重启 就可以使用 nvidia-smi 查看显卡信息\n```\n[官网方案](https://wiki.manjaro.org/index.php/Configure_Graphics_Cards/zh-cn)\n\n---------------------------------\n安装 wechat 参考 [deepin-wine-wechat-arch](https://github.com/vufa/deepin-wine-wechat-arch)","source":"_posts/manjaro初始化.md","raw":"---\ntitle: manjaro初始化\ndate: 2023-05-08 12:51:44\ntags:\n    - manjaro\n    - Arch\n    - Linux\ndeclare: true\n---\n1. 更新系统：`sudo pacman -Syu`<!--more-->\n\n> 报错`Failed to prepare transaction`，解决方法：`sudo pamac updata`\n\n2. 安装输入法：`sudo pacman -S fcitx-im fcitx-configtool`\n3. 更改镜像源：\n```shell\nsudo pacman-mirrors -c China -m rank\nsudo pacman -Syyu\n```\n4. 安装软件：\n```shell\nsudo pacman -S vim\nsudo pacman -S yay\nsudo pacman -S debtap\nsudo pacman -S docker\nyay -S google-chrome\nyay  -S  wemeet\n```\n\n-----------------------------------\n添加清华大学的软件源：\n1. 打开/etc/pacman.conf文件，并将以下内容添加到文件末尾：\n```shell\n[archlinuxcn]\nSigLevel = Optional TrustedOnly\n# SigLevel = Never\nServer = https://mirrors.tuna.tsinghua.edu.cn/archlinuxcn/$arch\n```\n\n2. 打开终端，并使用以下命令导入清华大学的公钥：`sudo pacman -Syy && sudo pacman -S archlinuxcn-keyring`\n3. 更新系统的软件包缓存，以获取从清华大学的软件源中提供的软件包信息：`sudo pacman -Syyu`\n\n> 请注意，清华大学的软件源和其他第三方软件源可能包含不受信任的软件包。在使用这些源时，请务必小心谨慎，只从可信的来源安装软件包。\n\n-------------------------------\n[配置bash](https://corner430.github.io/2023/04/03/Configure-oh-my-zsh/#more)\n\n-------------------------------\n# 桌面美化\n[如何将 Linux 美化成 MacOS 风格？](https://youtu.be/fzwnHKdpbWM)\n[Manjaro-Kde美化 最后一次发桌面美化](https://www.bilibili.com/video/BV1pJ411N75i/?share_source=copy_web&vd_source=a7ae9163cb2cd121bfd86ea1f4ecd2ef)\n[[Linux]4分钟完成manjaro系统美化](https://www.bilibili.com/video/BV1yE411J7Z8/?share_source=copy_web&vd_source=a7ae9163cb2cd121bfd86ea1f4ecd2ef)\n[你的Manjaro能有多漂亮和有效率？简单美化教程，deepin又被我干掉了](https://www.bilibili.com/video/BV1Lt41167bp/?share_source=copy_web&vd_source=a7ae9163cb2cd121bfd86ea1f4ecd2ef)\n[漂亮的Linux桌面环境，这才是电脑系统应该有的样子](https://www.bilibili.com/video/BV1vt411E7GP/?share_source=copy_web&vd_source=a7ae9163cb2cd121bfd86ea1f4ecd2ef)\n\n---------------------------------\n# pacman使用\nPacman 是 Arch Linux 中的一个命令行软件包管理器，可以用于安装、更新、卸载软件包，以及管理系统的依赖关系。下面是一些常用的 Pacman 命令：\n- 更新软件包数据库：`sudo pacman -Syy`\n- 安装软件包：`sudo pacman -S package_name`\n- 更新已安装的软件包：`sudo pacman -Syu`\n- 搜索软件包：`pacman -Ss package_name`\n- 显示已安装的软件包：`pacman -Q`\n- 显示已安装软件包的详细信息：`pacman -Qi package_name`\n- 卸载软件包：`sudo pacman -R package_name`\n- 卸载软件包及其依赖项：`sudo pacman -Rs package_name`\n- 清理已下载的软件包：`sudo pacman -Sc`\n- 清理已下载的软件包和旧版本的软件包：`sudo pacman -Scc`\n> 在这些命令中，`sudo` 表示以管理员权限运行命令，`-S` 表示安装软件包，`-Ss` 表示搜索软件包，`-Q` 表示列出已安装的软件包，`-R` 表示卸载软件包，`-Syu` 表示更新已安装的软件包等等。\n\n\n------------------------------------\n# 常用软件安装\n- yay是一个用Go语言写的一个AUR助手，有些时候官方仓库没有你想要的软件，就需要通过yay来安装：`sudo pacman -S yay`\n- [Manjaro-KDE安装配置全攻略 - ayamir的文章 - 知乎](https://zhuanlan.zhihu.com/p/114296129)\n\n----------------------------\n安装向日葵\n```shell\nyay -Sy sunloginclient\nsudo systemctl start runsunloginclient.service\nsudo systemctl enable runsunloginclient.service\n```\n\n----------------------------\ndeb转换为pacman\n```shell\nsudo debtap -u\nsudo debtap -q *.deb\nsudo pacman -U *.pkg.tar.xz\n```\n\n----------------------------\n安装 N 卡驱动\n```shell\nsudo mhwd -a pci nonfree 0300   # 官方的方法，但是不好用\nmhwd-kernel -li​             # 查看内核\n​sudo pacman -S nvidia​​    # 根据上述内核安装驱动\n# 安装 390xx 还是 470xx 还是 510xx 可以去图形化硬件信息，看看现在推荐的是哪个版本\n# 重启 就可以使用 nvidia-smi 查看显卡信息\n```\n[官网方案](https://wiki.manjaro.org/index.php/Configure_Graphics_Cards/zh-cn)\n\n---------------------------------\n安装 wechat 参考 [deepin-wine-wechat-arch](https://github.com/vufa/deepin-wine-wechat-arch)","slug":"manjaro初始化","published":1,"updated":"2024-04-25T17:26:50.663Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvjbaqim00320vn12ygz1rpj","content":"<ol>\n<li>更新系统：<code>sudo pacman -Syu</code><span id=\"more\"></span></li>\n</ol>\n<blockquote>\n<p>报错<code>Failed to prepare transaction</code>，解决方法：<code>sudo pamac updata</code></p>\n</blockquote>\n<ol start=\"2\">\n<li>安装输入法：<code>sudo pacman -S fcitx-im fcitx-configtool</code></li>\n<li>更改镜像源：<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pacman-mirrors -c China -m rank</span><br><span class=\"line\">sudo pacman -Syyu</span><br></pre></td></tr></table></figure></li>\n<li>安装软件：<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pacman -S vim</span><br><span class=\"line\">sudo pacman -S yay</span><br><span class=\"line\">sudo pacman -S debtap</span><br><span class=\"line\">sudo pacman -S docker</span><br><span class=\"line\">yay -S google-chrome</span><br><span class=\"line\">yay  -S  wemeet</span><br></pre></td></tr></table></figure></li>\n</ol>\n<hr>\n<p>添加清华大学的软件源：</p>\n<ol>\n<li><p>打开&#x2F;etc&#x2F;pacman.conf文件，并将以下内容添加到文件末尾：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[archlinuxcn]</span><br><span class=\"line\">SigLevel = Optional TrustedOnly</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">SigLevel = Never</span></span><br><span class=\"line\">Server = https://mirrors.tuna.tsinghua.edu.cn/archlinuxcn/$arch</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>打开终端，并使用以下命令导入清华大学的公钥：<code>sudo pacman -Syy &amp;&amp; sudo pacman -S archlinuxcn-keyring</code></p>\n</li>\n<li><p>更新系统的软件包缓存，以获取从清华大学的软件源中提供的软件包信息：<code>sudo pacman -Syyu</code></p>\n</li>\n</ol>\n<blockquote>\n<p>请注意，清华大学的软件源和其他第三方软件源可能包含不受信任的软件包。在使用这些源时，请务必小心谨慎，只从可信的来源安装软件包。</p>\n</blockquote>\n<hr>\n<p><a href=\"https://corner430.github.io/2023/04/03/Configure-oh-my-zsh/#more\">配置bash</a></p>\n<hr>\n<h1 id=\"桌面美化\"><a href=\"#桌面美化\" class=\"headerlink\" title=\"桌面美化\"></a>桌面美化</h1><p><a href=\"https://youtu.be/fzwnHKdpbWM\">如何将 Linux 美化成 MacOS 风格？</a><br><a href=\"https://www.bilibili.com/video/BV1pJ411N75i/?share_source=copy_web&vd_source=a7ae9163cb2cd121bfd86ea1f4ecd2ef\">Manjaro-Kde美化 最后一次发桌面美化</a><br><a href=\"https://www.bilibili.com/video/BV1yE411J7Z8/?share_source=copy_web&vd_source=a7ae9163cb2cd121bfd86ea1f4ecd2ef\">[Linux]4分钟完成manjaro系统美化</a><br><a href=\"https://www.bilibili.com/video/BV1Lt41167bp/?share_source=copy_web&vd_source=a7ae9163cb2cd121bfd86ea1f4ecd2ef\">你的Manjaro能有多漂亮和有效率？简单美化教程，deepin又被我干掉了</a><br><a href=\"https://www.bilibili.com/video/BV1vt411E7GP/?share_source=copy_web&vd_source=a7ae9163cb2cd121bfd86ea1f4ecd2ef\">漂亮的Linux桌面环境，这才是电脑系统应该有的样子</a></p>\n<hr>\n<h1 id=\"pacman使用\"><a href=\"#pacman使用\" class=\"headerlink\" title=\"pacman使用\"></a>pacman使用</h1><p>Pacman 是 Arch Linux 中的一个命令行软件包管理器，可以用于安装、更新、卸载软件包，以及管理系统的依赖关系。下面是一些常用的 Pacman 命令：</p>\n<ul>\n<li>更新软件包数据库：<code>sudo pacman -Syy</code></li>\n<li>安装软件包：<code>sudo pacman -S package_name</code></li>\n<li>更新已安装的软件包：<code>sudo pacman -Syu</code></li>\n<li>搜索软件包：<code>pacman -Ss package_name</code></li>\n<li>显示已安装的软件包：<code>pacman -Q</code></li>\n<li>显示已安装软件包的详细信息：<code>pacman -Qi package_name</code></li>\n<li>卸载软件包：<code>sudo pacman -R package_name</code></li>\n<li>卸载软件包及其依赖项：<code>sudo pacman -Rs package_name</code></li>\n<li>清理已下载的软件包：<code>sudo pacman -Sc</code></li>\n<li>清理已下载的软件包和旧版本的软件包：<code>sudo pacman -Scc</code><blockquote>\n<p>在这些命令中，<code>sudo</code> 表示以管理员权限运行命令，<code>-S</code> 表示安装软件包，<code>-Ss</code> 表示搜索软件包，<code>-Q</code> 表示列出已安装的软件包，<code>-R</code> 表示卸载软件包，<code>-Syu</code> 表示更新已安装的软件包等等。</p>\n</blockquote>\n</li>\n</ul>\n<hr>\n<h1 id=\"常用软件安装\"><a href=\"#常用软件安装\" class=\"headerlink\" title=\"常用软件安装\"></a>常用软件安装</h1><ul>\n<li>yay是一个用Go语言写的一个AUR助手，有些时候官方仓库没有你想要的软件，就需要通过yay来安装：<code>sudo pacman -S yay</code></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/114296129\">Manjaro-KDE安装配置全攻略 - ayamir的文章 - 知乎</a></li>\n</ul>\n<hr>\n<p>安装向日葵</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yay -Sy sunloginclient</span><br><span class=\"line\">sudo systemctl start runsunloginclient.service</span><br><span class=\"line\">sudo systemctl enable runsunloginclient.service</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>deb转换为pacman</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo debtap -u</span><br><span class=\"line\">sudo debtap -q *.deb</span><br><span class=\"line\">sudo pacman -U *.pkg.tar.xz</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>安装 N 卡驱动</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mhwd -a pci nonfree 0300   # 官方的方法，但是不好用</span><br><span class=\"line\">mhwd-kernel -li​             # 查看内核</span><br><span class=\"line\">​sudo pacman -S nvidia​​    # 根据上述内核安装驱动</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">安装 390xx 还是 470xx 还是 510xx 可以去图形化硬件信息，看看现在推荐的是哪个版本</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">重启 就可以使用 nvidia-smi 查看显卡信息</span></span><br></pre></td></tr></table></figure>\n<p><a href=\"https://wiki.manjaro.org/index.php/Configure_Graphics_Cards/zh-cn\">官网方案</a></p>\n<hr>\n<p>安装 wechat 参考 <a href=\"https://github.com/vufa/deepin-wine-wechat-arch\">deepin-wine-wechat-arch</a></p>\n","site":{"data":{}},"excerpt":"<ol>\n<li>更新系统：<code>sudo pacman -Syu</code></li></ol>","more":"\n\n<blockquote>\n<p>报错<code>Failed to prepare transaction</code>，解决方法：<code>sudo pamac updata</code></p>\n</blockquote>\n<ol start=\"2\">\n<li>安装输入法：<code>sudo pacman -S fcitx-im fcitx-configtool</code></li>\n<li>更改镜像源：<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pacman-mirrors -c China -m rank</span><br><span class=\"line\">sudo pacman -Syyu</span><br></pre></td></tr></table></figure></li>\n<li>安装软件：<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pacman -S vim</span><br><span class=\"line\">sudo pacman -S yay</span><br><span class=\"line\">sudo pacman -S debtap</span><br><span class=\"line\">sudo pacman -S docker</span><br><span class=\"line\">yay -S google-chrome</span><br><span class=\"line\">yay  -S  wemeet</span><br></pre></td></tr></table></figure></li>\n</ol>\n<hr>\n<p>添加清华大学的软件源：</p>\n<ol>\n<li><p>打开&#x2F;etc&#x2F;pacman.conf文件，并将以下内容添加到文件末尾：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[archlinuxcn]</span><br><span class=\"line\">SigLevel = Optional TrustedOnly</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">SigLevel = Never</span></span><br><span class=\"line\">Server = https://mirrors.tuna.tsinghua.edu.cn/archlinuxcn/$arch</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>打开终端，并使用以下命令导入清华大学的公钥：<code>sudo pacman -Syy &amp;&amp; sudo pacman -S archlinuxcn-keyring</code></p>\n</li>\n<li><p>更新系统的软件包缓存，以获取从清华大学的软件源中提供的软件包信息：<code>sudo pacman -Syyu</code></p>\n</li>\n</ol>\n<blockquote>\n<p>请注意，清华大学的软件源和其他第三方软件源可能包含不受信任的软件包。在使用这些源时，请务必小心谨慎，只从可信的来源安装软件包。</p>\n</blockquote>\n<hr>\n<p><a href=\"https://corner430.github.io/2023/04/03/Configure-oh-my-zsh/#more\">配置bash</a></p>\n<hr>\n<h1 id=\"桌面美化\"><a href=\"#桌面美化\" class=\"headerlink\" title=\"桌面美化\"></a>桌面美化</h1><p><a href=\"https://youtu.be/fzwnHKdpbWM\">如何将 Linux 美化成 MacOS 风格？</a><br><a href=\"https://www.bilibili.com/video/BV1pJ411N75i/?share_source=copy_web&vd_source=a7ae9163cb2cd121bfd86ea1f4ecd2ef\">Manjaro-Kde美化 最后一次发桌面美化</a><br><a href=\"https://www.bilibili.com/video/BV1yE411J7Z8/?share_source=copy_web&vd_source=a7ae9163cb2cd121bfd86ea1f4ecd2ef\">[Linux]4分钟完成manjaro系统美化</a><br><a href=\"https://www.bilibili.com/video/BV1Lt41167bp/?share_source=copy_web&vd_source=a7ae9163cb2cd121bfd86ea1f4ecd2ef\">你的Manjaro能有多漂亮和有效率？简单美化教程，deepin又被我干掉了</a><br><a href=\"https://www.bilibili.com/video/BV1vt411E7GP/?share_source=copy_web&vd_source=a7ae9163cb2cd121bfd86ea1f4ecd2ef\">漂亮的Linux桌面环境，这才是电脑系统应该有的样子</a></p>\n<hr>\n<h1 id=\"pacman使用\"><a href=\"#pacman使用\" class=\"headerlink\" title=\"pacman使用\"></a>pacman使用</h1><p>Pacman 是 Arch Linux 中的一个命令行软件包管理器，可以用于安装、更新、卸载软件包，以及管理系统的依赖关系。下面是一些常用的 Pacman 命令：</p>\n<ul>\n<li>更新软件包数据库：<code>sudo pacman -Syy</code></li>\n<li>安装软件包：<code>sudo pacman -S package_name</code></li>\n<li>更新已安装的软件包：<code>sudo pacman -Syu</code></li>\n<li>搜索软件包：<code>pacman -Ss package_name</code></li>\n<li>显示已安装的软件包：<code>pacman -Q</code></li>\n<li>显示已安装软件包的详细信息：<code>pacman -Qi package_name</code></li>\n<li>卸载软件包：<code>sudo pacman -R package_name</code></li>\n<li>卸载软件包及其依赖项：<code>sudo pacman -Rs package_name</code></li>\n<li>清理已下载的软件包：<code>sudo pacman -Sc</code></li>\n<li>清理已下载的软件包和旧版本的软件包：<code>sudo pacman -Scc</code><blockquote>\n<p>在这些命令中，<code>sudo</code> 表示以管理员权限运行命令，<code>-S</code> 表示安装软件包，<code>-Ss</code> 表示搜索软件包，<code>-Q</code> 表示列出已安装的软件包，<code>-R</code> 表示卸载软件包，<code>-Syu</code> 表示更新已安装的软件包等等。</p>\n</blockquote>\n</li>\n</ul>\n<hr>\n<h1 id=\"常用软件安装\"><a href=\"#常用软件安装\" class=\"headerlink\" title=\"常用软件安装\"></a>常用软件安装</h1><ul>\n<li>yay是一个用Go语言写的一个AUR助手，有些时候官方仓库没有你想要的软件，就需要通过yay来安装：<code>sudo pacman -S yay</code></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/114296129\">Manjaro-KDE安装配置全攻略 - ayamir的文章 - 知乎</a></li>\n</ul>\n<hr>\n<p>安装向日葵</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yay -Sy sunloginclient</span><br><span class=\"line\">sudo systemctl start runsunloginclient.service</span><br><span class=\"line\">sudo systemctl enable runsunloginclient.service</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>deb转换为pacman</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo debtap -u</span><br><span class=\"line\">sudo debtap -q *.deb</span><br><span class=\"line\">sudo pacman -U *.pkg.tar.xz</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>安装 N 卡驱动</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mhwd -a pci nonfree 0300   # 官方的方法，但是不好用</span><br><span class=\"line\">mhwd-kernel -li​             # 查看内核</span><br><span class=\"line\">​sudo pacman -S nvidia​​    # 根据上述内核安装驱动</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">安装 390xx 还是 470xx 还是 510xx 可以去图形化硬件信息，看看现在推荐的是哪个版本</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">重启 就可以使用 nvidia-smi 查看显卡信息</span></span><br></pre></td></tr></table></figure>\n<p><a href=\"https://wiki.manjaro.org/index.php/Configure_Graphics_Cards/zh-cn\">官网方案</a></p>\n<hr>\n<p>安装 wechat 参考 <a href=\"https://github.com/vufa/deepin-wine-wechat-arch\">deepin-wine-wechat-arch</a></p>"},{"title":"matrix derivation","date":"2023-04-03T20:23:17.000Z","_content":"- [矩阵求导术(上)](https://zhuanlan.zhihu.com/p/24709748)\n- [矩阵求导的本质与分子布局、分母布局的本质（矩阵求导——本质篇）](https://zhuanlan.zhihu.com/p/263777564)\n- [矩阵求导公式的数学推导（矩阵求导——基础篇）](https://zhuanlan.zhihu.com/p/273729929)\n- [Matrix Calculus](https://www.matrixcalculus.org/)","source":"_posts/matrix-derivation.md","raw":"---\ntitle: matrix derivation\ndate: 2023-04-03 20:23:17\ntags:\n    - 科研\n---\n- [矩阵求导术(上)](https://zhuanlan.zhihu.com/p/24709748)\n- [矩阵求导的本质与分子布局、分母布局的本质（矩阵求导——本质篇）](https://zhuanlan.zhihu.com/p/263777564)\n- [矩阵求导公式的数学推导（矩阵求导——基础篇）](https://zhuanlan.zhihu.com/p/273729929)\n- [Matrix Calculus](https://www.matrixcalculus.org/)","slug":"matrix-derivation","published":1,"updated":"2024-04-25T17:26:45.923Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvjbaqim00340vn1hdfof2u5","content":"<ul>\n<li><a href=\"https://zhuanlan.zhihu.com/p/24709748\">矩阵求导术(上)</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/263777564\">矩阵求导的本质与分子布局、分母布局的本质（矩阵求导——本质篇）</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/273729929\">矩阵求导公式的数学推导（矩阵求导——基础篇）</a></li>\n<li><a href=\"https://www.matrixcalculus.org/\">Matrix Calculus</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><a href=\"https://zhuanlan.zhihu.com/p/24709748\">矩阵求导术(上)</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/263777564\">矩阵求导的本质与分子布局、分母布局的本质（矩阵求导——本质篇）</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/273729929\">矩阵求导公式的数学推导（矩阵求导——基础篇）</a></li>\n<li><a href=\"https://www.matrixcalculus.org/\">Matrix Calculus</a></li>\n</ul>\n"},{"title":"microsoft story 好用的软件","date":"2023-06-05T15:53:12.000Z","declare":true,"_content":"- 清理君\n- quicklook\n- powertoys\n- eartrumpet\n- 欧路词典","source":"_posts/microsoft-story-好用的软件.md","raw":"---\ntitle: microsoft story 好用的软件\ndate: 2023-06-05 15:53:12\ntags:\n    - microsoft\ndeclare: true\n---\n- 清理君\n- quicklook\n- powertoys\n- eartrumpet\n- 欧路词典","slug":"microsoft-story-好用的软件","published":1,"updated":"2024-04-25T17:26:47.503Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvjbaqio00370vn1cv0s3l9d","content":"<ul>\n<li>清理君</li>\n<li>quicklook</li>\n<li>powertoys</li>\n<li>eartrumpet</li>\n<li>欧路词典</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>清理君</li>\n<li>quicklook</li>\n<li>powertoys</li>\n<li>eartrumpet</li>\n<li>欧路词典</li>\n</ul>\n"},{"title":"migration of hexo","date":"2023-04-03T16:34:34.000Z","declare":true,"_content":"- Just pass the entire directory directly through sftp<!--more-->\n\n- If the above method fails\n    - Use the following command to view installed Hexo plugins: `npm ls --depth=0`\n\n    - Install plugins one by one\n\n- Uninstall each plugin one by one using the following command, for example: `npm uninstall hexo-deployer-git --save`\n\n----------------------------------------------\n1. 创建一个新的 GitHub 仓库：登录到 GitHub，然后点击页面右上角的 \"+\" 按钮，选择 \"New repository\"（新建仓库）来创建一个新的仓库。为仓库指定一个名称，选择公开或私有的可见性设置，然后点击 \"Create repository\"（创建仓库）。\n2. 初始化本地 Git 仓库：在你的 Hexo 博客文件夹的根目录下，打开命令行或终端，并执行以下命令：`git init`\n3. 添加远程仓库链接：将新创建的 GitHub 仓库的远程链接添加到你的本地 Git 仓库中，执行以下命令：`git remote add origin <GitHub 仓库的 URL>`\n4. 将所有文件添加到 Git 中：执行以下命令将你的 Hexo 博客文件夹中的所有文件添加到 Git 中：`git add .`\n5. 提交更改：执行以下命令将更改提交到 Git：`git commit -m \"Initial commit\"  // 这里的消息可以根据您的需要进行修改`\n6. 推送到 GitHub：执行以下命令将本地的 Git 仓库推送到 GitHub：`git push -u origin main`\n> 完成上述步骤后，Hexo 博客文件夹将被备份到 GitHub 上的新仓库中。每当对博客进行更新时，只需执行步骤 5-7，将更改提交并推送到 GitHub 上的仓库即可。\n> 如果在 GitHub 上进行公开仓库的备份，确保不要将敏感信息（如个人访问令牌或配置文件中的密码）包含在博客文件夹中，**并添加这些敏感文件到 .gitignore 文件中**，以避免将其提交到公开的代码库中。\n> 切记要注意.gitignore，theme下也是一个独立的仓库。确保文件都已经上传\n\n-------------------------------------------------\n在另一台电脑上下载 Hexo 博客的备份，可以按照以下步骤进行操作：\n1. 克隆 GitHub 仓库：执行以下命令来克隆在 GitHub 上创建的仓库：`git clone <GitHub 仓库的 URL>`\n> 其中，<GitHub 仓库的 URL> 是在备份博客时创建的 GitHub 仓库的 URL。\n\n2. 进入博客文件夹：执行以下命令进入已克隆的仓库目录：`cd <仓库目录>`\n> 其中，<仓库目录> 是克隆仓库后所在的本地文件夹路径。\n\n3. 安装 Hexo：如果在新电脑上还没有安装 Hexo，请确保在执行以下命令之前先安装 Node.js 和 Hexo：`npm install hexo-cli -g`\n\n4. 安装博客依赖：进入博客文件夹后，执行以下命令安装博客所需的依赖：`npm install`\n\n5. 生成博客静态文件：执行以下命令生成博客的静态文件：`hexo generate`\n\n6. 启动本地服务器：执行以下命令启动本地服务器以查看博客内容：`hexo server`\n\n完成上述步骤后，将能够在新电脑上下载并运行 Hexo 博客的备份。请注意，如果在新电脑上使用了不同的 Git 账户，可能需要提供相应的身份验证凭据以克隆仓库和推送更改。\n> 可能需要执行`rm -rf node_modules && npm install --force`进行安装模块/插件\n\n---------------------------------------------\n如果在 GitHub 上的 Hexo 博客备份进行了更改，可以按照以下步骤将更改拉取（pull）到本地：\n1. 确保当前分支是主分支（通常为 master 或 main）。可以通过以下命令查看当前分支：`git branch`\n2. 如果当前分支不是主分支，可以使用以下命令切换到主分支：`git checkout <branch_name>`\n> 其中，<branch_name> 是主分支的名称。\n3. 拉取更改：执行以下命令从 GitHub 仓库拉取最新更改：`git pull origin main`\n4. 完成后，本地博客文件夹将与 GitHub 上的备份保持同步。\n5. 如果在本地进行了修改并想要将更改推送到 GitHub 上的仓库，可以使用 git push 命令将本地更改推送到远程仓库。\n\n> 对于theme文件夹，可以单独建立一个分支。\n\n---------------------\n\n通过 docker 部署 [taskbjorn/hexo](https://hub.docker.com/r/taskbjorn/hexo)，之后将 hexo 中的所有文件覆盖就好了。\n`alias=\"docker exec -it hexo hexo\"`","source":"_posts/migration-of-hexo.md","raw":"---\ntitle: migration of hexo\ndate: 2023-04-03 16:34:34\ntags:\n    - hexo\ndeclare: true\n---\n- Just pass the entire directory directly through sftp<!--more-->\n\n- If the above method fails\n    - Use the following command to view installed Hexo plugins: `npm ls --depth=0`\n\n    - Install plugins one by one\n\n- Uninstall each plugin one by one using the following command, for example: `npm uninstall hexo-deployer-git --save`\n\n----------------------------------------------\n1. 创建一个新的 GitHub 仓库：登录到 GitHub，然后点击页面右上角的 \"+\" 按钮，选择 \"New repository\"（新建仓库）来创建一个新的仓库。为仓库指定一个名称，选择公开或私有的可见性设置，然后点击 \"Create repository\"（创建仓库）。\n2. 初始化本地 Git 仓库：在你的 Hexo 博客文件夹的根目录下，打开命令行或终端，并执行以下命令：`git init`\n3. 添加远程仓库链接：将新创建的 GitHub 仓库的远程链接添加到你的本地 Git 仓库中，执行以下命令：`git remote add origin <GitHub 仓库的 URL>`\n4. 将所有文件添加到 Git 中：执行以下命令将你的 Hexo 博客文件夹中的所有文件添加到 Git 中：`git add .`\n5. 提交更改：执行以下命令将更改提交到 Git：`git commit -m \"Initial commit\"  // 这里的消息可以根据您的需要进行修改`\n6. 推送到 GitHub：执行以下命令将本地的 Git 仓库推送到 GitHub：`git push -u origin main`\n> 完成上述步骤后，Hexo 博客文件夹将被备份到 GitHub 上的新仓库中。每当对博客进行更新时，只需执行步骤 5-7，将更改提交并推送到 GitHub 上的仓库即可。\n> 如果在 GitHub 上进行公开仓库的备份，确保不要将敏感信息（如个人访问令牌或配置文件中的密码）包含在博客文件夹中，**并添加这些敏感文件到 .gitignore 文件中**，以避免将其提交到公开的代码库中。\n> 切记要注意.gitignore，theme下也是一个独立的仓库。确保文件都已经上传\n\n-------------------------------------------------\n在另一台电脑上下载 Hexo 博客的备份，可以按照以下步骤进行操作：\n1. 克隆 GitHub 仓库：执行以下命令来克隆在 GitHub 上创建的仓库：`git clone <GitHub 仓库的 URL>`\n> 其中，<GitHub 仓库的 URL> 是在备份博客时创建的 GitHub 仓库的 URL。\n\n2. 进入博客文件夹：执行以下命令进入已克隆的仓库目录：`cd <仓库目录>`\n> 其中，<仓库目录> 是克隆仓库后所在的本地文件夹路径。\n\n3. 安装 Hexo：如果在新电脑上还没有安装 Hexo，请确保在执行以下命令之前先安装 Node.js 和 Hexo：`npm install hexo-cli -g`\n\n4. 安装博客依赖：进入博客文件夹后，执行以下命令安装博客所需的依赖：`npm install`\n\n5. 生成博客静态文件：执行以下命令生成博客的静态文件：`hexo generate`\n\n6. 启动本地服务器：执行以下命令启动本地服务器以查看博客内容：`hexo server`\n\n完成上述步骤后，将能够在新电脑上下载并运行 Hexo 博客的备份。请注意，如果在新电脑上使用了不同的 Git 账户，可能需要提供相应的身份验证凭据以克隆仓库和推送更改。\n> 可能需要执行`rm -rf node_modules && npm install --force`进行安装模块/插件\n\n---------------------------------------------\n如果在 GitHub 上的 Hexo 博客备份进行了更改，可以按照以下步骤将更改拉取（pull）到本地：\n1. 确保当前分支是主分支（通常为 master 或 main）。可以通过以下命令查看当前分支：`git branch`\n2. 如果当前分支不是主分支，可以使用以下命令切换到主分支：`git checkout <branch_name>`\n> 其中，<branch_name> 是主分支的名称。\n3. 拉取更改：执行以下命令从 GitHub 仓库拉取最新更改：`git pull origin main`\n4. 完成后，本地博客文件夹将与 GitHub 上的备份保持同步。\n5. 如果在本地进行了修改并想要将更改推送到 GitHub 上的仓库，可以使用 git push 命令将本地更改推送到远程仓库。\n\n> 对于theme文件夹，可以单独建立一个分支。\n\n---------------------\n\n通过 docker 部署 [taskbjorn/hexo](https://hub.docker.com/r/taskbjorn/hexo)，之后将 hexo 中的所有文件覆盖就好了。\n`alias=\"docker exec -it hexo hexo\"`","slug":"migration-of-hexo","published":1,"updated":"2024-04-25T17:26:48.063Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvjbaqip00390vn1a81a2sx0","content":"<ul>\n<li><p>Just pass the entire directory directly through sftp<span id=\"more\"></span></p>\n</li>\n<li><p>If the above method fails</p>\n<ul>\n<li><p>Use the following command to view installed Hexo plugins: <code>npm ls --depth=0</code></p>\n</li>\n<li><p>Install plugins one by one</p>\n</li>\n</ul>\n</li>\n<li><p>Uninstall each plugin one by one using the following command, for example: <code>npm uninstall hexo-deployer-git --save</code></p>\n</li>\n</ul>\n<hr>\n<ol>\n<li>创建一个新的 GitHub 仓库：登录到 GitHub，然后点击页面右上角的 “+” 按钮，选择 “New repository”（新建仓库）来创建一个新的仓库。为仓库指定一个名称，选择公开或私有的可见性设置，然后点击 “Create repository”（创建仓库）。</li>\n<li>初始化本地 Git 仓库：在你的 Hexo 博客文件夹的根目录下，打开命令行或终端，并执行以下命令：<code>git init</code></li>\n<li>添加远程仓库链接：将新创建的 GitHub 仓库的远程链接添加到你的本地 Git 仓库中，执行以下命令：<code>git remote add origin &lt;GitHub 仓库的 URL&gt;</code></li>\n<li>将所有文件添加到 Git 中：执行以下命令将你的 Hexo 博客文件夹中的所有文件添加到 Git 中：<code>git add .</code></li>\n<li>提交更改：执行以下命令将更改提交到 Git：<code>git commit -m &quot;Initial commit&quot;  // 这里的消息可以根据您的需要进行修改</code></li>\n<li>推送到 GitHub：执行以下命令将本地的 Git 仓库推送到 GitHub：<code>git push -u origin main</code><blockquote>\n<p>完成上述步骤后，Hexo 博客文件夹将被备份到 GitHub 上的新仓库中。每当对博客进行更新时，只需执行步骤 5-7，将更改提交并推送到 GitHub 上的仓库即可。<br>如果在 GitHub 上进行公开仓库的备份，确保不要将敏感信息（如个人访问令牌或配置文件中的密码）包含在博客文件夹中，<strong>并添加这些敏感文件到 .gitignore 文件中</strong>，以避免将其提交到公开的代码库中。<br>切记要注意.gitignore，theme下也是一个独立的仓库。确保文件都已经上传</p>\n</blockquote>\n</li>\n</ol>\n<hr>\n<p>在另一台电脑上下载 Hexo 博客的备份，可以按照以下步骤进行操作：</p>\n<ol>\n<li><p>克隆 GitHub 仓库：执行以下命令来克隆在 GitHub 上创建的仓库：<code>git clone &lt;GitHub 仓库的 URL&gt;</code></p>\n<blockquote>\n<p>其中，&lt;GitHub 仓库的 URL&gt; 是在备份博客时创建的 GitHub 仓库的 URL。</p>\n</blockquote>\n</li>\n<li><p>进入博客文件夹：执行以下命令进入已克隆的仓库目录：<code>cd &lt;仓库目录&gt;</code></p>\n<blockquote>\n<p>其中，&lt;仓库目录&gt; 是克隆仓库后所在的本地文件夹路径。</p>\n</blockquote>\n</li>\n<li><p>安装 Hexo：如果在新电脑上还没有安装 Hexo，请确保在执行以下命令之前先安装 Node.js 和 Hexo：<code>npm install hexo-cli -g</code></p>\n</li>\n<li><p>安装博客依赖：进入博客文件夹后，执行以下命令安装博客所需的依赖：<code>npm install</code></p>\n</li>\n<li><p>生成博客静态文件：执行以下命令生成博客的静态文件：<code>hexo generate</code></p>\n</li>\n<li><p>启动本地服务器：执行以下命令启动本地服务器以查看博客内容：<code>hexo server</code></p>\n</li>\n</ol>\n<p>完成上述步骤后，将能够在新电脑上下载并运行 Hexo 博客的备份。请注意，如果在新电脑上使用了不同的 Git 账户，可能需要提供相应的身份验证凭据以克隆仓库和推送更改。</p>\n<blockquote>\n<p>可能需要执行<code>rm -rf node_modules &amp;&amp; npm install --force</code>进行安装模块&#x2F;插件</p>\n</blockquote>\n<hr>\n<p>如果在 GitHub 上的 Hexo 博客备份进行了更改，可以按照以下步骤将更改拉取（pull）到本地：</p>\n<ol>\n<li>确保当前分支是主分支（通常为 master 或 main）。可以通过以下命令查看当前分支：<code>git branch</code></li>\n<li>如果当前分支不是主分支，可以使用以下命令切换到主分支：<code>git checkout &lt;branch_name&gt;</code><blockquote>\n<p>其中，<branch_name> 是主分支的名称。</branch_name></p>\n</blockquote>\n</li>\n<li>拉取更改：执行以下命令从 GitHub 仓库拉取最新更改：<code>git pull origin main</code></li>\n<li>完成后，本地博客文件夹将与 GitHub 上的备份保持同步。</li>\n<li>如果在本地进行了修改并想要将更改推送到 GitHub 上的仓库，可以使用 git push 命令将本地更改推送到远程仓库。</li>\n</ol>\n<blockquote>\n<p>对于theme文件夹，可以单独建立一个分支。</p>\n</blockquote>\n<hr>\n<p>通过 docker 部署 <a href=\"https://hub.docker.com/r/taskbjorn/hexo\">taskbjorn&#x2F;hexo</a>，之后将 hexo 中的所有文件覆盖就好了。<br><code>alias=&quot;docker exec -it hexo hexo&quot;</code></p>\n","site":{"data":{}},"excerpt":"<ul>\n<li><p>Just pass the entire directory directly through sftp</p></li></ul>","more":"<p></p>\n\n<li><p>If the above method fails</p>\n<ul>\n<li><p>Use the following command to view installed Hexo plugins: <code>npm ls --depth=0</code></p>\n</li>\n<li><p>Install plugins one by one</p>\n</li>\n</ul>\n</li>\n<li><p>Uninstall each plugin one by one using the following command, for example: <code>npm uninstall hexo-deployer-git --save</code></p>\n</li>\n\n<hr>\n<ol>\n<li>创建一个新的 GitHub 仓库：登录到 GitHub，然后点击页面右上角的 “+” 按钮，选择 “New repository”（新建仓库）来创建一个新的仓库。为仓库指定一个名称，选择公开或私有的可见性设置，然后点击 “Create repository”（创建仓库）。</li>\n<li>初始化本地 Git 仓库：在你的 Hexo 博客文件夹的根目录下，打开命令行或终端，并执行以下命令：<code>git init</code></li>\n<li>添加远程仓库链接：将新创建的 GitHub 仓库的远程链接添加到你的本地 Git 仓库中，执行以下命令：<code>git remote add origin &lt;GitHub 仓库的 URL&gt;</code></li>\n<li>将所有文件添加到 Git 中：执行以下命令将你的 Hexo 博客文件夹中的所有文件添加到 Git 中：<code>git add .</code></li>\n<li>提交更改：执行以下命令将更改提交到 Git：<code>git commit -m &quot;Initial commit&quot;  // 这里的消息可以根据您的需要进行修改</code></li>\n<li>推送到 GitHub：执行以下命令将本地的 Git 仓库推送到 GitHub：<code>git push -u origin main</code><blockquote>\n<p>完成上述步骤后，Hexo 博客文件夹将被备份到 GitHub 上的新仓库中。每当对博客进行更新时，只需执行步骤 5-7，将更改提交并推送到 GitHub 上的仓库即可。<br>如果在 GitHub 上进行公开仓库的备份，确保不要将敏感信息（如个人访问令牌或配置文件中的密码）包含在博客文件夹中，<strong>并添加这些敏感文件到 .gitignore 文件中</strong>，以避免将其提交到公开的代码库中。<br>切记要注意.gitignore，theme下也是一个独立的仓库。确保文件都已经上传</p>\n</blockquote>\n</li>\n</ol>\n<hr>\n<p>在另一台电脑上下载 Hexo 博客的备份，可以按照以下步骤进行操作：</p>\n<ol>\n<li><p>克隆 GitHub 仓库：执行以下命令来克隆在 GitHub 上创建的仓库：<code>git clone &lt;GitHub 仓库的 URL&gt;</code></p>\n<blockquote>\n<p>其中，&lt;GitHub 仓库的 URL&gt; 是在备份博客时创建的 GitHub 仓库的 URL。</p>\n</blockquote>\n</li>\n<li><p>进入博客文件夹：执行以下命令进入已克隆的仓库目录：<code>cd &lt;仓库目录&gt;</code></p>\n<blockquote>\n<p>其中，&lt;仓库目录&gt; 是克隆仓库后所在的本地文件夹路径。</p>\n</blockquote>\n</li>\n<li><p>安装 Hexo：如果在新电脑上还没有安装 Hexo，请确保在执行以下命令之前先安装 Node.js 和 Hexo：<code>npm install hexo-cli -g</code></p>\n</li>\n<li><p>安装博客依赖：进入博客文件夹后，执行以下命令安装博客所需的依赖：<code>npm install</code></p>\n</li>\n<li><p>生成博客静态文件：执行以下命令生成博客的静态文件：<code>hexo generate</code></p>\n</li>\n<li><p>启动本地服务器：执行以下命令启动本地服务器以查看博客内容：<code>hexo server</code></p>\n</li>\n</ol>\n<p>完成上述步骤后，将能够在新电脑上下载并运行 Hexo 博客的备份。请注意，如果在新电脑上使用了不同的 Git 账户，可能需要提供相应的身份验证凭据以克隆仓库和推送更改。</p>\n<blockquote>\n<p>可能需要执行<code>rm -rf node_modules &amp;&amp; npm install --force</code>进行安装模块&#x2F;插件</p>\n</blockquote>\n<hr>\n<p>如果在 GitHub 上的 Hexo 博客备份进行了更改，可以按照以下步骤将更改拉取（pull）到本地：</p>\n<ol>\n<li>确保当前分支是主分支（通常为 master 或 main）。可以通过以下命令查看当前分支：<code>git branch</code></li>\n<li>如果当前分支不是主分支，可以使用以下命令切换到主分支：<code>git checkout &lt;branch_name&gt;</code><blockquote>\n<p>其中，<branch_name> 是主分支的名称。</branch_name></p>\n</blockquote>\n</li>\n<li>拉取更改：执行以下命令从 GitHub 仓库拉取最新更改：<code>git pull origin main</code></li>\n<li>完成后，本地博客文件夹将与 GitHub 上的备份保持同步。</li>\n<li>如果在本地进行了修改并想要将更改推送到 GitHub 上的仓库，可以使用 git push 命令将本地更改推送到远程仓库。</li>\n</ol>\n<blockquote>\n<p>对于theme文件夹，可以单独建立一个分支。</p>\n</blockquote>\n<hr>\n<p>通过 docker 部署 <a href=\"https://hub.docker.com/r/taskbjorn/hexo\">taskbjorn&#x2F;hexo</a>，之后将 hexo 中的所有文件覆盖就好了。<br><code>alias=&quot;docker exec -it hexo hexo&quot;</code></p>"},{"title":"mysql 远程登录","date":"2024-04-06T23:20:31.000Z","_content":"解决远程登录 mysql 问题 <!--more-->\n```mysql\n// 从mysql.user表中选择host，其中用户为'root'\nSELECT host FROM mysql.user WHERE User = 'root';\n\n// 创建一个新用户'root'，该用户可以从'ip_address'登录，并使用'some_pass'作为密码\nCREATE USER 'root'@'ip_address' IDENTIFIED BY 'some_pass';\n\n// 授予新用户所有权限\nGRANT ALL PRIVILEGES ON *.* TO 'root'@'ip_address';\n\n// 刷新权限，使之立即生效\nFLUSH PRIVILEGES;\n\n// 为新用户设置新密码\nSET PASSWORD FOR 'root'@'ip_address' = 'some_pass';\n\n// 重启系统，使更改生效\nsystemctl restart\n```","source":"_posts/mysql-远程登录.md","raw":"---\ntitle: mysql 远程登录\ndate: 2024-04-06 23:20:31\ntags:\n    - mysql\n---\n解决远程登录 mysql 问题 <!--more-->\n```mysql\n// 从mysql.user表中选择host，其中用户为'root'\nSELECT host FROM mysql.user WHERE User = 'root';\n\n// 创建一个新用户'root'，该用户可以从'ip_address'登录，并使用'some_pass'作为密码\nCREATE USER 'root'@'ip_address' IDENTIFIED BY 'some_pass';\n\n// 授予新用户所有权限\nGRANT ALL PRIVILEGES ON *.* TO 'root'@'ip_address';\n\n// 刷新权限，使之立即生效\nFLUSH PRIVILEGES;\n\n// 为新用户设置新密码\nSET PASSWORD FOR 'root'@'ip_address' = 'some_pass';\n\n// 重启系统，使更改生效\nsystemctl restart\n```","slug":"mysql-远程登录","published":1,"updated":"2024-04-25T17:26:45.683Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvjbaqir003b0vn13y5a1hxr","content":"<p>解决远程登录 mysql 问题 <span id=\"more\"></span></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 从mysql.user表中选择host，其中用户为&#x27;root&#x27;</span><br><span class=\"line\">SELECT host FROM mysql.user WHERE User = &#x27;root&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">// 创建一个新用户&#x27;root&#x27;，该用户可以从&#x27;ip_address&#x27;登录，并使用&#x27;some_pass&#x27;作为密码</span><br><span class=\"line\">CREATE USER &#x27;root&#x27;@&#x27;ip_address&#x27; IDENTIFIED BY &#x27;some_pass&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">// 授予新用户所有权限</span><br><span class=\"line\">GRANT ALL PRIVILEGES ON *.* TO &#x27;root&#x27;@&#x27;ip_address&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">// 刷新权限，使之立即生效</span><br><span class=\"line\">FLUSH PRIVILEGES;</span><br><span class=\"line\"></span><br><span class=\"line\">// 为新用户设置新密码</span><br><span class=\"line\">SET PASSWORD FOR &#x27;root&#x27;@&#x27;ip_address&#x27; = &#x27;some_pass&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">// 重启系统，使更改生效</span><br><span class=\"line\">systemctl restart</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>解决远程登录 mysql 问题</p>","more":"<p></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 从mysql.user表中选择host，其中用户为&#x27;root&#x27;</span><br><span class=\"line\">SELECT host FROM mysql.user WHERE User = &#x27;root&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">// 创建一个新用户&#x27;root&#x27;，该用户可以从&#x27;ip_address&#x27;登录，并使用&#x27;some_pass&#x27;作为密码</span><br><span class=\"line\">CREATE USER &#x27;root&#x27;@&#x27;ip_address&#x27; IDENTIFIED BY &#x27;some_pass&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">// 授予新用户所有权限</span><br><span class=\"line\">GRANT ALL PRIVILEGES ON *.* TO &#x27;root&#x27;@&#x27;ip_address&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">// 刷新权限，使之立即生效</span><br><span class=\"line\">FLUSH PRIVILEGES;</span><br><span class=\"line\"></span><br><span class=\"line\">// 为新用户设置新密码</span><br><span class=\"line\">SET PASSWORD FOR &#x27;root&#x27;@&#x27;ip_address&#x27; = &#x27;some_pass&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">// 重启系统，使更改生效</span><br><span class=\"line\">systemctl restart</span><br></pre></td></tr></table></figure>"},{"title":"new bing重定向问题","date":"2023-05-12T13:48:17.000Z","declare":true,"_content":"修改hosts文件，添加如下内容：<!--more-->\n\n```bash\n    # bing\n20.196.210.19 bing.com\n20.196.210.19 www.bing.com\n20.196.210.19 r.bing.com\n20.196.210.19 cn.bing.com\n20.196.210.19 edgeservices.bing.com     #' 登陆 Bing 很慢，打不开,添加 '# New Bing Login\n\n40.126.35.80 login.microsoftonline.com\n20.190.163.18 login.live.com\n13.107.253.59 logincdn.msauth.net\n13.107.253.59 acctcdn.msauth.net\n13.107.253.59 acctcdn.msftauth.net\n13.107.253.59 lgincdnvzeuno.azureedge.net\n```\n----------------------------------\n**或者直接修改openwrt中的hosts文件**\n- ssh到openwrt\n- 进入/etc，新建一个myhosts文件，并写入上述内容\n- 配置**额外的hosts文件**\n![20230512141301](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230512141301.png)\n\n-------------------------------------------\nopenwrt的passwall中添加如下规则至代理列表：\n```shell\nbing.com\nmicrosoft.com   # 这个本来在直连列表中\n```\n\n---------------------------\n**重启路由器**\n\n-----------------\nchrome使用new bing chat ai\n- 安装[Chrome Unlock New Bing AI](https://chrome.google.com/webstore/detail/chrome-unlock-new-bing-ai/nglhdhdfndbadmaiieikpefenkbgpdbf)插件\n- [github源代码](https://github.com/malaohu/chrome_extensions_unlock-newbing)\n- 参考[最新更新：Chrome体验New Bing AI 扩展](https://jike.info/topic/17774/%E6%9C%80%E6%96%B0%E6%9B%B4%E6%96%B0-chrome%E4%BD%93%E9%AA%8Cnew-bing-ai-%E6%89%A9%E5%B1%95)\n\n------------------------------\n- 此时如果还有问题，注意**Bing**的**url**本来是带**cn**的，删除掉：\n![20230512223854](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230512223854.png)\n- 修改国家为非china：\n![20230512224120](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230512224120.png)","source":"_posts/new-bing重定向问题.md","raw":"---\ntitle: new bing重定向问题\ndate: 2023-05-12 13:48:17\ntags:\n    - bing\n    - openwrt\n    - 路由器\ndeclare: true\n---\n修改hosts文件，添加如下内容：<!--more-->\n\n```bash\n    # bing\n20.196.210.19 bing.com\n20.196.210.19 www.bing.com\n20.196.210.19 r.bing.com\n20.196.210.19 cn.bing.com\n20.196.210.19 edgeservices.bing.com     #' 登陆 Bing 很慢，打不开,添加 '# New Bing Login\n\n40.126.35.80 login.microsoftonline.com\n20.190.163.18 login.live.com\n13.107.253.59 logincdn.msauth.net\n13.107.253.59 acctcdn.msauth.net\n13.107.253.59 acctcdn.msftauth.net\n13.107.253.59 lgincdnvzeuno.azureedge.net\n```\n----------------------------------\n**或者直接修改openwrt中的hosts文件**\n- ssh到openwrt\n- 进入/etc，新建一个myhosts文件，并写入上述内容\n- 配置**额外的hosts文件**\n![20230512141301](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230512141301.png)\n\n-------------------------------------------\nopenwrt的passwall中添加如下规则至代理列表：\n```shell\nbing.com\nmicrosoft.com   # 这个本来在直连列表中\n```\n\n---------------------------\n**重启路由器**\n\n-----------------\nchrome使用new bing chat ai\n- 安装[Chrome Unlock New Bing AI](https://chrome.google.com/webstore/detail/chrome-unlock-new-bing-ai/nglhdhdfndbadmaiieikpefenkbgpdbf)插件\n- [github源代码](https://github.com/malaohu/chrome_extensions_unlock-newbing)\n- 参考[最新更新：Chrome体验New Bing AI 扩展](https://jike.info/topic/17774/%E6%9C%80%E6%96%B0%E6%9B%B4%E6%96%B0-chrome%E4%BD%93%E9%AA%8Cnew-bing-ai-%E6%89%A9%E5%B1%95)\n\n------------------------------\n- 此时如果还有问题，注意**Bing**的**url**本来是带**cn**的，删除掉：\n![20230512223854](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230512223854.png)\n- 修改国家为非china：\n![20230512224120](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230512224120.png)","slug":"new-bing重定向问题","published":1,"updated":"2024-04-25T17:26:47.153Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvjbaqir003c0vn1aggv3wb0","content":"<p>修改hosts文件，添加如下内容：<span id=\"more\"></span></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\"># bing</span></span><br><span class=\"line\">20.196.210.19 bing.com</span><br><span class=\"line\">20.196.210.19 www.bing.com</span><br><span class=\"line\">20.196.210.19 r.bing.com</span><br><span class=\"line\">20.196.210.19 cn.bing.com</span><br><span class=\"line\">20.196.210.19 edgeservices.bing.com     <span class=\"comment\">#&#x27; 登陆 Bing 很慢，打不开,添加 &#x27;# New Bing Login</span></span><br><span class=\"line\"></span><br><span class=\"line\">40.126.35.80 login.microsoftonline.com</span><br><span class=\"line\">20.190.163.18 login.live.com</span><br><span class=\"line\">13.107.253.59 logincdn.msauth.net</span><br><span class=\"line\">13.107.253.59 acctcdn.msauth.net</span><br><span class=\"line\">13.107.253.59 acctcdn.msftauth.net</span><br><span class=\"line\">13.107.253.59 lgincdnvzeuno.azureedge.net</span><br></pre></td></tr></table></figure>\n<hr>\n<p><strong>或者直接修改openwrt中的hosts文件</strong></p>\n<ul>\n<li>ssh到openwrt</li>\n<li>进入&#x2F;etc，新建一个myhosts文件，并写入上述内容</li>\n<li>配置<strong>额外的hosts文件</strong><br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230512141301.png\" alt=\"20230512141301\"></li>\n</ul>\n<hr>\n<p>openwrt的passwall中添加如下规则至代理列表：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bing.com</span><br><span class=\"line\">microsoft.com   # 这个本来在直连列表中</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p><strong>重启路由器</strong></p>\n<hr>\n<p>chrome使用new bing chat ai</p>\n<ul>\n<li>安装<a href=\"https://chrome.google.com/webstore/detail/chrome-unlock-new-bing-ai/nglhdhdfndbadmaiieikpefenkbgpdbf\">Chrome Unlock New Bing AI</a>插件</li>\n<li><a href=\"https://github.com/malaohu/chrome_extensions_unlock-newbing\">github源代码</a></li>\n<li>参考<a href=\"https://jike.info/topic/17774/%E6%9C%80%E6%96%B0%E6%9B%B4%E6%96%B0-chrome%E4%BD%93%E9%AA%8Cnew-bing-ai-%E6%89%A9%E5%B1%95\">最新更新：Chrome体验New Bing AI 扩展</a></li>\n</ul>\n<hr>\n<ul>\n<li>此时如果还有问题，注意<strong>Bing</strong>的<strong>url</strong>本来是带<strong>cn</strong>的，删除掉：<br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230512223854.png\" alt=\"20230512223854\"></li>\n<li>修改国家为非china：<br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230512224120.png\" alt=\"20230512224120\"></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>修改hosts文件，添加如下内容：</p>","more":"<p></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\"># bing</span></span><br><span class=\"line\">20.196.210.19 bing.com</span><br><span class=\"line\">20.196.210.19 www.bing.com</span><br><span class=\"line\">20.196.210.19 r.bing.com</span><br><span class=\"line\">20.196.210.19 cn.bing.com</span><br><span class=\"line\">20.196.210.19 edgeservices.bing.com     <span class=\"comment\">#&#x27; 登陆 Bing 很慢，打不开,添加 &#x27;# New Bing Login</span></span><br><span class=\"line\"></span><br><span class=\"line\">40.126.35.80 login.microsoftonline.com</span><br><span class=\"line\">20.190.163.18 login.live.com</span><br><span class=\"line\">13.107.253.59 logincdn.msauth.net</span><br><span class=\"line\">13.107.253.59 acctcdn.msauth.net</span><br><span class=\"line\">13.107.253.59 acctcdn.msftauth.net</span><br><span class=\"line\">13.107.253.59 lgincdnvzeuno.azureedge.net</span><br></pre></td></tr></table></figure>\n<hr>\n<p><strong>或者直接修改openwrt中的hosts文件</strong></p>\n<ul>\n<li>ssh到openwrt</li>\n<li>进入&#x2F;etc，新建一个myhosts文件，并写入上述内容</li>\n<li>配置<strong>额外的hosts文件</strong><br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230512141301.png\" alt=\"20230512141301\"></li>\n</ul>\n<hr>\n<p>openwrt的passwall中添加如下规则至代理列表：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bing.com</span><br><span class=\"line\">microsoft.com   # 这个本来在直连列表中</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p><strong>重启路由器</strong></p>\n<hr>\n<p>chrome使用new bing chat ai</p>\n<ul>\n<li>安装<a href=\"https://chrome.google.com/webstore/detail/chrome-unlock-new-bing-ai/nglhdhdfndbadmaiieikpefenkbgpdbf\">Chrome Unlock New Bing AI</a>插件</li>\n<li><a href=\"https://github.com/malaohu/chrome_extensions_unlock-newbing\">github源代码</a></li>\n<li>参考<a href=\"https://jike.info/topic/17774/%E6%9C%80%E6%96%B0%E6%9B%B4%E6%96%B0-chrome%E4%BD%93%E9%AA%8Cnew-bing-ai-%E6%89%A9%E5%B1%95\">最新更新：Chrome体验New Bing AI 扩展</a></li>\n</ul>\n<hr>\n<ul>\n<li>此时如果还有问题，注意<strong>Bing</strong>的<strong>url</strong>本来是带<strong>cn</strong>的，删除掉：<br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230512223854.png\" alt=\"20230512223854\"></li>\n<li>修改国家为非china：<br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230512224120.png\" alt=\"20230512224120\"></li>\n</ul>"},{"title":"openwrt ipv6 开启记录","date":"2023-05-10T20:06:43.000Z","declare":true,"_content":"1. 删除原有的wan,wan6口。\n2. 新建wan口拨号，看是否是双栈下发，即同时生成wan & wan6.\n3. 路由器需要安装**odhcp6c,odhcpd,ip6tables,luci-proto-ipv6**<!--more-->\n4. wan口设置：\n![20230510225020](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230510225020.png)\n5. lan口设置Ipv6分配长度64，高级设置如下：\n![20230510225225](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230510225225.png)\n6. lan口IPv6设置：\n![20230510225325](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230510225325.png)\n7. 这个禁止解析 IPv6 DNS 记录的勾要取消掉：\n![20230510225519](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230510225519.png)\n\n----------------------------\n# 参考\n[Openwrt Lan 口无法获取IPV6问题（已解决）](https://www.right.com.cn/forum/thread-3071516-1-1.html)\n[IPV6设置求教！（已经解决）](https://www.right.com.cn/forum/thread-2766108-2-1.html)\n\n----------------------------\n失败截图：\n![20230510225812](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230510225812.png)\n![20230510225850](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230510225850.png)","source":"_posts/openwrt-ipv6-开启记录.md","raw":"---\ntitle: openwrt ipv6 开启记录\ndate: 2023-05-10 20:06:43\ntags:\n    - openwrt\n    - 路由器\ndeclare: true\n---\n1. 删除原有的wan,wan6口。\n2. 新建wan口拨号，看是否是双栈下发，即同时生成wan & wan6.\n3. 路由器需要安装**odhcp6c,odhcpd,ip6tables,luci-proto-ipv6**<!--more-->\n4. wan口设置：\n![20230510225020](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230510225020.png)\n5. lan口设置Ipv6分配长度64，高级设置如下：\n![20230510225225](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230510225225.png)\n6. lan口IPv6设置：\n![20230510225325](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230510225325.png)\n7. 这个禁止解析 IPv6 DNS 记录的勾要取消掉：\n![20230510225519](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230510225519.png)\n\n----------------------------\n# 参考\n[Openwrt Lan 口无法获取IPV6问题（已解决）](https://www.right.com.cn/forum/thread-3071516-1-1.html)\n[IPV6设置求教！（已经解决）](https://www.right.com.cn/forum/thread-2766108-2-1.html)\n\n----------------------------\n失败截图：\n![20230510225812](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230510225812.png)\n![20230510225850](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230510225850.png)","slug":"openwrt-ipv6-开启记录","published":1,"updated":"2024-04-25T17:26:47.173Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvjbaqit003e0vn16sj4a2ls","content":"<ol>\n<li>删除原有的wan,wan6口。</li>\n<li>新建wan口拨号，看是否是双栈下发，即同时生成wan &amp; wan6.</li>\n<li>路由器需要安装<strong>odhcp6c,odhcpd,ip6tables,luci-proto-ipv6</strong><span id=\"more\"></span></li>\n<li>wan口设置：<br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230510225020.png\" alt=\"20230510225020\"></li>\n<li>lan口设置Ipv6分配长度64，高级设置如下：<br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230510225225.png\" alt=\"20230510225225\"></li>\n<li>lan口IPv6设置：<br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230510225325.png\" alt=\"20230510225325\"></li>\n<li>这个禁止解析 IPv6 DNS 记录的勾要取消掉：<br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230510225519.png\" alt=\"20230510225519\"></li>\n</ol>\n<hr>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://www.right.com.cn/forum/thread-3071516-1-1.html\">Openwrt Lan 口无法获取IPV6问题（已解决）</a><br><a href=\"https://www.right.com.cn/forum/thread-2766108-2-1.html\">IPV6设置求教！（已经解决）</a></p>\n<hr>\n<p>失败截图：<br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230510225812.png\" alt=\"20230510225812\"><br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230510225850.png\" alt=\"20230510225850\"></p>\n","site":{"data":{}},"excerpt":"<ol>\n<li>删除原有的wan,wan6口。</li>\n<li>新建wan口拨号，看是否是双栈下发，即同时生成wan &amp; wan6.</li>\n<li>路由器需要安装<strong>odhcp6c,odhcpd,ip6tables,luci-proto-ipv6</strong></li></ol>","more":"\n<li>wan口设置：<br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230510225020.png\" alt=\"20230510225020\"></li>\n<li>lan口设置Ipv6分配长度64，高级设置如下：<br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230510225225.png\" alt=\"20230510225225\"></li>\n<li>lan口IPv6设置：<br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230510225325.png\" alt=\"20230510225325\"></li>\n<li>这个禁止解析 IPv6 DNS 记录的勾要取消掉：<br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230510225519.png\" alt=\"20230510225519\"></li>\n\n<hr>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://www.right.com.cn/forum/thread-3071516-1-1.html\">Openwrt Lan 口无法获取IPV6问题（已解决）</a><br><a href=\"https://www.right.com.cn/forum/thread-2766108-2-1.html\">IPV6设置求教！（已经解决）</a></p>\n<hr>\n<p>失败截图：<br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230510225812.png\" alt=\"20230510225812\"><br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230510225850.png\" alt=\"20230510225850\"></p>"},{"title":"openwrt单臂路由之单线多拨","date":"2023-06-01T14:48:16.000Z","declare":true,"_content":"# 1. 单臂路由拨号上网设置\n## 1.1 接线\n- 光猫和路由器是lan-lan\n- 路由器和单臂路由是lan-lan<!--more-->\n\n## 1.2 单臂路由拨号\n- 修改lan口地址，**取消lan口的桥接设置，**，开启DHCP功能。其余不变\n- 手动创建wan口，接口和lan口的物理接口复用。设置PPPOE拨号。\n## 1.3 路由器和上网设备设置\n- 关闭路由器的DHCP功能，并手动设置路由器为AP模式\n- 设置上网的网关和DNS都为单臂路由的地址\n\n## 1.4 修改单臂路由的防火墙的区域设置，使得LAN-WAN之间的数据流通\n\n<img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230601144607.png\" width=\"70%\" height=\"70%\">\n\n<img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230601144627.png\" width=\"70%\" height=\"70%\">\n\n## 1.5 设置单臂路由中DHCP/DNS中设置DNS转发\n\n-------------------------------------\n# 2. 单线多拨\n> 经测试，如果是多拨的账号不同，是可以拨通的，如果采用同一账号，就拨不通\n> 如果拨不通，按照如下效果图中的顺序，自上而下的重新连接各个网络接口\n\n- 拨通的效果图如下：\n\n<img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230601221149.png\" width=\"70%\" height=\"70%\">\n\n设置方式如下：\n\n<img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230601221258.png\" width=\"70%\" height=\"70%\">\n\n<img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230601221324.png\" width=\"70%\" height=\"70%\">\n\n<img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230601221348.png\" width=\"70%\" height=\"70%\">\n\n> 重点注意虚拟wan口的防火墙设置和防火墙的区域设置\n\n## 2.1 单线多拨（双账号）测速图\n> 测速基于无线，不准确\n\n<img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230601221529.png\" width=\"50%\" height=\"50%\">\n\n<img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230601221536.png\" width=\"50%\" height=\"50%\">\n\n<img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230601221543.png\" width=\"50%\" height=\"50%\">\n\n## 2.2 关闭多拨测速图\n\n<img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230601221624.png\" width=\"50%\" height=\"50%\">\n\n<img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230601221629.png\" width=\"50%\" height=\"50%\">\n\n<img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230601221634.png\" width=\"50%\" height=\"50%\">\n\n# 3. 结论\n或许是由于实验室网络接口被计算机网络中心限速的原因，并没有什么宽带叠加的效果，反而会更加不稳定。\n**一言以蔽之：没用**\n\n# 4. References\n[单臂路由|N1盒子(OpenWRT)单线多拨实现网速叠加|Owen带你一起玩](https://youtu.be/0uNntGhMLvI)\n\n","source":"_posts/openwrt单臂路由之单线多拨.md","raw":"---\ntitle: openwrt单臂路由之单线多拨\ndate: 2023-06-01 14:48:16\ntags:\n    - openwrt\n    - 路由器\ndeclare: true\n---\n# 1. 单臂路由拨号上网设置\n## 1.1 接线\n- 光猫和路由器是lan-lan\n- 路由器和单臂路由是lan-lan<!--more-->\n\n## 1.2 单臂路由拨号\n- 修改lan口地址，**取消lan口的桥接设置，**，开启DHCP功能。其余不变\n- 手动创建wan口，接口和lan口的物理接口复用。设置PPPOE拨号。\n## 1.3 路由器和上网设备设置\n- 关闭路由器的DHCP功能，并手动设置路由器为AP模式\n- 设置上网的网关和DNS都为单臂路由的地址\n\n## 1.4 修改单臂路由的防火墙的区域设置，使得LAN-WAN之间的数据流通\n\n<img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230601144607.png\" width=\"70%\" height=\"70%\">\n\n<img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230601144627.png\" width=\"70%\" height=\"70%\">\n\n## 1.5 设置单臂路由中DHCP/DNS中设置DNS转发\n\n-------------------------------------\n# 2. 单线多拨\n> 经测试，如果是多拨的账号不同，是可以拨通的，如果采用同一账号，就拨不通\n> 如果拨不通，按照如下效果图中的顺序，自上而下的重新连接各个网络接口\n\n- 拨通的效果图如下：\n\n<img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230601221149.png\" width=\"70%\" height=\"70%\">\n\n设置方式如下：\n\n<img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230601221258.png\" width=\"70%\" height=\"70%\">\n\n<img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230601221324.png\" width=\"70%\" height=\"70%\">\n\n<img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230601221348.png\" width=\"70%\" height=\"70%\">\n\n> 重点注意虚拟wan口的防火墙设置和防火墙的区域设置\n\n## 2.1 单线多拨（双账号）测速图\n> 测速基于无线，不准确\n\n<img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230601221529.png\" width=\"50%\" height=\"50%\">\n\n<img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230601221536.png\" width=\"50%\" height=\"50%\">\n\n<img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230601221543.png\" width=\"50%\" height=\"50%\">\n\n## 2.2 关闭多拨测速图\n\n<img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230601221624.png\" width=\"50%\" height=\"50%\">\n\n<img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230601221629.png\" width=\"50%\" height=\"50%\">\n\n<img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230601221634.png\" width=\"50%\" height=\"50%\">\n\n# 3. 结论\n或许是由于实验室网络接口被计算机网络中心限速的原因，并没有什么宽带叠加的效果，反而会更加不稳定。\n**一言以蔽之：没用**\n\n# 4. References\n[单臂路由|N1盒子(OpenWRT)单线多拨实现网速叠加|Owen带你一起玩](https://youtu.be/0uNntGhMLvI)\n\n","slug":"openwrt单臂路由之单线多拨","published":1,"updated":"2024-04-25T17:26:46.823Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvjbaqiu003f0vn16h3f4f3t","content":"<h1 id=\"1-单臂路由拨号上网设置\"><a href=\"#1-单臂路由拨号上网设置\" class=\"headerlink\" title=\"1. 单臂路由拨号上网设置\"></a>1. 单臂路由拨号上网设置</h1><h2 id=\"1-1-接线\"><a href=\"#1-1-接线\" class=\"headerlink\" title=\"1.1 接线\"></a>1.1 接线</h2><ul>\n<li>光猫和路由器是lan-lan</li>\n<li>路由器和单臂路由是lan-lan<span id=\"more\"></span></li>\n</ul>\n<h2 id=\"1-2-单臂路由拨号\"><a href=\"#1-2-单臂路由拨号\" class=\"headerlink\" title=\"1.2 单臂路由拨号\"></a>1.2 单臂路由拨号</h2><ul>\n<li>修改lan口地址，<strong>取消lan口的桥接设置，</strong>，开启DHCP功能。其余不变</li>\n<li>手动创建wan口，接口和lan口的物理接口复用。设置PPPOE拨号。</li>\n</ul>\n<h2 id=\"1-3-路由器和上网设备设置\"><a href=\"#1-3-路由器和上网设备设置\" class=\"headerlink\" title=\"1.3 路由器和上网设备设置\"></a>1.3 路由器和上网设备设置</h2><ul>\n<li>关闭路由器的DHCP功能，并手动设置路由器为AP模式</li>\n<li>设置上网的网关和DNS都为单臂路由的地址</li>\n</ul>\n<h2 id=\"1-4-修改单臂路由的防火墙的区域设置，使得LAN-WAN之间的数据流通\"><a href=\"#1-4-修改单臂路由的防火墙的区域设置，使得LAN-WAN之间的数据流通\" class=\"headerlink\" title=\"1.4 修改单臂路由的防火墙的区域设置，使得LAN-WAN之间的数据流通\"></a>1.4 修改单臂路由的防火墙的区域设置，使得LAN-WAN之间的数据流通</h2><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230601144607.png\" width=\"70%\" height=\"70%\">\n\n<img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230601144627.png\" width=\"70%\" height=\"70%\">\n\n<h2 id=\"1-5-设置单臂路由中DHCP-x2F-DNS中设置DNS转发\"><a href=\"#1-5-设置单臂路由中DHCP-x2F-DNS中设置DNS转发\" class=\"headerlink\" title=\"1.5 设置单臂路由中DHCP&#x2F;DNS中设置DNS转发\"></a>1.5 设置单臂路由中DHCP&#x2F;DNS中设置DNS转发</h2><hr>\n<h1 id=\"2-单线多拨\"><a href=\"#2-单线多拨\" class=\"headerlink\" title=\"2. 单线多拨\"></a>2. 单线多拨</h1><blockquote>\n<p>经测试，如果是多拨的账号不同，是可以拨通的，如果采用同一账号，就拨不通<br>如果拨不通，按照如下效果图中的顺序，自上而下的重新连接各个网络接口</p>\n</blockquote>\n<ul>\n<li>拨通的效果图如下：</li>\n</ul>\n<img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230601221149.png\" width=\"70%\" height=\"70%\">\n\n<p>设置方式如下：</p>\n<img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230601221258.png\" width=\"70%\" height=\"70%\">\n\n<img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230601221324.png\" width=\"70%\" height=\"70%\">\n\n<img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230601221348.png\" width=\"70%\" height=\"70%\">\n\n<blockquote>\n<p>重点注意虚拟wan口的防火墙设置和防火墙的区域设置</p>\n</blockquote>\n<h2 id=\"2-1-单线多拨（双账号）测速图\"><a href=\"#2-1-单线多拨（双账号）测速图\" class=\"headerlink\" title=\"2.1 单线多拨（双账号）测速图\"></a>2.1 单线多拨（双账号）测速图</h2><blockquote>\n<p>测速基于无线，不准确</p>\n</blockquote>\n<img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230601221529.png\" width=\"50%\" height=\"50%\">\n\n<img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230601221536.png\" width=\"50%\" height=\"50%\">\n\n<img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230601221543.png\" width=\"50%\" height=\"50%\">\n\n<h2 id=\"2-2-关闭多拨测速图\"><a href=\"#2-2-关闭多拨测速图\" class=\"headerlink\" title=\"2.2 关闭多拨测速图\"></a>2.2 关闭多拨测速图</h2><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230601221624.png\" width=\"50%\" height=\"50%\">\n\n<img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230601221629.png\" width=\"50%\" height=\"50%\">\n\n<img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230601221634.png\" width=\"50%\" height=\"50%\">\n\n<h1 id=\"3-结论\"><a href=\"#3-结论\" class=\"headerlink\" title=\"3. 结论\"></a>3. 结论</h1><p>或许是由于实验室网络接口被计算机网络中心限速的原因，并没有什么宽带叠加的效果，反而会更加不稳定。<br><strong>一言以蔽之：没用</strong></p>\n<h1 id=\"4-References\"><a href=\"#4-References\" class=\"headerlink\" title=\"4. References\"></a>4. References</h1><p><a href=\"https://youtu.be/0uNntGhMLvI\">单臂路由|N1盒子(OpenWRT)单线多拨实现网速叠加|Owen带你一起玩</a></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"1-单臂路由拨号上网设置\"><a href=\"#1-单臂路由拨号上网设置\" class=\"headerlink\" title=\"1. 单臂路由拨号上网设置\"></a>1. 单臂路由拨号上网设置</h1><h2 id=\"1-1-接线\"><a href=\"#1-1-接线\" class=\"headerlink\" title=\"1.1 接线\"></a>1.1 接线</h2><ul>\n<li>光猫和路由器是lan-lan</li>\n<li>路由器和单臂路由是lan-lan</li></ul>","more":"\n\n<h2 id=\"1-2-单臂路由拨号\"><a href=\"#1-2-单臂路由拨号\" class=\"headerlink\" title=\"1.2 单臂路由拨号\"></a>1.2 单臂路由拨号</h2><ul>\n<li>修改lan口地址，<strong>取消lan口的桥接设置，</strong>，开启DHCP功能。其余不变</li>\n<li>手动创建wan口，接口和lan口的物理接口复用。设置PPPOE拨号。</li>\n</ul>\n<h2 id=\"1-3-路由器和上网设备设置\"><a href=\"#1-3-路由器和上网设备设置\" class=\"headerlink\" title=\"1.3 路由器和上网设备设置\"></a>1.3 路由器和上网设备设置</h2><ul>\n<li>关闭路由器的DHCP功能，并手动设置路由器为AP模式</li>\n<li>设置上网的网关和DNS都为单臂路由的地址</li>\n</ul>\n<h2 id=\"1-4-修改单臂路由的防火墙的区域设置，使得LAN-WAN之间的数据流通\"><a href=\"#1-4-修改单臂路由的防火墙的区域设置，使得LAN-WAN之间的数据流通\" class=\"headerlink\" title=\"1.4 修改单臂路由的防火墙的区域设置，使得LAN-WAN之间的数据流通\"></a>1.4 修改单臂路由的防火墙的区域设置，使得LAN-WAN之间的数据流通</h2><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230601144607.png\" width=\"70%\" height=\"70%\">\n\n<img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230601144627.png\" width=\"70%\" height=\"70%\">\n\n<h2 id=\"1-5-设置单臂路由中DHCP-x2F-DNS中设置DNS转发\"><a href=\"#1-5-设置单臂路由中DHCP-x2F-DNS中设置DNS转发\" class=\"headerlink\" title=\"1.5 设置单臂路由中DHCP&#x2F;DNS中设置DNS转发\"></a>1.5 设置单臂路由中DHCP&#x2F;DNS中设置DNS转发</h2><hr>\n<h1 id=\"2-单线多拨\"><a href=\"#2-单线多拨\" class=\"headerlink\" title=\"2. 单线多拨\"></a>2. 单线多拨</h1><blockquote>\n<p>经测试，如果是多拨的账号不同，是可以拨通的，如果采用同一账号，就拨不通<br>如果拨不通，按照如下效果图中的顺序，自上而下的重新连接各个网络接口</p>\n</blockquote>\n<ul>\n<li>拨通的效果图如下：</li>\n</ul>\n<img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230601221149.png\" width=\"70%\" height=\"70%\">\n\n<p>设置方式如下：</p>\n<img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230601221258.png\" width=\"70%\" height=\"70%\">\n\n<img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230601221324.png\" width=\"70%\" height=\"70%\">\n\n<img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230601221348.png\" width=\"70%\" height=\"70%\">\n\n<blockquote>\n<p>重点注意虚拟wan口的防火墙设置和防火墙的区域设置</p>\n</blockquote>\n<h2 id=\"2-1-单线多拨（双账号）测速图\"><a href=\"#2-1-单线多拨（双账号）测速图\" class=\"headerlink\" title=\"2.1 单线多拨（双账号）测速图\"></a>2.1 单线多拨（双账号）测速图</h2><blockquote>\n<p>测速基于无线，不准确</p>\n</blockquote>\n<img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230601221529.png\" width=\"50%\" height=\"50%\">\n\n<img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230601221536.png\" width=\"50%\" height=\"50%\">\n\n<img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230601221543.png\" width=\"50%\" height=\"50%\">\n\n<h2 id=\"2-2-关闭多拨测速图\"><a href=\"#2-2-关闭多拨测速图\" class=\"headerlink\" title=\"2.2 关闭多拨测速图\"></a>2.2 关闭多拨测速图</h2><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230601221624.png\" width=\"50%\" height=\"50%\">\n\n<img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230601221629.png\" width=\"50%\" height=\"50%\">\n\n<img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230601221634.png\" width=\"50%\" height=\"50%\">\n\n<h1 id=\"3-结论\"><a href=\"#3-结论\" class=\"headerlink\" title=\"3. 结论\"></a>3. 结论</h1><p>或许是由于实验室网络接口被计算机网络中心限速的原因，并没有什么宽带叠加的效果，反而会更加不稳定。<br><strong>一言以蔽之：没用</strong></p>\n<h1 id=\"4-References\"><a href=\"#4-References\" class=\"headerlink\" title=\"4. References\"></a>4. References</h1><p><a href=\"https://youtu.be/0uNntGhMLvI\">单臂路由|N1盒子(OpenWRT)单线多拨实现网速叠加|Owen带你一起玩</a></p>"},{"title":"openwrt卡在正在应用更改","date":"2023-05-09T17:41:26.000Z","_content":"修改任何配置应用时都会卡在 /etc/config/firewall 步骤，关闭广告屏蔽大师后就正常了\n[参考](https://github.com/immortalwrt/immortalwrt/issues/363)","source":"_posts/openwrt卡在正在应用更改.md","raw":"---\ntitle: openwrt卡在正在应用更改\ndate: 2023-05-09 17:41:26\ntags:\n    - openwrt\n    - 路由器\n---\n修改任何配置应用时都会卡在 /etc/config/firewall 步骤，关闭广告屏蔽大师后就正常了\n[参考](https://github.com/immortalwrt/immortalwrt/issues/363)","slug":"openwrt卡在正在应用更改","published":1,"updated":"2024-04-25T17:26:46.923Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvjbaqiv003h0vn1flzihwxe","content":"<p>修改任何配置应用时都会卡在 &#x2F;etc&#x2F;config&#x2F;firewall 步骤，关闭广告屏蔽大师后就正常了<br><a href=\"https://github.com/immortalwrt/immortalwrt/issues/363\">参考</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>修改任何配置应用时都会卡在 &#x2F;etc&#x2F;config&#x2F;firewall 步骤，关闭广告屏蔽大师后就正常了<br><a href=\"https://github.com/immortalwrt/immortalwrt/issues/363\">参考</a></p>\n"},{"title":"openwrt进行DDNS解析","date":"2023-05-19T13:03:15.000Z","declare":true,"_content":"1. 在cloudflare添加一条A记录<!--more-->\n![20230519130833](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230519130833.png)\n\n2. 获取cloudflare的API key\n[API Tokens](https://dash.cloudflare.com/profile/api-tokens)\n\n复制这串密钥\n![20230519131101](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230519131101.png)\n\n3. openwrt设置DDNS\n![20230519132624](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230519132624.png)\n\n> 这里如果有问题，把route都改成www，包括cloudflare那里的A记录也要更改\n\n4. 使用url转发来避免使用域名加端口号进行访问\n- 设置页面规则\n![20230519135334](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230519135334.png)\n- 添加一条新记录，要和页面规则的相匹配\n![20230519135539](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230519135539.png)\n\n[【278】如何随时随地访问家中的软路由和其他设备？远程访问端口转发保姆级教程丨CloudFlare设置动态DNS 域名解析 URL转发](https://youtu.be/Y0HGp94eHGU?t=889)","source":"_posts/openwrt进行DDNS解析.md","raw":"---\ntitle: openwrt进行DDNS解析\ndate: 2023-05-19 13:03:15\ntags:\n    - 域名解析\n    - openwrt\n    - 路由器\ndeclare: true\n---\n1. 在cloudflare添加一条A记录<!--more-->\n![20230519130833](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230519130833.png)\n\n2. 获取cloudflare的API key\n[API Tokens](https://dash.cloudflare.com/profile/api-tokens)\n\n复制这串密钥\n![20230519131101](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230519131101.png)\n\n3. openwrt设置DDNS\n![20230519132624](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230519132624.png)\n\n> 这里如果有问题，把route都改成www，包括cloudflare那里的A记录也要更改\n\n4. 使用url转发来避免使用域名加端口号进行访问\n- 设置页面规则\n![20230519135334](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230519135334.png)\n- 添加一条新记录，要和页面规则的相匹配\n![20230519135539](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230519135539.png)\n\n[【278】如何随时随地访问家中的软路由和其他设备？远程访问端口转发保姆级教程丨CloudFlare设置动态DNS 域名解析 URL转发](https://youtu.be/Y0HGp94eHGU?t=889)","slug":"openwrt进行DDNS解析","published":1,"updated":"2024-04-25T17:26:47.943Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvjbaqiw003j0vn1hxpp0tky","content":"<ol>\n<li><p>在cloudflare添加一条A记录<span id=\"more\"></span><br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230519130833.png\" alt=\"20230519130833\"></p>\n</li>\n<li><p>获取cloudflare的API key<br><a href=\"https://dash.cloudflare.com/profile/api-tokens\">API Tokens</a></p>\n</li>\n</ol>\n<p>复制这串密钥<br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230519131101.png\" alt=\"20230519131101\"></p>\n<ol start=\"3\">\n<li>openwrt设置DDNS<br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230519132624.png\" alt=\"20230519132624\"></li>\n</ol>\n<blockquote>\n<p>这里如果有问题，把route都改成www，包括cloudflare那里的A记录也要更改</p>\n</blockquote>\n<ol start=\"4\">\n<li>使用url转发来避免使用域名加端口号进行访问</li>\n</ol>\n<ul>\n<li>设置页面规则<br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230519135334.png\" alt=\"20230519135334\"></li>\n<li>添加一条新记录，要和页面规则的相匹配<br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230519135539.png\" alt=\"20230519135539\"></li>\n</ul>\n<p><a href=\"https://youtu.be/Y0HGp94eHGU?t=889\">【278】如何随时随地访问家中的软路由和其他设备？远程访问端口转发保姆级教程丨CloudFlare设置动态DNS 域名解析 URL转发</a></p>\n","site":{"data":{}},"excerpt":"<ol>\n<li><p>在cloudflare添加一条A记录</p></li></ol>","more":"<br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230519130833.png\" alt=\"20230519130833\"><p></p>\n\n<li><p>获取cloudflare的API key<br><a href=\"https://dash.cloudflare.com/profile/api-tokens\">API Tokens</a></p>\n</li>\n\n<p>复制这串密钥<br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230519131101.png\" alt=\"20230519131101\"></p>\n<ol start=\"3\">\n<li>openwrt设置DDNS<br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230519132624.png\" alt=\"20230519132624\"></li>\n</ol>\n<blockquote>\n<p>这里如果有问题，把route都改成www，包括cloudflare那里的A记录也要更改</p>\n</blockquote>\n<ol start=\"4\">\n<li>使用url转发来避免使用域名加端口号进行访问</li>\n</ol>\n<ul>\n<li>设置页面规则<br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230519135334.png\" alt=\"20230519135334\"></li>\n<li>添加一条新记录，要和页面规则的相匹配<br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230519135539.png\" alt=\"20230519135539\"></li>\n</ul>\n<p><a href=\"https://youtu.be/Y0HGp94eHGU?t=889\">【278】如何随时随地访问家中的软路由和其他设备？远程访问端口转发保姆级教程丨CloudFlare设置动态DNS 域名解析 URL转发</a></p>"},{"title":"pytorch学习路线","date":"2023-08-31T12:06:16.000Z","declare":true,"_content":"\n1. [PyTorch官网](https://pytorch.org/)\n2. [PyTorch官方教程](https://pytorch.org/tutorials/beginner/basics/intro.html)\n3. [pytorch-tutorial](https://github.com/Corner430/pytorch-tutorial)<!--more-->\n4. [pytorch-handbook](https://github.com/zergtant/pytorch-handbook)\n5. [d2l](https://github.com/d2l-ai/d2l-zh)\n6. [官方文档](https://pytorch.org/docs/stable/index.html)\n7. [autograd](https://pytorch.org/docs/master/notes/autograd.html),[nn.Module](https://pytorch.org/docs/stable/nn.html),[nn.functional](https://pytorch.org/docs/stable/nn.functional.html),[optim](https://pytorch.org/docs/stable/optim.html)\n8. [example](https://github.com/jcjohnson/pytorch-examples)\n9. [tunning playbook](https://github.com/google-research/tuning_playbook)\n10. [Pytorch Forums](https://discuss.pytorch.org/)\n\n------------------------------\n[torchvision model](https://pytorch.org/vision/0.8/models.html)\n[torchvision datasets](https://pytorch.org/vision/0.8/datasets.html)","source":"_posts/pytorch学习路线.md","raw":"---\ntitle: pytorch学习路线\ndate: 2023-08-31 12:06:16\ntags:\n    - 科研\n    - pytorch\ndeclare: true\n---\n\n1. [PyTorch官网](https://pytorch.org/)\n2. [PyTorch官方教程](https://pytorch.org/tutorials/beginner/basics/intro.html)\n3. [pytorch-tutorial](https://github.com/Corner430/pytorch-tutorial)<!--more-->\n4. [pytorch-handbook](https://github.com/zergtant/pytorch-handbook)\n5. [d2l](https://github.com/d2l-ai/d2l-zh)\n6. [官方文档](https://pytorch.org/docs/stable/index.html)\n7. [autograd](https://pytorch.org/docs/master/notes/autograd.html),[nn.Module](https://pytorch.org/docs/stable/nn.html),[nn.functional](https://pytorch.org/docs/stable/nn.functional.html),[optim](https://pytorch.org/docs/stable/optim.html)\n8. [example](https://github.com/jcjohnson/pytorch-examples)\n9. [tunning playbook](https://github.com/google-research/tuning_playbook)\n10. [Pytorch Forums](https://discuss.pytorch.org/)\n\n------------------------------\n[torchvision model](https://pytorch.org/vision/0.8/models.html)\n[torchvision datasets](https://pytorch.org/vision/0.8/datasets.html)","slug":"pytorch学习路线","published":1,"updated":"2024-04-25T17:26:48.093Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvjbaqiy003m0vn183x93x6t","content":"<ol>\n<li><a href=\"https://pytorch.org/\">PyTorch官网</a></li>\n<li><a href=\"https://pytorch.org/tutorials/beginner/basics/intro.html\">PyTorch官方教程</a></li>\n<li><a href=\"https://github.com/Corner430/pytorch-tutorial\">pytorch-tutorial</a><span id=\"more\"></span></li>\n<li><a href=\"https://github.com/zergtant/pytorch-handbook\">pytorch-handbook</a></li>\n<li><a href=\"https://github.com/d2l-ai/d2l-zh\">d2l</a></li>\n<li><a href=\"https://pytorch.org/docs/stable/index.html\">官方文档</a></li>\n<li><a href=\"https://pytorch.org/docs/master/notes/autograd.html\">autograd</a>,<a href=\"https://pytorch.org/docs/stable/nn.html\">nn.Module</a>,<a href=\"https://pytorch.org/docs/stable/nn.functional.html\">nn.functional</a>,<a href=\"https://pytorch.org/docs/stable/optim.html\">optim</a></li>\n<li><a href=\"https://github.com/jcjohnson/pytorch-examples\">example</a></li>\n<li><a href=\"https://github.com/google-research/tuning_playbook\">tunning playbook</a></li>\n<li><a href=\"https://discuss.pytorch.org/\">Pytorch Forums</a></li>\n</ol>\n<hr>\n<p><a href=\"https://pytorch.org/vision/0.8/models.html\">torchvision model</a><br><a href=\"https://pytorch.org/vision/0.8/datasets.html\">torchvision datasets</a></p>\n","site":{"data":{}},"excerpt":"<ol>\n<li><a href=\"https://pytorch.org/\">PyTorch官网</a></li>\n<li><a href=\"https://pytorch.org/tutorials/beginner/basics/intro.html\">PyTorch官方教程</a></li>\n<li><a href=\"https://github.com/Corner430/pytorch-tutorial\">pytorch-tutorial</a></li></ol>","more":"\n<li><a href=\"https://github.com/zergtant/pytorch-handbook\">pytorch-handbook</a></li>\n<li><a href=\"https://github.com/d2l-ai/d2l-zh\">d2l</a></li>\n<li><a href=\"https://pytorch.org/docs/stable/index.html\">官方文档</a></li>\n<li><a href=\"https://pytorch.org/docs/master/notes/autograd.html\">autograd</a>,<a href=\"https://pytorch.org/docs/stable/nn.html\">nn.Module</a>,<a href=\"https://pytorch.org/docs/stable/nn.functional.html\">nn.functional</a>,<a href=\"https://pytorch.org/docs/stable/optim.html\">optim</a></li>\n<li><a href=\"https://github.com/jcjohnson/pytorch-examples\">example</a></li>\n<li><a href=\"https://github.com/google-research/tuning_playbook\">tunning playbook</a></li>\n<li><a href=\"https://discuss.pytorch.org/\">Pytorch Forums</a></li>\n\n<hr>\n<p><a href=\"https://pytorch.org/vision/0.8/models.html\">torchvision model</a><br><a href=\"https://pytorch.org/vision/0.8/datasets.html\">torchvision datasets</a></p>"},{"title":"ssrplus和passwall","date":"2023-06-04T13:16:57.000Z","declare":true,"_content":"如果节点不够优质，选择ssrplus，将自动切换的检测时间调短。并手动选择一些自动切换的节点。","source":"_posts/ssrplus和passwall.md","raw":"---\ntitle: ssrplus和passwall\ndate: 2023-06-04 13:16:57\ntags:\n    - 科学上网\ndeclare: true\n---\n如果节点不够优质，选择ssrplus，将自动切换的检测时间调短。并手动选择一些自动切换的节点。","slug":"ssrplus和passwall","published":1,"updated":"2024-04-25T17:26:48.453Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvjbaqiz003o0vn18fut616f","content":"<p>如果节点不够优质，选择ssrplus，将自动切换的检测时间调短。并手动选择一些自动切换的节点。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>如果节点不够优质，选择ssrplus，将自动切换的检测时间调短。并手动选择一些自动切换的节点。</p>\n"},{"title":"terminal dictionary","date":"2023-04-03T16:39:18.000Z","declare":true,"_content":"##### 1. [Wudao-dict](https://github.com/ChestnutHeng/Wudao-dict)\n\n##### 2. sdcv<!--more-->\n`sudo apt-get install sdcv`\nDictionary path **/home/corner/.stardict/dic**, that is **~/.stardict/dic**\n-sdcv [options] word\n-n: Only display the names of words.\n-p: Only display the phonetic transcription of the word.\n-u: Only display the definition of the word.\n\n- [StarDict Dictionaries -- 星际译王词库](https://web.archive.org/web/20200702000038/http://download.huzheng.org/)\n- [zh_CN 简体中文词典](http://download.huzheng.org/zh_CN/)\n","source":"_posts/terminal-dictionary.md","raw":"---\ntitle: terminal dictionary\ndate: 2023-04-03 16:39:18\ntags:\n    - Linux\ndeclare: true\n---\n##### 1. [Wudao-dict](https://github.com/ChestnutHeng/Wudao-dict)\n\n##### 2. sdcv<!--more-->\n`sudo apt-get install sdcv`\nDictionary path **/home/corner/.stardict/dic**, that is **~/.stardict/dic**\n-sdcv [options] word\n-n: Only display the names of words.\n-p: Only display the phonetic transcription of the word.\n-u: Only display the definition of the word.\n\n- [StarDict Dictionaries -- 星际译王词库](https://web.archive.org/web/20200702000038/http://download.huzheng.org/)\n- [zh_CN 简体中文词典](http://download.huzheng.org/zh_CN/)\n","slug":"terminal-dictionary","published":1,"updated":"2024-04-25T17:26:45.713Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvjbaqj0003q0vn1em67a2e7","content":"<h5 id=\"1-Wudao-dict\"><a href=\"#1-Wudao-dict\" class=\"headerlink\" title=\"1. Wudao-dict\"></a>1. <a href=\"https://github.com/ChestnutHeng/Wudao-dict\">Wudao-dict</a></h5><h5 id=\"2-sdcv\"><a href=\"#2-sdcv\" class=\"headerlink\" title=\"2. sdcv\"></a>2. sdcv<span id=\"more\"></span></h5><p><code>sudo apt-get install sdcv</code><br>Dictionary path <strong>&#x2F;home&#x2F;corner&#x2F;.stardict&#x2F;dic</strong>, that is <strong>~&#x2F;.stardict&#x2F;dic</strong><br>-sdcv [options] word<br>-n: Only display the names of words.<br>-p: Only display the phonetic transcription of the word.<br>-u: Only display the definition of the word.</p>\n<ul>\n<li><a href=\"https://web.archive.org/web/20200702000038/http://download.huzheng.org/\">StarDict Dictionaries – 星际译王词库</a></li>\n<li><a href=\"http://download.huzheng.org/zh_CN/\">zh_CN 简体中文词典</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<h5 id=\"1-Wudao-dict\"><a href=\"#1-Wudao-dict\" class=\"headerlink\" title=\"1. Wudao-dict\"></a>1. <a href=\"https://github.com/ChestnutHeng/Wudao-dict\">Wudao-dict</a></h5><h5 id=\"2-sdcv\"><a href=\"#2-sdcv\" class=\"headerlink\" title=\"2. sdcv\"></a>2. sdcv</h5>","more":"<p><code>sudo apt-get install sdcv</code><br>Dictionary path <strong>&#x2F;home&#x2F;corner&#x2F;.stardict&#x2F;dic</strong>, that is <strong>~&#x2F;.stardict&#x2F;dic</strong><br>-sdcv [options] word<br>-n: Only display the names of words.<br>-p: Only display the phonetic transcription of the word.<br>-u: Only display the definition of the word.</p>\n<ul>\n<li><a href=\"https://web.archive.org/web/20200702000038/http://download.huzheng.org/\">StarDict Dictionaries – 星际译王词库</a></li>\n<li><a href=\"http://download.huzheng.org/zh_CN/\">zh_CN 简体中文词典</a></li>\n</ul>"},{"title":"vscode+colab","date":"2023-12-19T01:29:54.000Z","_content":"`!pip install -U git+https://github.com/amitness/colab-connect.git`\n\n```python\nfrom colabconnect import colabconnect\n\ncolabconnect()\n```\n<!--more-->\n\n------------------------\n\n参照[amitness/colab-connect](https://github.com/amitness/colab-connect)","source":"_posts/vscode-colab.md","raw":"---\ntitle: vscode+colab\ndate: 2023-12-19 01:29:54\ntags:\n    - vscode\n    - colab\n---\n`!pip install -U git+https://github.com/amitness/colab-connect.git`\n\n```python\nfrom colabconnect import colabconnect\n\ncolabconnect()\n```\n<!--more-->\n\n------------------------\n\n参照[amitness/colab-connect](https://github.com/amitness/colab-connect)","slug":"vscode-colab","published":1,"updated":"2024-04-25T17:26:45.953Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvjbaqj2003t0vn16dxkel44","content":"<p><code>!pip install -U git+https://github.com/amitness/colab-connect.git</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> colabconnect <span class=\"keyword\">import</span> colabconnect</span><br><span class=\"line\"></span><br><span class=\"line\">colabconnect()</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n\n<hr>\n<p>参照<a href=\"https://github.com/amitness/colab-connect\">amitness&#x2F;colab-connect</a></p>\n","site":{"data":{}},"excerpt":"<p><code>!pip install -U git+https://github.com/amitness/colab-connect.git</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> colabconnect <span class=\"keyword\">import</span> colabconnect</span><br><span class=\"line\"></span><br><span class=\"line\">colabconnect()</span><br></pre></td></tr></table></figure>","more":"<hr>\n<p>参照<a href=\"https://github.com/amitness/colab-connect\">amitness&#x2F;colab-connect</a></p>"},{"title":"vscode 无法 debug python 中 import 的函数","date":"2023-11-26T21:02:10.000Z","declare":true,"_content":"找到当前项目的 .vscode/launch.json 文件，修改配置项 \"justMyCode\": false，即可。<!--more-->\n\n> 注意 debug 时，要选中所配置的 launch.json 文件，否则仍然是全局配置在生效。","source":"_posts/vscode-无法-debug-python-中-import-的函数.md","raw":"---\ntitle: vscode 无法 debug python 中 import 的函数\ndate: 2023-11-26 21:02:10\ntags:\n    - vscode\n    - python\ndeclare: true\n---\n找到当前项目的 .vscode/launch.json 文件，修改配置项 \"justMyCode\": false，即可。<!--more-->\n\n> 注意 debug 时，要选中所配置的 launch.json 文件，否则仍然是全局配置在生效。","slug":"vscode-无法-debug-python-中-import-的函数","published":1,"updated":"2024-04-25T17:26:48.233Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvjbaqj3003v0vn1174q1kam","content":"<p>找到当前项目的 .vscode&#x2F;launch.json 文件，修改配置项 “justMyCode”: false，即可。<span id=\"more\"></span></p>\n<blockquote>\n<p>注意 debug 时，要选中所配置的 launch.json 文件，否则仍然是全局配置在生效。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>找到当前项目的 .vscode&#x2F;launch.json 文件，修改配置项 “justMyCode”: false，即可。</p>","more":"<p></p>\n<blockquote>\n<p>注意 debug 时，要选中所配置的 launch.json 文件，否则仍然是全局配置在生效。</p>\n</blockquote>"},{"title":"vscode中jupyter的函数定义点击无法跳转","date":"2023-08-10T13:03:03.000Z","declare":true,"_content":"![20230810130745](https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20230810130745.png)\n","source":"_posts/vscode中jupyter的函数定义点击无法跳转.md","raw":"---\ntitle: vscode中jupyter的函数定义点击无法跳转\ndate: 2023-08-10 13:03:03\ntags:\n    - vscode\n    - jupyter\ndeclare: true\n---\n![20230810130745](https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20230810130745.png)\n","slug":"vscode中jupyter的函数定义点击无法跳转","published":1,"updated":"2024-04-25T17:26:45.643Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvjbaqj4003y0vn19eha7pqq","content":"<p><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20230810130745.png\" alt=\"20230810130745\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20230810130745.png\" alt=\"20230810130745\"></p>\n"},{"title":"vscode显示类似Visual Studio的内存窗口","date":"2023-04-17T14:48:40.000Z","declare":true,"toc":1,"_content":"Visual Studio有着这样的内存窗口显示<!--more-->\n![20230417145048](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230417145048.png)\n怎么在vscode中达到同等效果，有两种方案。\n\n### 插件\nVSCode本身并不提供像Visual Studio一样查看内存的功能。不过，你可以通过安装适当的扩展来获得此功能。\n\n有一个名为**CppTools**的扩展可以提供类似于Visual Studio的内存窗口和堆栈窗口。安装此扩展后，你可以通过以下步骤查看内存：\n\n- 在VSCode中打开一个C++项目。\n- 启动调试器，并在程序暂停时进入调试模式。\n- 在\"调试\"菜单中选择\"打开内存窗口\"。\n- 在内存窗口中输入你要查看的内存地址。\n- 查看该地址处的内存内容。\n\n> 请注意，由于C++语言的灵活性，你需要非常小心地处理指针和内存管理，以避免程序崩溃或导致安全漏洞。因此，使用内存窗口时请务必小心谨慎。\n\n### 程序\n```cpp\n/* 这个函数接受两个参数：一个指向要打印的内存区域的起始地址的指针和要打印的字节数。它将内存区域中的每个字节打印为两个十六进制数字，每行打印16个字节。*/\n#include <stdio.h>\n#include <stdint.h>\n\nvoid print_memory(const void* start_addr, size_t num_bytes) {\n    const uint8_t* data = (const uint8_t*)start_addr;\n    for (size_t i = 0; i < num_bytes; i++) {\n        printf(\"%02X \", data[i]);\n        if ((i+1) % 16 == 0) printf(\"\\n\");\n    }\n    printf(\"\\n\");\n}\n\n\nint main() {\n    int32_t x = 12345;\n    print_memory(&x, sizeof(x));\n    return 0;\n}\n\n//结果如下：\n39 30 00 00 \n\n/* 这是x变量的十六进制表示形式，从低位到高位排列。注意，这个输出的格式仅用于演示目的，实际应用中你可能需要根据需要修改print_memory函数以满足你的具体需求。\n\n需要注意的是，这种方法仅适用于在程序中显示内存的内容，而不是像Visual Studio内存窗口一样在程序运行时调试内存。因此，它可能无法满足某些高级调试需求。*/\n```\n\n-------------------------------------------------\n下面是使得每行显示四个字节，行首显示地址的程序\n```cpp\n#include <stdio.h>\n#include <stdint.h>\n\nvoid print_memory(const void* start_addr, size_t num_bytes) {\n    const uint8_t* data = (const uint8_t*)start_addr;\n    const uintptr_t start_address = (uintptr_t)start_addr;\n    const uintptr_t end_address = start_address + num_bytes;\n    const size_t bytes_per_row = 4;\n    for (uintptr_t i = start_address; i < end_address; i++) {\n        if ((i - start_address) % bytes_per_row == 0) {\n            printf(\"%p  \", (void*)i);\n        }\n        printf(\"%02X \", data[i - start_address]);\n        if ((i - start_address + 1) % bytes_per_row == 0) {\n            printf(\"\\n\");\n        }\n    }\n    if ((end_address - start_address) % bytes_per_row != 0) {\n        printf(\"\\n\");\n    }\n}\n\nint main() {\n    int32_t arr[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n    print_memory(arr, sizeof(arr));\n    return 0;\n}\n```\n效果如下：\n![20230417145836](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230417145836.png)\n\n-------------------------------------------\n下面是最后的形式，完美对应Visual Studio，在每行末尾，显示对应的ASCII码值\n```cpp\n/* 在这个修改后的函数中，我们在每行的末尾打印出当前行的四个字节所对应的ASCII字符（仅打印可打印的ASCII字符，其它字符显示为'.'）。为此，我们在循环迭代每个字节时，将当前字节添加到一个缓冲区中，该缓冲区保存当前行中的所有字节所对应的ASCII字符。当该行的所有字节都被打印时，我们在该行的末尾打印出该缓冲区中的内容。\n\n在调用这个函数时，你可以将要显示的内存区域的起始地址和大小作为参数传递。 */\n#include <stdio.h>\n#include <stdint.h>\n\nvoid print_memory(const void* start_addr, size_t num_bytes) {\n    const uint8_t* data = (const uint8_t*)start_addr;\n    const uintptr_t start_address = (uintptr_t)start_addr;\n    const uintptr_t end_address = start_address + num_bytes;\n    const size_t bytes_per_row = 4;\n    char ascii[bytes_per_row + 1]; // 用于存储当前行的ASCII字符\n    ascii[bytes_per_row] = '\\0';\n    for (uintptr_t i = start_address; i < end_address; i++) {\n        if ((i - start_address) % bytes_per_row == 0) {\n            printf(\"%p  \", (void*)i);\n        }\n        printf(\"%02X \", data[i - start_address]);\n        ascii[i % bytes_per_row] = (data[i - start_address] >= 32 && data[i - start_address] <= 126) ? data[i - start_address] : '.'; // 只显示可打印的ASCII字符，其它显示为'.'\n        if ((i - start_address + 1) % bytes_per_row == 0) {\n            printf(\" %s\\n\", ascii);\n        }\n    }\n    if ((end_address - start_address) % bytes_per_row != 0) {\n        // 输出最后一行的ASCII字符\n        for (size_t i = (end_address - start_address) % bytes_per_row; i < bytes_per_row; i++) {\n            printf(\"   \");\n            ascii[i] = ' ';\n        }\n        printf(\" %s\\n\", ascii);\n    }\n}\n\nint main() {\n    int32_t arr[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n    print_memory(arr, sizeof(arr));\n    return 0;\n}\n```\n效果如下：\n![20230417150156](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230417150156.png)\n\n现在你可以使用这个函数打印内存中的任何内容，每行将显示四个字节，行首将显示地址，行末将显示这四个字节所对应的ASCII字符，类似于Visual Studio的内存窗口效果。","source":"_posts/vscode显示类似Visual-Studio的内存窗口.md","raw":"---\ntitle: vscode显示类似Visual Studio的内存窗口\ndate: 2023-04-17 14:48:40\ntags:\n    - vscode\n    - C/C++\ndeclare: true\ntoc: 1\n---\nVisual Studio有着这样的内存窗口显示<!--more-->\n![20230417145048](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230417145048.png)\n怎么在vscode中达到同等效果，有两种方案。\n\n### 插件\nVSCode本身并不提供像Visual Studio一样查看内存的功能。不过，你可以通过安装适当的扩展来获得此功能。\n\n有一个名为**CppTools**的扩展可以提供类似于Visual Studio的内存窗口和堆栈窗口。安装此扩展后，你可以通过以下步骤查看内存：\n\n- 在VSCode中打开一个C++项目。\n- 启动调试器，并在程序暂停时进入调试模式。\n- 在\"调试\"菜单中选择\"打开内存窗口\"。\n- 在内存窗口中输入你要查看的内存地址。\n- 查看该地址处的内存内容。\n\n> 请注意，由于C++语言的灵活性，你需要非常小心地处理指针和内存管理，以避免程序崩溃或导致安全漏洞。因此，使用内存窗口时请务必小心谨慎。\n\n### 程序\n```cpp\n/* 这个函数接受两个参数：一个指向要打印的内存区域的起始地址的指针和要打印的字节数。它将内存区域中的每个字节打印为两个十六进制数字，每行打印16个字节。*/\n#include <stdio.h>\n#include <stdint.h>\n\nvoid print_memory(const void* start_addr, size_t num_bytes) {\n    const uint8_t* data = (const uint8_t*)start_addr;\n    for (size_t i = 0; i < num_bytes; i++) {\n        printf(\"%02X \", data[i]);\n        if ((i+1) % 16 == 0) printf(\"\\n\");\n    }\n    printf(\"\\n\");\n}\n\n\nint main() {\n    int32_t x = 12345;\n    print_memory(&x, sizeof(x));\n    return 0;\n}\n\n//结果如下：\n39 30 00 00 \n\n/* 这是x变量的十六进制表示形式，从低位到高位排列。注意，这个输出的格式仅用于演示目的，实际应用中你可能需要根据需要修改print_memory函数以满足你的具体需求。\n\n需要注意的是，这种方法仅适用于在程序中显示内存的内容，而不是像Visual Studio内存窗口一样在程序运行时调试内存。因此，它可能无法满足某些高级调试需求。*/\n```\n\n-------------------------------------------------\n下面是使得每行显示四个字节，行首显示地址的程序\n```cpp\n#include <stdio.h>\n#include <stdint.h>\n\nvoid print_memory(const void* start_addr, size_t num_bytes) {\n    const uint8_t* data = (const uint8_t*)start_addr;\n    const uintptr_t start_address = (uintptr_t)start_addr;\n    const uintptr_t end_address = start_address + num_bytes;\n    const size_t bytes_per_row = 4;\n    for (uintptr_t i = start_address; i < end_address; i++) {\n        if ((i - start_address) % bytes_per_row == 0) {\n            printf(\"%p  \", (void*)i);\n        }\n        printf(\"%02X \", data[i - start_address]);\n        if ((i - start_address + 1) % bytes_per_row == 0) {\n            printf(\"\\n\");\n        }\n    }\n    if ((end_address - start_address) % bytes_per_row != 0) {\n        printf(\"\\n\");\n    }\n}\n\nint main() {\n    int32_t arr[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n    print_memory(arr, sizeof(arr));\n    return 0;\n}\n```\n效果如下：\n![20230417145836](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230417145836.png)\n\n-------------------------------------------\n下面是最后的形式，完美对应Visual Studio，在每行末尾，显示对应的ASCII码值\n```cpp\n/* 在这个修改后的函数中，我们在每行的末尾打印出当前行的四个字节所对应的ASCII字符（仅打印可打印的ASCII字符，其它字符显示为'.'）。为此，我们在循环迭代每个字节时，将当前字节添加到一个缓冲区中，该缓冲区保存当前行中的所有字节所对应的ASCII字符。当该行的所有字节都被打印时，我们在该行的末尾打印出该缓冲区中的内容。\n\n在调用这个函数时，你可以将要显示的内存区域的起始地址和大小作为参数传递。 */\n#include <stdio.h>\n#include <stdint.h>\n\nvoid print_memory(const void* start_addr, size_t num_bytes) {\n    const uint8_t* data = (const uint8_t*)start_addr;\n    const uintptr_t start_address = (uintptr_t)start_addr;\n    const uintptr_t end_address = start_address + num_bytes;\n    const size_t bytes_per_row = 4;\n    char ascii[bytes_per_row + 1]; // 用于存储当前行的ASCII字符\n    ascii[bytes_per_row] = '\\0';\n    for (uintptr_t i = start_address; i < end_address; i++) {\n        if ((i - start_address) % bytes_per_row == 0) {\n            printf(\"%p  \", (void*)i);\n        }\n        printf(\"%02X \", data[i - start_address]);\n        ascii[i % bytes_per_row] = (data[i - start_address] >= 32 && data[i - start_address] <= 126) ? data[i - start_address] : '.'; // 只显示可打印的ASCII字符，其它显示为'.'\n        if ((i - start_address + 1) % bytes_per_row == 0) {\n            printf(\" %s\\n\", ascii);\n        }\n    }\n    if ((end_address - start_address) % bytes_per_row != 0) {\n        // 输出最后一行的ASCII字符\n        for (size_t i = (end_address - start_address) % bytes_per_row; i < bytes_per_row; i++) {\n            printf(\"   \");\n            ascii[i] = ' ';\n        }\n        printf(\" %s\\n\", ascii);\n    }\n}\n\nint main() {\n    int32_t arr[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n    print_memory(arr, sizeof(arr));\n    return 0;\n}\n```\n效果如下：\n![20230417150156](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230417150156.png)\n\n现在你可以使用这个函数打印内存中的任何内容，每行将显示四个字节，行首将显示地址，行末将显示这四个字节所对应的ASCII字符，类似于Visual Studio的内存窗口效果。","slug":"vscode显示类似Visual-Studio的内存窗口","published":1,"updated":"2024-04-25T17:26:45.763Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvjbaqj500400vn11hfyby5y","content":"<p>Visual Studio有着这样的内存窗口显示<span id=\"more\"></span><br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230417145048.png\" alt=\"20230417145048\"><br>怎么在vscode中达到同等效果，有两种方案。</p>\n<h3 id=\"插件\"><a href=\"#插件\" class=\"headerlink\" title=\"插件\"></a>插件</h3><p>VSCode本身并不提供像Visual Studio一样查看内存的功能。不过，你可以通过安装适当的扩展来获得此功能。</p>\n<p>有一个名为<strong>CppTools</strong>的扩展可以提供类似于Visual Studio的内存窗口和堆栈窗口。安装此扩展后，你可以通过以下步骤查看内存：</p>\n<ul>\n<li>在VSCode中打开一个C++项目。</li>\n<li>启动调试器，并在程序暂停时进入调试模式。</li>\n<li>在”调试”菜单中选择”打开内存窗口”。</li>\n<li>在内存窗口中输入你要查看的内存地址。</li>\n<li>查看该地址处的内存内容。</li>\n</ul>\n<blockquote>\n<p>请注意，由于C++语言的灵活性，你需要非常小心地处理指针和内存管理，以避免程序崩溃或导致安全漏洞。因此，使用内存窗口时请务必小心谨慎。</p>\n</blockquote>\n<h3 id=\"程序\"><a href=\"#程序\" class=\"headerlink\" title=\"程序\"></a>程序</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 这个函数接受两个参数：一个指向要打印的内存区域的起始地址的指针和要打印的字节数。它将内存区域中的每个字节打印为两个十六进制数字，每行打印16个字节。*/</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdint.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">print_memory</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">void</span>* start_addr, <span class=\"type\">size_t</span> num_bytes)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">uint8_t</span>* data = (<span class=\"type\">const</span> <span class=\"type\">uint8_t</span>*)start_addr;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">size_t</span> i = <span class=\"number\">0</span>; i &lt; num_bytes; i++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%02X &quot;</span>, data[i]);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((i+<span class=\"number\">1</span>) % <span class=\"number\">16</span> == <span class=\"number\">0</span>) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int32_t</span> x = <span class=\"number\">12345</span>;</span><br><span class=\"line\">    <span class=\"built_in\">print_memory</span>(&amp;x, <span class=\"built_in\">sizeof</span>(x));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//结果如下：</span></span><br><span class=\"line\"><span class=\"number\">39</span> <span class=\"number\">30</span> <span class=\"number\">00</span> <span class=\"number\">00</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 这是x变量的十六进制表示形式，从低位到高位排列。注意，这个输出的格式仅用于演示目的，实际应用中你可能需要根据需要修改print_memory函数以满足你的具体需求。</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">需要注意的是，这种方法仅适用于在程序中显示内存的内容，而不是像Visual Studio内存窗口一样在程序运行时调试内存。因此，它可能无法满足某些高级调试需求。*/</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>下面是使得每行显示四个字节，行首显示地址的程序</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdint.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">print_memory</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">void</span>* start_addr, <span class=\"type\">size_t</span> num_bytes)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">uint8_t</span>* data = (<span class=\"type\">const</span> <span class=\"type\">uint8_t</span>*)start_addr;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">uintptr_t</span> start_address = (<span class=\"type\">uintptr_t</span>)start_addr;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">uintptr_t</span> end_address = start_address + num_bytes;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">size_t</span> bytes_per_row = <span class=\"number\">4</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">uintptr_t</span> i = start_address; i &lt; end_address; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((i - start_address) % bytes_per_row == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%p  &quot;</span>, (<span class=\"type\">void</span>*)i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%02X &quot;</span>, data[i - start_address]);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((i - start_address + <span class=\"number\">1</span>) % bytes_per_row == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((end_address - start_address) % bytes_per_row != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int32_t</span> arr[] = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>&#125;;</span><br><span class=\"line\">    <span class=\"built_in\">print_memory</span>(arr, <span class=\"built_in\">sizeof</span>(arr));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>效果如下：<br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230417145836.png\" alt=\"20230417145836\"></p>\n<hr>\n<p>下面是最后的形式，完美对应Visual Studio，在每行末尾，显示对应的ASCII码值</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 在这个修改后的函数中，我们在每行的末尾打印出当前行的四个字节所对应的ASCII字符（仅打印可打印的ASCII字符，其它字符显示为&#x27;.&#x27;）。为此，我们在循环迭代每个字节时，将当前字节添加到一个缓冲区中，该缓冲区保存当前行中的所有字节所对应的ASCII字符。当该行的所有字节都被打印时，我们在该行的末尾打印出该缓冲区中的内容。</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">在调用这个函数时，你可以将要显示的内存区域的起始地址和大小作为参数传递。 */</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdint.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">print_memory</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">void</span>* start_addr, <span class=\"type\">size_t</span> num_bytes)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">uint8_t</span>* data = (<span class=\"type\">const</span> <span class=\"type\">uint8_t</span>*)start_addr;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">uintptr_t</span> start_address = (<span class=\"type\">uintptr_t</span>)start_addr;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">uintptr_t</span> end_address = start_address + num_bytes;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">size_t</span> bytes_per_row = <span class=\"number\">4</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span> ascii[bytes_per_row + <span class=\"number\">1</span>]; <span class=\"comment\">// 用于存储当前行的ASCII字符</span></span><br><span class=\"line\">    ascii[bytes_per_row] = <span class=\"string\">&#x27;\\0&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">uintptr_t</span> i = start_address; i &lt; end_address; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((i - start_address) % bytes_per_row == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%p  &quot;</span>, (<span class=\"type\">void</span>*)i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%02X &quot;</span>, data[i - start_address]);</span><br><span class=\"line\">        ascii[i % bytes_per_row] = (data[i - start_address] &gt;= <span class=\"number\">32</span> &amp;&amp; data[i - start_address] &lt;= <span class=\"number\">126</span>) ? data[i - start_address] : <span class=\"string\">&#x27;.&#x27;</span>; <span class=\"comment\">// 只显示可打印的ASCII字符，其它显示为&#x27;.&#x27;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((i - start_address + <span class=\"number\">1</span>) % bytes_per_row == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot; %s\\n&quot;</span>, ascii);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((end_address - start_address) % bytes_per_row != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 输出最后一行的ASCII字符</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">size_t</span> i = (end_address - start_address) % bytes_per_row; i &lt; bytes_per_row; i++) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;   &quot;</span>);</span><br><span class=\"line\">            ascii[i] = <span class=\"string\">&#x27; &#x27;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot; %s\\n&quot;</span>, ascii);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int32_t</span> arr[] = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>&#125;;</span><br><span class=\"line\">    <span class=\"built_in\">print_memory</span>(arr, <span class=\"built_in\">sizeof</span>(arr));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>效果如下：<br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230417150156.png\" alt=\"20230417150156\"></p>\n<p>现在你可以使用这个函数打印内存中的任何内容，每行将显示四个字节，行首将显示地址，行末将显示这四个字节所对应的ASCII字符，类似于Visual Studio的内存窗口效果。</p>\n","site":{"data":{}},"excerpt":"<p>Visual Studio有着这样的内存窗口显示</p>","more":"<br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230417145048.png\" alt=\"20230417145048\"><br>怎么在vscode中达到同等效果，有两种方案。<p></p>\n<h3 id=\"插件\"><a href=\"#插件\" class=\"headerlink\" title=\"插件\"></a>插件</h3><p>VSCode本身并不提供像Visual Studio一样查看内存的功能。不过，你可以通过安装适当的扩展来获得此功能。</p>\n<p>有一个名为<strong>CppTools</strong>的扩展可以提供类似于Visual Studio的内存窗口和堆栈窗口。安装此扩展后，你可以通过以下步骤查看内存：</p>\n<ul>\n<li>在VSCode中打开一个C++项目。</li>\n<li>启动调试器，并在程序暂停时进入调试模式。</li>\n<li>在”调试”菜单中选择”打开内存窗口”。</li>\n<li>在内存窗口中输入你要查看的内存地址。</li>\n<li>查看该地址处的内存内容。</li>\n</ul>\n<blockquote>\n<p>请注意，由于C++语言的灵活性，你需要非常小心地处理指针和内存管理，以避免程序崩溃或导致安全漏洞。因此，使用内存窗口时请务必小心谨慎。</p>\n</blockquote>\n<h3 id=\"程序\"><a href=\"#程序\" class=\"headerlink\" title=\"程序\"></a>程序</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 这个函数接受两个参数：一个指向要打印的内存区域的起始地址的指针和要打印的字节数。它将内存区域中的每个字节打印为两个十六进制数字，每行打印16个字节。*/</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdint.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">print_memory</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">void</span>* start_addr, <span class=\"type\">size_t</span> num_bytes)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">uint8_t</span>* data = (<span class=\"type\">const</span> <span class=\"type\">uint8_t</span>*)start_addr;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">size_t</span> i = <span class=\"number\">0</span>; i &lt; num_bytes; i++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%02X &quot;</span>, data[i]);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((i+<span class=\"number\">1</span>) % <span class=\"number\">16</span> == <span class=\"number\">0</span>) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int32_t</span> x = <span class=\"number\">12345</span>;</span><br><span class=\"line\">    <span class=\"built_in\">print_memory</span>(&amp;x, <span class=\"built_in\">sizeof</span>(x));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//结果如下：</span></span><br><span class=\"line\"><span class=\"number\">39</span> <span class=\"number\">30</span> <span class=\"number\">00</span> <span class=\"number\">00</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 这是x变量的十六进制表示形式，从低位到高位排列。注意，这个输出的格式仅用于演示目的，实际应用中你可能需要根据需要修改print_memory函数以满足你的具体需求。</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">需要注意的是，这种方法仅适用于在程序中显示内存的内容，而不是像Visual Studio内存窗口一样在程序运行时调试内存。因此，它可能无法满足某些高级调试需求。*/</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>下面是使得每行显示四个字节，行首显示地址的程序</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdint.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">print_memory</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">void</span>* start_addr, <span class=\"type\">size_t</span> num_bytes)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">uint8_t</span>* data = (<span class=\"type\">const</span> <span class=\"type\">uint8_t</span>*)start_addr;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">uintptr_t</span> start_address = (<span class=\"type\">uintptr_t</span>)start_addr;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">uintptr_t</span> end_address = start_address + num_bytes;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">size_t</span> bytes_per_row = <span class=\"number\">4</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">uintptr_t</span> i = start_address; i &lt; end_address; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((i - start_address) % bytes_per_row == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%p  &quot;</span>, (<span class=\"type\">void</span>*)i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%02X &quot;</span>, data[i - start_address]);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((i - start_address + <span class=\"number\">1</span>) % bytes_per_row == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((end_address - start_address) % bytes_per_row != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int32_t</span> arr[] = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>&#125;;</span><br><span class=\"line\">    <span class=\"built_in\">print_memory</span>(arr, <span class=\"built_in\">sizeof</span>(arr));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>效果如下：<br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230417145836.png\" alt=\"20230417145836\"></p>\n<hr>\n<p>下面是最后的形式，完美对应Visual Studio，在每行末尾，显示对应的ASCII码值</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 在这个修改后的函数中，我们在每行的末尾打印出当前行的四个字节所对应的ASCII字符（仅打印可打印的ASCII字符，其它字符显示为&#x27;.&#x27;）。为此，我们在循环迭代每个字节时，将当前字节添加到一个缓冲区中，该缓冲区保存当前行中的所有字节所对应的ASCII字符。当该行的所有字节都被打印时，我们在该行的末尾打印出该缓冲区中的内容。</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">在调用这个函数时，你可以将要显示的内存区域的起始地址和大小作为参数传递。 */</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdint.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">print_memory</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">void</span>* start_addr, <span class=\"type\">size_t</span> num_bytes)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">uint8_t</span>* data = (<span class=\"type\">const</span> <span class=\"type\">uint8_t</span>*)start_addr;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">uintptr_t</span> start_address = (<span class=\"type\">uintptr_t</span>)start_addr;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">uintptr_t</span> end_address = start_address + num_bytes;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">size_t</span> bytes_per_row = <span class=\"number\">4</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span> ascii[bytes_per_row + <span class=\"number\">1</span>]; <span class=\"comment\">// 用于存储当前行的ASCII字符</span></span><br><span class=\"line\">    ascii[bytes_per_row] = <span class=\"string\">&#x27;\\0&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">uintptr_t</span> i = start_address; i &lt; end_address; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((i - start_address) % bytes_per_row == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%p  &quot;</span>, (<span class=\"type\">void</span>*)i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%02X &quot;</span>, data[i - start_address]);</span><br><span class=\"line\">        ascii[i % bytes_per_row] = (data[i - start_address] &gt;= <span class=\"number\">32</span> &amp;&amp; data[i - start_address] &lt;= <span class=\"number\">126</span>) ? data[i - start_address] : <span class=\"string\">&#x27;.&#x27;</span>; <span class=\"comment\">// 只显示可打印的ASCII字符，其它显示为&#x27;.&#x27;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((i - start_address + <span class=\"number\">1</span>) % bytes_per_row == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot; %s\\n&quot;</span>, ascii);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((end_address - start_address) % bytes_per_row != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 输出最后一行的ASCII字符</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">size_t</span> i = (end_address - start_address) % bytes_per_row; i &lt; bytes_per_row; i++) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;   &quot;</span>);</span><br><span class=\"line\">            ascii[i] = <span class=\"string\">&#x27; &#x27;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot; %s\\n&quot;</span>, ascii);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int32_t</span> arr[] = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>&#125;;</span><br><span class=\"line\">    <span class=\"built_in\">print_memory</span>(arr, <span class=\"built_in\">sizeof</span>(arr));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>效果如下：<br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230417150156.png\" alt=\"20230417150156\"></p>\n<p>现在你可以使用这个函数打印内存中的任何内容，每行将显示四个字节，行首将显示地址，行末将显示这四个字节所对应的ASCII字符，类似于Visual Studio的内存窗口效果。</p>"},{"title":"windows terminal 关闭提示音","date":"2023-11-03T03:03:56.000Z","_content":"打开JSON配置文件，在默认的profile中添加\"bellSytle\"配置：<!--more-->\n![20231103152002](https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20231103152002.png)","source":"_posts/windows-terminal-关闭提示音.md","raw":"---\ntitle: windows terminal 关闭提示音\ndate: 2023-11-03 03:03:56\ntags:\n    - windows\n---\n打开JSON配置文件，在默认的profile中添加\"bellSytle\"配置：<!--more-->\n![20231103152002](https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20231103152002.png)","slug":"windows-terminal-关闭提示音","published":1,"updated":"2024-04-25T17:26:47.033Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvjbaqj700430vn1b8p8h3an","content":"<p>打开JSON配置文件，在默认的profile中添加”bellSytle”配置：<span id=\"more\"></span><br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20231103152002.png\" alt=\"20231103152002\"></p>\n","site":{"data":{}},"excerpt":"<p>打开JSON配置文件，在默认的profile中添加”bellSytle”配置：</p>","more":"<br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20231103152002.png\" alt=\"20231103152002\"><p></p>"},{"title":"windows11安装安卓子系统","date":"2023-05-18T11:55:37.000Z","declare":true,"_content":"1. 将Hyper-v和虚拟机平台打上勾<!--more-->\n![20230518115729](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230518115729.png)\n\n2. Microsoft store 更新到最新版本（在美区状态下）\n\n3. 下载安卓子系统的安装软件\n[下载界面](https://store.rg-adguard.net/)\n![20230518120021](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230518120021.png)\n其中，提取码：9p3395vx91nr\n\n下载最后一个\n![20230518120144](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230518120144.png)\n\n4. 双击打开进行安装\n![20230518120825](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230518120825.png)\n\n> 如果无法打开，需要采用如下操作\n- 以管理员身份运行powershell\n- 进入到文件所在目录\n- 运行安装命令\n`add-Appxpackage \"MicrosoftCorporationII.WindowsSubsystemForAndroid_1.7.32815.0_neutral_~_8wekyb3d8bbwe_2.Msixbundle\"`\n\n5. 打开开发者模式\n![20230518121212](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230518121212.png)\n\n6. 下载[adb 的命令安装包 platform-tools_r31.0.3-windows](https://www.freedidi.com/wp-content/uploads/2021/10/platform-tools_r31.0.3-windows.zip)\n> 解压之后，将里面的**所有文件**复制到C盘的windows文件夹下\n\n7. 此时在终端运行以下命令\n```shell\nadb version     # 查看版本号\nadb connect 127.0.0.1:58526 # 连接到安卓子系统，需要查看对应的端口号\nadb devices     # 查看当前连接设备\nadb install .\\tiktok.apk    # 安装自己下载的apk文件\n```\n![20230518122730](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230518122730.png)","source":"_posts/windows11安装安卓子系统.md","raw":"---\ntitle: windows11安装安卓子系统\ndate: 2023-05-18 11:55:37\ntags:\n    - windows\ndeclare: true\n---\n1. 将Hyper-v和虚拟机平台打上勾<!--more-->\n![20230518115729](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230518115729.png)\n\n2. Microsoft store 更新到最新版本（在美区状态下）\n\n3. 下载安卓子系统的安装软件\n[下载界面](https://store.rg-adguard.net/)\n![20230518120021](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230518120021.png)\n其中，提取码：9p3395vx91nr\n\n下载最后一个\n![20230518120144](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230518120144.png)\n\n4. 双击打开进行安装\n![20230518120825](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230518120825.png)\n\n> 如果无法打开，需要采用如下操作\n- 以管理员身份运行powershell\n- 进入到文件所在目录\n- 运行安装命令\n`add-Appxpackage \"MicrosoftCorporationII.WindowsSubsystemForAndroid_1.7.32815.0_neutral_~_8wekyb3d8bbwe_2.Msixbundle\"`\n\n5. 打开开发者模式\n![20230518121212](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230518121212.png)\n\n6. 下载[adb 的命令安装包 platform-tools_r31.0.3-windows](https://www.freedidi.com/wp-content/uploads/2021/10/platform-tools_r31.0.3-windows.zip)\n> 解压之后，将里面的**所有文件**复制到C盘的windows文件夹下\n\n7. 此时在终端运行以下命令\n```shell\nadb version     # 查看版本号\nadb connect 127.0.0.1:58526 # 连接到安卓子系统，需要查看对应的端口号\nadb devices     # 查看当前连接设备\nadb install .\\tiktok.apk    # 安装自己下载的apk文件\n```\n![20230518122730](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230518122730.png)","slug":"windows11安装安卓子系统","published":1,"updated":"2024-04-25T17:26:46.843Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvjbaqj800440vn15w4mbxed","content":"<ol>\n<li><p>将Hyper-v和虚拟机平台打上勾<span id=\"more\"></span><br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230518115729.png\" alt=\"20230518115729\"></p>\n</li>\n<li><p>Microsoft store 更新到最新版本（在美区状态下）</p>\n</li>\n<li><p>下载安卓子系统的安装软件<br><a href=\"https://store.rg-adguard.net/\">下载界面</a><br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230518120021.png\" alt=\"20230518120021\"><br>其中，提取码：9p3395vx91nr</p>\n</li>\n</ol>\n<p>下载最后一个<br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230518120144.png\" alt=\"20230518120144\"></p>\n<ol start=\"4\">\n<li>双击打开进行安装<br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230518120825.png\" alt=\"20230518120825\"></li>\n</ol>\n<blockquote>\n<p>如果无法打开，需要采用如下操作</p>\n</blockquote>\n<ul>\n<li>以管理员身份运行powershell</li>\n<li>进入到文件所在目录</li>\n<li>运行安装命令<br><code>add-Appxpackage &quot;MicrosoftCorporationII.WindowsSubsystemForAndroid_1.7.32815.0_neutral_~_8wekyb3d8bbwe_2.Msixbundle&quot;</code></li>\n</ul>\n<ol start=\"5\">\n<li><p>打开开发者模式<br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230518121212.png\" alt=\"20230518121212\"></p>\n</li>\n<li><p>下载<a href=\"https://www.freedidi.com/wp-content/uploads/2021/10/platform-tools_r31.0.3-windows.zip\">adb 的命令安装包 platform-tools_r31.0.3-windows</a></p>\n<blockquote>\n<p>解压之后，将里面的<strong>所有文件</strong>复制到C盘的windows文件夹下</p>\n</blockquote>\n</li>\n<li><p>此时在终端运行以下命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">adb version     # 查看版本号</span><br><span class=\"line\">adb connect 127.0.0.1:58526 # 连接到安卓子系统，需要查看对应的端口号</span><br><span class=\"line\">adb devices     # 查看当前连接设备</span><br><span class=\"line\">adb install .\\tiktok.apk    # 安装自己下载的apk文件</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230518122730.png\" alt=\"20230518122730\"></p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<ol>\n<li><p>将Hyper-v和虚拟机平台打上勾</p></li></ol>","more":"<br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230518115729.png\" alt=\"20230518115729\"><p></p>\n\n<li><p>Microsoft store 更新到最新版本（在美区状态下）</p>\n</li>\n<li><p>下载安卓子系统的安装软件<br><a href=\"https://store.rg-adguard.net/\">下载界面</a><br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230518120021.png\" alt=\"20230518120021\"><br>其中，提取码：9p3395vx91nr</p>\n</li>\n\n<p>下载最后一个<br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230518120144.png\" alt=\"20230518120144\"></p>\n<ol start=\"4\">\n<li>双击打开进行安装<br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230518120825.png\" alt=\"20230518120825\"></li>\n</ol>\n<blockquote>\n<p>如果无法打开，需要采用如下操作</p>\n</blockquote>\n<ul>\n<li>以管理员身份运行powershell</li>\n<li>进入到文件所在目录</li>\n<li>运行安装命令<br><code>add-Appxpackage &quot;MicrosoftCorporationII.WindowsSubsystemForAndroid_1.7.32815.0_neutral_~_8wekyb3d8bbwe_2.Msixbundle&quot;</code></li>\n</ul>\n<ol start=\"5\">\n<li><p>打开开发者模式<br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230518121212.png\" alt=\"20230518121212\"></p>\n</li>\n<li><p>下载<a href=\"https://www.freedidi.com/wp-content/uploads/2021/10/platform-tools_r31.0.3-windows.zip\">adb 的命令安装包 platform-tools_r31.0.3-windows</a></p>\n<blockquote>\n<p>解压之后，将里面的<strong>所有文件</strong>复制到C盘的windows文件夹下</p>\n</blockquote>\n</li>\n<li><p>此时在终端运行以下命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">adb version     # 查看版本号</span><br><span class=\"line\">adb connect 127.0.0.1:58526 # 连接到安卓子系统，需要查看对应的端口号</span><br><span class=\"line\">adb devices     # 查看当前连接设备</span><br><span class=\"line\">adb install .\\tiktok.apk    # 安装自己下载的apk文件</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230518122730.png\" alt=\"20230518122730\"></p>\n</li>\n</ol>"},{"title":"windows11连接隐藏WIFI","date":"2023-05-16T17:35:34.000Z","declare":true,"_content":"WIFI的最下一行有一个隐藏的网络，点击连接即可。<!--more-->\n![20230516173616](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230516173616.png)","source":"_posts/windows11连接隐藏WIFI.md","raw":"---\ntitle: windows11连接隐藏WIFI\ndate: 2023-05-16 17:35:34\ntags:\n    - windows\ndeclare: true\n---\nWIFI的最下一行有一个隐藏的网络，点击连接即可。<!--more-->\n![20230516173616](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230516173616.png)","slug":"windows11连接隐藏WIFI","published":1,"updated":"2024-04-25T17:26:47.143Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvjbaqjb00460vn1bb761idj","content":"<p>WIFI的最下一行有一个隐藏的网络，点击连接即可。<span id=\"more\"></span><br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230516173616.png\" alt=\"20230516173616\"></p>\n","site":{"data":{}},"excerpt":"<p>WIFI的最下一行有一个隐藏的网络，点击连接即可。</p>","more":"<br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230516173616.png\" alt=\"20230516173616\"><p></p>"},{"title":"windows共享文件夹","date":"2023-05-16T17:57:06.000Z","declare":true,"_content":"1. 先将网络调整为专用网络<!--more-->\n![20230516175315](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230516175315.png)\n\n2. 启用网络发现\n![启用网络发现](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/启用网络发现.png)\n\n3. 找到要分享的文件夹，属性中点击高级分享\n![20230516175448](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230516175448.png)\n\n4. 分享此文件夹，并进行权限设置\n![分享文件夹](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/分享文件夹.png)\n![20230516175613](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230516175613.png)\n\n5. 进行网络映射\n![网络映射](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230516174919.png)\n\n输入账号和密码，最终结果如图所示：\n![20230516175105](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230516175105.png)","source":"_posts/windows共享文件夹.md","raw":"---\ntitle: windows共享文件夹\ndate: 2023-05-16 17:57:06\ntags:\n    - windows\ndeclare: true\n---\n1. 先将网络调整为专用网络<!--more-->\n![20230516175315](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230516175315.png)\n\n2. 启用网络发现\n![启用网络发现](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/启用网络发现.png)\n\n3. 找到要分享的文件夹，属性中点击高级分享\n![20230516175448](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230516175448.png)\n\n4. 分享此文件夹，并进行权限设置\n![分享文件夹](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/分享文件夹.png)\n![20230516175613](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230516175613.png)\n\n5. 进行网络映射\n![网络映射](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230516174919.png)\n\n输入账号和密码，最终结果如图所示：\n![20230516175105](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230516175105.png)","slug":"windows共享文件夹","published":1,"updated":"2024-04-25T17:26:45.733Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvjbaqjc00470vn19lzn32s7","content":"<ol>\n<li><p>先将网络调整为专用网络<span id=\"more\"></span><br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230516175315.png\" alt=\"20230516175315\"></p>\n</li>\n<li><p>启用网络发现<br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/%E5%90%AF%E7%94%A8%E7%BD%91%E7%BB%9C%E5%8F%91%E7%8E%B0.png\" alt=\"启用网络发现\"></p>\n</li>\n<li><p>找到要分享的文件夹，属性中点击高级分享<br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230516175448.png\" alt=\"20230516175448\"></p>\n</li>\n<li><p>分享此文件夹，并进行权限设置<br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/%E5%88%86%E4%BA%AB%E6%96%87%E4%BB%B6%E5%A4%B9.png\" alt=\"分享文件夹\"><br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230516175613.png\" alt=\"20230516175613\"></p>\n</li>\n<li><p>进行网络映射<br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230516174919.png\" alt=\"网络映射\"></p>\n</li>\n</ol>\n<p>输入账号和密码，最终结果如图所示：<br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230516175105.png\" alt=\"20230516175105\"></p>\n","site":{"data":{}},"excerpt":"<ol>\n<li><p>先将网络调整为专用网络</p></li></ol>","more":"<br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230516175315.png\" alt=\"20230516175315\"><p></p>\n\n<li><p>启用网络发现<br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/%E5%90%AF%E7%94%A8%E7%BD%91%E7%BB%9C%E5%8F%91%E7%8E%B0.png\" alt=\"启用网络发现\"></p>\n</li>\n<li><p>找到要分享的文件夹，属性中点击高级分享<br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230516175448.png\" alt=\"20230516175448\"></p>\n</li>\n<li><p>分享此文件夹，并进行权限设置<br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/%E5%88%86%E4%BA%AB%E6%96%87%E4%BB%B6%E5%A4%B9.png\" alt=\"分享文件夹\"><br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230516175613.png\" alt=\"20230516175613\"></p>\n</li>\n<li><p>进行网络映射<br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230516174919.png\" alt=\"网络映射\"></p>\n</li>\n\n<p>输入账号和密码，最终结果如图所示：<br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230516175105.png\" alt=\"20230516175105\"></p>"},{"title":"windows和chrome常用快捷键","date":"2023-06-08T10:09:06.000Z","declare":true,"_content":"1. 打开新标签页：Ctrl + T (Windows) 或 Command + T (Mac)\n2. 关闭当前标签页：Ctrl + W (Windows) 或 Command + W (Mac)<!--more-->\n3. 恢复关闭的标签页：Ctrl + Shift + T (Windows) 或 Command + Shift + T (Mac)\n4. 在新标签页中打开主页：Alt + Home (Windows) 或 Command + Shift + H (Mac)\n5. 打开浏览器历史记录：Ctrl + H (Windows) 或 Command + Y (Mac)\n6. 在地址栏中进行搜索：Ctrl + L (Windows) 或 Command + L (Mac)，然后输入搜索词或网址\n7. 刷新当前页面：F5 (Windows) 或 Command + R (Mac)\n8. 打开开发者工具：Ctrl + Shift + I (Windows) 或 Command + Option + I (Mac)\n9. 打开下一个标签页：Ctrl + Tab (Windows) 或 Command + Option + Right Arrow (Mac)\n10. 打开上一个标签页：Ctrl + Shift + Tab (Windows) 或 Command + Option + Left Arrow (Mac)\n11. 放大页面：Ctrl + Plus (Windows) 或 Command + Plus (Mac)\n12. 缩小页面：Ctrl + Minus (Windows) 或 Command + Minus (Mac)\n13. 恢复页面缩放为默认大小：Ctrl + 0 (Windows) 或 Command + 0 (Mac)\n14. 在新的隐身窗口中打开链接：Ctrl + Shift + N (Windows) 或 Command + Shift + N (Mac)\n15. 将当前标签页添加到书签：Ctrl + D (Windows) 或 Command + D (Mac)\n\n--------------------------------------------\nvscode\n1. 切换光标到资源管理器（Explorer）窗口: Ctrl + Shift + E。再次按下，将焦点切换到编辑器窗口。\n2. 在jupyter中新建单元格：Alt + Enter","source":"_posts/windows和chrome常用快捷键.md","raw":"---\ntitle: windows和chrome常用快捷键\ndate: 2023-06-08 10:09:06\ntags:\n    - windows\n    - 快捷键\ndeclare: true\n---\n1. 打开新标签页：Ctrl + T (Windows) 或 Command + T (Mac)\n2. 关闭当前标签页：Ctrl + W (Windows) 或 Command + W (Mac)<!--more-->\n3. 恢复关闭的标签页：Ctrl + Shift + T (Windows) 或 Command + Shift + T (Mac)\n4. 在新标签页中打开主页：Alt + Home (Windows) 或 Command + Shift + H (Mac)\n5. 打开浏览器历史记录：Ctrl + H (Windows) 或 Command + Y (Mac)\n6. 在地址栏中进行搜索：Ctrl + L (Windows) 或 Command + L (Mac)，然后输入搜索词或网址\n7. 刷新当前页面：F5 (Windows) 或 Command + R (Mac)\n8. 打开开发者工具：Ctrl + Shift + I (Windows) 或 Command + Option + I (Mac)\n9. 打开下一个标签页：Ctrl + Tab (Windows) 或 Command + Option + Right Arrow (Mac)\n10. 打开上一个标签页：Ctrl + Shift + Tab (Windows) 或 Command + Option + Left Arrow (Mac)\n11. 放大页面：Ctrl + Plus (Windows) 或 Command + Plus (Mac)\n12. 缩小页面：Ctrl + Minus (Windows) 或 Command + Minus (Mac)\n13. 恢复页面缩放为默认大小：Ctrl + 0 (Windows) 或 Command + 0 (Mac)\n14. 在新的隐身窗口中打开链接：Ctrl + Shift + N (Windows) 或 Command + Shift + N (Mac)\n15. 将当前标签页添加到书签：Ctrl + D (Windows) 或 Command + D (Mac)\n\n--------------------------------------------\nvscode\n1. 切换光标到资源管理器（Explorer）窗口: Ctrl + Shift + E。再次按下，将焦点切换到编辑器窗口。\n2. 在jupyter中新建单元格：Alt + Enter","slug":"windows和chrome常用快捷键","published":1,"updated":"2024-04-25T17:26:47.563Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvjbaqje00490vn1bsjdfiqz","content":"<ol>\n<li>打开新标签页：Ctrl + T (Windows) 或 Command + T (Mac)</li>\n<li>关闭当前标签页：Ctrl + W (Windows) 或 Command + W (Mac)<span id=\"more\"></span></li>\n<li>恢复关闭的标签页：Ctrl + Shift + T (Windows) 或 Command + Shift + T (Mac)</li>\n<li>在新标签页中打开主页：Alt + Home (Windows) 或 Command + Shift + H (Mac)</li>\n<li>打开浏览器历史记录：Ctrl + H (Windows) 或 Command + Y (Mac)</li>\n<li>在地址栏中进行搜索：Ctrl + L (Windows) 或 Command + L (Mac)，然后输入搜索词或网址</li>\n<li>刷新当前页面：F5 (Windows) 或 Command + R (Mac)</li>\n<li>打开开发者工具：Ctrl + Shift + I (Windows) 或 Command + Option + I (Mac)</li>\n<li>打开下一个标签页：Ctrl + Tab (Windows) 或 Command + Option + Right Arrow (Mac)</li>\n<li>打开上一个标签页：Ctrl + Shift + Tab (Windows) 或 Command + Option + Left Arrow (Mac)</li>\n<li>放大页面：Ctrl + Plus (Windows) 或 Command + Plus (Mac)</li>\n<li>缩小页面：Ctrl + Minus (Windows) 或 Command + Minus (Mac)</li>\n<li>恢复页面缩放为默认大小：Ctrl + 0 (Windows) 或 Command + 0 (Mac)</li>\n<li>在新的隐身窗口中打开链接：Ctrl + Shift + N (Windows) 或 Command + Shift + N (Mac)</li>\n<li>将当前标签页添加到书签：Ctrl + D (Windows) 或 Command + D (Mac)</li>\n</ol>\n<hr>\n<p>vscode</p>\n<ol>\n<li>切换光标到资源管理器（Explorer）窗口: Ctrl + Shift + E。再次按下，将焦点切换到编辑器窗口。</li>\n<li>在jupyter中新建单元格：Alt + Enter</li>\n</ol>\n","site":{"data":{}},"excerpt":"<ol>\n<li>打开新标签页：Ctrl + T (Windows) 或 Command + T (Mac)</li>\n<li>关闭当前标签页：Ctrl + W (Windows) 或 Command + W (Mac)</li></ol>","more":"\n<li>恢复关闭的标签页：Ctrl + Shift + T (Windows) 或 Command + Shift + T (Mac)</li>\n<li>在新标签页中打开主页：Alt + Home (Windows) 或 Command + Shift + H (Mac)</li>\n<li>打开浏览器历史记录：Ctrl + H (Windows) 或 Command + Y (Mac)</li>\n<li>在地址栏中进行搜索：Ctrl + L (Windows) 或 Command + L (Mac)，然后输入搜索词或网址</li>\n<li>刷新当前页面：F5 (Windows) 或 Command + R (Mac)</li>\n<li>打开开发者工具：Ctrl + Shift + I (Windows) 或 Command + Option + I (Mac)</li>\n<li>打开下一个标签页：Ctrl + Tab (Windows) 或 Command + Option + Right Arrow (Mac)</li>\n<li>打开上一个标签页：Ctrl + Shift + Tab (Windows) 或 Command + Option + Left Arrow (Mac)</li>\n<li>放大页面：Ctrl + Plus (Windows) 或 Command + Plus (Mac)</li>\n<li>缩小页面：Ctrl + Minus (Windows) 或 Command + Minus (Mac)</li>\n<li>恢复页面缩放为默认大小：Ctrl + 0 (Windows) 或 Command + 0 (Mac)</li>\n<li>在新的隐身窗口中打开链接：Ctrl + Shift + N (Windows) 或 Command + Shift + N (Mac)</li>\n<li>将当前标签页添加到书签：Ctrl + D (Windows) 或 Command + D (Mac)</li>\n\n<hr>\n<p>vscode</p>\n<ol>\n<li>切换光标到资源管理器（Explorer）窗口: Ctrl + Shift + E。再次按下，将焦点切换到编辑器窗口。</li>\n<li>在jupyter中新建单元格：Alt + Enter</li>\n</ol>"},{"title":"windows安装v2ray","date":"2023-05-31T20:28:12.000Z","declare":true,"_content":"[神一样的工具们](https://www.v2ray.com/awesome/tools.html)<!--more-->\n[v2rayN](https://github.com/2dust/v2rayN/releases)\n[v2ray-core](https://github.com/v2fly/v2ray-core/releases)","source":"_posts/windows安装v2ray.md","raw":"---\ntitle: windows安装v2ray\ndate: 2023-05-31 20:28:12\ntags:\n    - windows\n    - 科学上网\n    - v2ray\ndeclare: true\n---\n[神一样的工具们](https://www.v2ray.com/awesome/tools.html)<!--more-->\n[v2rayN](https://github.com/2dust/v2rayN/releases)\n[v2ray-core](https://github.com/v2fly/v2ray-core/releases)","slug":"windows安装v2ray","published":1,"updated":"2024-04-25T17:26:46.773Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvjbaqjf004b0vn165qde6uk","content":"<p><a href=\"https://www.v2ray.com/awesome/tools.html\">神一样的工具们</a><span id=\"more\"></span><br><a href=\"https://github.com/2dust/v2rayN/releases\">v2rayN</a><br><a href=\"https://github.com/v2fly/v2ray-core/releases\">v2ray-core</a></p>\n","site":{"data":{}},"excerpt":"<p><a href=\"https://www.v2ray.com/awesome/tools.html\">神一样的工具们</a></p>","more":"<br><a href=\"https://github.com/2dust/v2rayN/releases\">v2rayN</a><br><a href=\"https://github.com/v2fly/v2ray-core/releases\">v2ray-core</a><p></p>"},{"title":"windows用xrdp远程桌面到deepin卡顿","date":"2023-05-22T12:08:16.000Z","_content":"关闭deeping的窗口特效","source":"_posts/windows用xrdp远程桌面到deepin卡顿.md","raw":"---\ntitle: windows用xrdp远程桌面到deepin卡顿\ndate: 2023-05-22 12:08:16\ntags:\n    - windows\n    - deepin\n    - Linux\n---\n关闭deeping的窗口特效","slug":"windows用xrdp远程桌面到deepin卡顿","published":1,"updated":"2024-04-25T17:26:47.163Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvjbaqjh004e0vn100tf5aa0","content":"<p>关闭deeping的窗口特效</p>\n","site":{"data":{}},"excerpt":"","more":"<p>关闭deeping的窗口特效</p>\n"},{"title":"windows终端复用","date":"2023-05-30T14:34:01.000Z","declare":"ture","_content":"[Windows 终端中的窗格](https://learn.microsoft.com/zh-cn/windows/terminal/panes)","source":"_posts/windows终端复用.md","raw":"---\ntitle: windows终端复用\ndate: 2023-05-30 14:34:01\ntags:\n    - windows\ndeclare: ture\n---\n[Windows 终端中的窗格](https://learn.microsoft.com/zh-cn/windows/terminal/panes)","slug":"windows终端复用","published":1,"updated":"2024-04-25T17:26:47.393Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvjbaqjk004g0vn1cpzn0er2","content":"<p><a href=\"https://learn.microsoft.com/zh-cn/windows/terminal/panes\">Windows 终端中的窗格</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://learn.microsoft.com/zh-cn/windows/terminal/panes\">Windows 终端中的窗格</a></p>\n"},{"title":"windows自带长截图","date":"2023-04-06T18:08:42.000Z","_content":"长截图ctrl+shift+s，普通截图：win徽+shift+s","source":"_posts/windows自带长截图.md","raw":"---\ntitle: windows自带长截图\ndate: 2023-04-06 18:08:42\ntags:\n    - windows\n---\n长截图ctrl+shift+s，普通截图：win徽+shift+s","slug":"windows自带长截图","published":1,"updated":"2024-04-25T17:26:48.083Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvjbaqjo004i0vn11jjq29wp","content":"<p>长截图ctrl+shift+s，普通截图：win徽+shift+s</p>\n","site":{"data":{}},"excerpt":"","more":"<p>长截图ctrl+shift+s，普通截图：win徽+shift+s</p>\n"},{"title":"windows远程桌面","date":"2023-05-11T22:27:20.000Z","declare":true,"_content":"使用`query user`命令查看当前用户。","source":"_posts/windows远程桌面.md","raw":"---\ntitle: windows远程桌面\ndate: 2023-05-11 22:27:20\ntags:\n    - windows\ndeclare: true\n---\n使用`query user`命令查看当前用户。","slug":"windows远程桌面","published":1,"updated":"2024-04-25T17:26:46.223Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvjbaqjq004k0vn12thz8437","content":"<p>使用<code>query user</code>命令查看当前用户。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>使用<code>query user</code>命令查看当前用户。</p>\n"},{"title":"wsl supports systemd","date":"2023-04-03T16:09:51.000Z","_content":"- Add these lines to the */etc/wsl.conf* (note you will need to run your editor with sudo privileges, e.g: sudo vim */etc/wsl.conf*):\n```shell\n[boot]\nsystemd=true\n```\n\n> Pay attention to port conflicts\n\n- Reference\n[Systemd support is now available in WSL!](https://devblogs.microsoft.com/commandline/systemd-support-is-now-available-in-wsl/)","source":"_posts/wsl-supports-systemd.md","raw":"---\ntitle: wsl supports systemd\ndate: 2023-04-03 16:09:51\ntags:\n    - wsl\n---\n- Add these lines to the */etc/wsl.conf* (note you will need to run your editor with sudo privileges, e.g: sudo vim */etc/wsl.conf*):\n```shell\n[boot]\nsystemd=true\n```\n\n> Pay attention to port conflicts\n\n- Reference\n[Systemd support is now available in WSL!](https://devblogs.microsoft.com/commandline/systemd-support-is-now-available-in-wsl/)","slug":"wsl-supports-systemd","published":1,"updated":"2024-04-25T17:26:46.123Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvjbaqjr004m0vn1597igt1f","content":"<ul>\n<li>Add these lines to the <em>&#x2F;etc&#x2F;wsl.conf</em> (note you will need to run your editor with sudo privileges, e.g: sudo vim <em>&#x2F;etc&#x2F;wsl.conf</em>):<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[boot]</span><br><span class=\"line\">systemd=true</span><br></pre></td></tr></table></figure></li>\n</ul>\n<blockquote>\n<p>Pay attention to port conflicts</p>\n</blockquote>\n<ul>\n<li>Reference<br><a href=\"https://devblogs.microsoft.com/commandline/systemd-support-is-now-available-in-wsl/\">Systemd support is now available in WSL!</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>Add these lines to the <em>&#x2F;etc&#x2F;wsl.conf</em> (note you will need to run your editor with sudo privileges, e.g: sudo vim <em>&#x2F;etc&#x2F;wsl.conf</em>):<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[boot]</span><br><span class=\"line\">systemd=true</span><br></pre></td></tr></table></figure></li>\n</ul>\n<blockquote>\n<p>Pay attention to port conflicts</p>\n</blockquote>\n<ul>\n<li>Reference<br><a href=\"https://devblogs.microsoft.com/commandline/systemd-support-is-now-available-in-wsl/\">Systemd support is now available in WSL!</a></li>\n</ul>\n"},{"title":"免费申请Microsoft 365 E5开发者账号","date":"2023-04-05T18:23:04.000Z","_content":"已失效<!--more-->\n[免费申请Microsoft 365 E5开发者试用订阅教程](https://youtu.be/eamiBQpzbrQ)","source":"_posts/免费申请Microsoft-365-E5开发者账号.md","raw":"---\ntitle: 免费申请Microsoft 365 E5开发者账号\ndate: 2023-04-05 18:23:04\ntags:\n    - 羊毛\n---\n已失效<!--more-->\n[免费申请Microsoft 365 E5开发者试用订阅教程](https://youtu.be/eamiBQpzbrQ)","slug":"免费申请Microsoft-365-E5开发者账号","published":1,"updated":"2024-04-25T17:26:48.053Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvjbaqjt004o0vn1c5838vet","content":"<p>已失效<span id=\"more\"></span><br><a href=\"https://youtu.be/eamiBQpzbrQ\">免费申请Microsoft 365 E5开发者试用订阅教程</a></p>\n","site":{"data":{}},"excerpt":"<p>已失效</p>","more":"<br><a href=\"https://youtu.be/eamiBQpzbrQ\">免费申请Microsoft 365 E5开发者试用订阅教程</a><p></p>"},{"title":"入党时间线","date":"2017-09-25T10:12:23.000Z","_content":"- 申请时间：2017.09.25\n- 确定积极分子时间：2019.04.22\n- 发展对象时间是：2020.04.29\n- 预备时间：2020.10.05\n- 转正时间：2022年10月05日","source":"_posts/入党时间线.md","raw":"---\ntitle: 入党时间线\ndate: 2017-09-25 10:12:23\ntags:\n    - 入党\n---\n- 申请时间：2017.09.25\n- 确定积极分子时间：2019.04.22\n- 发展对象时间是：2020.04.29\n- 预备时间：2020.10.05\n- 转正时间：2022年10月05日","slug":"入党时间线","published":1,"updated":"2024-04-25T17:26:47.543Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvjbaqju004r0vn15ckibmcp","content":"<ul>\n<li>申请时间：2017.09.25</li>\n<li>确定积极分子时间：2019.04.22</li>\n<li>发展对象时间是：2020.04.29</li>\n<li>预备时间：2020.10.05</li>\n<li>转正时间：2022年10月05日</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>申请时间：2017.09.25</li>\n<li>确定积极分子时间：2019.04.22</li>\n<li>发展对象时间是：2020.04.29</li>\n<li>预备时间：2020.10.05</li>\n<li>转正时间：2022年10月05日</li>\n</ul>\n"},{"title":"哈工程复试机试","date":"2022-03-08T10:23:25.000Z","declare":true,"toc":1,"_content":"\n### 18年一志愿\n求出所有的三位水仙花数\n在数论中，水仙花数（Narcissistic number）[[1]](https://zh.wikipedia.org/wiki/%E6%B0%B4%E4%BB%99%E8%8A%B1%E6%95%B0#cite_note-mw-1)[[2]](https://zh.wikipedia.org/wiki/%E6%B0%B4%E4%BB%99%E8%8A%B1%E6%95%B0#cite_note-moore-2)，也被称为超完全数字不变数（pluperfect digital invariant, PPDI）[[3]](https://zh.wikipedia.org/wiki/%E6%B0%B4%E4%BB%99%E8%8A%B1%E6%95%B0#cite_note-3)、自恋数、自幂数、阿姆斯壮数或阿姆斯特朗数（Armstrong number）[[4]](https://zh.wikipedia.org/wiki/%E6%B0%B4%E4%BB%99%E8%8A%B1%E6%95%B0#cite_note-4) ，用来描述一个N位非负整数，其各位数字的N次方和等于该数本身。<!--more-->\n\n**代码**\n```C++\n#include <cmath>\n#include <iostream>\n\nbool judge(int n) {\n  int i = n;\n  while (i) {\n    n -= pow(i % 10, 3);\n    i /= 10;\n  }\n  return 0 == n;\n}\n\nint main() {\n  for (int i = 100; i < 1000; i++)\n    if (judge(i)) std::cout << i << '\\t';\n  std::cout << std::endl;\n  return 0;\n}\n```\n\n### 18年调剂\n求出范围[1,n)的所有素数之和\n\n**代码**\n```C++\n#include <iostream>\nusing namespace std;\nbool isprime(int a)//判断a是否是素数\n{\n    for (int i = 2; i * i <= a; i++)\n        if (a % i == 0)\n            return false;\n    return true;\n}\n\nint main()\n{\n    int n, sum = 0;\n    cin >> n;\n    for (int i = 1; i < n; i++)\n    {\n        if (isprime(i))//累加范围内的所有素数\n        {\n            sum = sum + i;\n        }\n    }\n    cout << sum << endl;\n    return 0;\n}\n```\n\n### 19年一志愿\n**Description:（问题描述）**\n第一行输入两个数m,n,(2<=m<n<=9999)。求出范围[m,n)内既满足非对称，又是素数的数值以及之和。\n非对称：即如13，15，17......327......\n\n**Input:(输入数据)**\n从键盘输入两个整数，分别代表m,n\n**Output:(输出数据)**\n输出非对称素数和非对称素数之和，每个输出数据后有换行\n**Sample Input:(输入实例)**\n```shell\n300 330\n```\n\n**Sample Output:(输出实例)**\n```shell\n307\n311\n317\n935\n```\n\n\n**代码**\n```C++\n//非回文数和素数的交集\n#include <iostream>\nusing namespace std;\n#include <string.h>\n\nbool isprime(int a) //判断a是否是素数\n{\n    for (int i = 2; i * i <= a; i++)\n        if (a % i == 0)\n            return false;\n    return true;\n}\n\nbool nomirror(int a)\n{ //判断a是否非对称\n    string temp;\n    temp = to_string(a);\n    int len = temp.length();\n    for (int i = 0; i < len / 2; i++)\n        if (temp[i] != temp[len - i - 1])\n            return true;\n    return false;\n}\n\nint main()\n{\n    int m, n, sum = 0;\n    cin >> m;\n    cin >> n;\n    for (int i = m; i < n; i++)\n    {\n        if (isprime(i) && nomirror(i))\n        {\n            cout << i << endl;\n            sum += i;\n        }\n    }\n    cout << sum << endl;\n    return 0;\n}\n```\n\n### 19年调剂\n**Description:（问题描述）**\n第一行输入一个数N(0<N<=10)。其次输入N个整型数。请你统计N个整型数中的负数个数和正数均值，比较两个统计数的大小。若是负数个数大，则输出负数个数；若是均值大则输出均值保留小数点后一位。(真题中是输出一些固定字符)\n\n**Input:(输入数据)**\n从键盘输入一个数N，再输入N个数\n**Output:(输出数据)**\n按照题意输出数值，输出数据后有换行\n**Sample Input:(输入实例)**\nCASE 1:\n```shell\n3\n-5 1 2\n```\n\nCASE 2:\n```shell\n2\n-1 -2\n```\n\n**Sample Output:(输出实例)**\nCASE 1:\n```shell\n1.5\n```\n\nCASE 2:\n```shell\n2\n```\n\n**代码**\n```C++\n#include <iostream>\nusing namespace std;\n\nint main()\n{\n    int N, temp;\n    int zheng = 0, fu = 0, sum = 0;\n    cin >> N;\n    for (int i = N; i > 0; i--)\n    {\n        cin >> temp;\n        if (temp > 0)\n        {\n            zheng++;\n            sum += temp;\n        }\n        else if (temp < 0)\n        {\n            fu++;\n        }\n    }\n    if (fu * zheng >= sum)\n        cout << fu;\n    else\n    {\n        float avg = (float)sum / (float)zheng;\n        printf(\"%.1f\\n\", avg);\n    }\n    return 0;\n}\n```\n\n## 一些基础小例题\n### 递归进行逆序输出\n```C\n#include <stdio.h>\nvoid f(int x[], int n)\n{\n    if (n > 1)\n    {\n        f(&x[1], n - 1);\n        printf(\"%d\", x[0]);\n    }\n    else\n        printf(\"%d\", x[0]);\n}\n\nint main()\n{\n    int z[6] = {1, 2, 3, 4, 5, 6};\n    f(z, 6);\n    printf(\"\\n\");\n    return 0;\n}\n```\n猜测上述程序最终会输出什么？？\n```shell\n654321\n\n```\n\n### 递归求最大公约数\n可以采用[辗转相除法](https://baike.baidu.com/item/%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97%E7%AE%97%E6%B3%95/1647675?fromtitle=%E8%BE%97%E8%BD%AC%E7%9B%B8%E9%99%A4%E6%B3%95&fromid=4625352)求最大公约数\n```C++\n#include <iostream>\nusing namespace std;\n\nint result(int a, int b)\n{ //默认认为a>b,返回a和b的最大公约数\n    if (a > b)\n        return b ? result(b, a % b) : a;\n    else\n        return a ? result(a, b % a) : b;\n}\n\nint main()\n{\n    int x, y;\n    cin >> x;\n    cin >> y;\n    cout << result(x, y) << endl;\n    return 0;\n}\n```\n\n### 汉诺塔问题\n\n\n### C之指针\n```C\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\nint main()\n{\n    int array[3][4] =\n        {1, 2, 3,\n         4, 5, 6,\n         7, 8, 9,\n         10, 11, 12};\n    int(*pArray)[4] = array;\n    printf(\"%d \", *(pArray[0] + 1));    //输出2\n    printf(\"%d \", **(pArray + 1));      //输出5\n    pArray++;\n    printf(\"%d \", *(*pArray + 1));      //输出6\n    return 0;\n}\n```\n\n### 宏替换与宏函数的区别\n```C\n#include <stdio.h>\n#include <stdlib.h>\n#define RESULT(x) x *(x - 1)\n\nint main()\n{\n    printf(\"%d\\n\", RESULT(1 + 2 + 1));\n    return 0;\n}\n```\n\n在宏函数中，参数是必须带括号的，本题中是没有带括号的，那么这就是一个单纯的宏替换，在做宏替换的时候切记不要把替换的值算出来，只需要单纯去替换即可:\n\n- x的值:1+2+1\n\n- x*(x-1): 用1+2+1替换 x 得到: \n\n- 1 + 2 + 1*(1 + 2 + 1-1) ,故得到我们的结果 ：6\n\n## 读程序\n### 2022-3-14\n```C++\n#include <stdio.h>\nint fun(int *x, int n)\n{\n    if (n == 1)\n        return x[1];\n    else\n        return x[1] + fun(x + 1, n - 1);\n}\n\nint main()\n{\n\n    int array[] = {0, 9, 1, 2}, res;\n\n    res = fun(array, 3);\n\n    printf(\"%d\", res);\n    return 0;\n}\n```\n显然fun是一个递归函数，分析可知它的返回值是长度为n的数组x的和。所以本题输出应该是`12`.\n\n---\n\n```C++\n#include <stdio.h>\nint disp(char *str)\n{\n    while (*str)\n    {                    //遇到'\\0'结束\n        putchar(*str++); // str依次往后移动\n    }\n    return *str;\n}\nint main()\n{\n    printf(\"%d\", disp(\"NAME\"));\n    return 0;\n}\n```\n注意`*str++;`等价于`*str;str++;`,而`'\\0'`按照`%d`的格式输出就是数字`0`.所以最终输出应该是`NAME0`.\n\n### 2022-3-15\n","source":"_posts/哈工程复试机试.md","raw":"---\ntitle: 哈工程复试机试\ndate: 2022-03-08 10:23:25\ntags:\n    - 考研\ndeclare: true\ntoc: 1\n---\n\n### 18年一志愿\n求出所有的三位水仙花数\n在数论中，水仙花数（Narcissistic number）[[1]](https://zh.wikipedia.org/wiki/%E6%B0%B4%E4%BB%99%E8%8A%B1%E6%95%B0#cite_note-mw-1)[[2]](https://zh.wikipedia.org/wiki/%E6%B0%B4%E4%BB%99%E8%8A%B1%E6%95%B0#cite_note-moore-2)，也被称为超完全数字不变数（pluperfect digital invariant, PPDI）[[3]](https://zh.wikipedia.org/wiki/%E6%B0%B4%E4%BB%99%E8%8A%B1%E6%95%B0#cite_note-3)、自恋数、自幂数、阿姆斯壮数或阿姆斯特朗数（Armstrong number）[[4]](https://zh.wikipedia.org/wiki/%E6%B0%B4%E4%BB%99%E8%8A%B1%E6%95%B0#cite_note-4) ，用来描述一个N位非负整数，其各位数字的N次方和等于该数本身。<!--more-->\n\n**代码**\n```C++\n#include <cmath>\n#include <iostream>\n\nbool judge(int n) {\n  int i = n;\n  while (i) {\n    n -= pow(i % 10, 3);\n    i /= 10;\n  }\n  return 0 == n;\n}\n\nint main() {\n  for (int i = 100; i < 1000; i++)\n    if (judge(i)) std::cout << i << '\\t';\n  std::cout << std::endl;\n  return 0;\n}\n```\n\n### 18年调剂\n求出范围[1,n)的所有素数之和\n\n**代码**\n```C++\n#include <iostream>\nusing namespace std;\nbool isprime(int a)//判断a是否是素数\n{\n    for (int i = 2; i * i <= a; i++)\n        if (a % i == 0)\n            return false;\n    return true;\n}\n\nint main()\n{\n    int n, sum = 0;\n    cin >> n;\n    for (int i = 1; i < n; i++)\n    {\n        if (isprime(i))//累加范围内的所有素数\n        {\n            sum = sum + i;\n        }\n    }\n    cout << sum << endl;\n    return 0;\n}\n```\n\n### 19年一志愿\n**Description:（问题描述）**\n第一行输入两个数m,n,(2<=m<n<=9999)。求出范围[m,n)内既满足非对称，又是素数的数值以及之和。\n非对称：即如13，15，17......327......\n\n**Input:(输入数据)**\n从键盘输入两个整数，分别代表m,n\n**Output:(输出数据)**\n输出非对称素数和非对称素数之和，每个输出数据后有换行\n**Sample Input:(输入实例)**\n```shell\n300 330\n```\n\n**Sample Output:(输出实例)**\n```shell\n307\n311\n317\n935\n```\n\n\n**代码**\n```C++\n//非回文数和素数的交集\n#include <iostream>\nusing namespace std;\n#include <string.h>\n\nbool isprime(int a) //判断a是否是素数\n{\n    for (int i = 2; i * i <= a; i++)\n        if (a % i == 0)\n            return false;\n    return true;\n}\n\nbool nomirror(int a)\n{ //判断a是否非对称\n    string temp;\n    temp = to_string(a);\n    int len = temp.length();\n    for (int i = 0; i < len / 2; i++)\n        if (temp[i] != temp[len - i - 1])\n            return true;\n    return false;\n}\n\nint main()\n{\n    int m, n, sum = 0;\n    cin >> m;\n    cin >> n;\n    for (int i = m; i < n; i++)\n    {\n        if (isprime(i) && nomirror(i))\n        {\n            cout << i << endl;\n            sum += i;\n        }\n    }\n    cout << sum << endl;\n    return 0;\n}\n```\n\n### 19年调剂\n**Description:（问题描述）**\n第一行输入一个数N(0<N<=10)。其次输入N个整型数。请你统计N个整型数中的负数个数和正数均值，比较两个统计数的大小。若是负数个数大，则输出负数个数；若是均值大则输出均值保留小数点后一位。(真题中是输出一些固定字符)\n\n**Input:(输入数据)**\n从键盘输入一个数N，再输入N个数\n**Output:(输出数据)**\n按照题意输出数值，输出数据后有换行\n**Sample Input:(输入实例)**\nCASE 1:\n```shell\n3\n-5 1 2\n```\n\nCASE 2:\n```shell\n2\n-1 -2\n```\n\n**Sample Output:(输出实例)**\nCASE 1:\n```shell\n1.5\n```\n\nCASE 2:\n```shell\n2\n```\n\n**代码**\n```C++\n#include <iostream>\nusing namespace std;\n\nint main()\n{\n    int N, temp;\n    int zheng = 0, fu = 0, sum = 0;\n    cin >> N;\n    for (int i = N; i > 0; i--)\n    {\n        cin >> temp;\n        if (temp > 0)\n        {\n            zheng++;\n            sum += temp;\n        }\n        else if (temp < 0)\n        {\n            fu++;\n        }\n    }\n    if (fu * zheng >= sum)\n        cout << fu;\n    else\n    {\n        float avg = (float)sum / (float)zheng;\n        printf(\"%.1f\\n\", avg);\n    }\n    return 0;\n}\n```\n\n## 一些基础小例题\n### 递归进行逆序输出\n```C\n#include <stdio.h>\nvoid f(int x[], int n)\n{\n    if (n > 1)\n    {\n        f(&x[1], n - 1);\n        printf(\"%d\", x[0]);\n    }\n    else\n        printf(\"%d\", x[0]);\n}\n\nint main()\n{\n    int z[6] = {1, 2, 3, 4, 5, 6};\n    f(z, 6);\n    printf(\"\\n\");\n    return 0;\n}\n```\n猜测上述程序最终会输出什么？？\n```shell\n654321\n\n```\n\n### 递归求最大公约数\n可以采用[辗转相除法](https://baike.baidu.com/item/%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97%E7%AE%97%E6%B3%95/1647675?fromtitle=%E8%BE%97%E8%BD%AC%E7%9B%B8%E9%99%A4%E6%B3%95&fromid=4625352)求最大公约数\n```C++\n#include <iostream>\nusing namespace std;\n\nint result(int a, int b)\n{ //默认认为a>b,返回a和b的最大公约数\n    if (a > b)\n        return b ? result(b, a % b) : a;\n    else\n        return a ? result(a, b % a) : b;\n}\n\nint main()\n{\n    int x, y;\n    cin >> x;\n    cin >> y;\n    cout << result(x, y) << endl;\n    return 0;\n}\n```\n\n### 汉诺塔问题\n\n\n### C之指针\n```C\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\nint main()\n{\n    int array[3][4] =\n        {1, 2, 3,\n         4, 5, 6,\n         7, 8, 9,\n         10, 11, 12};\n    int(*pArray)[4] = array;\n    printf(\"%d \", *(pArray[0] + 1));    //输出2\n    printf(\"%d \", **(pArray + 1));      //输出5\n    pArray++;\n    printf(\"%d \", *(*pArray + 1));      //输出6\n    return 0;\n}\n```\n\n### 宏替换与宏函数的区别\n```C\n#include <stdio.h>\n#include <stdlib.h>\n#define RESULT(x) x *(x - 1)\n\nint main()\n{\n    printf(\"%d\\n\", RESULT(1 + 2 + 1));\n    return 0;\n}\n```\n\n在宏函数中，参数是必须带括号的，本题中是没有带括号的，那么这就是一个单纯的宏替换，在做宏替换的时候切记不要把替换的值算出来，只需要单纯去替换即可:\n\n- x的值:1+2+1\n\n- x*(x-1): 用1+2+1替换 x 得到: \n\n- 1 + 2 + 1*(1 + 2 + 1-1) ,故得到我们的结果 ：6\n\n## 读程序\n### 2022-3-14\n```C++\n#include <stdio.h>\nint fun(int *x, int n)\n{\n    if (n == 1)\n        return x[1];\n    else\n        return x[1] + fun(x + 1, n - 1);\n}\n\nint main()\n{\n\n    int array[] = {0, 9, 1, 2}, res;\n\n    res = fun(array, 3);\n\n    printf(\"%d\", res);\n    return 0;\n}\n```\n显然fun是一个递归函数，分析可知它的返回值是长度为n的数组x的和。所以本题输出应该是`12`.\n\n---\n\n```C++\n#include <stdio.h>\nint disp(char *str)\n{\n    while (*str)\n    {                    //遇到'\\0'结束\n        putchar(*str++); // str依次往后移动\n    }\n    return *str;\n}\nint main()\n{\n    printf(\"%d\", disp(\"NAME\"));\n    return 0;\n}\n```\n注意`*str++;`等价于`*str;str++;`,而`'\\0'`按照`%d`的格式输出就是数字`0`.所以最终输出应该是`NAME0`.\n\n### 2022-3-15\n","slug":"哈工程复试机试","published":1,"updated":"2024-04-25T17:26:48.103Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvjbaqjw004t0vn1hf1p7387","content":"<h3 id=\"18年一志愿\"><a href=\"#18年一志愿\" class=\"headerlink\" title=\"18年一志愿\"></a>18年一志愿</h3><p>求出所有的三位水仙花数<br>在数论中，水仙花数（Narcissistic number）<a href=\"https://zh.wikipedia.org/wiki/%E6%B0%B4%E4%BB%99%E8%8A%B1%E6%95%B0#cite_note-mw-1\">[1]</a><a href=\"https://zh.wikipedia.org/wiki/%E6%B0%B4%E4%BB%99%E8%8A%B1%E6%95%B0#cite_note-moore-2\">[2]</a>，也被称为超完全数字不变数（pluperfect digital invariant, PPDI）<a href=\"https://zh.wikipedia.org/wiki/%E6%B0%B4%E4%BB%99%E8%8A%B1%E6%95%B0#cite_note-3\">[3]</a>、自恋数、自幂数、阿姆斯壮数或阿姆斯特朗数（Armstrong number）<a href=\"https://zh.wikipedia.org/wiki/%E6%B0%B4%E4%BB%99%E8%8A%B1%E6%95%B0#cite_note-4\">[4]</a> ，用来描述一个N位非负整数，其各位数字的N次方和等于该数本身。<span id=\"more\"></span></p>\n<p><strong>代码</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">judge</span><span class=\"params\">(<span class=\"type\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> i = n;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (i) &#123;</span><br><span class=\"line\">    n -= <span class=\"built_in\">pow</span>(i % <span class=\"number\">10</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">    i /= <span class=\"number\">10</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span> == n;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">100</span>; i &lt; <span class=\"number\">1000</span>; i++)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">judge</span>(i)) std::cout &lt;&lt; i &lt;&lt; <span class=\"string\">&#x27;\\t&#x27;</span>;</span><br><span class=\"line\">  std::cout &lt;&lt; std::endl;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"18年调剂\"><a href=\"#18年调剂\" class=\"headerlink\" title=\"18年调剂\"></a>18年调剂</h3><p>求出范围[1,n)的所有素数之和</p>\n<p><strong>代码</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">isprime</span><span class=\"params\">(<span class=\"type\">int</span> a)</span><span class=\"comment\">//判断a是否是素数</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">2</span>; i * i &lt;= a; i++)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (a % i == <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n, sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">isprime</span>(i))<span class=\"comment\">//累加范围内的所有素数</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            sum = sum + i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; sum &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"19年一志愿\"><a href=\"#19年一志愿\" class=\"headerlink\" title=\"19年一志愿\"></a>19年一志愿</h3><p><strong>Description:（问题描述）</strong><br>第一行输入两个数m,n,(2&lt;&#x3D;m&lt;n&lt;&#x3D;9999)。求出范围[m,n)内既满足非对称，又是素数的数值以及之和。<br>非对称：即如13，15，17……327……</p>\n<p><strong>Input:(输入数据)</strong><br>从键盘输入两个整数，分别代表m,n<br><strong>Output:(输出数据)</strong><br>输出非对称素数和非对称素数之和，每个输出数据后有换行<br><strong>Sample Input:(输入实例)</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">300 330</span><br></pre></td></tr></table></figure>\n\n<p><strong>Sample Output:(输出实例)</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">307</span><br><span class=\"line\">311</span><br><span class=\"line\">317</span><br><span class=\"line\">935</span><br></pre></td></tr></table></figure>\n\n\n<p><strong>代码</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//非回文数和素数的交集</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">isprime</span><span class=\"params\">(<span class=\"type\">int</span> a)</span> <span class=\"comment\">//判断a是否是素数</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">2</span>; i * i &lt;= a; i++)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (a % i == <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">nomirror</span><span class=\"params\">(<span class=\"type\">int</span> a)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; <span class=\"comment\">//判断a是否非对称</span></span><br><span class=\"line\">    string temp;</span><br><span class=\"line\">    temp = <span class=\"built_in\">to_string</span>(a);</span><br><span class=\"line\">    <span class=\"type\">int</span> len = temp.<span class=\"built_in\">length</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; len / <span class=\"number\">2</span>; i++)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (temp[i] != temp[len - i - <span class=\"number\">1</span>])</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> m, n, sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    cin &gt;&gt; m;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = m; i &lt; n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">isprime</span>(i) &amp;&amp; <span class=\"built_in\">nomirror</span>(i))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            cout &lt;&lt; i &lt;&lt; endl;</span><br><span class=\"line\">            sum += i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; sum &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"19年调剂\"><a href=\"#19年调剂\" class=\"headerlink\" title=\"19年调剂\"></a>19年调剂</h3><p><strong>Description:（问题描述）</strong><br>第一行输入一个数N(0&lt;N&lt;&#x3D;10)。其次输入N个整型数。请你统计N个整型数中的负数个数和正数均值，比较两个统计数的大小。若是负数个数大，则输出负数个数；若是均值大则输出均值保留小数点后一位。(真题中是输出一些固定字符)</p>\n<p><strong>Input:(输入数据)</strong><br>从键盘输入一个数N，再输入N个数<br><strong>Output:(输出数据)</strong><br>按照题意输出数值，输出数据后有换行<br><strong>Sample Input:(输入实例)</strong><br>CASE 1:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3</span><br><span class=\"line\">-5 1 2</span><br></pre></td></tr></table></figure>\n\n<p>CASE 2:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2</span><br><span class=\"line\">-1 -2</span><br></pre></td></tr></table></figure>\n\n<p><strong>Sample Output:(输出实例)</strong><br>CASE 1:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.5</span><br></pre></td></tr></table></figure>\n\n<p>CASE 2:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2</span><br></pre></td></tr></table></figure>\n\n<p><strong>代码</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> N, temp;</span><br><span class=\"line\">    <span class=\"type\">int</span> zheng = <span class=\"number\">0</span>, fu = <span class=\"number\">0</span>, sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    cin &gt;&gt; N;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = N; i &gt; <span class=\"number\">0</span>; i--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cin &gt;&gt; temp;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (temp &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            zheng++;</span><br><span class=\"line\">            sum += temp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (temp &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            fu++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fu * zheng &gt;= sum)</span><br><span class=\"line\">        cout &lt;&lt; fu;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">float</span> avg = (<span class=\"type\">float</span>)sum / (<span class=\"type\">float</span>)zheng;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%.1f\\n&quot;</span>, avg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"一些基础小例题\"><a href=\"#一些基础小例题\" class=\"headerlink\" title=\"一些基础小例题\"></a>一些基础小例题</h2><h3 id=\"递归进行逆序输出\"><a href=\"#递归进行逆序输出\" class=\"headerlink\" title=\"递归进行逆序输出\"></a>递归进行逆序输出</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">f</span><span class=\"params\">(<span class=\"type\">int</span> x[], <span class=\"type\">int</span> n)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n &gt; <span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        f(&amp;x[<span class=\"number\">1</span>], n - <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>, x[<span class=\"number\">0</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>, x[<span class=\"number\">0</span>]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> z[<span class=\"number\">6</span>] = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>&#125;;</span><br><span class=\"line\">    f(z, <span class=\"number\">6</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>猜测上述程序最终会输出什么？？</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">654321</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"递归求最大公约数\"><a href=\"#递归求最大公约数\" class=\"headerlink\" title=\"递归求最大公约数\"></a>递归求最大公约数</h3><p>可以采用<a href=\"https://baike.baidu.com/item/%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97%E7%AE%97%E6%B3%95/1647675?fromtitle=%E8%BE%97%E8%BD%AC%E7%9B%B8%E9%99%A4%E6%B3%95&fromid=4625352\">辗转相除法</a>求最大公约数</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">result</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; <span class=\"comment\">//默认认为a&gt;b,返回a和b的最大公约数</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (a &gt; b)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> b ? <span class=\"built_in\">result</span>(b, a % b) : a;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> a ? <span class=\"built_in\">result</span>(a, b % a) : b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> x, y;</span><br><span class=\"line\">    cin &gt;&gt; x;</span><br><span class=\"line\">    cin &gt;&gt; y;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"built_in\">result</span>(x, y) &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"汉诺塔问题\"><a href=\"#汉诺塔问题\" class=\"headerlink\" title=\"汉诺塔问题\"></a>汉诺塔问题</h3><h3 id=\"C之指针\"><a href=\"#C之指针\" class=\"headerlink\" title=\"C之指针\"></a>C之指针</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"built_in\">array</span>[<span class=\"number\">3</span>][<span class=\"number\">4</span>] =</span><br><span class=\"line\">        &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>,</span><br><span class=\"line\">         <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>,</span><br><span class=\"line\">         <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>,</span><br><span class=\"line\">         <span class=\"number\">10</span>, <span class=\"number\">11</span>, <span class=\"number\">12</span>&#125;;</span><br><span class=\"line\">    <span class=\"type\">int</span>(*pArray)[<span class=\"number\">4</span>] = <span class=\"built_in\">array</span>;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>, *(pArray[<span class=\"number\">0</span>] + <span class=\"number\">1</span>));    <span class=\"comment\">//输出2</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>, **(pArray + <span class=\"number\">1</span>));      <span class=\"comment\">//输出5</span></span><br><span class=\"line\">    pArray++;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>, *(*pArray + <span class=\"number\">1</span>));      <span class=\"comment\">//输出6</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"宏替换与宏函数的区别\"><a href=\"#宏替换与宏函数的区别\" class=\"headerlink\" title=\"宏替换与宏函数的区别\"></a>宏替换与宏函数的区别</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> RESULT(x) x *(x - 1)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, RESULT(<span class=\"number\">1</span> + <span class=\"number\">2</span> + <span class=\"number\">1</span>));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在宏函数中，参数是必须带括号的，本题中是没有带括号的，那么这就是一个单纯的宏替换，在做宏替换的时候切记不要把替换的值算出来，只需要单纯去替换即可:</p>\n<ul>\n<li><p>x的值:1+2+1</p>\n</li>\n<li><p>x*(x-1): 用1+2+1替换 x 得到: </p>\n</li>\n<li><p>1 + 2 + 1*(1 + 2 + 1-1) ,故得到我们的结果 ：6</p>\n</li>\n</ul>\n<h2 id=\"读程序\"><a href=\"#读程序\" class=\"headerlink\" title=\"读程序\"></a>读程序</h2><h3 id=\"2022-3-14\"><a href=\"#2022-3-14\" class=\"headerlink\" title=\"2022-3-14\"></a>2022-3-14</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">fun</span><span class=\"params\">(<span class=\"type\">int</span> *x, <span class=\"type\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n == <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x[<span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> x[<span class=\"number\">1</span>] + <span class=\"built_in\">fun</span>(x + <span class=\"number\">1</span>, n - <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> array[] = &#123;<span class=\"number\">0</span>, <span class=\"number\">9</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>&#125;, res;</span><br><span class=\"line\"></span><br><span class=\"line\">    res = <span class=\"built_in\">fun</span>(array, <span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>, res);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>显然fun是一个递归函数，分析可知它的返回值是长度为n的数组x的和。所以本题输出应该是<code>12</code>.</p>\n<hr>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">disp</span><span class=\"params\">(<span class=\"type\">char</span> *str)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (*str)</span><br><span class=\"line\">    &#123;                    <span class=\"comment\">//遇到&#x27;\\0&#x27;结束</span></span><br><span class=\"line\">        <span class=\"built_in\">putchar</span>(*str++); <span class=\"comment\">// str依次往后移动</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> *str;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>, <span class=\"built_in\">disp</span>(<span class=\"string\">&quot;NAME&quot;</span>));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意<code>*str++;</code>等价于<code>*str;str++;</code>,而<code>&#39;\\0&#39;</code>按照<code>%d</code>的格式输出就是数字<code>0</code>.所以最终输出应该是<code>NAME0</code>.</p>\n<h3 id=\"2022-3-15\"><a href=\"#2022-3-15\" class=\"headerlink\" title=\"2022-3-15\"></a>2022-3-15</h3>","site":{"data":{}},"excerpt":"<h3 id=\"18年一志愿\"><a href=\"#18年一志愿\" class=\"headerlink\" title=\"18年一志愿\"></a>18年一志愿</h3><p>求出所有的三位水仙花数<br>在数论中，水仙花数（Narcissistic number）<a href=\"https://zh.wikipedia.org/wiki/%E6%B0%B4%E4%BB%99%E8%8A%B1%E6%95%B0#cite_note-mw-1\">[1]</a><a href=\"https://zh.wikipedia.org/wiki/%E6%B0%B4%E4%BB%99%E8%8A%B1%E6%95%B0#cite_note-moore-2\">[2]</a>，也被称为超完全数字不变数（pluperfect digital invariant, PPDI）<a href=\"https://zh.wikipedia.org/wiki/%E6%B0%B4%E4%BB%99%E8%8A%B1%E6%95%B0#cite_note-3\">[3]</a>、自恋数、自幂数、阿姆斯壮数或阿姆斯特朗数（Armstrong number）<a href=\"https://zh.wikipedia.org/wiki/%E6%B0%B4%E4%BB%99%E8%8A%B1%E6%95%B0#cite_note-4\">[4]</a> ，用来描述一个N位非负整数，其各位数字的N次方和等于该数本身。</p>","more":"<p></p>\n<p><strong>代码</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">judge</span><span class=\"params\">(<span class=\"type\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> i = n;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (i) &#123;</span><br><span class=\"line\">    n -= <span class=\"built_in\">pow</span>(i % <span class=\"number\">10</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">    i /= <span class=\"number\">10</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span> == n;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">100</span>; i &lt; <span class=\"number\">1000</span>; i++)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">judge</span>(i)) std::cout &lt;&lt; i &lt;&lt; <span class=\"string\">&#x27;\\t&#x27;</span>;</span><br><span class=\"line\">  std::cout &lt;&lt; std::endl;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"18年调剂\"><a href=\"#18年调剂\" class=\"headerlink\" title=\"18年调剂\"></a>18年调剂</h3><p>求出范围[1,n)的所有素数之和</p>\n<p><strong>代码</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">isprime</span><span class=\"params\">(<span class=\"type\">int</span> a)</span><span class=\"comment\">//判断a是否是素数</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">2</span>; i * i &lt;= a; i++)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (a % i == <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n, sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">isprime</span>(i))<span class=\"comment\">//累加范围内的所有素数</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            sum = sum + i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; sum &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"19年一志愿\"><a href=\"#19年一志愿\" class=\"headerlink\" title=\"19年一志愿\"></a>19年一志愿</h3><p><strong>Description:（问题描述）</strong><br>第一行输入两个数m,n,(2&lt;&#x3D;m&lt;n&lt;&#x3D;9999)。求出范围[m,n)内既满足非对称，又是素数的数值以及之和。<br>非对称：即如13，15，17……327……</p>\n<p><strong>Input:(输入数据)</strong><br>从键盘输入两个整数，分别代表m,n<br><strong>Output:(输出数据)</strong><br>输出非对称素数和非对称素数之和，每个输出数据后有换行<br><strong>Sample Input:(输入实例)</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">300 330</span><br></pre></td></tr></table></figure>\n\n<p><strong>Sample Output:(输出实例)</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">307</span><br><span class=\"line\">311</span><br><span class=\"line\">317</span><br><span class=\"line\">935</span><br></pre></td></tr></table></figure>\n\n\n<p><strong>代码</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//非回文数和素数的交集</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">isprime</span><span class=\"params\">(<span class=\"type\">int</span> a)</span> <span class=\"comment\">//判断a是否是素数</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">2</span>; i * i &lt;= a; i++)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (a % i == <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">nomirror</span><span class=\"params\">(<span class=\"type\">int</span> a)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; <span class=\"comment\">//判断a是否非对称</span></span><br><span class=\"line\">    string temp;</span><br><span class=\"line\">    temp = <span class=\"built_in\">to_string</span>(a);</span><br><span class=\"line\">    <span class=\"type\">int</span> len = temp.<span class=\"built_in\">length</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; len / <span class=\"number\">2</span>; i++)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (temp[i] != temp[len - i - <span class=\"number\">1</span>])</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> m, n, sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    cin &gt;&gt; m;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = m; i &lt; n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">isprime</span>(i) &amp;&amp; <span class=\"built_in\">nomirror</span>(i))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            cout &lt;&lt; i &lt;&lt; endl;</span><br><span class=\"line\">            sum += i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; sum &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"19年调剂\"><a href=\"#19年调剂\" class=\"headerlink\" title=\"19年调剂\"></a>19年调剂</h3><p><strong>Description:（问题描述）</strong><br>第一行输入一个数N(0&lt;N&lt;&#x3D;10)。其次输入N个整型数。请你统计N个整型数中的负数个数和正数均值，比较两个统计数的大小。若是负数个数大，则输出负数个数；若是均值大则输出均值保留小数点后一位。(真题中是输出一些固定字符)</p>\n<p><strong>Input:(输入数据)</strong><br>从键盘输入一个数N，再输入N个数<br><strong>Output:(输出数据)</strong><br>按照题意输出数值，输出数据后有换行<br><strong>Sample Input:(输入实例)</strong><br>CASE 1:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3</span><br><span class=\"line\">-5 1 2</span><br></pre></td></tr></table></figure>\n\n<p>CASE 2:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2</span><br><span class=\"line\">-1 -2</span><br></pre></td></tr></table></figure>\n\n<p><strong>Sample Output:(输出实例)</strong><br>CASE 1:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.5</span><br></pre></td></tr></table></figure>\n\n<p>CASE 2:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2</span><br></pre></td></tr></table></figure>\n\n<p><strong>代码</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> N, temp;</span><br><span class=\"line\">    <span class=\"type\">int</span> zheng = <span class=\"number\">0</span>, fu = <span class=\"number\">0</span>, sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    cin &gt;&gt; N;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = N; i &gt; <span class=\"number\">0</span>; i--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cin &gt;&gt; temp;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (temp &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            zheng++;</span><br><span class=\"line\">            sum += temp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (temp &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            fu++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fu * zheng &gt;= sum)</span><br><span class=\"line\">        cout &lt;&lt; fu;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">float</span> avg = (<span class=\"type\">float</span>)sum / (<span class=\"type\">float</span>)zheng;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%.1f\\n&quot;</span>, avg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"一些基础小例题\"><a href=\"#一些基础小例题\" class=\"headerlink\" title=\"一些基础小例题\"></a>一些基础小例题</h2><h3 id=\"递归进行逆序输出\"><a href=\"#递归进行逆序输出\" class=\"headerlink\" title=\"递归进行逆序输出\"></a>递归进行逆序输出</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">f</span><span class=\"params\">(<span class=\"type\">int</span> x[], <span class=\"type\">int</span> n)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n &gt; <span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        f(&amp;x[<span class=\"number\">1</span>], n - <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>, x[<span class=\"number\">0</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>, x[<span class=\"number\">0</span>]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> z[<span class=\"number\">6</span>] = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>&#125;;</span><br><span class=\"line\">    f(z, <span class=\"number\">6</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>猜测上述程序最终会输出什么？？</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">654321</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"递归求最大公约数\"><a href=\"#递归求最大公约数\" class=\"headerlink\" title=\"递归求最大公约数\"></a>递归求最大公约数</h3><p>可以采用<a href=\"https://baike.baidu.com/item/%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97%E7%AE%97%E6%B3%95/1647675?fromtitle=%E8%BE%97%E8%BD%AC%E7%9B%B8%E9%99%A4%E6%B3%95&fromid=4625352\">辗转相除法</a>求最大公约数</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">result</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; <span class=\"comment\">//默认认为a&gt;b,返回a和b的最大公约数</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (a &gt; b)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> b ? <span class=\"built_in\">result</span>(b, a % b) : a;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> a ? <span class=\"built_in\">result</span>(a, b % a) : b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> x, y;</span><br><span class=\"line\">    cin &gt;&gt; x;</span><br><span class=\"line\">    cin &gt;&gt; y;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"built_in\">result</span>(x, y) &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"汉诺塔问题\"><a href=\"#汉诺塔问题\" class=\"headerlink\" title=\"汉诺塔问题\"></a>汉诺塔问题</h3><h3 id=\"C之指针\"><a href=\"#C之指针\" class=\"headerlink\" title=\"C之指针\"></a>C之指针</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"built_in\">array</span>[<span class=\"number\">3</span>][<span class=\"number\">4</span>] =</span><br><span class=\"line\">        &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>,</span><br><span class=\"line\">         <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>,</span><br><span class=\"line\">         <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>,</span><br><span class=\"line\">         <span class=\"number\">10</span>, <span class=\"number\">11</span>, <span class=\"number\">12</span>&#125;;</span><br><span class=\"line\">    <span class=\"type\">int</span>(*pArray)[<span class=\"number\">4</span>] = <span class=\"built_in\">array</span>;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>, *(pArray[<span class=\"number\">0</span>] + <span class=\"number\">1</span>));    <span class=\"comment\">//输出2</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>, **(pArray + <span class=\"number\">1</span>));      <span class=\"comment\">//输出5</span></span><br><span class=\"line\">    pArray++;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>, *(*pArray + <span class=\"number\">1</span>));      <span class=\"comment\">//输出6</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"宏替换与宏函数的区别\"><a href=\"#宏替换与宏函数的区别\" class=\"headerlink\" title=\"宏替换与宏函数的区别\"></a>宏替换与宏函数的区别</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> RESULT(x) x *(x - 1)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, RESULT(<span class=\"number\">1</span> + <span class=\"number\">2</span> + <span class=\"number\">1</span>));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在宏函数中，参数是必须带括号的，本题中是没有带括号的，那么这就是一个单纯的宏替换，在做宏替换的时候切记不要把替换的值算出来，只需要单纯去替换即可:</p>\n<ul>\n<li><p>x的值:1+2+1</p>\n</li>\n<li><p>x*(x-1): 用1+2+1替换 x 得到: </p>\n</li>\n<li><p>1 + 2 + 1*(1 + 2 + 1-1) ,故得到我们的结果 ：6</p>\n</li>\n</ul>\n<h2 id=\"读程序\"><a href=\"#读程序\" class=\"headerlink\" title=\"读程序\"></a>读程序</h2><h3 id=\"2022-3-14\"><a href=\"#2022-3-14\" class=\"headerlink\" title=\"2022-3-14\"></a>2022-3-14</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">fun</span><span class=\"params\">(<span class=\"type\">int</span> *x, <span class=\"type\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n == <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x[<span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> x[<span class=\"number\">1</span>] + <span class=\"built_in\">fun</span>(x + <span class=\"number\">1</span>, n - <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> array[] = &#123;<span class=\"number\">0</span>, <span class=\"number\">9</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>&#125;, res;</span><br><span class=\"line\"></span><br><span class=\"line\">    res = <span class=\"built_in\">fun</span>(array, <span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>, res);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>显然fun是一个递归函数，分析可知它的返回值是长度为n的数组x的和。所以本题输出应该是<code>12</code>.</p>\n<hr>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">disp</span><span class=\"params\">(<span class=\"type\">char</span> *str)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (*str)</span><br><span class=\"line\">    &#123;                    <span class=\"comment\">//遇到&#x27;\\0&#x27;结束</span></span><br><span class=\"line\">        <span class=\"built_in\">putchar</span>(*str++); <span class=\"comment\">// str依次往后移动</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> *str;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>, <span class=\"built_in\">disp</span>(<span class=\"string\">&quot;NAME&quot;</span>));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意<code>*str++;</code>等价于<code>*str;str++;</code>,而<code>&#39;\\0&#39;</code>按照<code>%d</code>的格式输出就是数字<code>0</code>.所以最终输出应该是<code>NAME0</code>.</p>\n<h3 id=\"2022-3-15\"><a href=\"#2022-3-15\" class=\"headerlink\" title=\"2022-3-15\"></a>2022-3-15</h3>"},{"title":"哈工程复试自我介绍","date":"2022-03-24T10:16:19.000Z","_content":"- 复试自我介绍<!--more-->\nGood morning/afternoon, dear professors.\n早上好/下午好，亲爱的教授们。\nI am very glad to be here for this interview.\n我很高兴来到这里参加这次面试。\n\n\n\nIn the past four years, I have not only worked hard to learn professional knowledge, but also participated in a variety of practical activities.\n四年来，我不仅努力学习专业知识，还参加了丰富多彩的实践活动。\n\nWith great concentration on learning, I’ve been top-ranked in my class during the four years.\n通过潜心学习，这四年我在班上名列前茅。\n\nOne of the experiences I am proud of is that I successfully became a member of the Communist Party at college.\n我引以为豪的经历是，我在大学成功成为了一名共产党员。\n\nI am creative and hard-working,so during my undergraduate period,I participated in the Robot Contest in the Five Provinces of North China and won the National First Prize.\n我很有创造力也很勤奋，所以在我本科期间，我参加了华北五省机器人大赛，并获得了全国一等奖。\n\nThe experience of being the Study Committee and League Secretary of my class and a Vice Minister of External Relations of the Student Union helps me know the importance of cooperation and communication.\n作为班内的学习委员、团委书记，以及学生会外联部副部长，让我明白了合作与沟通的重要性。\n\n\n\nIf I have an opportunity to study at your college, I will spare no effort to do research on computer science and Technology,develop practical and cooperative skills.\n如果我有机会在贵校学习，我会不遗余力地从事计算机科学与技术方面的研究，培养实践和合作能力。\n\nIf I have the opportunity, I would like to do a Ph.D. to further improve myself.\n如果有这个机会，我想读博进一步提高自己。\n\n\nI appreciate your attention. That's all,thank you.\n感谢聆听。就是这样，谢谢。\n\n\n---------------------------------------\n- 中文自述\n上午好，亲爱的老师们。很高兴可以参加这次面试。\n\n我本专业修的是自动化，同属工科，和咱们计算机还是有很多交集的，通过对交叉科目的学习，我发现我还是更喜欢计算机学科方面的知识。在本次研究生考试当中，我取得了相对而言还不错的成绩。\n\n大学的四年来，我不仅努力学习专业知识，还参加了丰富多彩的实践活动。\n\n通过潜心学习，这四年我在班上一直都是名列前茅。\n\n值得一提的是我在大学期间成功成为了一名共产党员。\n\n我很有创造力也很勤奋，所以在我本科期间，我参加了华北五省机器人大赛，并获得了全国一等奖。\n\n我曾任班内的学习委员、团委书记，纪律委员等职务，在校也曾任学生会外联部副部长，这些使我更加充分的明白了合作与沟通的重要性。我还曾获三好学生，优秀学生干部，优秀班干部等称号。\n\n如果我有机会在咱们哈工程学习，我会不遗余力地从事咱们计科方面的研究，培养实践和合作能力。\n\n如果真的有这个机会的话，我还想读博进一步提高自己。因为我也想成为一名研究生导师，向后来的学生去传授相关的知识。\n\n好的，谢谢各位老师，我的自述完毕！","source":"_posts/哈工程复试自我介绍.md","raw":"---\ntitle: 哈工程复试自我介绍\ndate: 2022-03-24 10:16:19\ntags:\n    - 考研\n---\n- 复试自我介绍<!--more-->\nGood morning/afternoon, dear professors.\n早上好/下午好，亲爱的教授们。\nI am very glad to be here for this interview.\n我很高兴来到这里参加这次面试。\n\n\n\nIn the past four years, I have not only worked hard to learn professional knowledge, but also participated in a variety of practical activities.\n四年来，我不仅努力学习专业知识，还参加了丰富多彩的实践活动。\n\nWith great concentration on learning, I’ve been top-ranked in my class during the four years.\n通过潜心学习，这四年我在班上名列前茅。\n\nOne of the experiences I am proud of is that I successfully became a member of the Communist Party at college.\n我引以为豪的经历是，我在大学成功成为了一名共产党员。\n\nI am creative and hard-working,so during my undergraduate period,I participated in the Robot Contest in the Five Provinces of North China and won the National First Prize.\n我很有创造力也很勤奋，所以在我本科期间，我参加了华北五省机器人大赛，并获得了全国一等奖。\n\nThe experience of being the Study Committee and League Secretary of my class and a Vice Minister of External Relations of the Student Union helps me know the importance of cooperation and communication.\n作为班内的学习委员、团委书记，以及学生会外联部副部长，让我明白了合作与沟通的重要性。\n\n\n\nIf I have an opportunity to study at your college, I will spare no effort to do research on computer science and Technology,develop practical and cooperative skills.\n如果我有机会在贵校学习，我会不遗余力地从事计算机科学与技术方面的研究，培养实践和合作能力。\n\nIf I have the opportunity, I would like to do a Ph.D. to further improve myself.\n如果有这个机会，我想读博进一步提高自己。\n\n\nI appreciate your attention. That's all,thank you.\n感谢聆听。就是这样，谢谢。\n\n\n---------------------------------------\n- 中文自述\n上午好，亲爱的老师们。很高兴可以参加这次面试。\n\n我本专业修的是自动化，同属工科，和咱们计算机还是有很多交集的，通过对交叉科目的学习，我发现我还是更喜欢计算机学科方面的知识。在本次研究生考试当中，我取得了相对而言还不错的成绩。\n\n大学的四年来，我不仅努力学习专业知识，还参加了丰富多彩的实践活动。\n\n通过潜心学习，这四年我在班上一直都是名列前茅。\n\n值得一提的是我在大学期间成功成为了一名共产党员。\n\n我很有创造力也很勤奋，所以在我本科期间，我参加了华北五省机器人大赛，并获得了全国一等奖。\n\n我曾任班内的学习委员、团委书记，纪律委员等职务，在校也曾任学生会外联部副部长，这些使我更加充分的明白了合作与沟通的重要性。我还曾获三好学生，优秀学生干部，优秀班干部等称号。\n\n如果我有机会在咱们哈工程学习，我会不遗余力地从事咱们计科方面的研究，培养实践和合作能力。\n\n如果真的有这个机会的话，我还想读博进一步提高自己。因为我也想成为一名研究生导师，向后来的学生去传授相关的知识。\n\n好的，谢谢各位老师，我的自述完毕！","slug":"哈工程复试自我介绍","published":1,"updated":"2024-04-25T17:26:47.123Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvjbaqjy004v0vn1altnfy0u","content":"<ul>\n<li>复试自我介绍<span id=\"more\"></span><br>Good morning&#x2F;afternoon, dear professors.<br>早上好&#x2F;下午好，亲爱的教授们。<br>I am very glad to be here for this interview.<br>我很高兴来到这里参加这次面试。</li>\n</ul>\n<p>In the past four years, I have not only worked hard to learn professional knowledge, but also participated in a variety of practical activities.<br>四年来，我不仅努力学习专业知识，还参加了丰富多彩的实践活动。</p>\n<p>With great concentration on learning, I’ve been top-ranked in my class during the four years.<br>通过潜心学习，这四年我在班上名列前茅。</p>\n<p>One of the experiences I am proud of is that I successfully became a member of the Communist Party at college.<br>我引以为豪的经历是，我在大学成功成为了一名共产党员。</p>\n<p>I am creative and hard-working,so during my undergraduate period,I participated in the Robot Contest in the Five Provinces of North China and won the National First Prize.<br>我很有创造力也很勤奋，所以在我本科期间，我参加了华北五省机器人大赛，并获得了全国一等奖。</p>\n<p>The experience of being the Study Committee and League Secretary of my class and a Vice Minister of External Relations of the Student Union helps me know the importance of cooperation and communication.<br>作为班内的学习委员、团委书记，以及学生会外联部副部长，让我明白了合作与沟通的重要性。</p>\n<p>If I have an opportunity to study at your college, I will spare no effort to do research on computer science and Technology,develop practical and cooperative skills.<br>如果我有机会在贵校学习，我会不遗余力地从事计算机科学与技术方面的研究，培养实践和合作能力。</p>\n<p>If I have the opportunity, I would like to do a Ph.D. to further improve myself.<br>如果有这个机会，我想读博进一步提高自己。</p>\n<p>I appreciate your attention. That’s all,thank you.<br>感谢聆听。就是这样，谢谢。</p>\n<hr>\n<ul>\n<li>中文自述<br>上午好，亲爱的老师们。很高兴可以参加这次面试。</li>\n</ul>\n<p>我本专业修的是自动化，同属工科，和咱们计算机还是有很多交集的，通过对交叉科目的学习，我发现我还是更喜欢计算机学科方面的知识。在本次研究生考试当中，我取得了相对而言还不错的成绩。</p>\n<p>大学的四年来，我不仅努力学习专业知识，还参加了丰富多彩的实践活动。</p>\n<p>通过潜心学习，这四年我在班上一直都是名列前茅。</p>\n<p>值得一提的是我在大学期间成功成为了一名共产党员。</p>\n<p>我很有创造力也很勤奋，所以在我本科期间，我参加了华北五省机器人大赛，并获得了全国一等奖。</p>\n<p>我曾任班内的学习委员、团委书记，纪律委员等职务，在校也曾任学生会外联部副部长，这些使我更加充分的明白了合作与沟通的重要性。我还曾获三好学生，优秀学生干部，优秀班干部等称号。</p>\n<p>如果我有机会在咱们哈工程学习，我会不遗余力地从事咱们计科方面的研究，培养实践和合作能力。</p>\n<p>如果真的有这个机会的话，我还想读博进一步提高自己。因为我也想成为一名研究生导师，向后来的学生去传授相关的知识。</p>\n<p>好的，谢谢各位老师，我的自述完毕！</p>\n","site":{"data":{}},"excerpt":"<ul>\n<li>复试自我介绍</li></ul>","more":"<br>Good morning&#x2F;afternoon, dear professors.<br>早上好&#x2F;下午好，亲爱的教授们。<br>I am very glad to be here for this interview.<br>我很高兴来到这里参加这次面试。\n\n<p>In the past four years, I have not only worked hard to learn professional knowledge, but also participated in a variety of practical activities.<br>四年来，我不仅努力学习专业知识，还参加了丰富多彩的实践活动。</p>\n<p>With great concentration on learning, I’ve been top-ranked in my class during the four years.<br>通过潜心学习，这四年我在班上名列前茅。</p>\n<p>One of the experiences I am proud of is that I successfully became a member of the Communist Party at college.<br>我引以为豪的经历是，我在大学成功成为了一名共产党员。</p>\n<p>I am creative and hard-working,so during my undergraduate period,I participated in the Robot Contest in the Five Provinces of North China and won the National First Prize.<br>我很有创造力也很勤奋，所以在我本科期间，我参加了华北五省机器人大赛，并获得了全国一等奖。</p>\n<p>The experience of being the Study Committee and League Secretary of my class and a Vice Minister of External Relations of the Student Union helps me know the importance of cooperation and communication.<br>作为班内的学习委员、团委书记，以及学生会外联部副部长，让我明白了合作与沟通的重要性。</p>\n<p>If I have an opportunity to study at your college, I will spare no effort to do research on computer science and Technology,develop practical and cooperative skills.<br>如果我有机会在贵校学习，我会不遗余力地从事计算机科学与技术方面的研究，培养实践和合作能力。</p>\n<p>If I have the opportunity, I would like to do a Ph.D. to further improve myself.<br>如果有这个机会，我想读博进一步提高自己。</p>\n<p>I appreciate your attention. That’s all,thank you.<br>感谢聆听。就是这样，谢谢。</p>\n<hr>\n<ul>\n<li>中文自述<br>上午好，亲爱的老师们。很高兴可以参加这次面试。</li>\n</ul>\n<p>我本专业修的是自动化，同属工科，和咱们计算机还是有很多交集的，通过对交叉科目的学习，我发现我还是更喜欢计算机学科方面的知识。在本次研究生考试当中，我取得了相对而言还不错的成绩。</p>\n<p>大学的四年来，我不仅努力学习专业知识，还参加了丰富多彩的实践活动。</p>\n<p>通过潜心学习，这四年我在班上一直都是名列前茅。</p>\n<p>值得一提的是我在大学期间成功成为了一名共产党员。</p>\n<p>我很有创造力也很勤奋，所以在我本科期间，我参加了华北五省机器人大赛，并获得了全国一等奖。</p>\n<p>我曾任班内的学习委员、团委书记，纪律委员等职务，在校也曾任学生会外联部副部长，这些使我更加充分的明白了合作与沟通的重要性。我还曾获三好学生，优秀学生干部，优秀班干部等称号。</p>\n<p>如果我有机会在咱们哈工程学习，我会不遗余力地从事咱们计科方面的研究，培养实践和合作能力。</p>\n<p>如果真的有这个机会的话，我还想读博进一步提高自己。因为我也想成为一名研究生导师，向后来的学生去传授相关的知识。</p>\n<p>好的，谢谢各位老师，我的自述完毕！</p>"},{"title":"域名解析以及怎么给hexo绑定域名","date":"2021-05-30T19:11:41.000Z","declare":true,"_content":"> temp email\n### 1 首先进入[freenom官网](https://www.freenom.com/zh/index.html)\n- 全程以美国IP进行，点击**Partners**申请账号。（需要美国身份信息）\n- 申请一个域名<!--more-->\n### 2 进入[Cloudflare官网](https://dash.cloudflare.com/login)\n其实freenom自带的已经有域名解析功能了，但这个是专业的，而且还能套CDN防止被墙\n### 3 解析\n- 添加域名到cloudflare\n- 需要填写域名服务器，耐心等待检查\n- 添加A记录可以直接解析到IP上\n- 添加CNAME可以指向另一个网址\n- 直接输入'@'就是不加前缀\n### 4 绑定到hexo\n1. 找到当前项目，点击Settings->Pages\n在Custom domain中输入自己的域名\n2. 在cloudflare->DNS中添加CNAME记录（不要勾选小云朵）\n3. 在本地博客文件夹的source中新建一个CNAME文件\n这个文件不能有任何格式，txt都不行。内容填写刚才的域名即可。\n### 5 域名购买推荐\n[NameSilo](https://www.namesilo.com/?rid=d7fe456te)，[万网](https://wanwang.aliyun.com/)\n如果要续费，注意好次年的价格！\n\n### References\n[Nameservers教程](https://caq98i.top/article/?page=100)","source":"_posts/域名解析以及怎么给hexo绑定域名.md","raw":"---\ntitle: 域名解析以及怎么给hexo绑定域名\ndate: 2021-05-30 19:11:41\ntags:\n    - 域名\n    - hexo\ndeclare: true\n---\n> temp email\n### 1 首先进入[freenom官网](https://www.freenom.com/zh/index.html)\n- 全程以美国IP进行，点击**Partners**申请账号。（需要美国身份信息）\n- 申请一个域名<!--more-->\n### 2 进入[Cloudflare官网](https://dash.cloudflare.com/login)\n其实freenom自带的已经有域名解析功能了，但这个是专业的，而且还能套CDN防止被墙\n### 3 解析\n- 添加域名到cloudflare\n- 需要填写域名服务器，耐心等待检查\n- 添加A记录可以直接解析到IP上\n- 添加CNAME可以指向另一个网址\n- 直接输入'@'就是不加前缀\n### 4 绑定到hexo\n1. 找到当前项目，点击Settings->Pages\n在Custom domain中输入自己的域名\n2. 在cloudflare->DNS中添加CNAME记录（不要勾选小云朵）\n3. 在本地博客文件夹的source中新建一个CNAME文件\n这个文件不能有任何格式，txt都不行。内容填写刚才的域名即可。\n### 5 域名购买推荐\n[NameSilo](https://www.namesilo.com/?rid=d7fe456te)，[万网](https://wanwang.aliyun.com/)\n如果要续费，注意好次年的价格！\n\n### References\n[Nameservers教程](https://caq98i.top/article/?page=100)","slug":"域名解析以及怎么给hexo绑定域名","published":1,"updated":"2024-04-25T17:26:50.653Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvjbaqjz004w0vn19er92nh6","content":"<blockquote>\n<p>temp email</p>\n</blockquote>\n<h3 id=\"1-首先进入freenom官网\"><a href=\"#1-首先进入freenom官网\" class=\"headerlink\" title=\"1 首先进入freenom官网\"></a>1 首先进入<a href=\"https://www.freenom.com/zh/index.html\">freenom官网</a></h3><ul>\n<li>全程以美国IP进行，点击<strong>Partners</strong>申请账号。（需要美国身份信息）</li>\n<li>申请一个域名<span id=\"more\"></span></li>\n</ul>\n<h3 id=\"2-进入Cloudflare官网\"><a href=\"#2-进入Cloudflare官网\" class=\"headerlink\" title=\"2 进入Cloudflare官网\"></a>2 进入<a href=\"https://dash.cloudflare.com/login\">Cloudflare官网</a></h3><p>其实freenom自带的已经有域名解析功能了，但这个是专业的，而且还能套CDN防止被墙</p>\n<h3 id=\"3-解析\"><a href=\"#3-解析\" class=\"headerlink\" title=\"3 解析\"></a>3 解析</h3><ul>\n<li>添加域名到cloudflare</li>\n<li>需要填写域名服务器，耐心等待检查</li>\n<li>添加A记录可以直接解析到IP上</li>\n<li>添加CNAME可以指向另一个网址</li>\n<li>直接输入‘@’就是不加前缀</li>\n</ul>\n<h3 id=\"4-绑定到hexo\"><a href=\"#4-绑定到hexo\" class=\"headerlink\" title=\"4 绑定到hexo\"></a>4 绑定到hexo</h3><ol>\n<li>找到当前项目，点击Settings-&gt;Pages<br>在Custom domain中输入自己的域名</li>\n<li>在cloudflare-&gt;DNS中添加CNAME记录（不要勾选小云朵）</li>\n<li>在本地博客文件夹的source中新建一个CNAME文件<br>这个文件不能有任何格式，txt都不行。内容填写刚才的域名即可。</li>\n</ol>\n<h3 id=\"5-域名购买推荐\"><a href=\"#5-域名购买推荐\" class=\"headerlink\" title=\"5 域名购买推荐\"></a>5 域名购买推荐</h3><p><a href=\"https://www.namesilo.com/?rid=d7fe456te\">NameSilo</a>，<a href=\"https://wanwang.aliyun.com/\">万网</a><br>如果要续费，注意好次年的价格！</p>\n<h3 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h3><p><a href=\"https://caq98i.top/article/?page=100\">Nameservers教程</a></p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>temp email</p>\n</blockquote>\n<h3 id=\"1-首先进入freenom官网\"><a href=\"#1-首先进入freenom官网\" class=\"headerlink\" title=\"1 首先进入freenom官网\"></a>1 首先进入<a href=\"https://www.freenom.com/zh/index.html\">freenom官网</a></h3><ul>\n<li>全程以美国IP进行，点击<strong>Partners</strong>申请账号。（需要美国身份信息）</li>\n<li>申请一个域名</li></ul>","more":"\n\n<h3 id=\"2-进入Cloudflare官网\"><a href=\"#2-进入Cloudflare官网\" class=\"headerlink\" title=\"2 进入Cloudflare官网\"></a>2 进入<a href=\"https://dash.cloudflare.com/login\">Cloudflare官网</a></h3><p>其实freenom自带的已经有域名解析功能了，但这个是专业的，而且还能套CDN防止被墙</p>\n<h3 id=\"3-解析\"><a href=\"#3-解析\" class=\"headerlink\" title=\"3 解析\"></a>3 解析</h3><ul>\n<li>添加域名到cloudflare</li>\n<li>需要填写域名服务器，耐心等待检查</li>\n<li>添加A记录可以直接解析到IP上</li>\n<li>添加CNAME可以指向另一个网址</li>\n<li>直接输入‘@’就是不加前缀</li>\n</ul>\n<h3 id=\"4-绑定到hexo\"><a href=\"#4-绑定到hexo\" class=\"headerlink\" title=\"4 绑定到hexo\"></a>4 绑定到hexo</h3><ol>\n<li>找到当前项目，点击Settings-&gt;Pages<br>在Custom domain中输入自己的域名</li>\n<li>在cloudflare-&gt;DNS中添加CNAME记录（不要勾选小云朵）</li>\n<li>在本地博客文件夹的source中新建一个CNAME文件<br>这个文件不能有任何格式，txt都不行。内容填写刚才的域名即可。</li>\n</ol>\n<h3 id=\"5-域名购买推荐\"><a href=\"#5-域名购买推荐\" class=\"headerlink\" title=\"5 域名购买推荐\"></a>5 域名购买推荐</h3><p><a href=\"https://www.namesilo.com/?rid=d7fe456te\">NameSilo</a>，<a href=\"https://wanwang.aliyun.com/\">万网</a><br>如果要续费，注意好次年的价格！</p>\n<h3 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h3><p><a href=\"https://caq98i.top/article/?page=100\">Nameservers教程</a></p>"},{"title":"如何禁用通过frp进行sftp传输文件","date":"2023-10-31T21:10:46.000Z","declare":true,"_content":"[如何禁用通过frp进行sftp传输文件？](https://github.com/fatedier/frp/issues/3736)<!--more-->\n\n有时候，我们有多种连接到服务器的方式，比如通过局域网 ip，通过frp\n\n但是有时候我们希望禁用 frp 的 sftp 服务，但却不要影响别的方式的 sftp 服务。\n\n### 方法一\n\n我们进行 “ssh和sftp服务分离”，frp 本质上是在转发某个指定端口的数据，如果我们分离了 ssh 和 sftp 的端口，那么 frp 自然也就无法对 sftp 进行转发了。\n\n> 需要注意的是，ssh 和 sftp 不再共用端口之后，我们需要在客户端连接的时候指定端口，并为每一个服务端设备做端口转发，否则会连接失败。\n\n### 方法二\n\n本质上，frp 并没有建立 ssh 服务，而是通过本地的 ssh 服务进行转发，这一点可以通过 `echo $SSH_CONNECTION` 来查看。**显然这里的客户端和服务端 ip 都是本地的 ip，而不是 frp 的 ip。**\n\n这就太好了，我们只需要在 `/etc/ssh/sshd_config` 进行一些 ip 规则匹配就好了。\n\n```bash\n# /etc/ssh/sshd_config\nMatch Address 125.223.*,10.0.0.0/24   # 局域网或校内网地址\n    X11Forwarding yes\n\nMatch Address 127.0.0.1,150.158.17.239  # frp连入地址\n    X11Forwarding no\n    AllowTcpForwarding no\n    ForceCommand /bin/sh\n```\n\n> 需要注意的是，这里学校的规则起到了决定性作用。学校禁用了校园网环境向外进行 ssh 连接，也就是说，能通过 frp 连接到服务器的，必然是在校外的 ip，必然是显示 127.0.0.1。对于这样的服务，我们拒绝其 sftp 服务。而校内的 ip 一定是 125.223 打头，我们允许其 sftp 服务。对于局域网的 ip，我们也允许其 sftp 服务。\n\n\n事实上，只需要添加如下内容就可以了：\n```bash\n# /etc/ssh/sshd_config\nMatch Address 127.0.0.1  # frp连入地址\n    X11Forwarding no\n    AllowTcpForwarding no\n    ForceCommand /bin/sh\n```\n\n> 发现出了一些问题，vscode 也无法通过 frp 进行连接了，还是要用方法一。","source":"_posts/如何禁用通过frp进行sftp传输文件.md","raw":"---\ntitle: 如何禁用通过frp进行sftp传输文件\ndate: 2023-10-31 21:10:46\ntags:\n    - Linux\ndeclare: true\n---\n[如何禁用通过frp进行sftp传输文件？](https://github.com/fatedier/frp/issues/3736)<!--more-->\n\n有时候，我们有多种连接到服务器的方式，比如通过局域网 ip，通过frp\n\n但是有时候我们希望禁用 frp 的 sftp 服务，但却不要影响别的方式的 sftp 服务。\n\n### 方法一\n\n我们进行 “ssh和sftp服务分离”，frp 本质上是在转发某个指定端口的数据，如果我们分离了 ssh 和 sftp 的端口，那么 frp 自然也就无法对 sftp 进行转发了。\n\n> 需要注意的是，ssh 和 sftp 不再共用端口之后，我们需要在客户端连接的时候指定端口，并为每一个服务端设备做端口转发，否则会连接失败。\n\n### 方法二\n\n本质上，frp 并没有建立 ssh 服务，而是通过本地的 ssh 服务进行转发，这一点可以通过 `echo $SSH_CONNECTION` 来查看。**显然这里的客户端和服务端 ip 都是本地的 ip，而不是 frp 的 ip。**\n\n这就太好了，我们只需要在 `/etc/ssh/sshd_config` 进行一些 ip 规则匹配就好了。\n\n```bash\n# /etc/ssh/sshd_config\nMatch Address 125.223.*,10.0.0.0/24   # 局域网或校内网地址\n    X11Forwarding yes\n\nMatch Address 127.0.0.1,150.158.17.239  # frp连入地址\n    X11Forwarding no\n    AllowTcpForwarding no\n    ForceCommand /bin/sh\n```\n\n> 需要注意的是，这里学校的规则起到了决定性作用。学校禁用了校园网环境向外进行 ssh 连接，也就是说，能通过 frp 连接到服务器的，必然是在校外的 ip，必然是显示 127.0.0.1。对于这样的服务，我们拒绝其 sftp 服务。而校内的 ip 一定是 125.223 打头，我们允许其 sftp 服务。对于局域网的 ip，我们也允许其 sftp 服务。\n\n\n事实上，只需要添加如下内容就可以了：\n```bash\n# /etc/ssh/sshd_config\nMatch Address 127.0.0.1  # frp连入地址\n    X11Forwarding no\n    AllowTcpForwarding no\n    ForceCommand /bin/sh\n```\n\n> 发现出了一些问题，vscode 也无法通过 frp 进行连接了，还是要用方法一。","slug":"如何禁用通过frp进行sftp传输文件","published":1,"updated":"2024-04-25T17:26:47.293Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvjbaqk0004x0vn1hh6338zd","content":"<p><a href=\"https://github.com/fatedier/frp/issues/3736\">如何禁用通过frp进行sftp传输文件？</a><span id=\"more\"></span></p>\n<p>有时候，我们有多种连接到服务器的方式，比如通过局域网 ip，通过frp</p>\n<p>但是有时候我们希望禁用 frp 的 sftp 服务，但却不要影响别的方式的 sftp 服务。</p>\n<h3 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h3><p>我们进行 “ssh和sftp服务分离”，frp 本质上是在转发某个指定端口的数据，如果我们分离了 ssh 和 sftp 的端口，那么 frp 自然也就无法对 sftp 进行转发了。</p>\n<blockquote>\n<p>需要注意的是，ssh 和 sftp 不再共用端口之后，我们需要在客户端连接的时候指定端口，并为每一个服务端设备做端口转发，否则会连接失败。</p>\n</blockquote>\n<h3 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a>方法二</h3><p>本质上，frp 并没有建立 ssh 服务，而是通过本地的 ssh 服务进行转发，这一点可以通过 <code>echo $SSH_CONNECTION</code> 来查看。<strong>显然这里的客户端和服务端 ip 都是本地的 ip，而不是 frp 的 ip。</strong></p>\n<p>这就太好了，我们只需要在 <code>/etc/ssh/sshd_config</code> 进行一些 ip 规则匹配就好了。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># /etc/ssh/sshd_config</span></span><br><span class=\"line\">Match Address 125.223.*,10.0.0.0/24   <span class=\"comment\"># 局域网或校内网地址</span></span><br><span class=\"line\">    X11Forwarding <span class=\"built_in\">yes</span></span><br><span class=\"line\"></span><br><span class=\"line\">Match Address 127.0.0.1,150.158.17.239  <span class=\"comment\"># frp连入地址</span></span><br><span class=\"line\">    X11Forwarding no</span><br><span class=\"line\">    AllowTcpForwarding no</span><br><span class=\"line\">    ForceCommand /bin/sh</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>需要注意的是，这里学校的规则起到了决定性作用。学校禁用了校园网环境向外进行 ssh 连接，也就是说，能通过 frp 连接到服务器的，必然是在校外的 ip，必然是显示 127.0.0.1。对于这样的服务，我们拒绝其 sftp 服务。而校内的 ip 一定是 125.223 打头，我们允许其 sftp 服务。对于局域网的 ip，我们也允许其 sftp 服务。</p>\n</blockquote>\n<p>事实上，只需要添加如下内容就可以了：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># /etc/ssh/sshd_config</span></span><br><span class=\"line\">Match Address 127.0.0.1  <span class=\"comment\"># frp连入地址</span></span><br><span class=\"line\">    X11Forwarding no</span><br><span class=\"line\">    AllowTcpForwarding no</span><br><span class=\"line\">    ForceCommand /bin/sh</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>发现出了一些问题，vscode 也无法通过 frp 进行连接了，还是要用方法一。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p><a href=\"https://github.com/fatedier/frp/issues/3736\">如何禁用通过frp进行sftp传输文件？</a></p>","more":"<p></p>\n<p>有时候，我们有多种连接到服务器的方式，比如通过局域网 ip，通过frp</p>\n<p>但是有时候我们希望禁用 frp 的 sftp 服务，但却不要影响别的方式的 sftp 服务。</p>\n<h3 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h3><p>我们进行 “ssh和sftp服务分离”，frp 本质上是在转发某个指定端口的数据，如果我们分离了 ssh 和 sftp 的端口，那么 frp 自然也就无法对 sftp 进行转发了。</p>\n<blockquote>\n<p>需要注意的是，ssh 和 sftp 不再共用端口之后，我们需要在客户端连接的时候指定端口，并为每一个服务端设备做端口转发，否则会连接失败。</p>\n</blockquote>\n<h3 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a>方法二</h3><p>本质上，frp 并没有建立 ssh 服务，而是通过本地的 ssh 服务进行转发，这一点可以通过 <code>echo $SSH_CONNECTION</code> 来查看。<strong>显然这里的客户端和服务端 ip 都是本地的 ip，而不是 frp 的 ip。</strong></p>\n<p>这就太好了，我们只需要在 <code>/etc/ssh/sshd_config</code> 进行一些 ip 规则匹配就好了。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># /etc/ssh/sshd_config</span></span><br><span class=\"line\">Match Address 125.223.*,10.0.0.0/24   <span class=\"comment\"># 局域网或校内网地址</span></span><br><span class=\"line\">    X11Forwarding <span class=\"built_in\">yes</span></span><br><span class=\"line\"></span><br><span class=\"line\">Match Address 127.0.0.1,150.158.17.239  <span class=\"comment\"># frp连入地址</span></span><br><span class=\"line\">    X11Forwarding no</span><br><span class=\"line\">    AllowTcpForwarding no</span><br><span class=\"line\">    ForceCommand /bin/sh</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>需要注意的是，这里学校的规则起到了决定性作用。学校禁用了校园网环境向外进行 ssh 连接，也就是说，能通过 frp 连接到服务器的，必然是在校外的 ip，必然是显示 127.0.0.1。对于这样的服务，我们拒绝其 sftp 服务。而校内的 ip 一定是 125.223 打头，我们允许其 sftp 服务。对于局域网的 ip，我们也允许其 sftp 服务。</p>\n</blockquote>\n<p>事实上，只需要添加如下内容就可以了：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># /etc/ssh/sshd_config</span></span><br><span class=\"line\">Match Address 127.0.0.1  <span class=\"comment\"># frp连入地址</span></span><br><span class=\"line\">    X11Forwarding no</span><br><span class=\"line\">    AllowTcpForwarding no</span><br><span class=\"line\">    ForceCommand /bin/sh</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>发现出了一些问题，vscode 也无法通过 frp 进行连接了，还是要用方法一。</p>\n</blockquote>"},{"title":"如此惊艳、如此优美","date":"2023-06-24T19:40:09.000Z","declare":true,"_content":"《魔幻手机1》黄眉大王初到人间，未见现代科学。机缘巧合遇到天霸三人组，却被虐待，当年的大王也没了昨日的威风。遇到了对自己好的游所为，却被当做精神病。站在车来车往的北京城，车水马龙，不知何去何从。。。\n\n时来时往似云烟\n朝迁市变须臾间\n尔来一千四百载\n不见昨日小西天<!--more-->\n\n---------------------------------------\n我拜唐僧入佛门\n不爱娇娥悟红尘\n春风何能空拂柳\n南海幽蓝净瓶中。\n\n---------------------------------------\n《骆驼祥子》里有一段话： “这世间的真话本就不多，一个女子的脸红，胜过一大段对白。” 可后来有了胭脂， 便分不清是真情还是假意\n\n\n-----------------------------------------------\n\n> 本文一切内容皆摘自网络。\n\n","source":"_posts/如此惊艳、如此优美.md","raw":"---\ntitle: 如此惊艳、如此优美\ndate: 2023-06-24 19:40:09\ntags:\n    - 其它\ndeclare: true\n---\n《魔幻手机1》黄眉大王初到人间，未见现代科学。机缘巧合遇到天霸三人组，却被虐待，当年的大王也没了昨日的威风。遇到了对自己好的游所为，却被当做精神病。站在车来车往的北京城，车水马龙，不知何去何从。。。\n\n时来时往似云烟\n朝迁市变须臾间\n尔来一千四百载\n不见昨日小西天<!--more-->\n\n---------------------------------------\n我拜唐僧入佛门\n不爱娇娥悟红尘\n春风何能空拂柳\n南海幽蓝净瓶中。\n\n---------------------------------------\n《骆驼祥子》里有一段话： “这世间的真话本就不多，一个女子的脸红，胜过一大段对白。” 可后来有了胭脂， 便分不清是真情还是假意\n\n\n-----------------------------------------------\n\n> 本文一切内容皆摘自网络。\n\n","slug":"如此惊艳、如此优美","published":1,"updated":"2024-04-25T17:26:47.833Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvjbaqk200500vn121mj2y62","content":"<p>《魔幻手机1》黄眉大王初到人间，未见现代科学。机缘巧合遇到天霸三人组，却被虐待，当年的大王也没了昨日的威风。遇到了对自己好的游所为，却被当做精神病。站在车来车往的北京城，车水马龙，不知何去何从。。。</p>\n<p>时来时往似云烟<br>朝迁市变须臾间<br>尔来一千四百载<br>不见昨日小西天<span id=\"more\"></span></p>\n<hr>\n<p>我拜唐僧入佛门<br>不爱娇娥悟红尘<br>春风何能空拂柳<br>南海幽蓝净瓶中。</p>\n<hr>\n<p>《骆驼祥子》里有一段话： “这世间的真话本就不多，一个女子的脸红，胜过一大段对白。” 可后来有了胭脂， 便分不清是真情还是假意</p>\n<hr>\n<blockquote>\n<p>本文一切内容皆摘自网络。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>《魔幻手机1》黄眉大王初到人间，未见现代科学。机缘巧合遇到天霸三人组，却被虐待，当年的大王也没了昨日的威风。遇到了对自己好的游所为，却被当做精神病。站在车来车往的北京城，车水马龙，不知何去何从。。。</p>\n<p>时来时往似云烟<br>朝迁市变须臾间<br>尔来一千四百载<br>不见昨日小西天</p>","more":"<p></p>\n<hr>\n<p>我拜唐僧入佛门<br>不爱娇娥悟红尘<br>春风何能空拂柳<br>南海幽蓝净瓶中。</p>\n<hr>\n<p>《骆驼祥子》里有一段话： “这世间的真话本就不多，一个女子的脸红，胜过一大段对白。” 可后来有了胭脂， 便分不清是真情还是假意</p>\n<hr>\n<blockquote>\n<p>本文一切内容皆摘自网络。</p>\n</blockquote>"},{"title":"安卓手机设置路由转发，充当旁路由","date":"2023-06-24T14:26:19.000Z","declare":true,"_content":"- root手机\n- 下载[Termux](https://github.com/termux/termux-app/releases)<!--more-->\n- 先将手机设置为静态ip\n- 进入root用户：`su`\n- 一键脚本\n```bash\ncd /data/local\nmkdir proxy\ncd proxy\nvim proxy.sh\n\n# 添加如下内容\n#!/system/bin/sh\n\ntun='tun0' #虚拟接口名称\ndev='wlan0' #物理接口名称，eth0、wlan0\ninterval=3 #检测网络状态间隔(秒)\npref=18000 #路由策略优先级\n\n# 开启IP转发功能\nsysctl -w net.ipv4.ip_forward=1\n\n# 清除filter表转发链规则\niptables -F FORWARD\n\n# 添加NAT转换，部分第三方VPN需要此设置否则无法上网，若要关闭请注释掉\niptables -t nat -A POSTROUTING -o $tun -j MASQUERADE\n\n# 添加路由策略\nip rule add from all table main pref $pref\nip rule add from all iif $dev table $tun pref $(expr $pref - 1)\n\ncontain=\"from all iif $dev lookup $tun\"\n\nwhile true ;do\n    if [[ $(ip rule) != *$contain* ]]; then\n            if [[ $(ip ad|grep 'state UP') != *$dev* ]]; then\n                echo -e \"[$(date \"+%H:%M:%S\")]dev has been lost.\"\n            else\n                ip rule add from all iif $dev table $tun pref $(expr $pref - 1)\n                echo -e \"[$(date \"+%H:%M:%S\")]network changed, reset the routing policy.\"\n            fi\n    fi\n    sleep $interval\ndone\n\n```\n- 赋予可执行权限：`chmod +x proxy.sh`\n- 执行：`nohup ./proxy.sh &`\n\n--------------------------\n[闲置安卓手机当旁路网关，无需购买软路由即可让家里所有设备实现科学上网](https://bulianglin.com/archives/android-gateway.html)\n[【全网首发】闲置安卓手机充当软路由，突破第三方VPN客户端设备限制，接管局域网所有设备上网数据实现全家科学上网，旁路网关、旁路由、透明代理、透明网关、网关代理、网关模式、代替openwrt软路由](https://www.youtube.com/watch?v=r6nXCgYkXTQ&t=10s&ab_channel=%E4%B8%8D%E8%89%AF%E6%9E%97)\n[termux指南](https://zhuanlan.zhihu.com/p/612865403)","source":"_posts/安卓手机设置路由转发，充当旁路由.md","raw":"---\ntitle: 安卓手机设置路由转发，充当旁路由\ndate: 2023-06-24 14:26:19\ntags:\n    - 路由器\ndeclare: true\n---\n- root手机\n- 下载[Termux](https://github.com/termux/termux-app/releases)<!--more-->\n- 先将手机设置为静态ip\n- 进入root用户：`su`\n- 一键脚本\n```bash\ncd /data/local\nmkdir proxy\ncd proxy\nvim proxy.sh\n\n# 添加如下内容\n#!/system/bin/sh\n\ntun='tun0' #虚拟接口名称\ndev='wlan0' #物理接口名称，eth0、wlan0\ninterval=3 #检测网络状态间隔(秒)\npref=18000 #路由策略优先级\n\n# 开启IP转发功能\nsysctl -w net.ipv4.ip_forward=1\n\n# 清除filter表转发链规则\niptables -F FORWARD\n\n# 添加NAT转换，部分第三方VPN需要此设置否则无法上网，若要关闭请注释掉\niptables -t nat -A POSTROUTING -o $tun -j MASQUERADE\n\n# 添加路由策略\nip rule add from all table main pref $pref\nip rule add from all iif $dev table $tun pref $(expr $pref - 1)\n\ncontain=\"from all iif $dev lookup $tun\"\n\nwhile true ;do\n    if [[ $(ip rule) != *$contain* ]]; then\n            if [[ $(ip ad|grep 'state UP') != *$dev* ]]; then\n                echo -e \"[$(date \"+%H:%M:%S\")]dev has been lost.\"\n            else\n                ip rule add from all iif $dev table $tun pref $(expr $pref - 1)\n                echo -e \"[$(date \"+%H:%M:%S\")]network changed, reset the routing policy.\"\n            fi\n    fi\n    sleep $interval\ndone\n\n```\n- 赋予可执行权限：`chmod +x proxy.sh`\n- 执行：`nohup ./proxy.sh &`\n\n--------------------------\n[闲置安卓手机当旁路网关，无需购买软路由即可让家里所有设备实现科学上网](https://bulianglin.com/archives/android-gateway.html)\n[【全网首发】闲置安卓手机充当软路由，突破第三方VPN客户端设备限制，接管局域网所有设备上网数据实现全家科学上网，旁路网关、旁路由、透明代理、透明网关、网关代理、网关模式、代替openwrt软路由](https://www.youtube.com/watch?v=r6nXCgYkXTQ&t=10s&ab_channel=%E4%B8%8D%E8%89%AF%E6%9E%97)\n[termux指南](https://zhuanlan.zhihu.com/p/612865403)","slug":"安卓手机设置路由转发，充当旁路由","published":1,"updated":"2024-04-25T17:26:48.023Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvjbaqk300520vn1b32n3mb9","content":"<ul>\n<li>root手机</li>\n<li>下载<a href=\"https://github.com/termux/termux-app/releases\">Termux</a><span id=\"more\"></span></li>\n<li>先将手机设置为静态ip</li>\n<li>进入root用户：<code>su</code></li>\n<li>一键脚本<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /data/local</span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> proxy</span><br><span class=\"line\"><span class=\"built_in\">cd</span> proxy</span><br><span class=\"line\">vim proxy.sh</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加如下内容</span></span><br><span class=\"line\"><span class=\"comment\">#!/system/bin/sh</span></span><br><span class=\"line\"></span><br><span class=\"line\">tun=<span class=\"string\">&#x27;tun0&#x27;</span> <span class=\"comment\">#虚拟接口名称</span></span><br><span class=\"line\">dev=<span class=\"string\">&#x27;wlan0&#x27;</span> <span class=\"comment\">#物理接口名称，eth0、wlan0</span></span><br><span class=\"line\">interval=3 <span class=\"comment\">#检测网络状态间隔(秒)</span></span><br><span class=\"line\">pref=18000 <span class=\"comment\">#路由策略优先级</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 开启IP转发功能</span></span><br><span class=\"line\">sysctl -w net.ipv4.ip_forward=1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 清除filter表转发链规则</span></span><br><span class=\"line\">iptables -F FORWARD</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加NAT转换，部分第三方VPN需要此设置否则无法上网，若要关闭请注释掉</span></span><br><span class=\"line\">iptables -t nat -A POSTROUTING -o <span class=\"variable\">$tun</span> -j MASQUERADE</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加路由策略</span></span><br><span class=\"line\">ip rule add from all table main pref <span class=\"variable\">$pref</span></span><br><span class=\"line\">ip rule add from all iif <span class=\"variable\">$dev</span> table <span class=\"variable\">$tun</span> pref $(<span class=\"built_in\">expr</span> <span class=\"variable\">$pref</span> - 1)</span><br><span class=\"line\"></span><br><span class=\"line\">contain=<span class=\"string\">&quot;from all iif <span class=\"variable\">$dev</span> lookup <span class=\"variable\">$tun</span>&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">true</span> ;<span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> [[ $(ip rule) != *<span class=\"variable\">$contain</span>* ]]; <span class=\"keyword\">then</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> [[ $(ip ad|grep <span class=\"string\">&#x27;state UP&#x27;</span>) != *<span class=\"variable\">$dev</span>* ]]; <span class=\"keyword\">then</span></span><br><span class=\"line\">                <span class=\"built_in\">echo</span> -e <span class=\"string\">&quot;[<span class=\"subst\">$(date <span class=\"string\">&quot;+%H:%M:%S&quot;</span>)</span>]dev has been lost.&quot;</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                ip rule add from all iif <span class=\"variable\">$dev</span> table <span class=\"variable\">$tun</span> pref $(<span class=\"built_in\">expr</span> <span class=\"variable\">$pref</span> - 1)</span><br><span class=\"line\">                <span class=\"built_in\">echo</span> -e <span class=\"string\">&quot;[<span class=\"subst\">$(date <span class=\"string\">&quot;+%H:%M:%S&quot;</span>)</span>]network changed, reset the routing policy.&quot;</span></span><br><span class=\"line\">            <span class=\"keyword\">fi</span></span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\">    <span class=\"built_in\">sleep</span> <span class=\"variable\">$interval</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n<li>赋予可执行权限：<code>chmod +x proxy.sh</code></li>\n<li>执行：<code>nohup ./proxy.sh &amp;</code></li>\n</ul>\n<hr>\n<p><a href=\"https://bulianglin.com/archives/android-gateway.html\">闲置安卓手机当旁路网关，无需购买软路由即可让家里所有设备实现科学上网</a><br><a href=\"https://www.youtube.com/watch?v=r6nXCgYkXTQ&t=10s&ab_channel=%E4%B8%8D%E8%89%AF%E6%9E%97\">【全网首发】闲置安卓手机充当软路由，突破第三方VPN客户端设备限制，接管局域网所有设备上网数据实现全家科学上网，旁路网关、旁路由、透明代理、透明网关、网关代理、网关模式、代替openwrt软路由</a><br><a href=\"https://zhuanlan.zhihu.com/p/612865403\">termux指南</a></p>\n","site":{"data":{}},"excerpt":"<ul>\n<li>root手机</li>\n<li>下载<a href=\"https://github.com/termux/termux-app/releases\">Termux</a></li></ul>","more":"\n<li>先将手机设置为静态ip</li>\n<li>进入root用户：<code>su</code></li>\n<li>一键脚本<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /data/local</span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> proxy</span><br><span class=\"line\"><span class=\"built_in\">cd</span> proxy</span><br><span class=\"line\">vim proxy.sh</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加如下内容</span></span><br><span class=\"line\"><span class=\"comment\">#!/system/bin/sh</span></span><br><span class=\"line\"></span><br><span class=\"line\">tun=<span class=\"string\">&#x27;tun0&#x27;</span> <span class=\"comment\">#虚拟接口名称</span></span><br><span class=\"line\">dev=<span class=\"string\">&#x27;wlan0&#x27;</span> <span class=\"comment\">#物理接口名称，eth0、wlan0</span></span><br><span class=\"line\">interval=3 <span class=\"comment\">#检测网络状态间隔(秒)</span></span><br><span class=\"line\">pref=18000 <span class=\"comment\">#路由策略优先级</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 开启IP转发功能</span></span><br><span class=\"line\">sysctl -w net.ipv4.ip_forward=1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 清除filter表转发链规则</span></span><br><span class=\"line\">iptables -F FORWARD</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加NAT转换，部分第三方VPN需要此设置否则无法上网，若要关闭请注释掉</span></span><br><span class=\"line\">iptables -t nat -A POSTROUTING -o <span class=\"variable\">$tun</span> -j MASQUERADE</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加路由策略</span></span><br><span class=\"line\">ip rule add from all table main pref <span class=\"variable\">$pref</span></span><br><span class=\"line\">ip rule add from all iif <span class=\"variable\">$dev</span> table <span class=\"variable\">$tun</span> pref $(<span class=\"built_in\">expr</span> <span class=\"variable\">$pref</span> - 1)</span><br><span class=\"line\"></span><br><span class=\"line\">contain=<span class=\"string\">&quot;from all iif <span class=\"variable\">$dev</span> lookup <span class=\"variable\">$tun</span>&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">true</span> ;<span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> [[ $(ip rule) != *<span class=\"variable\">$contain</span>* ]]; <span class=\"keyword\">then</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> [[ $(ip ad|grep <span class=\"string\">&#x27;state UP&#x27;</span>) != *<span class=\"variable\">$dev</span>* ]]; <span class=\"keyword\">then</span></span><br><span class=\"line\">                <span class=\"built_in\">echo</span> -e <span class=\"string\">&quot;[<span class=\"subst\">$(date <span class=\"string\">&quot;+%H:%M:%S&quot;</span>)</span>]dev has been lost.&quot;</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                ip rule add from all iif <span class=\"variable\">$dev</span> table <span class=\"variable\">$tun</span> pref $(<span class=\"built_in\">expr</span> <span class=\"variable\">$pref</span> - 1)</span><br><span class=\"line\">                <span class=\"built_in\">echo</span> -e <span class=\"string\">&quot;[<span class=\"subst\">$(date <span class=\"string\">&quot;+%H:%M:%S&quot;</span>)</span>]network changed, reset the routing policy.&quot;</span></span><br><span class=\"line\">            <span class=\"keyword\">fi</span></span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\">    <span class=\"built_in\">sleep</span> <span class=\"variable\">$interval</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n<li>赋予可执行权限：<code>chmod +x proxy.sh</code></li>\n<li>执行：<code>nohup ./proxy.sh &amp;</code></li>\n\n<hr>\n<p><a href=\"https://bulianglin.com/archives/android-gateway.html\">闲置安卓手机当旁路网关，无需购买软路由即可让家里所有设备实现科学上网</a><br><a href=\"https://www.youtube.com/watch?v=r6nXCgYkXTQ&t=10s&ab_channel=%E4%B8%8D%E8%89%AF%E6%9E%97\">【全网首发】闲置安卓手机充当软路由，突破第三方VPN客户端设备限制，接管局域网所有设备上网数据实现全家科学上网，旁路网关、旁路由、透明代理、透明网关、网关代理、网关模式、代替openwrt软路由</a><br><a href=\"https://zhuanlan.zhihu.com/p/612865403\">termux指南</a></p>"},{"title":"对比学习（Contrastive Learning）","date":"2023-07-18T13:28:05.000Z","declare":true,"_content":"1. 对于Max margin Contrastive loss的公式解读<!--more-->\n  - 由于指示函数的作用，当两个样本属于同一分布的时候，最小化二者之间的距离。\n  - 当两个样本不属于同一分布的时候，公式的后半部分起作用。具体而言：\n    - 当两个样本的相似度差别很大的时候，符合我们的要求，不造成损失，所以后半部分取0\n    - 当两个样本的相似度不是那么大的时候，造成一定的损失。\n    - 极端情况下，当两个样本的完全相似的时候，造成的损失最大，为$\\epsilon$。不能再大了，防止单对样本对于最终函数的影响过大\n2. 对于Triplet Loss的公式解读\n\n<img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20230719005701.png\" width=\"50%\" height=\"50%\">\n\n3. 对于N-pair Loss公式解读\n  - 点积可看作余弦相似度\n  - a/b 和 a-b 在a,b＞0的时候是等价的\n4. 思考\n\n<img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20230719010807.png\" width=\"50%\" height=\"50%\">\n\n-------------------------------------------------------\n## Reference\n[The Beginner’s Guide to Contrastive Learning](https://www.v7labs.com/blog/contrastive-learning-guide#:~:text=Contrastive%20Learning%20is%20a%20technique,a%20data%20class%20from%20another)\n\n[Contrastive Representation Learning](https://lilianweng.github.io/posts/2021-05-31-contrastive/)\n","source":"_posts/对比学习（Contrastive-Learning）.md","raw":"---\ntitle: 对比学习（Contrastive Learning）\ndate: 2023-07-18 13:28:05\ntags:\n  - 科研\ndeclare: true\n---\n1. 对于Max margin Contrastive loss的公式解读<!--more-->\n  - 由于指示函数的作用，当两个样本属于同一分布的时候，最小化二者之间的距离。\n  - 当两个样本不属于同一分布的时候，公式的后半部分起作用。具体而言：\n    - 当两个样本的相似度差别很大的时候，符合我们的要求，不造成损失，所以后半部分取0\n    - 当两个样本的相似度不是那么大的时候，造成一定的损失。\n    - 极端情况下，当两个样本的完全相似的时候，造成的损失最大，为$\\epsilon$。不能再大了，防止单对样本对于最终函数的影响过大\n2. 对于Triplet Loss的公式解读\n\n<img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20230719005701.png\" width=\"50%\" height=\"50%\">\n\n3. 对于N-pair Loss公式解读\n  - 点积可看作余弦相似度\n  - a/b 和 a-b 在a,b＞0的时候是等价的\n4. 思考\n\n<img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20230719010807.png\" width=\"50%\" height=\"50%\">\n\n-------------------------------------------------------\n## Reference\n[The Beginner’s Guide to Contrastive Learning](https://www.v7labs.com/blog/contrastive-learning-guide#:~:text=Contrastive%20Learning%20is%20a%20technique,a%20data%20class%20from%20another)\n\n[Contrastive Representation Learning](https://lilianweng.github.io/posts/2021-05-31-contrastive/)\n","slug":"对比学习（Contrastive-Learning）","published":1,"updated":"2024-04-25T17:26:48.073Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvjbaqk400550vn13mfc2rzn","content":"<ol>\n<li>对于Max margin Contrastive loss的公式解读<span id=\"more\"></span></li>\n</ol>\n<ul>\n<li>由于指示函数的作用，当两个样本属于同一分布的时候，最小化二者之间的距离。</li>\n<li>当两个样本不属于同一分布的时候，公式的后半部分起作用。具体而言：<ul>\n<li>当两个样本的相似度差别很大的时候，符合我们的要求，不造成损失，所以后半部分取0</li>\n<li>当两个样本的相似度不是那么大的时候，造成一定的损失。</li>\n<li>极端情况下，当两个样本的完全相似的时候，造成的损失最大，为$\\epsilon$。不能再大了，防止单对样本对于最终函数的影响过大</li>\n</ul>\n</li>\n</ul>\n<ol start=\"2\">\n<li>对于Triplet Loss的公式解读</li>\n</ol>\n<img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20230719005701.png\" width=\"50%\" height=\"50%\">\n\n<ol start=\"3\">\n<li>对于N-pair Loss公式解读</li>\n</ol>\n<ul>\n<li>点积可看作余弦相似度</li>\n<li>a&#x2F;b 和 a-b 在a,b＞0的时候是等价的</li>\n</ul>\n<ol start=\"4\">\n<li>思考</li>\n</ol>\n<img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20230719010807.png\" width=\"50%\" height=\"50%\">\n\n<hr>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><p><a href=\"https://www.v7labs.com/blog/contrastive-learning-guide#:~:text=Contrastive%20Learning%20is%20a%20technique,a%20data%20class%20from%20another\">The Beginner’s Guide to Contrastive Learning</a></p>\n<p><a href=\"https://lilianweng.github.io/posts/2021-05-31-contrastive/\">Contrastive Representation Learning</a></p>\n","site":{"data":{}},"excerpt":"<ol>\n<li>对于Max margin Contrastive loss的公式解读</li></ol>","more":"\n\n<ul>\n<li>由于指示函数的作用，当两个样本属于同一分布的时候，最小化二者之间的距离。</li>\n<li>当两个样本不属于同一分布的时候，公式的后半部分起作用。具体而言：<ul>\n<li>当两个样本的相似度差别很大的时候，符合我们的要求，不造成损失，所以后半部分取0</li>\n<li>当两个样本的相似度不是那么大的时候，造成一定的损失。</li>\n<li>极端情况下，当两个样本的完全相似的时候，造成的损失最大，为$\\epsilon$。不能再大了，防止单对样本对于最终函数的影响过大</li>\n</ul>\n</li>\n</ul>\n<ol start=\"2\">\n<li>对于Triplet Loss的公式解读</li>\n</ol>\n<img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20230719005701.png\" width=\"50%\" height=\"50%\">\n\n<ol start=\"3\">\n<li>对于N-pair Loss公式解读</li>\n</ol>\n<ul>\n<li>点积可看作余弦相似度</li>\n<li>a&#x2F;b 和 a-b 在a,b＞0的时候是等价的</li>\n</ul>\n<ol start=\"4\">\n<li>思考</li>\n</ol>\n<img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20230719010807.png\" width=\"50%\" height=\"50%\">\n\n<hr>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><p><a href=\"https://www.v7labs.com/blog/contrastive-learning-guide#:~:text=Contrastive%20Learning%20is%20a%20technique,a%20data%20class%20from%20another\">The Beginner’s Guide to Contrastive Learning</a></p>\n<p><a href=\"https://lilianweng.github.io/posts/2021-05-31-contrastive/\">Contrastive Representation Learning</a></p>"},{"title":"将openwrt刷入电脑","date":"2023-05-30T23:07:44.000Z","declare":true,"_content":"> x86 设备刷openwrt\n\n3865U软路由太贵，\n单臂旁路由推荐斐讯N1，不到一百块钱。\nN270小主机，两个千兆的网口，闲鱼几十块钱。<!--more-->\n[esirPG固件](https://drive.google.com/drive/folders/1dqNUrMf9n7i3y1aSh68U5Yf44WQ3KCuh)\n![20230531002538](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230531002538.png)\nesirPG固件的默认信息：**路由器初始IP: 192.168.5.1  初始用户名: root 密码: password**\n零度推荐的固件，软路由默认登录密码为 netflixcn.com\n\n# 直接刷Openwrt 至 U 盘\n- 下载[balena](https://etcher.balena.io/)\n- 将镜像刷入U盘，U盘启动。\n> 如果有 硬盘 的转USB的转接设备，就可以直接按照U盘的方式刷入硬盘，之后从这个硬盘启动即可。\n\n# PE刷Openwrt\n- 下载PE系统，[IT天空](https://www.itsk.com/) 或者wepe 或者 老毛桃\n![20230530233054](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230530233054.png)\n- 将PE系统刷入U盘\n- 将Diskimage.exe 和 openwrt的img镜像文件拖入U盘\n- 启动PE\n- 删除硬盘原有的一切分区\n- 将镜像写入硬盘\n\n<!-- ![20230530234029](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230530234029.png) -->\n\n<img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230530234029.png\" width=\"70%\" height=\"70%\">\n\n- OK\n\n# Openwrt刷Openwrt\n[旧电脑刷路由系统Openwrt的第三种种方法](https://youtu.be/zbxTvRO9SKY?t=348)\n\n# openwrt镜像\n[X86_64多功能版本](https://drive.google.com/drive/folders/1pdJuzpwuhdq6vnN0Ovtb5r-JB7Z5bw38)\n\n-------------------------------------------\n# 设置为单臂旁路由\n- 回车确认，进入到软路由的命令行界面\n- 修改网络配置文件\n```shell\nvi /etc/config/network\n```\n- 给它一个静态的ip\n<!-- ![20230531000211](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230531000211.png) -->\n<img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230531000211.png\" width=\"60%\" height=\"60%\">\n- 通过同局域网的设备，在浏览器进入软路由界面\n- 设置Lan口\n  - 网关改为主路由ip\n  - DNS服务器同上\n  - 关闭DHCP服务器\n- 配置PassWall\n- 将需要上网的设备的**网关和DNS服务器**改为软路由的ip地址，或者在主路由中统一设置。\n\n\n\n---------------------------------------------\n# 参考\n- [网关代理](https://corner430.github.io/2023/05/26/%E7%BD%91%E5%85%B3%E4%BB%A3%E7%90%86/#more)\n- [旧电脑刷路由系统Openwrt的几种方法，总有一种适合你！](https://www.youtube.com/watch?v=zbxTvRO9SKY&t=2s&ab_channel=%E9%9F%A9%E9%A3%8ETalk)\n- [软路由安装教程，闲置笔记本设置旁路由，双臂路由！科学上网更快更稳定！2020 | 零度解说](https://www.youtube.com/watch?v=nEU4hbZYj6c&t=783s&ab_channel=%E9%9B%B6%E5%BA%A6%E8%A7%A3%E8%AF%B4)\n- [免费安装软路由，一台闲置的旧笔记本就够了！科学上网更快更稳定！](https://www.freedidi.com/741.html)\n- [零成本体验软路由/闲置笔记本变身OpenWRT软路由_轻松上Youtuber_快来体验看看软路由适不适合你](https://www.youtube.com/watch?v=VN_V9CzG6AM&t=817s&ab_channel=%E6%88%91%E6%98%AF%E9%98%BF%E7%9A%AE%E5%95%8A)\n- [恩山大神OpenWrt固件功能简介&&Google Drive网盘的使用指南](https://www.youtube.com/watch?v=e4IAZdAZ60w&ab_channel=eSirPlayGround)","source":"_posts/将openwrt刷入电脑.md","raw":"---\ntitle: 将openwrt刷入电脑\ndate: 2023-05-30 23:07:44\ntags:\n  - 路由器\n  - openwrt\ndeclare: true\n---\n> x86 设备刷openwrt\n\n3865U软路由太贵，\n单臂旁路由推荐斐讯N1，不到一百块钱。\nN270小主机，两个千兆的网口，闲鱼几十块钱。<!--more-->\n[esirPG固件](https://drive.google.com/drive/folders/1dqNUrMf9n7i3y1aSh68U5Yf44WQ3KCuh)\n![20230531002538](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230531002538.png)\nesirPG固件的默认信息：**路由器初始IP: 192.168.5.1  初始用户名: root 密码: password**\n零度推荐的固件，软路由默认登录密码为 netflixcn.com\n\n# 直接刷Openwrt 至 U 盘\n- 下载[balena](https://etcher.balena.io/)\n- 将镜像刷入U盘，U盘启动。\n> 如果有 硬盘 的转USB的转接设备，就可以直接按照U盘的方式刷入硬盘，之后从这个硬盘启动即可。\n\n# PE刷Openwrt\n- 下载PE系统，[IT天空](https://www.itsk.com/) 或者wepe 或者 老毛桃\n![20230530233054](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230530233054.png)\n- 将PE系统刷入U盘\n- 将Diskimage.exe 和 openwrt的img镜像文件拖入U盘\n- 启动PE\n- 删除硬盘原有的一切分区\n- 将镜像写入硬盘\n\n<!-- ![20230530234029](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230530234029.png) -->\n\n<img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230530234029.png\" width=\"70%\" height=\"70%\">\n\n- OK\n\n# Openwrt刷Openwrt\n[旧电脑刷路由系统Openwrt的第三种种方法](https://youtu.be/zbxTvRO9SKY?t=348)\n\n# openwrt镜像\n[X86_64多功能版本](https://drive.google.com/drive/folders/1pdJuzpwuhdq6vnN0Ovtb5r-JB7Z5bw38)\n\n-------------------------------------------\n# 设置为单臂旁路由\n- 回车确认，进入到软路由的命令行界面\n- 修改网络配置文件\n```shell\nvi /etc/config/network\n```\n- 给它一个静态的ip\n<!-- ![20230531000211](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230531000211.png) -->\n<img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230531000211.png\" width=\"60%\" height=\"60%\">\n- 通过同局域网的设备，在浏览器进入软路由界面\n- 设置Lan口\n  - 网关改为主路由ip\n  - DNS服务器同上\n  - 关闭DHCP服务器\n- 配置PassWall\n- 将需要上网的设备的**网关和DNS服务器**改为软路由的ip地址，或者在主路由中统一设置。\n\n\n\n---------------------------------------------\n# 参考\n- [网关代理](https://corner430.github.io/2023/05/26/%E7%BD%91%E5%85%B3%E4%BB%A3%E7%90%86/#more)\n- [旧电脑刷路由系统Openwrt的几种方法，总有一种适合你！](https://www.youtube.com/watch?v=zbxTvRO9SKY&t=2s&ab_channel=%E9%9F%A9%E9%A3%8ETalk)\n- [软路由安装教程，闲置笔记本设置旁路由，双臂路由！科学上网更快更稳定！2020 | 零度解说](https://www.youtube.com/watch?v=nEU4hbZYj6c&t=783s&ab_channel=%E9%9B%B6%E5%BA%A6%E8%A7%A3%E8%AF%B4)\n- [免费安装软路由，一台闲置的旧笔记本就够了！科学上网更快更稳定！](https://www.freedidi.com/741.html)\n- [零成本体验软路由/闲置笔记本变身OpenWRT软路由_轻松上Youtuber_快来体验看看软路由适不适合你](https://www.youtube.com/watch?v=VN_V9CzG6AM&t=817s&ab_channel=%E6%88%91%E6%98%AF%E9%98%BF%E7%9A%AE%E5%95%8A)\n- [恩山大神OpenWrt固件功能简介&&Google Drive网盘的使用指南](https://www.youtube.com/watch?v=e4IAZdAZ60w&ab_channel=eSirPlayGround)","slug":"将openwrt刷入电脑","published":1,"updated":"2024-04-25T17:26:47.333Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvjbaqk500570vn11c4uh784","content":"<blockquote>\n<p>x86 设备刷openwrt</p>\n</blockquote>\n<p>3865U软路由太贵，<br>单臂旁路由推荐斐讯N1，不到一百块钱。<br>N270小主机，两个千兆的网口，闲鱼几十块钱。<span id=\"more\"></span><br><a href=\"https://drive.google.com/drive/folders/1dqNUrMf9n7i3y1aSh68U5Yf44WQ3KCuh\">esirPG固件</a><br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230531002538.png\" alt=\"20230531002538\"><br>esirPG固件的默认信息：<strong>路由器初始IP: 192.168.5.1  初始用户名: root 密码: password</strong><br>零度推荐的固件，软路由默认登录密码为 netflixcn.com</p>\n<h1 id=\"直接刷Openwrt-至-U-盘\"><a href=\"#直接刷Openwrt-至-U-盘\" class=\"headerlink\" title=\"直接刷Openwrt 至 U 盘\"></a>直接刷Openwrt 至 U 盘</h1><ul>\n<li>下载<a href=\"https://etcher.balena.io/\">balena</a></li>\n<li>将镜像刷入U盘，U盘启动。<blockquote>\n<p>如果有 硬盘 的转USB的转接设备，就可以直接按照U盘的方式刷入硬盘，之后从这个硬盘启动即可。</p>\n</blockquote>\n</li>\n</ul>\n<h1 id=\"PE刷Openwrt\"><a href=\"#PE刷Openwrt\" class=\"headerlink\" title=\"PE刷Openwrt\"></a>PE刷Openwrt</h1><ul>\n<li>下载PE系统，<a href=\"https://www.itsk.com/\">IT天空</a> 或者wepe 或者 老毛桃<br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230530233054.png\" alt=\"20230530233054\"></li>\n<li>将PE系统刷入U盘</li>\n<li>将Diskimage.exe 和 openwrt的img镜像文件拖入U盘</li>\n<li>启动PE</li>\n<li>删除硬盘原有的一切分区</li>\n<li>将镜像写入硬盘</li>\n</ul>\n<!-- ![20230530234029](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230530234029.png) -->\n\n<img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230530234029.png\" width=\"70%\" height=\"70%\">\n\n<ul>\n<li>OK</li>\n</ul>\n<h1 id=\"Openwrt刷Openwrt\"><a href=\"#Openwrt刷Openwrt\" class=\"headerlink\" title=\"Openwrt刷Openwrt\"></a>Openwrt刷Openwrt</h1><p><a href=\"https://youtu.be/zbxTvRO9SKY?t=348\">旧电脑刷路由系统Openwrt的第三种种方法</a></p>\n<h1 id=\"openwrt镜像\"><a href=\"#openwrt镜像\" class=\"headerlink\" title=\"openwrt镜像\"></a>openwrt镜像</h1><p><a href=\"https://drive.google.com/drive/folders/1pdJuzpwuhdq6vnN0Ovtb5r-JB7Z5bw38\">X86_64多功能版本</a></p>\n<hr>\n<h1 id=\"设置为单臂旁路由\"><a href=\"#设置为单臂旁路由\" class=\"headerlink\" title=\"设置为单臂旁路由\"></a>设置为单臂旁路由</h1><ul>\n<li>回车确认，进入到软路由的命令行界面</li>\n<li>修改网络配置文件<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/config/network</span><br></pre></td></tr></table></figure></li>\n<li>给它一个静态的ip<!-- ![20230531000211](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230531000211.png) -->\n<img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230531000211.png\" width=\"60%\" height=\"60%\"></li>\n<li>通过同局域网的设备，在浏览器进入软路由界面</li>\n<li>设置Lan口<ul>\n<li>网关改为主路由ip</li>\n<li>DNS服务器同上</li>\n<li>关闭DHCP服务器</li>\n</ul>\n</li>\n<li>配置PassWall</li>\n<li>将需要上网的设备的<strong>网关和DNS服务器</strong>改为软路由的ip地址，或者在主路由中统一设置。</li>\n</ul>\n<hr>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><a href=\"https://corner430.github.io/2023/05/26/%E7%BD%91%E5%85%B3%E4%BB%A3%E7%90%86/#more\">网关代理</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=zbxTvRO9SKY&t=2s&ab_channel=%E9%9F%A9%E9%A3%8ETalk\">旧电脑刷路由系统Openwrt的几种方法，总有一种适合你！</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=nEU4hbZYj6c&t=783s&ab_channel=%E9%9B%B6%E5%BA%A6%E8%A7%A3%E8%AF%B4\">软路由安装教程，闲置笔记本设置旁路由，双臂路由！科学上网更快更稳定！2020 | 零度解说</a></li>\n<li><a href=\"https://www.freedidi.com/741.html\">免费安装软路由，一台闲置的旧笔记本就够了！科学上网更快更稳定！</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=VN_V9CzG6AM&t=817s&ab_channel=%E6%88%91%E6%98%AF%E9%98%BF%E7%9A%AE%E5%95%8A\">零成本体验软路由&#x2F;闲置笔记本变身OpenWRT软路由_轻松上Youtuber_快来体验看看软路由适不适合你</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=e4IAZdAZ60w&ab_channel=eSirPlayGround\">恩山大神OpenWrt固件功能简介&amp;&amp;Google Drive网盘的使用指南</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>x86 设备刷openwrt</p>\n</blockquote>\n<p>3865U软路由太贵，<br>单臂旁路由推荐斐讯N1，不到一百块钱。<br>N270小主机，两个千兆的网口，闲鱼几十块钱。</p>","more":"<br><a href=\"https://drive.google.com/drive/folders/1dqNUrMf9n7i3y1aSh68U5Yf44WQ3KCuh\">esirPG固件</a><br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230531002538.png\" alt=\"20230531002538\"><br>esirPG固件的默认信息：<strong>路由器初始IP: 192.168.5.1  初始用户名: root 密码: password</strong><br>零度推荐的固件，软路由默认登录密码为 netflixcn.com<p></p>\n<h1 id=\"直接刷Openwrt-至-U-盘\"><a href=\"#直接刷Openwrt-至-U-盘\" class=\"headerlink\" title=\"直接刷Openwrt 至 U 盘\"></a>直接刷Openwrt 至 U 盘</h1><ul>\n<li>下载<a href=\"https://etcher.balena.io/\">balena</a></li>\n<li>将镜像刷入U盘，U盘启动。<blockquote>\n<p>如果有 硬盘 的转USB的转接设备，就可以直接按照U盘的方式刷入硬盘，之后从这个硬盘启动即可。</p>\n</blockquote>\n</li>\n</ul>\n<h1 id=\"PE刷Openwrt\"><a href=\"#PE刷Openwrt\" class=\"headerlink\" title=\"PE刷Openwrt\"></a>PE刷Openwrt</h1><ul>\n<li>下载PE系统，<a href=\"https://www.itsk.com/\">IT天空</a> 或者wepe 或者 老毛桃<br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230530233054.png\" alt=\"20230530233054\"></li>\n<li>将PE系统刷入U盘</li>\n<li>将Diskimage.exe 和 openwrt的img镜像文件拖入U盘</li>\n<li>启动PE</li>\n<li>删除硬盘原有的一切分区</li>\n<li>将镜像写入硬盘</li>\n</ul>\n<!-- ![20230530234029](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230530234029.png) -->\n\n<img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230530234029.png\" width=\"70%\" height=\"70%\">\n\n<ul>\n<li>OK</li>\n</ul>\n<h1 id=\"Openwrt刷Openwrt\"><a href=\"#Openwrt刷Openwrt\" class=\"headerlink\" title=\"Openwrt刷Openwrt\"></a>Openwrt刷Openwrt</h1><p><a href=\"https://youtu.be/zbxTvRO9SKY?t=348\">旧电脑刷路由系统Openwrt的第三种种方法</a></p>\n<h1 id=\"openwrt镜像\"><a href=\"#openwrt镜像\" class=\"headerlink\" title=\"openwrt镜像\"></a>openwrt镜像</h1><p><a href=\"https://drive.google.com/drive/folders/1pdJuzpwuhdq6vnN0Ovtb5r-JB7Z5bw38\">X86_64多功能版本</a></p>\n<hr>\n<h1 id=\"设置为单臂旁路由\"><a href=\"#设置为单臂旁路由\" class=\"headerlink\" title=\"设置为单臂旁路由\"></a>设置为单臂旁路由</h1><ul>\n<li>回车确认，进入到软路由的命令行界面</li>\n<li>修改网络配置文件<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/config/network</span><br></pre></td></tr></table></figure></li>\n<li>给它一个静态的ip<!-- ![20230531000211](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230531000211.png) -->\n<img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230531000211.png\" width=\"60%\" height=\"60%\"></li>\n<li>通过同局域网的设备，在浏览器进入软路由界面</li>\n<li>设置Lan口<ul>\n<li>网关改为主路由ip</li>\n<li>DNS服务器同上</li>\n<li>关闭DHCP服务器</li>\n</ul>\n</li>\n<li>配置PassWall</li>\n<li>将需要上网的设备的<strong>网关和DNS服务器</strong>改为软路由的ip地址，或者在主路由中统一设置。</li>\n</ul>\n<hr>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><a href=\"https://corner430.github.io/2023/05/26/%E7%BD%91%E5%85%B3%E4%BB%A3%E7%90%86/#more\">网关代理</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=zbxTvRO9SKY&t=2s&ab_channel=%E9%9F%A9%E9%A3%8ETalk\">旧电脑刷路由系统Openwrt的几种方法，总有一种适合你！</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=nEU4hbZYj6c&t=783s&ab_channel=%E9%9B%B6%E5%BA%A6%E8%A7%A3%E8%AF%B4\">软路由安装教程，闲置笔记本设置旁路由，双臂路由！科学上网更快更稳定！2020 | 零度解说</a></li>\n<li><a href=\"https://www.freedidi.com/741.html\">免费安装软路由，一台闲置的旧笔记本就够了！科学上网更快更稳定！</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=VN_V9CzG6AM&t=817s&ab_channel=%E6%88%91%E6%98%AF%E9%98%BF%E7%9A%AE%E5%95%8A\">零成本体验软路由&#x2F;闲置笔记本变身OpenWRT软路由_轻松上Youtuber_快来体验看看软路由适不适合你</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=e4IAZdAZ60w&ab_channel=eSirPlayGround\">恩山大神OpenWrt固件功能简介&amp;&amp;Google Drive网盘的使用指南</a></li>\n</ul>"},{"title":"小新pro16 安装 Ubuntu","date":"2023-12-09T21:26:42.000Z","_content":"1. 开机黑屏<!--more-->\n显卡驱动问题，安装显卡驱动。\n点击 `ctrl+alt+F2` 进入命令行模式，输入用户名和密码，**直接更新重启**，如果还不行。执行以下命令：\n\n```bash\nubuntu-drivers devices  #查看系统推荐的Nvidia版本，带有 recommended 标签的是推荐版本\nsudo apt install nvidia-driver-xxx  #安装Nvidia驱动\nsudo reboot  #重启\n```\n\n> 关闭 bios 中的安全启动，否则会掉驱动\n\n2. 检测到窗口系统采用wayland协议,腾讯会议暂不兼容,程序即将退出!\n\n```bash\nsudo vim /etc/gdm3/custom.conf\n#WaylandEnable=false #取消注释\nsudo service gdm restart\n```\n\n3. 输入法\n先在区域和语言中设置中文，需要点击**管理已安装的语言**，把缺少的语言包安装上。\n\n注意到这时候的**键盘输入法系统**是`ibus`，`ibus`和 **智能拼音** 相互匹配。\n\n设置中点击**键盘**，在**输入源**中添加**中文（智能拼音）**，重启后生效。\n\n4. 可执行软件装在 `/usr/local/bin` 下\n\n5. 科学上网 `docker pull mzz2017/v2raya`\n\n```bash\ndocker run -d \\\n  --restart=always \\\n  --privileged \\\n  --network=host \\\n  --name v2raya \\\n  -e V2RAYA_LOG_FILE=/tmp/v2raya.log \\\n  -e V2RAYA_V2RAY_BIN=/usr/local/bin/v2ray \\\n  -e V2RAYA_NETABLES_SUPPORT=off \\\n  -v /lib/modules:/lib/modules:ro \\\n  -v /etc/resolv.conf:/etc/resolv.conf \\\n  -v /etc/v2raya:/etc/v2raya \\\n  mzz2017/v2raya\n```\n之后去 web 界面的 `http://127.0.0.1:2017` 设置\n\n------------------------------\ntweaks\n[gnome extensions](https://extensions.gnome.org/)\n[gnome look](https://www.gnome-look.org/browse/)\n\n```bash\nsudo apt install gnome-tweaks\nsudo apt install chrome-gnome-shell\n```\n\n- Netspeed： 网速\n- Dash to Dock： 底部栏\n- Coverflow Alt-Tab： 切换窗口\n- Applications menu： 应用菜单\n- Extension List： 扩展列表\n- Vitals： 系统监控\n- Removable Drive Menu： 可移动设备菜单\n- Clipboard Indicator： 剪贴板\n- OpenWeather： 天气\n- User Themes： 主题\n- Burn My Windows： 窗口特效\n- Application Volume Mixer： 音量控制\n- Simple Timer： 计时器\n- Removable Drive Menu： 可移动设备菜单\n- Hide Activities Button： 隐藏活动按钮\n- Global menu for Gnome（不好用）： 全局菜单\n- Win Tile： 分屏\n- Transparent Window Moving： 窗口移动透明\n- Caffeine： 点击不熄屏\n- Unite(optional): 窗口控制\n- Glasa(optional)：顶栏之眼\n- Fly-Pie(optional)： 鼠标手势\n\n------------------------------\n\n![desktop](https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/desktop.png)","source":"_posts/小新pro16-安装-Ubuntu.md","raw":"---\ntitle: 小新pro16 安装 Ubuntu\ndate: 2023-12-09 21:26:42\ntags:\n    - Ubuntu\n---\n1. 开机黑屏<!--more-->\n显卡驱动问题，安装显卡驱动。\n点击 `ctrl+alt+F2` 进入命令行模式，输入用户名和密码，**直接更新重启**，如果还不行。执行以下命令：\n\n```bash\nubuntu-drivers devices  #查看系统推荐的Nvidia版本，带有 recommended 标签的是推荐版本\nsudo apt install nvidia-driver-xxx  #安装Nvidia驱动\nsudo reboot  #重启\n```\n\n> 关闭 bios 中的安全启动，否则会掉驱动\n\n2. 检测到窗口系统采用wayland协议,腾讯会议暂不兼容,程序即将退出!\n\n```bash\nsudo vim /etc/gdm3/custom.conf\n#WaylandEnable=false #取消注释\nsudo service gdm restart\n```\n\n3. 输入法\n先在区域和语言中设置中文，需要点击**管理已安装的语言**，把缺少的语言包安装上。\n\n注意到这时候的**键盘输入法系统**是`ibus`，`ibus`和 **智能拼音** 相互匹配。\n\n设置中点击**键盘**，在**输入源**中添加**中文（智能拼音）**，重启后生效。\n\n4. 可执行软件装在 `/usr/local/bin` 下\n\n5. 科学上网 `docker pull mzz2017/v2raya`\n\n```bash\ndocker run -d \\\n  --restart=always \\\n  --privileged \\\n  --network=host \\\n  --name v2raya \\\n  -e V2RAYA_LOG_FILE=/tmp/v2raya.log \\\n  -e V2RAYA_V2RAY_BIN=/usr/local/bin/v2ray \\\n  -e V2RAYA_NETABLES_SUPPORT=off \\\n  -v /lib/modules:/lib/modules:ro \\\n  -v /etc/resolv.conf:/etc/resolv.conf \\\n  -v /etc/v2raya:/etc/v2raya \\\n  mzz2017/v2raya\n```\n之后去 web 界面的 `http://127.0.0.1:2017` 设置\n\n------------------------------\ntweaks\n[gnome extensions](https://extensions.gnome.org/)\n[gnome look](https://www.gnome-look.org/browse/)\n\n```bash\nsudo apt install gnome-tweaks\nsudo apt install chrome-gnome-shell\n```\n\n- Netspeed： 网速\n- Dash to Dock： 底部栏\n- Coverflow Alt-Tab： 切换窗口\n- Applications menu： 应用菜单\n- Extension List： 扩展列表\n- Vitals： 系统监控\n- Removable Drive Menu： 可移动设备菜单\n- Clipboard Indicator： 剪贴板\n- OpenWeather： 天气\n- User Themes： 主题\n- Burn My Windows： 窗口特效\n- Application Volume Mixer： 音量控制\n- Simple Timer： 计时器\n- Removable Drive Menu： 可移动设备菜单\n- Hide Activities Button： 隐藏活动按钮\n- Global menu for Gnome（不好用）： 全局菜单\n- Win Tile： 分屏\n- Transparent Window Moving： 窗口移动透明\n- Caffeine： 点击不熄屏\n- Unite(optional): 窗口控制\n- Glasa(optional)：顶栏之眼\n- Fly-Pie(optional)： 鼠标手势\n\n------------------------------\n\n![desktop](https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/desktop.png)","slug":"小新pro16-安装-Ubuntu","published":1,"updated":"2024-04-25T17:26:45.803Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvjbaqk6005a0vn1b59v8vn7","content":"<ol>\n<li>开机黑屏<span id=\"more\"></span><br>显卡驱动问题，安装显卡驱动。<br>点击 <code>ctrl+alt+F2</code> 进入命令行模式，输入用户名和密码，<strong>直接更新重启</strong>，如果还不行。执行以下命令：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ubuntu-drivers devices  <span class=\"comment\">#查看系统推荐的Nvidia版本，带有 recommended 标签的是推荐版本</span></span><br><span class=\"line\">sudo apt install nvidia-driver-xxx  <span class=\"comment\">#安装Nvidia驱动</span></span><br><span class=\"line\">sudo reboot  <span class=\"comment\">#重启</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>关闭 bios 中的安全启动，否则会掉驱动</p>\n</blockquote>\n<ol start=\"2\">\n<li>检测到窗口系统采用wayland协议,腾讯会议暂不兼容,程序即将退出!</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vim /etc/gdm3/custom.conf</span><br><span class=\"line\"><span class=\"comment\">#WaylandEnable=false #取消注释</span></span><br><span class=\"line\">sudo service gdm restart</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>输入法<br>先在区域和语言中设置中文，需要点击<strong>管理已安装的语言</strong>，把缺少的语言包安装上。</li>\n</ol>\n<p>注意到这时候的<strong>键盘输入法系统</strong>是<code>ibus</code>，<code>ibus</code>和 <strong>智能拼音</strong> 相互匹配。</p>\n<p>设置中点击<strong>键盘</strong>，在<strong>输入源</strong>中添加<strong>中文（智能拼音）</strong>，重启后生效。</p>\n<ol start=\"4\">\n<li><p>可执行软件装在 <code>/usr/local/bin</code> 下</p>\n</li>\n<li><p>科学上网 <code>docker pull mzz2017/v2raya</code></p>\n</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d \\</span><br><span class=\"line\">  --restart=always \\</span><br><span class=\"line\">  --privileged \\</span><br><span class=\"line\">  --network=host \\</span><br><span class=\"line\">  --name v2raya \\</span><br><span class=\"line\">  -e V2RAYA_LOG_FILE=/tmp/v2raya.<span class=\"built_in\">log</span> \\</span><br><span class=\"line\">  -e V2RAYA_V2RAY_BIN=/usr/local/bin/v2ray \\</span><br><span class=\"line\">  -e V2RAYA_NETABLES_SUPPORT=off \\</span><br><span class=\"line\">  -v /lib/modules:/lib/modules:ro \\</span><br><span class=\"line\">  -v /etc/resolv.conf:/etc/resolv.conf \\</span><br><span class=\"line\">  -v /etc/v2raya:/etc/v2raya \\</span><br><span class=\"line\">  mzz2017/v2raya</span><br></pre></td></tr></table></figure>\n<p>之后去 web 界面的 <code>http://127.0.0.1:2017</code> 设置</p>\n<hr>\n<p>tweaks<br><a href=\"https://extensions.gnome.org/\">gnome extensions</a><br><a href=\"https://www.gnome-look.org/browse/\">gnome look</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install gnome-tweaks</span><br><span class=\"line\">sudo apt install chrome-gnome-shell</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Netspeed： 网速</li>\n<li>Dash to Dock： 底部栏</li>\n<li>Coverflow Alt-Tab： 切换窗口</li>\n<li>Applications menu： 应用菜单</li>\n<li>Extension List： 扩展列表</li>\n<li>Vitals： 系统监控</li>\n<li>Removable Drive Menu： 可移动设备菜单</li>\n<li>Clipboard Indicator： 剪贴板</li>\n<li>OpenWeather： 天气</li>\n<li>User Themes： 主题</li>\n<li>Burn My Windows： 窗口特效</li>\n<li>Application Volume Mixer： 音量控制</li>\n<li>Simple Timer： 计时器</li>\n<li>Removable Drive Menu： 可移动设备菜单</li>\n<li>Hide Activities Button： 隐藏活动按钮</li>\n<li>Global menu for Gnome（不好用）： 全局菜单</li>\n<li>Win Tile： 分屏</li>\n<li>Transparent Window Moving： 窗口移动透明</li>\n<li>Caffeine： 点击不熄屏</li>\n<li>Unite(optional): 窗口控制</li>\n<li>Glasa(optional)：顶栏之眼</li>\n<li>Fly-Pie(optional)： 鼠标手势</li>\n</ul>\n<hr>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/desktop.png\" alt=\"desktop\"></p>\n","site":{"data":{}},"excerpt":"<ol>\n<li>开机黑屏</li></ol>","more":"<br>显卡驱动问题，安装显卡驱动。<br>点击 <code>ctrl+alt+F2</code> 进入命令行模式，输入用户名和密码，<strong>直接更新重启</strong>，如果还不行。执行以下命令：\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ubuntu-drivers devices  <span class=\"comment\">#查看系统推荐的Nvidia版本，带有 recommended 标签的是推荐版本</span></span><br><span class=\"line\">sudo apt install nvidia-driver-xxx  <span class=\"comment\">#安装Nvidia驱动</span></span><br><span class=\"line\">sudo reboot  <span class=\"comment\">#重启</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>关闭 bios 中的安全启动，否则会掉驱动</p>\n</blockquote>\n<ol start=\"2\">\n<li>检测到窗口系统采用wayland协议,腾讯会议暂不兼容,程序即将退出!</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vim /etc/gdm3/custom.conf</span><br><span class=\"line\"><span class=\"comment\">#WaylandEnable=false #取消注释</span></span><br><span class=\"line\">sudo service gdm restart</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>输入法<br>先在区域和语言中设置中文，需要点击<strong>管理已安装的语言</strong>，把缺少的语言包安装上。</li>\n</ol>\n<p>注意到这时候的<strong>键盘输入法系统</strong>是<code>ibus</code>，<code>ibus</code>和 <strong>智能拼音</strong> 相互匹配。</p>\n<p>设置中点击<strong>键盘</strong>，在<strong>输入源</strong>中添加<strong>中文（智能拼音）</strong>，重启后生效。</p>\n<ol start=\"4\">\n<li><p>可执行软件装在 <code>/usr/local/bin</code> 下</p>\n</li>\n<li><p>科学上网 <code>docker pull mzz2017/v2raya</code></p>\n</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d \\</span><br><span class=\"line\">  --restart=always \\</span><br><span class=\"line\">  --privileged \\</span><br><span class=\"line\">  --network=host \\</span><br><span class=\"line\">  --name v2raya \\</span><br><span class=\"line\">  -e V2RAYA_LOG_FILE=/tmp/v2raya.<span class=\"built_in\">log</span> \\</span><br><span class=\"line\">  -e V2RAYA_V2RAY_BIN=/usr/local/bin/v2ray \\</span><br><span class=\"line\">  -e V2RAYA_NETABLES_SUPPORT=off \\</span><br><span class=\"line\">  -v /lib/modules:/lib/modules:ro \\</span><br><span class=\"line\">  -v /etc/resolv.conf:/etc/resolv.conf \\</span><br><span class=\"line\">  -v /etc/v2raya:/etc/v2raya \\</span><br><span class=\"line\">  mzz2017/v2raya</span><br></pre></td></tr></table></figure>\n<p>之后去 web 界面的 <code>http://127.0.0.1:2017</code> 设置</p>\n<hr>\n<p>tweaks<br><a href=\"https://extensions.gnome.org/\">gnome extensions</a><br><a href=\"https://www.gnome-look.org/browse/\">gnome look</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install gnome-tweaks</span><br><span class=\"line\">sudo apt install chrome-gnome-shell</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Netspeed： 网速</li>\n<li>Dash to Dock： 底部栏</li>\n<li>Coverflow Alt-Tab： 切换窗口</li>\n<li>Applications menu： 应用菜单</li>\n<li>Extension List： 扩展列表</li>\n<li>Vitals： 系统监控</li>\n<li>Removable Drive Menu： 可移动设备菜单</li>\n<li>Clipboard Indicator： 剪贴板</li>\n<li>OpenWeather： 天气</li>\n<li>User Themes： 主题</li>\n<li>Burn My Windows： 窗口特效</li>\n<li>Application Volume Mixer： 音量控制</li>\n<li>Simple Timer： 计时器</li>\n<li>Removable Drive Menu： 可移动设备菜单</li>\n<li>Hide Activities Button： 隐藏活动按钮</li>\n<li>Global menu for Gnome（不好用）： 全局菜单</li>\n<li>Win Tile： 分屏</li>\n<li>Transparent Window Moving： 窗口移动透明</li>\n<li>Caffeine： 点击不熄屏</li>\n<li>Unite(optional): 窗口控制</li>\n<li>Glasa(optional)：顶栏之眼</li>\n<li>Fly-Pie(optional)： 鼠标手势</li>\n</ul>\n<hr>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/desktop.png\" alt=\"desktop\"></p>"},{"title":"情绪垃圾","date":"2023-04-03T22:51:33.000Z","password":"ysyhl_9T","_content":"- 5月29日，2023\n总会低靡，消极一会。\n\n\n- April 3, 2023\n\n近日心情焦躁，效率低下。\n个人能力与梦想差距过大。\n\n要改，要调节。\n\n希望明天的自己可以变的正常。<!--more-->\n\n\n- April 5, 2023\n我来人间一趟，历经十年寒窗，\n不求化雀成鸢，唯愿不负年芳。\n\n------------------------------------------\n\n- 黑名单\n    - 老师\n        - 王兴梅\n    - 学生\n        - 闫世龙\n        - 苗晓晨\n        - 刘克实\n        - 李兴逸\n        - 李明霄\n        - 黄天晓\n        - 赵俊华\n\n----------------------------------------\n\n","source":"_posts/情绪垃圾.md","raw":"---\ntitle: 情绪垃圾\ndate: 2023-04-03 22:51:33\ntags:\n    - 其它\npassword: ysyhl_9T\n---\n- 5月29日，2023\n总会低靡，消极一会。\n\n\n- April 3, 2023\n\n近日心情焦躁，效率低下。\n个人能力与梦想差距过大。\n\n要改，要调节。\n\n希望明天的自己可以变的正常。<!--more-->\n\n\n- April 5, 2023\n我来人间一趟，历经十年寒窗，\n不求化雀成鸢，唯愿不负年芳。\n\n------------------------------------------\n\n- 黑名单\n    - 老师\n        - 王兴梅\n    - 学生\n        - 闫世龙\n        - 苗晓晨\n        - 刘克实\n        - 李兴逸\n        - 李明霄\n        - 黄天晓\n        - 赵俊华\n\n----------------------------------------\n\n","slug":"情绪垃圾","published":1,"updated":"2024-04-25T17:26:45.903Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvjbaqk7005c0vn12sevb045","content":"<div class=\"hbe hbe-container\" id=\"hexo-blog-encrypt\" data-wpm=\"Oh, this is an invalid password. Check and try again, please.\" data-whm=\"OOPS, these decrypted content may changed, but you can still have a look.\">\n  <script id=\"hbeData\" type=\"hbeData\" data-hmacdigest=\"c7d84007a9c3deb9a2689551fe26b5ffeb6a518ab5709529f6547bbd29a116d9\">3c80f97a31aabd0aff25829721ee67b6909accead21e6a44756f86541579b383b8a10b4a4c032efd1d9368e177442398667eab81e1cb92986983d8360858aa9c062ad2632907e185cf5ace399f06e46bc161316a715241c3866b6ca98cefed9154b3d6b5d56d10bda8974b866c5529e53ff4df244ddbfcec10432718c68acf0fce3f015c9eaef1e111e294d16f2e70aa076d8c0da98dff4393ffcc5608e019218e5df9d72884c6850903ce39ee24a08a0e684e9e2d0546328d7f4751e816af61394849cf2a3aaad99c2e2b8891033f3f3aaf75bf7bc4b9fc124008317b8f8dbf96e2de84d84b0d9cbda56d4a7e29825c2a6a63a522fce7285795a9f525986fe3ec8137b175185de96fcb2460a68760f078d23f15d99ac4b8c4b7380c7e9545aa9056ec2159738b1c4117a89d67e223be8526f7c7653b4d9159e478704dea7d359e6450a172ad0eca9bcad9d159a8ab06a635d3366176216d0b596371bc0a25c906ec0867b7c844f5bcf85105b1d421514a0d3103efe94b3c137f7156ad87246c68d2fdcd984d82422fae046673f2a9fff8ac0e8721e674d3a0a93ebc37e19838735e1b439861ff7765f80f7c7361a02469adc13ec468dd498ddf6aa5859eec0735068d2a7072d04c9e0e0e6e0f01a31ba20e183ae8ebb8fdb429f3ed96f052604ae0eb2bdd8f52e47b54736cbb92c2023fb61e4c5077bb0587370bcd6a9bb31b8d471729af1c6f770688a6bcd8854f172ea84866f0ef228917be70da5b478cf2b9d4a2e8afd525b62fad3669e2f316f95aaa45cdf1d11359a452861f6a2c6b3a317eec72d63bc14cd70e9a83da4af5034bc9d143fe4e05b2ed952bb0ae7c8fec27c75a8e65135cd8bdd0f1e69b43ec05ce9057509867896fcb03c6d762f6be1b596e55f67d2def0e133efa1b5822d3fb118bad28d93c0f2b2a20181313b0d95c2c572d605ee1f3585cbf8e91817328b29b7fa1c43b89942bd6e009537dea85ed</script>\n  <div class=\"hbe hbe-content\">\n    <div class=\"hbe hbe-input hbe-input-default\">\n      <input class=\"hbe hbe-input-field hbe-input-field-default\" type=\"password\" id=\"hbePass\">\n      <label class=\"hbe hbe-input-label hbe-input-label-default\" for=\"hbePass\">\n        <span class=\"hbe hbe-input-label-content hbe-input-label-content-default\">Hey, password is required here.</span>\n      </label>\n    </div>\n  </div>\n</div>\n<script data-pjax src=\"/lib/hbe.js\"></script><link href=\"/css/hbe.style.css\" rel=\"stylesheet\" type=\"text/css\">","site":{"data":{}},"excerpt":"Here's something encrypted, password is required to continue reading.","more":"Here's something encrypted, password is required to continue reading.","origin":"<ul>\n<li><p>5月29日，2023<br>总会低靡，消极一会。</p>\n</li>\n<li><p>April 3, 2023</p>\n</li>\n</ul>\n<p>近日心情焦躁，效率低下。<br>个人能力与梦想差距过大。</p>\n<p>要改，要调节。</p>\n<p>希望明天的自己可以变的正常。<span id=\"more\"></span></p>\n<ul>\n<li>April 5, 2023<br>我来人间一趟，历经十年寒窗，<br>不求化雀成鸢，唯愿不负年芳。</li>\n</ul>\n<hr>\n<ul>\n<li>黑名单<ul>\n<li>老师<ul>\n<li>王兴梅</li>\n</ul>\n</li>\n<li>学生<ul>\n<li>闫世龙</li>\n<li>苗晓晨</li>\n<li>刘克实</li>\n<li>李兴逸</li>\n<li>李明霄</li>\n<li>黄天晓</li>\n<li>赵俊华</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n","encrypt":true},{"title":"文献阅读","date":"2023-05-09T13:08:46.000Z","_content":"[CCF列表](https://ccf.atom.im/)\n[知云文献翻译](https://www.zhiyunwenxian.cn/)\n[ReadPaper](https://readpaper.com/)\n[小绿鲸](https://www.xljsci.com/index.html)\n[DeepL](https://www.deepl.com/translator)","source":"_posts/文献阅读.md","raw":"---\ntitle: 文献阅读\ndate: 2023-05-09 13:08:46\ntags:\n    - 科研\n---\n[CCF列表](https://ccf.atom.im/)\n[知云文献翻译](https://www.zhiyunwenxian.cn/)\n[ReadPaper](https://readpaper.com/)\n[小绿鲸](https://www.xljsci.com/index.html)\n[DeepL](https://www.deepl.com/translator)","slug":"文献阅读","published":1,"updated":"2024-04-25T17:26:46.013Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvjbaqk8005f0vn1ga8x72h4","content":"<p><a href=\"https://ccf.atom.im/\">CCF列表</a><br><a href=\"https://www.zhiyunwenxian.cn/\">知云文献翻译</a><br><a href=\"https://readpaper.com/\">ReadPaper</a><br><a href=\"https://www.xljsci.com/index.html\">小绿鲸</a><br><a href=\"https://www.deepl.com/translator\">DeepL</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://ccf.atom.im/\">CCF列表</a><br><a href=\"https://www.zhiyunwenxian.cn/\">知云文献翻译</a><br><a href=\"https://readpaper.com/\">ReadPaper</a><br><a href=\"https://www.xljsci.com/index.html\">小绿鲸</a><br><a href=\"https://www.deepl.com/translator\">DeepL</a></p>\n"},{"title":"机场或节点测速","date":"2023-05-16T16:21:08.000Z","declare":true,"_content":"## 1. 单节点测速\n[speedtest](https://www.speedtest.net/)<!--more-->\n\n在这里添加规则，指定当前是节点测速还是本地测速\n![20230516162259](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230516162259.png)\n\n这是一些无广告版本的speedtest：\n- http://mybroadbandspeed.speedtestcustom.com/\n- http://aaaaaa.speedtestcustom.com/\n- http://rixcloud.speedtestcustom.com/\n- http://cordcloud.speedtestcustom.com/\n\n## 2. YouTube 视频统计信息\n\n## 3. 全节点测速\nhttps://github.com/tindy2013/stairspeedtest-reborn\n\n- 双击webgui.bat脚本进行测试\n- 结果是一张测速图片，在result文件夹中\n\n------------------------\n也可以运行stairspeedtest.exe进行测速\n\n## nodesCatch V2.0 全自动一键节点测速工具\n[github仓库下载](https://github.com/bulianglin/demo)\n[nodescatch](https://github.com/kivid/nodesCatch)\n\n## v2ray的测速功能也挺好用，尤其是真链接延迟测试\n\n\n## 4. 参考\n[测速指南 | 如何测试自己的科学上网速度？](https://merlinblog.xyz/wiki/speedtest.html)\n[nodesCatch V2.0 全自动一键节点测速工具](https://bulianglin.com/archives/nodescatch.html)\n[永久有效！让你有用不完的免费节点，揭秘博主分享的免费节点是哪里来的，学会了你也可以给别人分享节点，全平台客户端可用 v2ray|clash|ShadowRocket|Surge|trojan](https://www.youtube.com/watch?v=AGk4qw3n9wk&ab_channel=%E4%B8%8D%E8%89%AF%E6%9E%97)\n[免费节点自动抓取软件，8K秒开，一键全自动节点测速软件分享，快速检测节点池免费节点是否可用，从此再也不用担心失联了，支持ss、ssr、Vmess、Trojan、socks5、http、https测速](https://www.youtube.com/watch?v=aSR6OuqtFdU&ab_channel=%E4%B8%8D%E8%89%AF%E6%9E%97)\n[nodesCatch V2.0节点筛选工具使用教程](https://oliverhou.com/archives/213)\n\n-------------------------\n[google 搜索节点池](https://www.google.com.hk/search?q=inurl%3Aclash%2Fproxies)","source":"_posts/机场或节点测速.md","raw":"---\ntitle: 机场或节点测速\ndate: 2023-05-16 16:21:08\ntags:\n    - 科学上网\ndeclare: true\n---\n## 1. 单节点测速\n[speedtest](https://www.speedtest.net/)<!--more-->\n\n在这里添加规则，指定当前是节点测速还是本地测速\n![20230516162259](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230516162259.png)\n\n这是一些无广告版本的speedtest：\n- http://mybroadbandspeed.speedtestcustom.com/\n- http://aaaaaa.speedtestcustom.com/\n- http://rixcloud.speedtestcustom.com/\n- http://cordcloud.speedtestcustom.com/\n\n## 2. YouTube 视频统计信息\n\n## 3. 全节点测速\nhttps://github.com/tindy2013/stairspeedtest-reborn\n\n- 双击webgui.bat脚本进行测试\n- 结果是一张测速图片，在result文件夹中\n\n------------------------\n也可以运行stairspeedtest.exe进行测速\n\n## nodesCatch V2.0 全自动一键节点测速工具\n[github仓库下载](https://github.com/bulianglin/demo)\n[nodescatch](https://github.com/kivid/nodesCatch)\n\n## v2ray的测速功能也挺好用，尤其是真链接延迟测试\n\n\n## 4. 参考\n[测速指南 | 如何测试自己的科学上网速度？](https://merlinblog.xyz/wiki/speedtest.html)\n[nodesCatch V2.0 全自动一键节点测速工具](https://bulianglin.com/archives/nodescatch.html)\n[永久有效！让你有用不完的免费节点，揭秘博主分享的免费节点是哪里来的，学会了你也可以给别人分享节点，全平台客户端可用 v2ray|clash|ShadowRocket|Surge|trojan](https://www.youtube.com/watch?v=AGk4qw3n9wk&ab_channel=%E4%B8%8D%E8%89%AF%E6%9E%97)\n[免费节点自动抓取软件，8K秒开，一键全自动节点测速软件分享，快速检测节点池免费节点是否可用，从此再也不用担心失联了，支持ss、ssr、Vmess、Trojan、socks5、http、https测速](https://www.youtube.com/watch?v=aSR6OuqtFdU&ab_channel=%E4%B8%8D%E8%89%AF%E6%9E%97)\n[nodesCatch V2.0节点筛选工具使用教程](https://oliverhou.com/archives/213)\n\n-------------------------\n[google 搜索节点池](https://www.google.com.hk/search?q=inurl%3Aclash%2Fproxies)","slug":"机场或节点测速","published":1,"updated":"2024-04-25T17:26:47.623Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvjbaqk9005h0vn11bqc2eph","content":"<h2 id=\"1-单节点测速\"><a href=\"#1-单节点测速\" class=\"headerlink\" title=\"1. 单节点测速\"></a>1. 单节点测速</h2><p><a href=\"https://www.speedtest.net/\">speedtest</a><span id=\"more\"></span></p>\n<p>在这里添加规则，指定当前是节点测速还是本地测速<br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230516162259.png\" alt=\"20230516162259\"></p>\n<p>这是一些无广告版本的speedtest：</p>\n<ul>\n<li><a href=\"http://mybroadbandspeed.speedtestcustom.com/\">http://mybroadbandspeed.speedtestcustom.com/</a></li>\n<li><a href=\"http://aaaaaa.speedtestcustom.com/\">http://aaaaaa.speedtestcustom.com/</a></li>\n<li><a href=\"http://rixcloud.speedtestcustom.com/\">http://rixcloud.speedtestcustom.com/</a></li>\n<li><a href=\"http://cordcloud.speedtestcustom.com/\">http://cordcloud.speedtestcustom.com/</a></li>\n</ul>\n<h2 id=\"2-YouTube-视频统计信息\"><a href=\"#2-YouTube-视频统计信息\" class=\"headerlink\" title=\"2. YouTube 视频统计信息\"></a>2. YouTube 视频统计信息</h2><h2 id=\"3-全节点测速\"><a href=\"#3-全节点测速\" class=\"headerlink\" title=\"3. 全节点测速\"></a>3. 全节点测速</h2><p><a href=\"https://github.com/tindy2013/stairspeedtest-reborn\">https://github.com/tindy2013/stairspeedtest-reborn</a></p>\n<ul>\n<li>双击webgui.bat脚本进行测试</li>\n<li>结果是一张测速图片，在result文件夹中</li>\n</ul>\n<hr>\n<p>也可以运行stairspeedtest.exe进行测速</p>\n<h2 id=\"nodesCatch-V2-0-全自动一键节点测速工具\"><a href=\"#nodesCatch-V2-0-全自动一键节点测速工具\" class=\"headerlink\" title=\"nodesCatch V2.0 全自动一键节点测速工具\"></a>nodesCatch V2.0 全自动一键节点测速工具</h2><p><a href=\"https://github.com/bulianglin/demo\">github仓库下载</a><br><a href=\"https://github.com/kivid/nodesCatch\">nodescatch</a></p>\n<h2 id=\"v2ray的测速功能也挺好用，尤其是真链接延迟测试\"><a href=\"#v2ray的测速功能也挺好用，尤其是真链接延迟测试\" class=\"headerlink\" title=\"v2ray的测速功能也挺好用，尤其是真链接延迟测试\"></a>v2ray的测速功能也挺好用，尤其是真链接延迟测试</h2><h2 id=\"4-参考\"><a href=\"#4-参考\" class=\"headerlink\" title=\"4. 参考\"></a>4. 参考</h2><p><a href=\"https://merlinblog.xyz/wiki/speedtest.html\">测速指南 | 如何测试自己的科学上网速度？</a><br><a href=\"https://bulianglin.com/archives/nodescatch.html\">nodesCatch V2.0 全自动一键节点测速工具</a><br><a href=\"https://www.youtube.com/watch?v=AGk4qw3n9wk&ab_channel=%E4%B8%8D%E8%89%AF%E6%9E%97\">永久有效！让你有用不完的免费节点，揭秘博主分享的免费节点是哪里来的，学会了你也可以给别人分享节点，全平台客户端可用 v2ray|clash|ShadowRocket|Surge|trojan</a><br><a href=\"https://www.youtube.com/watch?v=aSR6OuqtFdU&ab_channel=%E4%B8%8D%E8%89%AF%E6%9E%97\">免费节点自动抓取软件，8K秒开，一键全自动节点测速软件分享，快速检测节点池免费节点是否可用，从此再也不用担心失联了，支持ss、ssr、Vmess、Trojan、socks5、http、https测速</a><br><a href=\"https://oliverhou.com/archives/213\">nodesCatch V2.0节点筛选工具使用教程</a></p>\n<hr>\n<p><a href=\"https://www.google.com.hk/search?q=inurl:clash/proxies\">google 搜索节点池</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"1-单节点测速\"><a href=\"#1-单节点测速\" class=\"headerlink\" title=\"1. 单节点测速\"></a>1. 单节点测速</h2><p><a href=\"https://www.speedtest.net/\">speedtest</a></p>","more":"<p></p>\n<p>在这里添加规则，指定当前是节点测速还是本地测速<br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230516162259.png\" alt=\"20230516162259\"></p>\n<p>这是一些无广告版本的speedtest：</p>\n<ul>\n<li><a href=\"http://mybroadbandspeed.speedtestcustom.com/\">http://mybroadbandspeed.speedtestcustom.com/</a></li>\n<li><a href=\"http://aaaaaa.speedtestcustom.com/\">http://aaaaaa.speedtestcustom.com/</a></li>\n<li><a href=\"http://rixcloud.speedtestcustom.com/\">http://rixcloud.speedtestcustom.com/</a></li>\n<li><a href=\"http://cordcloud.speedtestcustom.com/\">http://cordcloud.speedtestcustom.com/</a></li>\n</ul>\n<h2 id=\"2-YouTube-视频统计信息\"><a href=\"#2-YouTube-视频统计信息\" class=\"headerlink\" title=\"2. YouTube 视频统计信息\"></a>2. YouTube 视频统计信息</h2><h2 id=\"3-全节点测速\"><a href=\"#3-全节点测速\" class=\"headerlink\" title=\"3. 全节点测速\"></a>3. 全节点测速</h2><p><a href=\"https://github.com/tindy2013/stairspeedtest-reborn\">https://github.com/tindy2013/stairspeedtest-reborn</a></p>\n<ul>\n<li>双击webgui.bat脚本进行测试</li>\n<li>结果是一张测速图片，在result文件夹中</li>\n</ul>\n<hr>\n<p>也可以运行stairspeedtest.exe进行测速</p>\n<h2 id=\"nodesCatch-V2-0-全自动一键节点测速工具\"><a href=\"#nodesCatch-V2-0-全自动一键节点测速工具\" class=\"headerlink\" title=\"nodesCatch V2.0 全自动一键节点测速工具\"></a>nodesCatch V2.0 全自动一键节点测速工具</h2><p><a href=\"https://github.com/bulianglin/demo\">github仓库下载</a><br><a href=\"https://github.com/kivid/nodesCatch\">nodescatch</a></p>\n<h2 id=\"v2ray的测速功能也挺好用，尤其是真链接延迟测试\"><a href=\"#v2ray的测速功能也挺好用，尤其是真链接延迟测试\" class=\"headerlink\" title=\"v2ray的测速功能也挺好用，尤其是真链接延迟测试\"></a>v2ray的测速功能也挺好用，尤其是真链接延迟测试</h2><h2 id=\"4-参考\"><a href=\"#4-参考\" class=\"headerlink\" title=\"4. 参考\"></a>4. 参考</h2><p><a href=\"https://merlinblog.xyz/wiki/speedtest.html\">测速指南 | 如何测试自己的科学上网速度？</a><br><a href=\"https://bulianglin.com/archives/nodescatch.html\">nodesCatch V2.0 全自动一键节点测速工具</a><br><a href=\"https://www.youtube.com/watch?v=AGk4qw3n9wk&ab_channel=%E4%B8%8D%E8%89%AF%E6%9E%97\">永久有效！让你有用不完的免费节点，揭秘博主分享的免费节点是哪里来的，学会了你也可以给别人分享节点，全平台客户端可用 v2ray|clash|ShadowRocket|Surge|trojan</a><br><a href=\"https://www.youtube.com/watch?v=aSR6OuqtFdU&ab_channel=%E4%B8%8D%E8%89%AF%E6%9E%97\">免费节点自动抓取软件，8K秒开，一键全自动节点测速软件分享，快速检测节点池免费节点是否可用，从此再也不用担心失联了，支持ss、ssr、Vmess、Trojan、socks5、http、https测速</a><br><a href=\"https://oliverhou.com/archives/213\">nodesCatch V2.0节点筛选工具使用教程</a></p>\n<hr>\n<p><a href=\"https://www.google.com.hk/search?q=inurl:clash/proxies\">google 搜索节点池</a></p>"},{"title":"清空输入缓冲区","date":"2023-11-16T14:56:00.000Z","_content":"在C语言中，`fflush(stdin)` 和 `rewind(stdin)` 主要用于清空输入缓冲区。然而，它们并不是标准C的一部分，因此在不同的编译器和平台上可能表现不同。<!--more-->\n\n在标准C中，`fflush(stdin)` 的行为是未定义的，因为 `fflush` 函数的主要目的是刷新输出缓冲区，而不是清空输入缓冲区。因此，不建议在输入流上使用 `fflush`。\n\n对于 `rewind(stdin)`，同样地，它也可能在一些情况下表现不一致，因为 `rewind` 主要设计用于文件流，而 `stdin` 是一个标准输入流。\n\n对于如下代码：\n```c\n#include <stdio.h>\n\nint main()\n{\n    int i, ret;\n    while (fflush(stdin), (ret = scanf(\"%d\", &i)) != EOF)\n        printf(\"i = %d\\n\", i);\n    return 0;\n}\n```\n\n可以使用如下替代方案：\n```c\n#include <stdio.h>\n\nint main() {\n    int i, ret;\n    \n    while ((ret = scanf(\"%d\", &i)) != EOF) {\n        if (ret == 0) {\n            // Handle invalid input (non-integer)\n            printf(\"Invalid input. Please enter an integer.\\n\");\n\n            // Clear the input buffer\n            while (getchar() != '\\n');\n        } else {\n            printf(\"i = %d\\n\", i);\n        }\n    }\n\n    return 0;\n}\n```\n\n这个修改后的代码在输入无效数据（非整数）时会进行错误处理，并清空输入缓冲区。通过使用 `getchar()` 循环读取并丢弃字符，直到遇到换行符为止，可以确保输入缓冲区中的无效数据被清空。\n","source":"_posts/清空输入缓冲区.md","raw":"---\ntitle: 清空输入缓冲区\ndate: 2023-11-16 14:56:00\ntags:\n    - C/C++\n---\n在C语言中，`fflush(stdin)` 和 `rewind(stdin)` 主要用于清空输入缓冲区。然而，它们并不是标准C的一部分，因此在不同的编译器和平台上可能表现不同。<!--more-->\n\n在标准C中，`fflush(stdin)` 的行为是未定义的，因为 `fflush` 函数的主要目的是刷新输出缓冲区，而不是清空输入缓冲区。因此，不建议在输入流上使用 `fflush`。\n\n对于 `rewind(stdin)`，同样地，它也可能在一些情况下表现不一致，因为 `rewind` 主要设计用于文件流，而 `stdin` 是一个标准输入流。\n\n对于如下代码：\n```c\n#include <stdio.h>\n\nint main()\n{\n    int i, ret;\n    while (fflush(stdin), (ret = scanf(\"%d\", &i)) != EOF)\n        printf(\"i = %d\\n\", i);\n    return 0;\n}\n```\n\n可以使用如下替代方案：\n```c\n#include <stdio.h>\n\nint main() {\n    int i, ret;\n    \n    while ((ret = scanf(\"%d\", &i)) != EOF) {\n        if (ret == 0) {\n            // Handle invalid input (non-integer)\n            printf(\"Invalid input. Please enter an integer.\\n\");\n\n            // Clear the input buffer\n            while (getchar() != '\\n');\n        } else {\n            printf(\"i = %d\\n\", i);\n        }\n    }\n\n    return 0;\n}\n```\n\n这个修改后的代码在输入无效数据（非整数）时会进行错误处理，并清空输入缓冲区。通过使用 `getchar()` 循环读取并丢弃字符，直到遇到换行符为止，可以确保输入缓冲区中的无效数据被清空。\n","slug":"清空输入缓冲区","published":1,"updated":"2024-04-25T17:26:46.063Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvjbaqka005k0vn1ci62b84f","content":"<p>在C语言中，<code>fflush(stdin)</code> 和 <code>rewind(stdin)</code> 主要用于清空输入缓冲区。然而，它们并不是标准C的一部分，因此在不同的编译器和平台上可能表现不同。<span id=\"more\"></span></p>\n<p>在标准C中，<code>fflush(stdin)</code> 的行为是未定义的，因为 <code>fflush</code> 函数的主要目的是刷新输出缓冲区，而不是清空输入缓冲区。因此，不建议在输入流上使用 <code>fflush</code>。</p>\n<p>对于 <code>rewind(stdin)</code>，同样地，它也可能在一些情况下表现不一致，因为 <code>rewind</code> 主要设计用于文件流，而 <code>stdin</code> 是一个标准输入流。</p>\n<p>对于如下代码：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> i, ret;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (fflush(<span class=\"built_in\">stdin</span>), (ret = <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;i)) != EOF)</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;i = %d\\n&quot;</span>, i);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以使用如下替代方案：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> i, ret;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span> ((ret = <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;i)) != EOF) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ret == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Handle invalid input (non-integer)</span></span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Invalid input. Please enter an integer.\\n&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// Clear the input buffer</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (getchar() != <span class=\"string\">&#x27;\\n&#x27;</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;i = %d\\n&quot;</span>, i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个修改后的代码在输入无效数据（非整数）时会进行错误处理，并清空输入缓冲区。通过使用 <code>getchar()</code> 循环读取并丢弃字符，直到遇到换行符为止，可以确保输入缓冲区中的无效数据被清空。</p>\n","site":{"data":{}},"excerpt":"<p>在C语言中，<code>fflush(stdin)</code> 和 <code>rewind(stdin)</code> 主要用于清空输入缓冲区。然而，它们并不是标准C的一部分，因此在不同的编译器和平台上可能表现不同。</p>","more":"<p></p>\n<p>在标准C中，<code>fflush(stdin)</code> 的行为是未定义的，因为 <code>fflush</code> 函数的主要目的是刷新输出缓冲区，而不是清空输入缓冲区。因此，不建议在输入流上使用 <code>fflush</code>。</p>\n<p>对于 <code>rewind(stdin)</code>，同样地，它也可能在一些情况下表现不一致，因为 <code>rewind</code> 主要设计用于文件流，而 <code>stdin</code> 是一个标准输入流。</p>\n<p>对于如下代码：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> i, ret;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (fflush(<span class=\"built_in\">stdin</span>), (ret = <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;i)) != EOF)</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;i = %d\\n&quot;</span>, i);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以使用如下替代方案：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> i, ret;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span> ((ret = <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;i)) != EOF) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ret == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Handle invalid input (non-integer)</span></span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Invalid input. Please enter an integer.\\n&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// Clear the input buffer</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (getchar() != <span class=\"string\">&#x27;\\n&#x27;</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;i = %d\\n&quot;</span>, i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个修改后的代码在输入无效数据（非整数）时会进行错误处理，并清空输入缓冲区。通过使用 <code>getchar()</code> 循环读取并丢弃字符，直到遇到换行符为止，可以确保输入缓冲区中的无效数据被清空。</p>"},{"title":"用markdown书写数学公式","date":"2021-07-02T21:20:21.000Z","toc":1,"declare":true,"_content":"首先在所在themes/_config.yml中找到mathjax，将其属性改为true。之后便可以使用数学公式了。<!--more-->\n#### 行内与独行\n- 行内公式：将公式插入到本行内，符号：`$公式内容$`，如：$xyz$\n- 独行公式：将公式插入到新的一行内，并且居中，符号：`$$公式内容$$`，如：$$xyz$$\n\n#### 上标和下标组合\n- 上标符号，符号：`^`，如：$x^4$\n- 下标符号，符号：`_`，如：$x_1$\n- 组合符号，符号：`{}`，如：${x}^{y}_{ij}$\n\n#### 汉字和字体格式\n- 文本：`\\text{}`，如：$V_{\\text{初始}}$\n- 加粗：`\\mathbf{}`，如：$\\mathbf{A}$\n- 数学手写体：`\\mathcal{}`，如：$\\mathcal{A}$\n- 黑板粗体：`\\mathbb{}`，如：$\\mathbb{A}$\n- 花体：`\\mathscr{}`，如：$\\mathscr{A}$\n- 罗马体：`\\mathrm{}`，如：$\\mathrm{A}$\n\n\n- 下划线：`\\underline{}`，如：$\\underline{x+y}$\n- 上划线：`\\overline{}`，如：$\\overline{x+y}$\n- 标签：`\\tag{}`，如：$$\\tag{3}$$\n- 自动添加标签：`\\begin{equation} \\end{equation}`，如：$$\\begin{equation} x \\end{equation}$$\n- 上大括号：`\\overbrace{}`，如：$\\overbrace{a+b+c+d}^{2.0}$\n- 下大括号：`\\underbrace{}`，如：$a+\\underbrace{b+c}_{1.0}+d$\n- 上位符号：`\\stackrel{上位符号}{基位符号}`，如：$\\vec{x}\\stackrel{\\mathrm{def}}{=}{x_1,\\dots,x_n}$\n- 上下标位置：`\\sideset控制四角上下标，\\overset与\\underset控制上下标居中`，如：$\\sideset{^a_b}{^c_d}A$,$\\overset{100}A$,$\\underset{100}A$,$\\overset{100}{\\underset{200}A}$\n\n- 分段函数：$$f(x) = \\begin{cases}\n    0, & \\text{if } x < 0 \\\\\n    x, & \\text{if } x \\geq 0\n\\end{cases}$$\n\n\n#### 占位符\n- 两个quad空格，符号：`\\qquad`，如：$x \\qquad y$\n- quad空格，符号：`\\quad`，如：$x \\quad y$\n\n#### 定界符与组合\n- 括号：`() \\big(\\big) \\Big(\\Big) \\bigg(\\bigg) \\Bigg(\\Bigg)`，如：$() \\big(\\big) \\Big(\\Big) \\bigg(\\bigg) \\Bigg(\\Bigg)$\n- 中括号：`\\left[ \\right]`，如：$\\left[x+y\\right]$\n- 大号的中括号：`\\bigl[ \\bigr]`，如：$\\bigl[x+y\\bigr]$\n- 大括号，符号：`\\{ \\}`，如：$\\{x+y\\}$\n- 自适应括号，符号：`\\left \\right`，如：$\\left(x\\right)$，$\\left(x_{yz}\\right)$\n- 组合公式，符号：`{上位公式 \\choose 下位公式}`，如：${n+1 \\choose k}={n \\choose k}+{n \\choose k-1}$\n\n#### 四则运算\n- 加减运算，符号：`\\pm`，如：$x \\pm y=z$\n- 减加运算，符号：`\\mp`，如：$x \\mp y=z$\n- 乘法运算，符号：`\\times`，如：$x \\times y=z$\n- 点乘运算，符号：`\\cdot`，如：$x \\cdot y=z$\n- 星乘运算，符号：`\\ast`，如：$x \\ast y=z$\n- 除法运算，符号：`\\div`，如：$x \\div y=z$\n- 分式表示，符号：`\\frac{分子}{分母}`，如：$\\frac{x+y}{y+z}$\n- 分式表示，符号：`{分子} \\voer {分母}`，如：${x+y} \\over {y+z}$\n- 绝对值表示，符号：`||`，如：$|x+y|$\n\n#### 高级运算\n- 开二次方运算，符号：`\\sqrt`，如：$\\sqrt x$\n- 开方运算，符号：`\\sqrt[开方数]{被开方数}`，如：$\\sqrt[3]{x+y}$\n- 对数运算，符号：`\\log`，如：$\\log(x)$\n- 极限运算，符号：`\\lim`，如：$\\lim^{x \\to \\infty}_{y \\to 0}{\\frac{x}{y}}$\n- 求和运算，符号：`\\sum`，如：$\\sum^{x \\to \\infty}_{y \\to 0}{\\frac{x}{y}}$\n- 求积运算，符号：`\\prod`, 如：$\\prod^N_{i=1}x_i$\n- 积分运算，符号：`\\int`，如：$\\int^{\\infty}_{0}{xdx}$\n- 微分运算，符号：`\\partial`，如：$\\frac{\\partial x}{\\partial y}$\n- 矩阵表示，符号：`\\begin{bmatrix} \\end{bmatrix}`，如：$$\\begin{bmatrix}\n    a & b & c \\\\\n    d & e & f \\\\\n    g & h & i \\\\\n\\end{bmatrix}$$\n\n- 梯度算子，符号：`\\nabla`，如$\\nabla$\n- 向上取整，符号：`\\lceil x \\rceil`，如$\\lceil x \\rceil$\n- 向下取整，符号：`\\lfloor x \\rfloor`，如$\\lfloor x \\rfloor$\n\n#### 逻辑运算\n- 大于等于运算，符号：`\\geq`，如：$x+y \\geq z$\n- 小于等于运算，符号：`\\leq`，如：$x+y \\leq z$\n- 不等于运算，符号：`\\neq`，如：$x+y \\neq z$\n- 不大于等于运算，符号：`\\ngeq`，如：$x+y \\ngeq z$\n- 不大于等于运算，符号：`\\not\\geq`，如：$x+y \\not\\geq z$\n- 不小于等于运算，符号：`\\nleq`，如：$x+y \\nleq z$\n- 不小于等于运算，符号：`\\not\\leq`，如：$x+y \\not\\leq z$\n- 约等于运算，符号：`\\approx`，如：$x+y \\approx z$\n- 恒定等于运算，符号：`\\equiv`，如：$x+y \\equiv z$\n\n#### 集合运算\n- 属于运算，符号：`\\in`，如：$x \\in y$\n- 不属于运算，符号：`\\notin`，如：$x \\notin y$\n- 不属于运算，符号：`\\not\\in`，如：$x \\not\\in y$\n- 子集运算，符号：`\\subset`，如：$x \\subset y$\n- 子集运算，符号：`\\supset`，如：$x \\supset y$\n- 真子集运算，符号：`\\subseteq`，如：$x \\subseteq y$\n- 非真子集运算，符号：`\\subsetneq`，如：$x \\subsetneq y$\n- 真子集运算，符号：`\\supseteq`，如：$x \\supseteq y$\n- 非真子集运算，符号：`\\supsetneq`，如：$x \\supsetneq y$\n- 非子集运算，符号：`\\not\\subset`，如：$x \\not\\subset y$\n- 非子集运算，符号：`\\not\\supset`，如：$x \\not\\supset y$\n- 并集运算，符号：`\\cup`，如：$x \\cup y$\n- 交集运算，符号：`\\cap`，如：$x \\cap y$\n- 差集运算，符号：`\\setminus`，如：$x \\setminus y$\n- 同或运算，符号：`\\bigodot`，如：$x \\bigodot y$\n- 同与运算，符号：`\\bigotimes`，如：$x \\bigotimes y$\n- 空集，符号：`\\emptyset`，如：$\\emptyset$\n- 任意符号，符号：`\\forall`，如：$\\forall i$\n- 存在符号，符号：`\\exists`，如$\\exists i$\n\n#### 数字符号\n- 无穷，符号：`\\infty`，如：$\\infty$\n- 虚数，符号：`\\imath`，如：$\\imath$\n- 虚数，符号：`\\jmath`，如：$\\jmath$\n- 数学符号，符号：`\\hat{a}`，如：$\\hat{a}$\n- 数学符号，符号：`\\check{a}`，如：$\\check{a}$\n- 数学符号，符号：`\\breve{a}`，如：$\\breve{a}$\n- 数学符号，符号：`\\tilde{a}`，如：$\\tilde{a}$\n- 数学符号，符号：`\\bar{a}`，如：$\\bar{a}$\n- 矢量符号，符号：`\\vec{a}`，如：$\\vec{a}$\n- 数学符号，符号：`\\acute{a}`，如：$\\acute{a}$\n- 数学符号，符号：`\\grave{a}`，如：$\\grave{a}$\n- 数学符号，符号：`\\mathring{a}`，如：$\\mathring{a}$\n- 一阶导数符号，符号：`\\dot{a}`，如：$\\dot{a}$\n- 二阶导数符号，符号：`\\ddot{a}`，如：$\\ddot{a}$\n- 上箭头，符号：`\\uparrow`，如：$\\uparrow$\n- 上箭头，符号：`\\Uparrow`，如：$\\Uparrow$\n- 下箭头，符号：`\\downarrow`，如：$\\downarrow$\n- 下箭头，符号：`\\Downarrow`，如：$\\Downarrow$\n- 左箭头，符号：`\\leftarrow`，如：$\\leftarrow$\n- 左箭头，符号：`\\Leftarrow`，如：$\\Leftarrow$\n- 右箭头，符号：`\\rightarrow`，如：$\\rightarrow$\n- 右箭头，符号：`\\Rightarrow`，如：$\\Rightarrow$\n- 底端对齐的省略号，符号：`\\ldots`，如：$1,2,\\ldots,n$\n- 中线对齐的省略号，符号：`\\cdots`，如：$x_1^2 + x_2^2 + \\cdots + x_n^2$\n- 竖直对齐的省略号，符号：`\\vdots`，如：$\\vdots$\n- 斜对齐的省略号，符号：`\\ddots`，如：$\\ddots$\n- 度数符号：`\\circ`，如：$A^\\circ$\n\n#### 希腊字母\n|字母|实现|字母|实现|\n|:---:|:---:|:---:|:---:|\n|$A$|`A`|$\\alpha$|`\\alpha`|\n|$B$|`B`|$\\beta$|`\\beta`|\n|$\\Gamma$|`\\Gamma`|$\\gamma$|`\\gamma`|\n|$\\Delta$|`\\Delta`|$\\delta$|`\\delta`|\n|$E$|`E`|$\\epsilon$|`\\epsilon`|\n|$Z$|`Z`|$\\zeta$|`\\zeta`|\n|$H$|`H`|$\\eta$|`\\eta`|\n|$\\Theta$|`\\Theta`|$\\theta$|`\\theta`|\n|$I$|`I`|$\\iota$|`\\iota`|\n|$K$|`K`|$\\lambda$|`\\lambda`|\n|$M$|`M`|$\\mu$|`\\mu`|\n|$N$|`N`|$\\nu$|`\\nu`|\n|$\\Xi$|`\\Xi`|$\\xi$|`\\xi`|\n|$O$|`O`|$\\omicron$|`\\omicron`|\n|$\\Pi$|`\\Pi`|$\\pi$|`\\pi`|\n|$P$|`P`|$\\rho$|`\\rho`|\n|$\\Sigma$|`\\Sigma`|$\\sigma$|`\\sigma`|\n|$T$|`T`|$\\tau$|`\\tau`|\n|$\\Upsilon$|`\\Upsilon`|$\\upsilon$|`\\upsilon`|\n|$\\Phi$|`\\Phi`|$\\phi$|`\\phi`|\n|$X$|`X`|$\\chi$|`\\chi`|\n|$\\Psi$|`\\Psi`|$\\psi$|`\\psi`|\n|$\\Omega$|`\\Omega`|$\\omega$|`\\omega`|\n\n#### 参考文章\n[Markdown数学公式语法](https://www.cnblogs.com/xym4869/p/11282586.html)\n[Markdown数学公式语法华为云](https://www.huaweicloud.com/articles/2a62b09a875890613673074063fe9d32.html)\n","source":"_posts/用markdown书写数学公式.md","raw":"---\ntitle: 用markdown书写数学公式\ndate: 2021-07-02 21:20:21\ntags:\n    - markdown\n    - mathjax\n    - 数学公式\ntoc: 1\ndeclare: true\n---\n首先在所在themes/_config.yml中找到mathjax，将其属性改为true。之后便可以使用数学公式了。<!--more-->\n#### 行内与独行\n- 行内公式：将公式插入到本行内，符号：`$公式内容$`，如：$xyz$\n- 独行公式：将公式插入到新的一行内，并且居中，符号：`$$公式内容$$`，如：$$xyz$$\n\n#### 上标和下标组合\n- 上标符号，符号：`^`，如：$x^4$\n- 下标符号，符号：`_`，如：$x_1$\n- 组合符号，符号：`{}`，如：${x}^{y}_{ij}$\n\n#### 汉字和字体格式\n- 文本：`\\text{}`，如：$V_{\\text{初始}}$\n- 加粗：`\\mathbf{}`，如：$\\mathbf{A}$\n- 数学手写体：`\\mathcal{}`，如：$\\mathcal{A}$\n- 黑板粗体：`\\mathbb{}`，如：$\\mathbb{A}$\n- 花体：`\\mathscr{}`，如：$\\mathscr{A}$\n- 罗马体：`\\mathrm{}`，如：$\\mathrm{A}$\n\n\n- 下划线：`\\underline{}`，如：$\\underline{x+y}$\n- 上划线：`\\overline{}`，如：$\\overline{x+y}$\n- 标签：`\\tag{}`，如：$$\\tag{3}$$\n- 自动添加标签：`\\begin{equation} \\end{equation}`，如：$$\\begin{equation} x \\end{equation}$$\n- 上大括号：`\\overbrace{}`，如：$\\overbrace{a+b+c+d}^{2.0}$\n- 下大括号：`\\underbrace{}`，如：$a+\\underbrace{b+c}_{1.0}+d$\n- 上位符号：`\\stackrel{上位符号}{基位符号}`，如：$\\vec{x}\\stackrel{\\mathrm{def}}{=}{x_1,\\dots,x_n}$\n- 上下标位置：`\\sideset控制四角上下标，\\overset与\\underset控制上下标居中`，如：$\\sideset{^a_b}{^c_d}A$,$\\overset{100}A$,$\\underset{100}A$,$\\overset{100}{\\underset{200}A}$\n\n- 分段函数：$$f(x) = \\begin{cases}\n    0, & \\text{if } x < 0 \\\\\n    x, & \\text{if } x \\geq 0\n\\end{cases}$$\n\n\n#### 占位符\n- 两个quad空格，符号：`\\qquad`，如：$x \\qquad y$\n- quad空格，符号：`\\quad`，如：$x \\quad y$\n\n#### 定界符与组合\n- 括号：`() \\big(\\big) \\Big(\\Big) \\bigg(\\bigg) \\Bigg(\\Bigg)`，如：$() \\big(\\big) \\Big(\\Big) \\bigg(\\bigg) \\Bigg(\\Bigg)$\n- 中括号：`\\left[ \\right]`，如：$\\left[x+y\\right]$\n- 大号的中括号：`\\bigl[ \\bigr]`，如：$\\bigl[x+y\\bigr]$\n- 大括号，符号：`\\{ \\}`，如：$\\{x+y\\}$\n- 自适应括号，符号：`\\left \\right`，如：$\\left(x\\right)$，$\\left(x_{yz}\\right)$\n- 组合公式，符号：`{上位公式 \\choose 下位公式}`，如：${n+1 \\choose k}={n \\choose k}+{n \\choose k-1}$\n\n#### 四则运算\n- 加减运算，符号：`\\pm`，如：$x \\pm y=z$\n- 减加运算，符号：`\\mp`，如：$x \\mp y=z$\n- 乘法运算，符号：`\\times`，如：$x \\times y=z$\n- 点乘运算，符号：`\\cdot`，如：$x \\cdot y=z$\n- 星乘运算，符号：`\\ast`，如：$x \\ast y=z$\n- 除法运算，符号：`\\div`，如：$x \\div y=z$\n- 分式表示，符号：`\\frac{分子}{分母}`，如：$\\frac{x+y}{y+z}$\n- 分式表示，符号：`{分子} \\voer {分母}`，如：${x+y} \\over {y+z}$\n- 绝对值表示，符号：`||`，如：$|x+y|$\n\n#### 高级运算\n- 开二次方运算，符号：`\\sqrt`，如：$\\sqrt x$\n- 开方运算，符号：`\\sqrt[开方数]{被开方数}`，如：$\\sqrt[3]{x+y}$\n- 对数运算，符号：`\\log`，如：$\\log(x)$\n- 极限运算，符号：`\\lim`，如：$\\lim^{x \\to \\infty}_{y \\to 0}{\\frac{x}{y}}$\n- 求和运算，符号：`\\sum`，如：$\\sum^{x \\to \\infty}_{y \\to 0}{\\frac{x}{y}}$\n- 求积运算，符号：`\\prod`, 如：$\\prod^N_{i=1}x_i$\n- 积分运算，符号：`\\int`，如：$\\int^{\\infty}_{0}{xdx}$\n- 微分运算，符号：`\\partial`，如：$\\frac{\\partial x}{\\partial y}$\n- 矩阵表示，符号：`\\begin{bmatrix} \\end{bmatrix}`，如：$$\\begin{bmatrix}\n    a & b & c \\\\\n    d & e & f \\\\\n    g & h & i \\\\\n\\end{bmatrix}$$\n\n- 梯度算子，符号：`\\nabla`，如$\\nabla$\n- 向上取整，符号：`\\lceil x \\rceil`，如$\\lceil x \\rceil$\n- 向下取整，符号：`\\lfloor x \\rfloor`，如$\\lfloor x \\rfloor$\n\n#### 逻辑运算\n- 大于等于运算，符号：`\\geq`，如：$x+y \\geq z$\n- 小于等于运算，符号：`\\leq`，如：$x+y \\leq z$\n- 不等于运算，符号：`\\neq`，如：$x+y \\neq z$\n- 不大于等于运算，符号：`\\ngeq`，如：$x+y \\ngeq z$\n- 不大于等于运算，符号：`\\not\\geq`，如：$x+y \\not\\geq z$\n- 不小于等于运算，符号：`\\nleq`，如：$x+y \\nleq z$\n- 不小于等于运算，符号：`\\not\\leq`，如：$x+y \\not\\leq z$\n- 约等于运算，符号：`\\approx`，如：$x+y \\approx z$\n- 恒定等于运算，符号：`\\equiv`，如：$x+y \\equiv z$\n\n#### 集合运算\n- 属于运算，符号：`\\in`，如：$x \\in y$\n- 不属于运算，符号：`\\notin`，如：$x \\notin y$\n- 不属于运算，符号：`\\not\\in`，如：$x \\not\\in y$\n- 子集运算，符号：`\\subset`，如：$x \\subset y$\n- 子集运算，符号：`\\supset`，如：$x \\supset y$\n- 真子集运算，符号：`\\subseteq`，如：$x \\subseteq y$\n- 非真子集运算，符号：`\\subsetneq`，如：$x \\subsetneq y$\n- 真子集运算，符号：`\\supseteq`，如：$x \\supseteq y$\n- 非真子集运算，符号：`\\supsetneq`，如：$x \\supsetneq y$\n- 非子集运算，符号：`\\not\\subset`，如：$x \\not\\subset y$\n- 非子集运算，符号：`\\not\\supset`，如：$x \\not\\supset y$\n- 并集运算，符号：`\\cup`，如：$x \\cup y$\n- 交集运算，符号：`\\cap`，如：$x \\cap y$\n- 差集运算，符号：`\\setminus`，如：$x \\setminus y$\n- 同或运算，符号：`\\bigodot`，如：$x \\bigodot y$\n- 同与运算，符号：`\\bigotimes`，如：$x \\bigotimes y$\n- 空集，符号：`\\emptyset`，如：$\\emptyset$\n- 任意符号，符号：`\\forall`，如：$\\forall i$\n- 存在符号，符号：`\\exists`，如$\\exists i$\n\n#### 数字符号\n- 无穷，符号：`\\infty`，如：$\\infty$\n- 虚数，符号：`\\imath`，如：$\\imath$\n- 虚数，符号：`\\jmath`，如：$\\jmath$\n- 数学符号，符号：`\\hat{a}`，如：$\\hat{a}$\n- 数学符号，符号：`\\check{a}`，如：$\\check{a}$\n- 数学符号，符号：`\\breve{a}`，如：$\\breve{a}$\n- 数学符号，符号：`\\tilde{a}`，如：$\\tilde{a}$\n- 数学符号，符号：`\\bar{a}`，如：$\\bar{a}$\n- 矢量符号，符号：`\\vec{a}`，如：$\\vec{a}$\n- 数学符号，符号：`\\acute{a}`，如：$\\acute{a}$\n- 数学符号，符号：`\\grave{a}`，如：$\\grave{a}$\n- 数学符号，符号：`\\mathring{a}`，如：$\\mathring{a}$\n- 一阶导数符号，符号：`\\dot{a}`，如：$\\dot{a}$\n- 二阶导数符号，符号：`\\ddot{a}`，如：$\\ddot{a}$\n- 上箭头，符号：`\\uparrow`，如：$\\uparrow$\n- 上箭头，符号：`\\Uparrow`，如：$\\Uparrow$\n- 下箭头，符号：`\\downarrow`，如：$\\downarrow$\n- 下箭头，符号：`\\Downarrow`，如：$\\Downarrow$\n- 左箭头，符号：`\\leftarrow`，如：$\\leftarrow$\n- 左箭头，符号：`\\Leftarrow`，如：$\\Leftarrow$\n- 右箭头，符号：`\\rightarrow`，如：$\\rightarrow$\n- 右箭头，符号：`\\Rightarrow`，如：$\\Rightarrow$\n- 底端对齐的省略号，符号：`\\ldots`，如：$1,2,\\ldots,n$\n- 中线对齐的省略号，符号：`\\cdots`，如：$x_1^2 + x_2^2 + \\cdots + x_n^2$\n- 竖直对齐的省略号，符号：`\\vdots`，如：$\\vdots$\n- 斜对齐的省略号，符号：`\\ddots`，如：$\\ddots$\n- 度数符号：`\\circ`，如：$A^\\circ$\n\n#### 希腊字母\n|字母|实现|字母|实现|\n|:---:|:---:|:---:|:---:|\n|$A$|`A`|$\\alpha$|`\\alpha`|\n|$B$|`B`|$\\beta$|`\\beta`|\n|$\\Gamma$|`\\Gamma`|$\\gamma$|`\\gamma`|\n|$\\Delta$|`\\Delta`|$\\delta$|`\\delta`|\n|$E$|`E`|$\\epsilon$|`\\epsilon`|\n|$Z$|`Z`|$\\zeta$|`\\zeta`|\n|$H$|`H`|$\\eta$|`\\eta`|\n|$\\Theta$|`\\Theta`|$\\theta$|`\\theta`|\n|$I$|`I`|$\\iota$|`\\iota`|\n|$K$|`K`|$\\lambda$|`\\lambda`|\n|$M$|`M`|$\\mu$|`\\mu`|\n|$N$|`N`|$\\nu$|`\\nu`|\n|$\\Xi$|`\\Xi`|$\\xi$|`\\xi`|\n|$O$|`O`|$\\omicron$|`\\omicron`|\n|$\\Pi$|`\\Pi`|$\\pi$|`\\pi`|\n|$P$|`P`|$\\rho$|`\\rho`|\n|$\\Sigma$|`\\Sigma`|$\\sigma$|`\\sigma`|\n|$T$|`T`|$\\tau$|`\\tau`|\n|$\\Upsilon$|`\\Upsilon`|$\\upsilon$|`\\upsilon`|\n|$\\Phi$|`\\Phi`|$\\phi$|`\\phi`|\n|$X$|`X`|$\\chi$|`\\chi`|\n|$\\Psi$|`\\Psi`|$\\psi$|`\\psi`|\n|$\\Omega$|`\\Omega`|$\\omega$|`\\omega`|\n\n#### 参考文章\n[Markdown数学公式语法](https://www.cnblogs.com/xym4869/p/11282586.html)\n[Markdown数学公式语法华为云](https://www.huaweicloud.com/articles/2a62b09a875890613673074063fe9d32.html)\n","slug":"用markdown书写数学公式","published":1,"updated":"2024-04-25T17:26:47.263Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvjbaqkb005m0vn12ml34eli","content":"<p>首先在所在themes&#x2F;_config.yml中找到mathjax，将其属性改为true。之后便可以使用数学公式了。<span id=\"more\"></span></p>\n<h4 id=\"行内与独行\"><a href=\"#行内与独行\" class=\"headerlink\" title=\"行内与独行\"></a>行内与独行</h4><ul>\n<li>行内公式：将公式插入到本行内，符号：<code>$公式内容$</code>，如：$xyz$</li>\n<li>独行公式：将公式插入到新的一行内，并且居中，符号：<code>$$公式内容$$</code>，如：$$xyz$$</li>\n</ul>\n<h4 id=\"上标和下标组合\"><a href=\"#上标和下标组合\" class=\"headerlink\" title=\"上标和下标组合\"></a>上标和下标组合</h4><ul>\n<li>上标符号，符号：<code>^</code>，如：$x^4$</li>\n<li>下标符号，符号：<code>_</code>，如：$x_1$</li>\n<li>组合符号，符号：<code>&#123;&#125;</code>，如：${x}^{y}_{ij}$</li>\n</ul>\n<h4 id=\"汉字和字体格式\"><a href=\"#汉字和字体格式\" class=\"headerlink\" title=\"汉字和字体格式\"></a>汉字和字体格式</h4><ul>\n<li><p>文本：<code>\\text&#123;&#125;</code>，如：$V_{\\text{初始}}$</p>\n</li>\n<li><p>加粗：<code>\\mathbf&#123;&#125;</code>，如：$\\mathbf{A}$</p>\n</li>\n<li><p>数学手写体：<code>\\mathcal&#123;&#125;</code>，如：$\\mathcal{A}$</p>\n</li>\n<li><p>黑板粗体：<code>\\mathbb&#123;&#125;</code>，如：$\\mathbb{A}$</p>\n</li>\n<li><p>花体：<code>\\mathscr&#123;&#125;</code>，如：$\\mathscr{A}$</p>\n</li>\n<li><p>罗马体：<code>\\mathrm&#123;&#125;</code>，如：$\\mathrm{A}$</p>\n</li>\n<li><p>下划线：<code>\\underline&#123;&#125;</code>，如：$\\underline{x+y}$</p>\n</li>\n<li><p>上划线：<code>\\overline&#123;&#125;</code>，如：$\\overline{x+y}$</p>\n</li>\n<li><p>标签：<code>\\tag&#123;&#125;</code>，如：$$\\tag{3}$$</p>\n</li>\n<li><p>自动添加标签：<code>\\begin&#123;equation&#125; \\end&#123;equation&#125;</code>，如：$$\\begin{equation} x \\end{equation}$$</p>\n</li>\n<li><p>上大括号：<code>\\overbrace&#123;&#125;</code>，如：$\\overbrace{a+b+c+d}^{2.0}$</p>\n</li>\n<li><p>下大括号：<code>\\underbrace&#123;&#125;</code>，如：$a+\\underbrace{b+c}_{1.0}+d$</p>\n</li>\n<li><p>上位符号：<code>\\stackrel&#123;上位符号&#125;&#123;基位符号&#125;</code>，如：$\\vec{x}\\stackrel{\\mathrm{def}}{&#x3D;}{x_1,\\dots,x_n}$</p>\n</li>\n<li><p>上下标位置：<code>\\sideset控制四角上下标，\\overset与\\underset控制上下标居中</code>，如：$\\sideset{^a_b}{^c_d}A$,$\\overset{100}A$,$\\underset{100}A$,$\\overset{100}{\\underset{200}A}$</p>\n</li>\n<li><p>分段函数：$$f(x) &#x3D; \\begin{cases}<br>  0, &amp; \\text{if } x &lt; 0 \\<br>  x, &amp; \\text{if } x \\geq 0<br>\\end{cases}$$</p>\n</li>\n</ul>\n<h4 id=\"占位符\"><a href=\"#占位符\" class=\"headerlink\" title=\"占位符\"></a>占位符</h4><ul>\n<li>两个quad空格，符号：<code>\\qquad</code>，如：$x \\qquad y$</li>\n<li>quad空格，符号：<code>\\quad</code>，如：$x \\quad y$</li>\n</ul>\n<h4 id=\"定界符与组合\"><a href=\"#定界符与组合\" class=\"headerlink\" title=\"定界符与组合\"></a>定界符与组合</h4><ul>\n<li>括号：<code>() \\big(\\big) \\Big(\\Big) \\bigg(\\bigg) \\Bigg(\\Bigg)</code>，如：$() \\big(\\big) \\Big(\\Big) \\bigg(\\bigg) \\Bigg(\\Bigg)$</li>\n<li>中括号：<code>\\left[ \\right]</code>，如：$\\left[x+y\\right]$</li>\n<li>大号的中括号：<code>\\bigl[ \\bigr]</code>，如：$\\bigl[x+y\\bigr]$</li>\n<li>大括号，符号：<code>\\&#123; \\&#125;</code>，如：${x+y}$</li>\n<li>自适应括号，符号：<code>\\left \\right</code>，如：$\\left(x\\right)$，$\\left(x_{yz}\\right)$</li>\n<li>组合公式，符号：<code>&#123;上位公式 \\choose 下位公式&#125;</code>，如：${n+1 \\choose k}&#x3D;{n \\choose k}+{n \\choose k-1}$</li>\n</ul>\n<h4 id=\"四则运算\"><a href=\"#四则运算\" class=\"headerlink\" title=\"四则运算\"></a>四则运算</h4><ul>\n<li>加减运算，符号：<code>\\pm</code>，如：$x \\pm y&#x3D;z$</li>\n<li>减加运算，符号：<code>\\mp</code>，如：$x \\mp y&#x3D;z$</li>\n<li>乘法运算，符号：<code>\\times</code>，如：$x \\times y&#x3D;z$</li>\n<li>点乘运算，符号：<code>\\cdot</code>，如：$x \\cdot y&#x3D;z$</li>\n<li>星乘运算，符号：<code>\\ast</code>，如：$x \\ast y&#x3D;z$</li>\n<li>除法运算，符号：<code>\\div</code>，如：$x \\div y&#x3D;z$</li>\n<li>分式表示，符号：<code>\\frac&#123;分子&#125;&#123;分母&#125;</code>，如：$\\frac{x+y}{y+z}$</li>\n<li>分式表示，符号：<code>&#123;分子&#125; \\voer &#123;分母&#125;</code>，如：${x+y} \\over {y+z}$</li>\n<li>绝对值表示，符号：<code>||</code>，如：$|x+y|$</li>\n</ul>\n<h4 id=\"高级运算\"><a href=\"#高级运算\" class=\"headerlink\" title=\"高级运算\"></a>高级运算</h4><ul>\n<li><p>开二次方运算，符号：<code>\\sqrt</code>，如：$\\sqrt x$</p>\n</li>\n<li><p>开方运算，符号：<code>\\sqrt[开方数]&#123;被开方数&#125;</code>，如：$\\sqrt[3]{x+y}$</p>\n</li>\n<li><p>对数运算，符号：<code>\\log</code>，如：$\\log(x)$</p>\n</li>\n<li><p>极限运算，符号：<code>\\lim</code>，如：$\\lim^{x \\to \\infty}_{y \\to 0}{\\frac{x}{y}}$</p>\n</li>\n<li><p>求和运算，符号：<code>\\sum</code>，如：$\\sum^{x \\to \\infty}_{y \\to 0}{\\frac{x}{y}}$</p>\n</li>\n<li><p>求积运算，符号：<code>\\prod</code>, 如：$\\prod^N_{i&#x3D;1}x_i$</p>\n</li>\n<li><p>积分运算，符号：<code>\\int</code>，如：$\\int^{\\infty}_{0}{xdx}$</p>\n</li>\n<li><p>微分运算，符号：<code>\\partial</code>，如：$\\frac{\\partial x}{\\partial y}$</p>\n</li>\n<li><p>矩阵表示，符号：<code>\\begin&#123;bmatrix&#125; \\end&#123;bmatrix&#125;</code>，如：$$\\begin{bmatrix}<br>  a &amp; b &amp; c \\<br>  d &amp; e &amp; f \\<br>  g &amp; h &amp; i \\<br>\\end{bmatrix}$$</p>\n</li>\n<li><p>梯度算子，符号：<code>\\nabla</code>，如$\\nabla$</p>\n</li>\n<li><p>向上取整，符号：<code>\\lceil x \\rceil</code>，如$\\lceil x \\rceil$</p>\n</li>\n<li><p>向下取整，符号：<code>\\lfloor x \\rfloor</code>，如$\\lfloor x \\rfloor$</p>\n</li>\n</ul>\n<h4 id=\"逻辑运算\"><a href=\"#逻辑运算\" class=\"headerlink\" title=\"逻辑运算\"></a>逻辑运算</h4><ul>\n<li>大于等于运算，符号：<code>\\geq</code>，如：$x+y \\geq z$</li>\n<li>小于等于运算，符号：<code>\\leq</code>，如：$x+y \\leq z$</li>\n<li>不等于运算，符号：<code>\\neq</code>，如：$x+y \\neq z$</li>\n<li>不大于等于运算，符号：<code>\\ngeq</code>，如：$x+y \\ngeq z$</li>\n<li>不大于等于运算，符号：<code>\\not\\geq</code>，如：$x+y \\not\\geq z$</li>\n<li>不小于等于运算，符号：<code>\\nleq</code>，如：$x+y \\nleq z$</li>\n<li>不小于等于运算，符号：<code>\\not\\leq</code>，如：$x+y \\not\\leq z$</li>\n<li>约等于运算，符号：<code>\\approx</code>，如：$x+y \\approx z$</li>\n<li>恒定等于运算，符号：<code>\\equiv</code>，如：$x+y \\equiv z$</li>\n</ul>\n<h4 id=\"集合运算\"><a href=\"#集合运算\" class=\"headerlink\" title=\"集合运算\"></a>集合运算</h4><ul>\n<li>属于运算，符号：<code>\\in</code>，如：$x \\in y$</li>\n<li>不属于运算，符号：<code>\\notin</code>，如：$x \\notin y$</li>\n<li>不属于运算，符号：<code>\\not\\in</code>，如：$x \\not\\in y$</li>\n<li>子集运算，符号：<code>\\subset</code>，如：$x \\subset y$</li>\n<li>子集运算，符号：<code>\\supset</code>，如：$x \\supset y$</li>\n<li>真子集运算，符号：<code>\\subseteq</code>，如：$x \\subseteq y$</li>\n<li>非真子集运算，符号：<code>\\subsetneq</code>，如：$x \\subsetneq y$</li>\n<li>真子集运算，符号：<code>\\supseteq</code>，如：$x \\supseteq y$</li>\n<li>非真子集运算，符号：<code>\\supsetneq</code>，如：$x \\supsetneq y$</li>\n<li>非子集运算，符号：<code>\\not\\subset</code>，如：$x \\not\\subset y$</li>\n<li>非子集运算，符号：<code>\\not\\supset</code>，如：$x \\not\\supset y$</li>\n<li>并集运算，符号：<code>\\cup</code>，如：$x \\cup y$</li>\n<li>交集运算，符号：<code>\\cap</code>，如：$x \\cap y$</li>\n<li>差集运算，符号：<code>\\setminus</code>，如：$x \\setminus y$</li>\n<li>同或运算，符号：<code>\\bigodot</code>，如：$x \\bigodot y$</li>\n<li>同与运算，符号：<code>\\bigotimes</code>，如：$x \\bigotimes y$</li>\n<li>空集，符号：<code>\\emptyset</code>，如：$\\emptyset$</li>\n<li>任意符号，符号：<code>\\forall</code>，如：$\\forall i$</li>\n<li>存在符号，符号：<code>\\exists</code>，如$\\exists i$</li>\n</ul>\n<h4 id=\"数字符号\"><a href=\"#数字符号\" class=\"headerlink\" title=\"数字符号\"></a>数字符号</h4><ul>\n<li>无穷，符号：<code>\\infty</code>，如：$\\infty$</li>\n<li>虚数，符号：<code>\\imath</code>，如：$\\imath$</li>\n<li>虚数，符号：<code>\\jmath</code>，如：$\\jmath$</li>\n<li>数学符号，符号：<code>\\hat&#123;a&#125;</code>，如：$\\hat{a}$</li>\n<li>数学符号，符号：<code>\\check&#123;a&#125;</code>，如：$\\check{a}$</li>\n<li>数学符号，符号：<code>\\breve&#123;a&#125;</code>，如：$\\breve{a}$</li>\n<li>数学符号，符号：<code>\\tilde&#123;a&#125;</code>，如：$\\tilde{a}$</li>\n<li>数学符号，符号：<code>\\bar&#123;a&#125;</code>，如：$\\bar{a}$</li>\n<li>矢量符号，符号：<code>\\vec&#123;a&#125;</code>，如：$\\vec{a}$</li>\n<li>数学符号，符号：<code>\\acute&#123;a&#125;</code>，如：$\\acute{a}$</li>\n<li>数学符号，符号：<code>\\grave&#123;a&#125;</code>，如：$\\grave{a}$</li>\n<li>数学符号，符号：<code>\\mathring&#123;a&#125;</code>，如：$\\mathring{a}$</li>\n<li>一阶导数符号，符号：<code>\\dot&#123;a&#125;</code>，如：$\\dot{a}$</li>\n<li>二阶导数符号，符号：<code>\\ddot&#123;a&#125;</code>，如：$\\ddot{a}$</li>\n<li>上箭头，符号：<code>\\uparrow</code>，如：$\\uparrow$</li>\n<li>上箭头，符号：<code>\\Uparrow</code>，如：$\\Uparrow$</li>\n<li>下箭头，符号：<code>\\downarrow</code>，如：$\\downarrow$</li>\n<li>下箭头，符号：<code>\\Downarrow</code>，如：$\\Downarrow$</li>\n<li>左箭头，符号：<code>\\leftarrow</code>，如：$\\leftarrow$</li>\n<li>左箭头，符号：<code>\\Leftarrow</code>，如：$\\Leftarrow$</li>\n<li>右箭头，符号：<code>\\rightarrow</code>，如：$\\rightarrow$</li>\n<li>右箭头，符号：<code>\\Rightarrow</code>，如：$\\Rightarrow$</li>\n<li>底端对齐的省略号，符号：<code>\\ldots</code>，如：$1,2,\\ldots,n$</li>\n<li>中线对齐的省略号，符号：<code>\\cdots</code>，如：$x_1^2 + x_2^2 + \\cdots + x_n^2$</li>\n<li>竖直对齐的省略号，符号：<code>\\vdots</code>，如：$\\vdots$</li>\n<li>斜对齐的省略号，符号：<code>\\ddots</code>，如：$\\ddots$</li>\n<li>度数符号：<code>\\circ</code>，如：$A^\\circ$</li>\n</ul>\n<h4 id=\"希腊字母\"><a href=\"#希腊字母\" class=\"headerlink\" title=\"希腊字母\"></a>希腊字母</h4><table>\n<thead>\n<tr>\n<th align=\"center\">字母</th>\n<th align=\"center\">实现</th>\n<th align=\"center\">字母</th>\n<th align=\"center\">实现</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">$A$</td>\n<td align=\"center\"><code>A</code></td>\n<td align=\"center\">$\\alpha$</td>\n<td align=\"center\"><code>\\alpha</code></td>\n</tr>\n<tr>\n<td align=\"center\">$B$</td>\n<td align=\"center\"><code>B</code></td>\n<td align=\"center\">$\\beta$</td>\n<td align=\"center\"><code>\\beta</code></td>\n</tr>\n<tr>\n<td align=\"center\">$\\Gamma$</td>\n<td align=\"center\"><code>\\Gamma</code></td>\n<td align=\"center\">$\\gamma$</td>\n<td align=\"center\"><code>\\gamma</code></td>\n</tr>\n<tr>\n<td align=\"center\">$\\Delta$</td>\n<td align=\"center\"><code>\\Delta</code></td>\n<td align=\"center\">$\\delta$</td>\n<td align=\"center\"><code>\\delta</code></td>\n</tr>\n<tr>\n<td align=\"center\">$E$</td>\n<td align=\"center\"><code>E</code></td>\n<td align=\"center\">$\\epsilon$</td>\n<td align=\"center\"><code>\\epsilon</code></td>\n</tr>\n<tr>\n<td align=\"center\">$Z$</td>\n<td align=\"center\"><code>Z</code></td>\n<td align=\"center\">$\\zeta$</td>\n<td align=\"center\"><code>\\zeta</code></td>\n</tr>\n<tr>\n<td align=\"center\">$H$</td>\n<td align=\"center\"><code>H</code></td>\n<td align=\"center\">$\\eta$</td>\n<td align=\"center\"><code>\\eta</code></td>\n</tr>\n<tr>\n<td align=\"center\">$\\Theta$</td>\n<td align=\"center\"><code>\\Theta</code></td>\n<td align=\"center\">$\\theta$</td>\n<td align=\"center\"><code>\\theta</code></td>\n</tr>\n<tr>\n<td align=\"center\">$I$</td>\n<td align=\"center\"><code>I</code></td>\n<td align=\"center\">$\\iota$</td>\n<td align=\"center\"><code>\\iota</code></td>\n</tr>\n<tr>\n<td align=\"center\">$K$</td>\n<td align=\"center\"><code>K</code></td>\n<td align=\"center\">$\\lambda$</td>\n<td align=\"center\"><code>\\lambda</code></td>\n</tr>\n<tr>\n<td align=\"center\">$M$</td>\n<td align=\"center\"><code>M</code></td>\n<td align=\"center\">$\\mu$</td>\n<td align=\"center\"><code>\\mu</code></td>\n</tr>\n<tr>\n<td align=\"center\">$N$</td>\n<td align=\"center\"><code>N</code></td>\n<td align=\"center\">$\\nu$</td>\n<td align=\"center\"><code>\\nu</code></td>\n</tr>\n<tr>\n<td align=\"center\">$\\Xi$</td>\n<td align=\"center\"><code>\\Xi</code></td>\n<td align=\"center\">$\\xi$</td>\n<td align=\"center\"><code>\\xi</code></td>\n</tr>\n<tr>\n<td align=\"center\">$O$</td>\n<td align=\"center\"><code>O</code></td>\n<td align=\"center\">$\\omicron$</td>\n<td align=\"center\"><code>\\omicron</code></td>\n</tr>\n<tr>\n<td align=\"center\">$\\Pi$</td>\n<td align=\"center\"><code>\\Pi</code></td>\n<td align=\"center\">$\\pi$</td>\n<td align=\"center\"><code>\\pi</code></td>\n</tr>\n<tr>\n<td align=\"center\">$P$</td>\n<td align=\"center\"><code>P</code></td>\n<td align=\"center\">$\\rho$</td>\n<td align=\"center\"><code>\\rho</code></td>\n</tr>\n<tr>\n<td align=\"center\">$\\Sigma$</td>\n<td align=\"center\"><code>\\Sigma</code></td>\n<td align=\"center\">$\\sigma$</td>\n<td align=\"center\"><code>\\sigma</code></td>\n</tr>\n<tr>\n<td align=\"center\">$T$</td>\n<td align=\"center\"><code>T</code></td>\n<td align=\"center\">$\\tau$</td>\n<td align=\"center\"><code>\\tau</code></td>\n</tr>\n<tr>\n<td align=\"center\">$\\Upsilon$</td>\n<td align=\"center\"><code>\\Upsilon</code></td>\n<td align=\"center\">$\\upsilon$</td>\n<td align=\"center\"><code>\\upsilon</code></td>\n</tr>\n<tr>\n<td align=\"center\">$\\Phi$</td>\n<td align=\"center\"><code>\\Phi</code></td>\n<td align=\"center\">$\\phi$</td>\n<td align=\"center\"><code>\\phi</code></td>\n</tr>\n<tr>\n<td align=\"center\">$X$</td>\n<td align=\"center\"><code>X</code></td>\n<td align=\"center\">$\\chi$</td>\n<td align=\"center\"><code>\\chi</code></td>\n</tr>\n<tr>\n<td align=\"center\">$\\Psi$</td>\n<td align=\"center\"><code>\\Psi</code></td>\n<td align=\"center\">$\\psi$</td>\n<td align=\"center\"><code>\\psi</code></td>\n</tr>\n<tr>\n<td align=\"center\">$\\Omega$</td>\n<td align=\"center\"><code>\\Omega</code></td>\n<td align=\"center\">$\\omega$</td>\n<td align=\"center\"><code>\\omega</code></td>\n</tr>\n</tbody></table>\n<h4 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h4><p><a href=\"https://www.cnblogs.com/xym4869/p/11282586.html\">Markdown数学公式语法</a><br><a href=\"https://www.huaweicloud.com/articles/2a62b09a875890613673074063fe9d32.html\">Markdown数学公式语法华为云</a></p>\n","site":{"data":{}},"excerpt":"<p>首先在所在themes&#x2F;_config.yml中找到mathjax，将其属性改为true。之后便可以使用数学公式了。</p>","more":"<p></p>\n<h4 id=\"行内与独行\"><a href=\"#行内与独行\" class=\"headerlink\" title=\"行内与独行\"></a>行内与独行</h4><ul>\n<li>行内公式：将公式插入到本行内，符号：<code>$公式内容$</code>，如：$xyz$</li>\n<li>独行公式：将公式插入到新的一行内，并且居中，符号：<code>$$公式内容$$</code>，如：$$xyz$$</li>\n</ul>\n<h4 id=\"上标和下标组合\"><a href=\"#上标和下标组合\" class=\"headerlink\" title=\"上标和下标组合\"></a>上标和下标组合</h4><ul>\n<li>上标符号，符号：<code>^</code>，如：$x^4$</li>\n<li>下标符号，符号：<code>_</code>，如：$x_1$</li>\n<li>组合符号，符号：<code>&#123;&#125;</code>，如：${x}^{y}_{ij}$</li>\n</ul>\n<h4 id=\"汉字和字体格式\"><a href=\"#汉字和字体格式\" class=\"headerlink\" title=\"汉字和字体格式\"></a>汉字和字体格式</h4><ul>\n<li><p>文本：<code>\\text&#123;&#125;</code>，如：$V_{\\text{初始}}$</p>\n</li>\n<li><p>加粗：<code>\\mathbf&#123;&#125;</code>，如：$\\mathbf{A}$</p>\n</li>\n<li><p>数学手写体：<code>\\mathcal&#123;&#125;</code>，如：$\\mathcal{A}$</p>\n</li>\n<li><p>黑板粗体：<code>\\mathbb&#123;&#125;</code>，如：$\\mathbb{A}$</p>\n</li>\n<li><p>花体：<code>\\mathscr&#123;&#125;</code>，如：$\\mathscr{A}$</p>\n</li>\n<li><p>罗马体：<code>\\mathrm&#123;&#125;</code>，如：$\\mathrm{A}$</p>\n</li>\n<li><p>下划线：<code>\\underline&#123;&#125;</code>，如：$\\underline{x+y}$</p>\n</li>\n<li><p>上划线：<code>\\overline&#123;&#125;</code>，如：$\\overline{x+y}$</p>\n</li>\n<li><p>标签：<code>\\tag&#123;&#125;</code>，如：$$\\tag{3}$$</p>\n</li>\n<li><p>自动添加标签：<code>\\begin&#123;equation&#125; \\end&#123;equation&#125;</code>，如：$$\\begin{equation} x \\end{equation}$$</p>\n</li>\n<li><p>上大括号：<code>\\overbrace&#123;&#125;</code>，如：$\\overbrace{a+b+c+d}^{2.0}$</p>\n</li>\n<li><p>下大括号：<code>\\underbrace&#123;&#125;</code>，如：$a+\\underbrace{b+c}_{1.0}+d$</p>\n</li>\n<li><p>上位符号：<code>\\stackrel&#123;上位符号&#125;&#123;基位符号&#125;</code>，如：$\\vec{x}\\stackrel{\\mathrm{def}}{&#x3D;}{x_1,\\dots,x_n}$</p>\n</li>\n<li><p>上下标位置：<code>\\sideset控制四角上下标，\\overset与\\underset控制上下标居中</code>，如：$\\sideset{^a_b}{^c_d}A$,$\\overset{100}A$,$\\underset{100}A$,$\\overset{100}{\\underset{200}A}$</p>\n</li>\n<li><p>分段函数：$$f(x) &#x3D; \\begin{cases}<br>  0, &amp; \\text{if } x &lt; 0 \\<br>  x, &amp; \\text{if } x \\geq 0<br>\\end{cases}$$</p>\n</li>\n</ul>\n<h4 id=\"占位符\"><a href=\"#占位符\" class=\"headerlink\" title=\"占位符\"></a>占位符</h4><ul>\n<li>两个quad空格，符号：<code>\\qquad</code>，如：$x \\qquad y$</li>\n<li>quad空格，符号：<code>\\quad</code>，如：$x \\quad y$</li>\n</ul>\n<h4 id=\"定界符与组合\"><a href=\"#定界符与组合\" class=\"headerlink\" title=\"定界符与组合\"></a>定界符与组合</h4><ul>\n<li>括号：<code>() \\big(\\big) \\Big(\\Big) \\bigg(\\bigg) \\Bigg(\\Bigg)</code>，如：$() \\big(\\big) \\Big(\\Big) \\bigg(\\bigg) \\Bigg(\\Bigg)$</li>\n<li>中括号：<code>\\left[ \\right]</code>，如：$\\left[x+y\\right]$</li>\n<li>大号的中括号：<code>\\bigl[ \\bigr]</code>，如：$\\bigl[x+y\\bigr]$</li>\n<li>大括号，符号：<code>\\&#123; \\&#125;</code>，如：${x+y}$</li>\n<li>自适应括号，符号：<code>\\left \\right</code>，如：$\\left(x\\right)$，$\\left(x_{yz}\\right)$</li>\n<li>组合公式，符号：<code>&#123;上位公式 \\choose 下位公式&#125;</code>，如：${n+1 \\choose k}&#x3D;{n \\choose k}+{n \\choose k-1}$</li>\n</ul>\n<h4 id=\"四则运算\"><a href=\"#四则运算\" class=\"headerlink\" title=\"四则运算\"></a>四则运算</h4><ul>\n<li>加减运算，符号：<code>\\pm</code>，如：$x \\pm y&#x3D;z$</li>\n<li>减加运算，符号：<code>\\mp</code>，如：$x \\mp y&#x3D;z$</li>\n<li>乘法运算，符号：<code>\\times</code>，如：$x \\times y&#x3D;z$</li>\n<li>点乘运算，符号：<code>\\cdot</code>，如：$x \\cdot y&#x3D;z$</li>\n<li>星乘运算，符号：<code>\\ast</code>，如：$x \\ast y&#x3D;z$</li>\n<li>除法运算，符号：<code>\\div</code>，如：$x \\div y&#x3D;z$</li>\n<li>分式表示，符号：<code>\\frac&#123;分子&#125;&#123;分母&#125;</code>，如：$\\frac{x+y}{y+z}$</li>\n<li>分式表示，符号：<code>&#123;分子&#125; \\voer &#123;分母&#125;</code>，如：${x+y} \\over {y+z}$</li>\n<li>绝对值表示，符号：<code>||</code>，如：$|x+y|$</li>\n</ul>\n<h4 id=\"高级运算\"><a href=\"#高级运算\" class=\"headerlink\" title=\"高级运算\"></a>高级运算</h4><ul>\n<li><p>开二次方运算，符号：<code>\\sqrt</code>，如：$\\sqrt x$</p>\n</li>\n<li><p>开方运算，符号：<code>\\sqrt[开方数]&#123;被开方数&#125;</code>，如：$\\sqrt[3]{x+y}$</p>\n</li>\n<li><p>对数运算，符号：<code>\\log</code>，如：$\\log(x)$</p>\n</li>\n<li><p>极限运算，符号：<code>\\lim</code>，如：$\\lim^{x \\to \\infty}_{y \\to 0}{\\frac{x}{y}}$</p>\n</li>\n<li><p>求和运算，符号：<code>\\sum</code>，如：$\\sum^{x \\to \\infty}_{y \\to 0}{\\frac{x}{y}}$</p>\n</li>\n<li><p>求积运算，符号：<code>\\prod</code>, 如：$\\prod^N_{i&#x3D;1}x_i$</p>\n</li>\n<li><p>积分运算，符号：<code>\\int</code>，如：$\\int^{\\infty}_{0}{xdx}$</p>\n</li>\n<li><p>微分运算，符号：<code>\\partial</code>，如：$\\frac{\\partial x}{\\partial y}$</p>\n</li>\n<li><p>矩阵表示，符号：<code>\\begin&#123;bmatrix&#125; \\end&#123;bmatrix&#125;</code>，如：$$\\begin{bmatrix}<br>  a &amp; b &amp; c \\<br>  d &amp; e &amp; f \\<br>  g &amp; h &amp; i \\<br>\\end{bmatrix}$$</p>\n</li>\n<li><p>梯度算子，符号：<code>\\nabla</code>，如$\\nabla$</p>\n</li>\n<li><p>向上取整，符号：<code>\\lceil x \\rceil</code>，如$\\lceil x \\rceil$</p>\n</li>\n<li><p>向下取整，符号：<code>\\lfloor x \\rfloor</code>，如$\\lfloor x \\rfloor$</p>\n</li>\n</ul>\n<h4 id=\"逻辑运算\"><a href=\"#逻辑运算\" class=\"headerlink\" title=\"逻辑运算\"></a>逻辑运算</h4><ul>\n<li>大于等于运算，符号：<code>\\geq</code>，如：$x+y \\geq z$</li>\n<li>小于等于运算，符号：<code>\\leq</code>，如：$x+y \\leq z$</li>\n<li>不等于运算，符号：<code>\\neq</code>，如：$x+y \\neq z$</li>\n<li>不大于等于运算，符号：<code>\\ngeq</code>，如：$x+y \\ngeq z$</li>\n<li>不大于等于运算，符号：<code>\\not\\geq</code>，如：$x+y \\not\\geq z$</li>\n<li>不小于等于运算，符号：<code>\\nleq</code>，如：$x+y \\nleq z$</li>\n<li>不小于等于运算，符号：<code>\\not\\leq</code>，如：$x+y \\not\\leq z$</li>\n<li>约等于运算，符号：<code>\\approx</code>，如：$x+y \\approx z$</li>\n<li>恒定等于运算，符号：<code>\\equiv</code>，如：$x+y \\equiv z$</li>\n</ul>\n<h4 id=\"集合运算\"><a href=\"#集合运算\" class=\"headerlink\" title=\"集合运算\"></a>集合运算</h4><ul>\n<li>属于运算，符号：<code>\\in</code>，如：$x \\in y$</li>\n<li>不属于运算，符号：<code>\\notin</code>，如：$x \\notin y$</li>\n<li>不属于运算，符号：<code>\\not\\in</code>，如：$x \\not\\in y$</li>\n<li>子集运算，符号：<code>\\subset</code>，如：$x \\subset y$</li>\n<li>子集运算，符号：<code>\\supset</code>，如：$x \\supset y$</li>\n<li>真子集运算，符号：<code>\\subseteq</code>，如：$x \\subseteq y$</li>\n<li>非真子集运算，符号：<code>\\subsetneq</code>，如：$x \\subsetneq y$</li>\n<li>真子集运算，符号：<code>\\supseteq</code>，如：$x \\supseteq y$</li>\n<li>非真子集运算，符号：<code>\\supsetneq</code>，如：$x \\supsetneq y$</li>\n<li>非子集运算，符号：<code>\\not\\subset</code>，如：$x \\not\\subset y$</li>\n<li>非子集运算，符号：<code>\\not\\supset</code>，如：$x \\not\\supset y$</li>\n<li>并集运算，符号：<code>\\cup</code>，如：$x \\cup y$</li>\n<li>交集运算，符号：<code>\\cap</code>，如：$x \\cap y$</li>\n<li>差集运算，符号：<code>\\setminus</code>，如：$x \\setminus y$</li>\n<li>同或运算，符号：<code>\\bigodot</code>，如：$x \\bigodot y$</li>\n<li>同与运算，符号：<code>\\bigotimes</code>，如：$x \\bigotimes y$</li>\n<li>空集，符号：<code>\\emptyset</code>，如：$\\emptyset$</li>\n<li>任意符号，符号：<code>\\forall</code>，如：$\\forall i$</li>\n<li>存在符号，符号：<code>\\exists</code>，如$\\exists i$</li>\n</ul>\n<h4 id=\"数字符号\"><a href=\"#数字符号\" class=\"headerlink\" title=\"数字符号\"></a>数字符号</h4><ul>\n<li>无穷，符号：<code>\\infty</code>，如：$\\infty$</li>\n<li>虚数，符号：<code>\\imath</code>，如：$\\imath$</li>\n<li>虚数，符号：<code>\\jmath</code>，如：$\\jmath$</li>\n<li>数学符号，符号：<code>\\hat&#123;a&#125;</code>，如：$\\hat{a}$</li>\n<li>数学符号，符号：<code>\\check&#123;a&#125;</code>，如：$\\check{a}$</li>\n<li>数学符号，符号：<code>\\breve&#123;a&#125;</code>，如：$\\breve{a}$</li>\n<li>数学符号，符号：<code>\\tilde&#123;a&#125;</code>，如：$\\tilde{a}$</li>\n<li>数学符号，符号：<code>\\bar&#123;a&#125;</code>，如：$\\bar{a}$</li>\n<li>矢量符号，符号：<code>\\vec&#123;a&#125;</code>，如：$\\vec{a}$</li>\n<li>数学符号，符号：<code>\\acute&#123;a&#125;</code>，如：$\\acute{a}$</li>\n<li>数学符号，符号：<code>\\grave&#123;a&#125;</code>，如：$\\grave{a}$</li>\n<li>数学符号，符号：<code>\\mathring&#123;a&#125;</code>，如：$\\mathring{a}$</li>\n<li>一阶导数符号，符号：<code>\\dot&#123;a&#125;</code>，如：$\\dot{a}$</li>\n<li>二阶导数符号，符号：<code>\\ddot&#123;a&#125;</code>，如：$\\ddot{a}$</li>\n<li>上箭头，符号：<code>\\uparrow</code>，如：$\\uparrow$</li>\n<li>上箭头，符号：<code>\\Uparrow</code>，如：$\\Uparrow$</li>\n<li>下箭头，符号：<code>\\downarrow</code>，如：$\\downarrow$</li>\n<li>下箭头，符号：<code>\\Downarrow</code>，如：$\\Downarrow$</li>\n<li>左箭头，符号：<code>\\leftarrow</code>，如：$\\leftarrow$</li>\n<li>左箭头，符号：<code>\\Leftarrow</code>，如：$\\Leftarrow$</li>\n<li>右箭头，符号：<code>\\rightarrow</code>，如：$\\rightarrow$</li>\n<li>右箭头，符号：<code>\\Rightarrow</code>，如：$\\Rightarrow$</li>\n<li>底端对齐的省略号，符号：<code>\\ldots</code>，如：$1,2,\\ldots,n$</li>\n<li>中线对齐的省略号，符号：<code>\\cdots</code>，如：$x_1^2 + x_2^2 + \\cdots + x_n^2$</li>\n<li>竖直对齐的省略号，符号：<code>\\vdots</code>，如：$\\vdots$</li>\n<li>斜对齐的省略号，符号：<code>\\ddots</code>，如：$\\ddots$</li>\n<li>度数符号：<code>\\circ</code>，如：$A^\\circ$</li>\n</ul>\n<h4 id=\"希腊字母\"><a href=\"#希腊字母\" class=\"headerlink\" title=\"希腊字母\"></a>希腊字母</h4><table>\n<thead>\n<tr>\n<th align=\"center\">字母</th>\n<th align=\"center\">实现</th>\n<th align=\"center\">字母</th>\n<th align=\"center\">实现</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">$A$</td>\n<td align=\"center\"><code>A</code></td>\n<td align=\"center\">$\\alpha$</td>\n<td align=\"center\"><code>\\alpha</code></td>\n</tr>\n<tr>\n<td align=\"center\">$B$</td>\n<td align=\"center\"><code>B</code></td>\n<td align=\"center\">$\\beta$</td>\n<td align=\"center\"><code>\\beta</code></td>\n</tr>\n<tr>\n<td align=\"center\">$\\Gamma$</td>\n<td align=\"center\"><code>\\Gamma</code></td>\n<td align=\"center\">$\\gamma$</td>\n<td align=\"center\"><code>\\gamma</code></td>\n</tr>\n<tr>\n<td align=\"center\">$\\Delta$</td>\n<td align=\"center\"><code>\\Delta</code></td>\n<td align=\"center\">$\\delta$</td>\n<td align=\"center\"><code>\\delta</code></td>\n</tr>\n<tr>\n<td align=\"center\">$E$</td>\n<td align=\"center\"><code>E</code></td>\n<td align=\"center\">$\\epsilon$</td>\n<td align=\"center\"><code>\\epsilon</code></td>\n</tr>\n<tr>\n<td align=\"center\">$Z$</td>\n<td align=\"center\"><code>Z</code></td>\n<td align=\"center\">$\\zeta$</td>\n<td align=\"center\"><code>\\zeta</code></td>\n</tr>\n<tr>\n<td align=\"center\">$H$</td>\n<td align=\"center\"><code>H</code></td>\n<td align=\"center\">$\\eta$</td>\n<td align=\"center\"><code>\\eta</code></td>\n</tr>\n<tr>\n<td align=\"center\">$\\Theta$</td>\n<td align=\"center\"><code>\\Theta</code></td>\n<td align=\"center\">$\\theta$</td>\n<td align=\"center\"><code>\\theta</code></td>\n</tr>\n<tr>\n<td align=\"center\">$I$</td>\n<td align=\"center\"><code>I</code></td>\n<td align=\"center\">$\\iota$</td>\n<td align=\"center\"><code>\\iota</code></td>\n</tr>\n<tr>\n<td align=\"center\">$K$</td>\n<td align=\"center\"><code>K</code></td>\n<td align=\"center\">$\\lambda$</td>\n<td align=\"center\"><code>\\lambda</code></td>\n</tr>\n<tr>\n<td align=\"center\">$M$</td>\n<td align=\"center\"><code>M</code></td>\n<td align=\"center\">$\\mu$</td>\n<td align=\"center\"><code>\\mu</code></td>\n</tr>\n<tr>\n<td align=\"center\">$N$</td>\n<td align=\"center\"><code>N</code></td>\n<td align=\"center\">$\\nu$</td>\n<td align=\"center\"><code>\\nu</code></td>\n</tr>\n<tr>\n<td align=\"center\">$\\Xi$</td>\n<td align=\"center\"><code>\\Xi</code></td>\n<td align=\"center\">$\\xi$</td>\n<td align=\"center\"><code>\\xi</code></td>\n</tr>\n<tr>\n<td align=\"center\">$O$</td>\n<td align=\"center\"><code>O</code></td>\n<td align=\"center\">$\\omicron$</td>\n<td align=\"center\"><code>\\omicron</code></td>\n</tr>\n<tr>\n<td align=\"center\">$\\Pi$</td>\n<td align=\"center\"><code>\\Pi</code></td>\n<td align=\"center\">$\\pi$</td>\n<td align=\"center\"><code>\\pi</code></td>\n</tr>\n<tr>\n<td align=\"center\">$P$</td>\n<td align=\"center\"><code>P</code></td>\n<td align=\"center\">$\\rho$</td>\n<td align=\"center\"><code>\\rho</code></td>\n</tr>\n<tr>\n<td align=\"center\">$\\Sigma$</td>\n<td align=\"center\"><code>\\Sigma</code></td>\n<td align=\"center\">$\\sigma$</td>\n<td align=\"center\"><code>\\sigma</code></td>\n</tr>\n<tr>\n<td align=\"center\">$T$</td>\n<td align=\"center\"><code>T</code></td>\n<td align=\"center\">$\\tau$</td>\n<td align=\"center\"><code>\\tau</code></td>\n</tr>\n<tr>\n<td align=\"center\">$\\Upsilon$</td>\n<td align=\"center\"><code>\\Upsilon</code></td>\n<td align=\"center\">$\\upsilon$</td>\n<td align=\"center\"><code>\\upsilon</code></td>\n</tr>\n<tr>\n<td align=\"center\">$\\Phi$</td>\n<td align=\"center\"><code>\\Phi</code></td>\n<td align=\"center\">$\\phi$</td>\n<td align=\"center\"><code>\\phi</code></td>\n</tr>\n<tr>\n<td align=\"center\">$X$</td>\n<td align=\"center\"><code>X</code></td>\n<td align=\"center\">$\\chi$</td>\n<td align=\"center\"><code>\\chi</code></td>\n</tr>\n<tr>\n<td align=\"center\">$\\Psi$</td>\n<td align=\"center\"><code>\\Psi</code></td>\n<td align=\"center\">$\\psi$</td>\n<td align=\"center\"><code>\\psi</code></td>\n</tr>\n<tr>\n<td align=\"center\">$\\Omega$</td>\n<td align=\"center\"><code>\\Omega</code></td>\n<td align=\"center\">$\\omega$</td>\n<td align=\"center\"><code>\\omega</code></td>\n</tr>\n</tbody></table>\n<h4 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h4><p><a href=\"https://www.cnblogs.com/xym4869/p/11282586.html\">Markdown数学公式语法</a><br><a href=\"https://www.huaweicloud.com/articles/2a62b09a875890613673074063fe9d32.html\">Markdown数学公式语法华为云</a></p>"},{"title":"百度文库","date":"2021-07-11T10:19:43.000Z","declare":true,"_content":"- 卡号：139621117\n- 密码：meng123456\n- 这个是下载券使用，使用方法:用浏览器打开这个[网址](http://139.224.236.108/3.html)\n- 输入用户 密码，把需要下载的文档连接复制进去 ，建议360或者qq浏览器。就可以下载了。","source":"_posts/百度文库.md","raw":"---\ntitle: 百度文库\ndate: 2021-07-11 10:19:43\ntags:\n    - 百度文库\ndeclare: true\n---\n- 卡号：139621117\n- 密码：meng123456\n- 这个是下载券使用，使用方法:用浏览器打开这个[网址](http://139.224.236.108/3.html)\n- 输入用户 密码，把需要下载的文档连接复制进去 ，建议360或者qq浏览器。就可以下载了。","slug":"百度文库","published":1,"updated":"2024-04-25T17:26:47.253Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvjbaqkc005o0vn1cbar1qhn","content":"<ul>\n<li>卡号：139621117</li>\n<li>密码：meng123456</li>\n<li>这个是下载券使用，使用方法:用浏览器打开这个<a href=\"http://139.224.236.108/3.html\">网址</a></li>\n<li>输入用户 密码，把需要下载的文档连接复制进去 ，建议360或者qq浏览器。就可以下载了。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>卡号：139621117</li>\n<li>密码：meng123456</li>\n<li>这个是下载券使用，使用方法:用浏览器打开这个<a href=\"http://139.224.236.108/3.html\">网址</a></li>\n<li>输入用户 密码，把需要下载的文档连接复制进去 ，建议360或者qq浏览器。就可以下载了。</li>\n</ul>\n"},{"title":"神秘代码","date":"2018-08-13T10:10:09.000Z","_content":"- 2018年8月13日\nWxxxhksdxrhhtzyqyqmhhilyyzm\n\n- 神秘代码\n250528\n778750\n265486\n309847\n266719","source":"_posts/神秘代码.md","raw":"---\ntitle: 神秘代码\ndate: 2018-08-13 10:10:09\ntags:\n---\n- 2018年8月13日\nWxxxhksdxrhhtzyqyqmhhilyyzm\n\n- 神秘代码\n250528\n778750\n265486\n309847\n266719","slug":"神秘代码","published":1,"updated":"2024-04-25T17:26:47.743Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvjbaqkd005r0vn172pla7du","content":"<ul>\n<li><p>2018年8月13日<br>Wxxxhksdxrhhtzyqyqmhhilyyzm</p>\n</li>\n<li><p>神秘代码<br>250528<br>778750<br>265486<br>309847<br>266719</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><p>2018年8月13日<br>Wxxxhksdxrhhtzyqyqmhhilyyzm</p>\n</li>\n<li><p>神秘代码<br>250528<br>778750<br>265486<br>309847<br>266719</p>\n</li>\n</ul>\n"},{"title":"算法","date":"2023-07-10T15:37:48.000Z","declare":true,"_content":"- 要计算**非加权图**中的最短路径，可使用**广度优先搜索**。要计算**加权图**中的最短路径，可使用**狄克斯特拉算法**\n- **如果有负权边，就不能使用狄克斯特拉算法.原因在于，已经处理过的结点，可能会由于负权边的原因，更新到它的最近距离**.也就是说，狄克斯特拉算法假设：**对于是处理过的节点，没有前往该节点的更短路径**。<!--more-->\n- 在包含负权边的图中，要找出最短路径，可使用另一种算法：**贝尔曼-福德算法（Bellman-Ford algorithm）**\n- **要判断问题是不是NP完全问题很难，易于解决的问题和NP完全问题的差别通常很小**。例如最短路径问题可以解决，但如果要找出经由指定几个点的最短路径，就是旅行商问题-----NP完全问题。简言之，不好判断问题是不是NP完全问题，但还是有一些经验的：\n  - 元素较少时算法的运行速度非常快，但随着元素数量的增加，速度会变得非常慢。\n  - 涉及“所有组合”的问题通常是NP完全问题\n  - 不能将问题分成小问题，必须考虑各种可能的情况。这可能是NP完全问题\n  - 如果问题涉及序列（如旅行商问题中的城市序列）且难以解决，它可能就是NP完全问题\n  - 如果问题涉及集合（如广播台集合）且难以解决，它可能就是NP完全问题\n  - 如果问题可转换为集合覆盖问题或旅行商问题，那它肯定是NP完全问题\n> 面临NP完全问题时，最佳的做法是使用近似算法，例如贪心算法，易于实现、运行速度快。\n- 使用动态规划时，要么考虑拿走整件商品，要么考虑不拿，而**没法判断**该不该拿走商品的一部分。但使用**贪心算法可轻松地处理**这种情况！首先，尽可能多地拿价值最高的商品；如果拿光了，再尽可能多地拿价值次高的商品，以此类推\n- 动态规划功能强大，它能够解决子问题并使用这些答案来解决大问题，**但仅当每个子问题都是离散的，即不依赖于其他子问题时，动态规划才管用**\n- **计算最终的解时会涉及两个以上的子背包吗？**根据动态规划算法的设计，最多只需合并两个子背包，即根本不会涉及两个以上的子背包。不过这些子背包可能又包含子背包\n- **在问题可分解为彼此独立且离散的子问题时，就可使用动态规划来解决**，下面是一些技巧：\n  - **每种动态规划解决方案都涉及网格**\n  - 单元格中的值通常就是你要优化的值。\n  - 每个单元格都是一个子问题，因此应考虑如果将问题分成子问题，这有助于找出网格的坐标轴\n  - **没有放之四海而皆准的计算动态规划解决方案的公式**\n  - 例如，**动态规划甚至可以解决最长公共子串问题**\n    - 两个字符串都包含的最长字串的长度为要优化的值，所以这就是单元格中的值\n    - 是要比较字串，而不是比较单词，故而坐标轴应该是两个单词\n    - 算法：\n      - 如果两个字母不相同，值为 0 \n      - 如果两个字母相同，值为左上角邻居的值加 1\n    - 需要注意的一点是，**这个问题的最终答案并不在最后一个单元格中，答案为网格中最大的数字**\n- `git diff` 是用动态规划实现的\n\n- 费曼算法（Feynman algorithm）\n  - (1) 将问题写下来\n  - (2) 好好思考\n  - (3) 将答案写下来\n- 在计算相似度时，我们通常可以使用余弦相似度或距离算相似度，具体使用哪种方法取决于数据的性质和具体问题的需求。\n  - 余弦相似度（Cosine Similarity）：余弦相似度是衡量两个向量方向之间的相似性。**当我们关注向量的方向而不是其大小时**，通常使用余弦相似度。\n    - 适用情况：\n      - 当文本数据表示为向量（如词袋模型、TF-IDF向量）时，可以使用余弦相似度来比较文本之间的相似性。\n      - 当我们关注特征的方向而不关心其大小时，如**推荐系统中的用户兴趣向量或文档主题向量**，可以使用余弦相似度。\n    - 优点：\n      - 对于高维稀疏数据（如文本），余弦相似度能够有效地忽略向量的大小差异，更关注向量的方向，适用于表示稀疏特征的数据。\n    - 缺点：\n      - 余弦相似度无法捕捉到向量之间的欧几里德距离（大小）信息，可能导致相似度计算不准确。\n  - 距离相似度：距离相似度是通过计算向量之间的距离来度量它们的相似性。常见的距离度量包括欧几里德距离（Euclidean Distance）、曼哈顿距离（Manhattan Distance）和闵可夫斯基距离（Minkowski Distance）等。\n    - 适用情况：\n      - 当我们希望考虑向量的大小信息，或者关注向量之间的距离差异时，可以使用距离相似度。\n      - **当特征空间较小且维度较低（非稀疏）时**，距离相似度通常更适用。\n    - 优点：\n      - 距离相似度可以准确地度量向量之间的距离差异，更适用于表示密集特征的数据。\n    - 缺点：\n      - **距离相似度在处理高维稀疏数据时可能会受到维度灾难（curse of dimensionality）的影响，计算复杂度较高。**\n  - 综上所述，选择使用余弦相似度还是距离相似度取决于数据的特点和具体问题的需求。如果关注特征的方向而不关心其大小，或者处理高维稀疏数据，可以使用余弦相似度。如果需要考虑向量的大小信息，或者处理低维密集数据，可以使用距离相似度。\n- **KNN中如果考虑的邻居太少，结果很可能存在偏差。一个不错的经验规则是：如果有N位用户，应考虑sqrt(N)个邻居**\n- OCR指的是光学字符识别（optical character recongnition）\n- **垃圾邮件过滤器采用的是朴素贝叶斯分类器（Naive Bayes classifier）**\n- 在数组中查找时，最快的方式是二分查找，但问题是，每当有新数据插入数组时需要将数组重新排序，**因为二分查找仅在数组有序时才管用。如果能将数据插入到数组的正确位置就好了**，这样就无需在插入后再排序。为此，有人设计了一种名为**二叉查找树（binary search tree）**的数据结构\n- 一个散列表，将单词映射到包含它的页面。这种数据结构被称为**反向索引（inverted index）**，常用于创建搜索引擎\n- [An Interactive Guide To The Fourier Transform](https://betterexplained.com/articles/an-interactive-guide-to-the-fourier-transform/) 对于傅里叶变换做了一个绝佳的比喻：给它一杯冰沙，它能告诉你其中包含哪些成分。换言之，给定一首歌曲，**傅里叶变换能够将其中的各种频率分离出来**。所以，**傅里叶变换非常适合用于处理信号**，可使用它来压缩音乐。\n- 在最佳情况下，排序算法的速度大致为$O(nlogn)$。众所周知，对数组进行排序时，除非使用并行算法，否则运行时间不可能为O(n)\n- 并行算法，有一点是确定的，那就是**速度的提升并非线性的**，因此即便你的笔记本电脑**装备了两个而不是一个内核，算法的速度也不可能提高一倍**，其中的原因有两个。\n  - **并行性管理开销**\n  - **负载均衡**\n- 有一种特殊的并行算法正越来越流行，它就是**分布式算法**。可让算法在多台计算机上运行。**MapReduce是一种流行的分布式算法**。分布式算法非常适用于在短时间内完成海量工作，**其中MapReduce基于两个简单的理念：映射（map）函数和归并（reduce）函数**\n  - **map就是能够自动将工作分配给计算机，也就是说，映射时将一个数组转换为另一个数组**\n  - **归并是将一个数组转换为一个元素**\n- 当要索引的东西过多时，散列表就稍显乏力。是因为此时的散列表非常大，需要占用大量的存储空间。面临海量数据，**布隆过滤器**提供了解决之道。**布隆过滤器是一种概率性数据结构**，他提供的答案有可能不对，但很可能是正确的。\n- 使用散列表时，答案绝对可靠，而使用布隆过滤器时，答案却是很可能是正确的。\n  - **可能出现漏报的情况**，即指出存储了某个数据，但实际上没有存储\n  - **不可能出现漏报的情况**，即如果布隆过滤器说没有存储某个数据，就肯定没有存储\n  - 布隆过滤器的**优点在于占用的存储空间很少**，非常适用于不要求答案绝对准确的情况\n- HyperLogLog是一种类似于布隆过滤器的算法\n- 散列函数接受一个字符串，并返回一个索引号。**另一种散列函数是安全散列算法（secure hash algorithm，SHA）函数，给定一个字符串，SHA返回其散列值**.\n  - **可以使用SHA来判断两个文件是否相同**，如果两个文件都很大，不需要一一对比，而可计算它们的SHA散列值，再对结果进行比较\n  - SHA也可以用来检查密码，可以将密码转换为散列值，但反过来不行。也就是说**SHA是单向的**\n- **SHA-0 和 SHA-1 已被发现存在一些缺陷**。如果要使用SHA算法来计算密码的散列值，应使用SHA-2 和SHA-3.当前，**最安全的密码散列函数是bcrypt**，但没有任何东西是万无一失的。\n- SHA 还有一个重要特征，那就是**局部不敏感**的。也就是说假设有一个字符串，并计算了其散列值。如果修改其中一个字符，再计算其散列值，结果将截然不同！\n- **如果希望散列函数是局部敏感的，可以使用Simhash**，需要检查两项内容的相似程度时，Simhash很有用\n- Diffie-Hellman算法，它以优雅的方法解决了一个古老的问题：如何对消息进行加密，以便只有收件人才能看懂。Diffie-Hellman算法解决了如下两个问题：\n  - **双发无需知道加密算法**。他们不必会面协商要使用的加密算法\n  - **要破解加密的消息比登天还难**\n- Diffie-Hellman使用两个密钥：公钥和私钥。Diffie-Hellman算法及其替代者**RSA**依然被广泛使用。\n- **线性规划用于在给定约束条件下最大限度地改善指定的指标**。也就是说，最优化问题与线性规划关系密切。所有的图算法都可使用线性规划来实现。线性规划是一个宽泛得多的框架，图问题只是其中的一个子集。**线性规划使用Simplex算法**，很复杂。\n\n> 上述内容来自《算法图解》","source":"_posts/算法.md","raw":"---\ntitle: 算法\ndate: 2023-07-10 15:37:48\ntags:\n  - 笔记\n  - 算法\ndeclare: true\n---\n- 要计算**非加权图**中的最短路径，可使用**广度优先搜索**。要计算**加权图**中的最短路径，可使用**狄克斯特拉算法**\n- **如果有负权边，就不能使用狄克斯特拉算法.原因在于，已经处理过的结点，可能会由于负权边的原因，更新到它的最近距离**.也就是说，狄克斯特拉算法假设：**对于是处理过的节点，没有前往该节点的更短路径**。<!--more-->\n- 在包含负权边的图中，要找出最短路径，可使用另一种算法：**贝尔曼-福德算法（Bellman-Ford algorithm）**\n- **要判断问题是不是NP完全问题很难，易于解决的问题和NP完全问题的差别通常很小**。例如最短路径问题可以解决，但如果要找出经由指定几个点的最短路径，就是旅行商问题-----NP完全问题。简言之，不好判断问题是不是NP完全问题，但还是有一些经验的：\n  - 元素较少时算法的运行速度非常快，但随着元素数量的增加，速度会变得非常慢。\n  - 涉及“所有组合”的问题通常是NP完全问题\n  - 不能将问题分成小问题，必须考虑各种可能的情况。这可能是NP完全问题\n  - 如果问题涉及序列（如旅行商问题中的城市序列）且难以解决，它可能就是NP完全问题\n  - 如果问题涉及集合（如广播台集合）且难以解决，它可能就是NP完全问题\n  - 如果问题可转换为集合覆盖问题或旅行商问题，那它肯定是NP完全问题\n> 面临NP完全问题时，最佳的做法是使用近似算法，例如贪心算法，易于实现、运行速度快。\n- 使用动态规划时，要么考虑拿走整件商品，要么考虑不拿，而**没法判断**该不该拿走商品的一部分。但使用**贪心算法可轻松地处理**这种情况！首先，尽可能多地拿价值最高的商品；如果拿光了，再尽可能多地拿价值次高的商品，以此类推\n- 动态规划功能强大，它能够解决子问题并使用这些答案来解决大问题，**但仅当每个子问题都是离散的，即不依赖于其他子问题时，动态规划才管用**\n- **计算最终的解时会涉及两个以上的子背包吗？**根据动态规划算法的设计，最多只需合并两个子背包，即根本不会涉及两个以上的子背包。不过这些子背包可能又包含子背包\n- **在问题可分解为彼此独立且离散的子问题时，就可使用动态规划来解决**，下面是一些技巧：\n  - **每种动态规划解决方案都涉及网格**\n  - 单元格中的值通常就是你要优化的值。\n  - 每个单元格都是一个子问题，因此应考虑如果将问题分成子问题，这有助于找出网格的坐标轴\n  - **没有放之四海而皆准的计算动态规划解决方案的公式**\n  - 例如，**动态规划甚至可以解决最长公共子串问题**\n    - 两个字符串都包含的最长字串的长度为要优化的值，所以这就是单元格中的值\n    - 是要比较字串，而不是比较单词，故而坐标轴应该是两个单词\n    - 算法：\n      - 如果两个字母不相同，值为 0 \n      - 如果两个字母相同，值为左上角邻居的值加 1\n    - 需要注意的一点是，**这个问题的最终答案并不在最后一个单元格中，答案为网格中最大的数字**\n- `git diff` 是用动态规划实现的\n\n- 费曼算法（Feynman algorithm）\n  - (1) 将问题写下来\n  - (2) 好好思考\n  - (3) 将答案写下来\n- 在计算相似度时，我们通常可以使用余弦相似度或距离算相似度，具体使用哪种方法取决于数据的性质和具体问题的需求。\n  - 余弦相似度（Cosine Similarity）：余弦相似度是衡量两个向量方向之间的相似性。**当我们关注向量的方向而不是其大小时**，通常使用余弦相似度。\n    - 适用情况：\n      - 当文本数据表示为向量（如词袋模型、TF-IDF向量）时，可以使用余弦相似度来比较文本之间的相似性。\n      - 当我们关注特征的方向而不关心其大小时，如**推荐系统中的用户兴趣向量或文档主题向量**，可以使用余弦相似度。\n    - 优点：\n      - 对于高维稀疏数据（如文本），余弦相似度能够有效地忽略向量的大小差异，更关注向量的方向，适用于表示稀疏特征的数据。\n    - 缺点：\n      - 余弦相似度无法捕捉到向量之间的欧几里德距离（大小）信息，可能导致相似度计算不准确。\n  - 距离相似度：距离相似度是通过计算向量之间的距离来度量它们的相似性。常见的距离度量包括欧几里德距离（Euclidean Distance）、曼哈顿距离（Manhattan Distance）和闵可夫斯基距离（Minkowski Distance）等。\n    - 适用情况：\n      - 当我们希望考虑向量的大小信息，或者关注向量之间的距离差异时，可以使用距离相似度。\n      - **当特征空间较小且维度较低（非稀疏）时**，距离相似度通常更适用。\n    - 优点：\n      - 距离相似度可以准确地度量向量之间的距离差异，更适用于表示密集特征的数据。\n    - 缺点：\n      - **距离相似度在处理高维稀疏数据时可能会受到维度灾难（curse of dimensionality）的影响，计算复杂度较高。**\n  - 综上所述，选择使用余弦相似度还是距离相似度取决于数据的特点和具体问题的需求。如果关注特征的方向而不关心其大小，或者处理高维稀疏数据，可以使用余弦相似度。如果需要考虑向量的大小信息，或者处理低维密集数据，可以使用距离相似度。\n- **KNN中如果考虑的邻居太少，结果很可能存在偏差。一个不错的经验规则是：如果有N位用户，应考虑sqrt(N)个邻居**\n- OCR指的是光学字符识别（optical character recongnition）\n- **垃圾邮件过滤器采用的是朴素贝叶斯分类器（Naive Bayes classifier）**\n- 在数组中查找时，最快的方式是二分查找，但问题是，每当有新数据插入数组时需要将数组重新排序，**因为二分查找仅在数组有序时才管用。如果能将数据插入到数组的正确位置就好了**，这样就无需在插入后再排序。为此，有人设计了一种名为**二叉查找树（binary search tree）**的数据结构\n- 一个散列表，将单词映射到包含它的页面。这种数据结构被称为**反向索引（inverted index）**，常用于创建搜索引擎\n- [An Interactive Guide To The Fourier Transform](https://betterexplained.com/articles/an-interactive-guide-to-the-fourier-transform/) 对于傅里叶变换做了一个绝佳的比喻：给它一杯冰沙，它能告诉你其中包含哪些成分。换言之，给定一首歌曲，**傅里叶变换能够将其中的各种频率分离出来**。所以，**傅里叶变换非常适合用于处理信号**，可使用它来压缩音乐。\n- 在最佳情况下，排序算法的速度大致为$O(nlogn)$。众所周知，对数组进行排序时，除非使用并行算法，否则运行时间不可能为O(n)\n- 并行算法，有一点是确定的，那就是**速度的提升并非线性的**，因此即便你的笔记本电脑**装备了两个而不是一个内核，算法的速度也不可能提高一倍**，其中的原因有两个。\n  - **并行性管理开销**\n  - **负载均衡**\n- 有一种特殊的并行算法正越来越流行，它就是**分布式算法**。可让算法在多台计算机上运行。**MapReduce是一种流行的分布式算法**。分布式算法非常适用于在短时间内完成海量工作，**其中MapReduce基于两个简单的理念：映射（map）函数和归并（reduce）函数**\n  - **map就是能够自动将工作分配给计算机，也就是说，映射时将一个数组转换为另一个数组**\n  - **归并是将一个数组转换为一个元素**\n- 当要索引的东西过多时，散列表就稍显乏力。是因为此时的散列表非常大，需要占用大量的存储空间。面临海量数据，**布隆过滤器**提供了解决之道。**布隆过滤器是一种概率性数据结构**，他提供的答案有可能不对，但很可能是正确的。\n- 使用散列表时，答案绝对可靠，而使用布隆过滤器时，答案却是很可能是正确的。\n  - **可能出现漏报的情况**，即指出存储了某个数据，但实际上没有存储\n  - **不可能出现漏报的情况**，即如果布隆过滤器说没有存储某个数据，就肯定没有存储\n  - 布隆过滤器的**优点在于占用的存储空间很少**，非常适用于不要求答案绝对准确的情况\n- HyperLogLog是一种类似于布隆过滤器的算法\n- 散列函数接受一个字符串，并返回一个索引号。**另一种散列函数是安全散列算法（secure hash algorithm，SHA）函数，给定一个字符串，SHA返回其散列值**.\n  - **可以使用SHA来判断两个文件是否相同**，如果两个文件都很大，不需要一一对比，而可计算它们的SHA散列值，再对结果进行比较\n  - SHA也可以用来检查密码，可以将密码转换为散列值，但反过来不行。也就是说**SHA是单向的**\n- **SHA-0 和 SHA-1 已被发现存在一些缺陷**。如果要使用SHA算法来计算密码的散列值，应使用SHA-2 和SHA-3.当前，**最安全的密码散列函数是bcrypt**，但没有任何东西是万无一失的。\n- SHA 还有一个重要特征，那就是**局部不敏感**的。也就是说假设有一个字符串，并计算了其散列值。如果修改其中一个字符，再计算其散列值，结果将截然不同！\n- **如果希望散列函数是局部敏感的，可以使用Simhash**，需要检查两项内容的相似程度时，Simhash很有用\n- Diffie-Hellman算法，它以优雅的方法解决了一个古老的问题：如何对消息进行加密，以便只有收件人才能看懂。Diffie-Hellman算法解决了如下两个问题：\n  - **双发无需知道加密算法**。他们不必会面协商要使用的加密算法\n  - **要破解加密的消息比登天还难**\n- Diffie-Hellman使用两个密钥：公钥和私钥。Diffie-Hellman算法及其替代者**RSA**依然被广泛使用。\n- **线性规划用于在给定约束条件下最大限度地改善指定的指标**。也就是说，最优化问题与线性规划关系密切。所有的图算法都可使用线性规划来实现。线性规划是一个宽泛得多的框架，图问题只是其中的一个子集。**线性规划使用Simplex算法**，很复杂。\n\n> 上述内容来自《算法图解》","slug":"算法","published":1,"updated":"2024-04-25T17:26:47.913Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvjbaqkg005t0vn1e4er4vtx","content":"<ul>\n<li><p>要计算<strong>非加权图</strong>中的最短路径，可使用<strong>广度优先搜索</strong>。要计算<strong>加权图</strong>中的最短路径，可使用<strong>狄克斯特拉算法</strong></p>\n</li>\n<li><p><strong>如果有负权边，就不能使用狄克斯特拉算法.原因在于，已经处理过的结点，可能会由于负权边的原因，更新到它的最近距离</strong>.也就是说，狄克斯特拉算法假设：<strong>对于是处理过的节点，没有前往该节点的更短路径</strong>。<span id=\"more\"></span></p>\n</li>\n<li><p>在包含负权边的图中，要找出最短路径，可使用另一种算法：<strong>贝尔曼-福德算法（Bellman-Ford algorithm）</strong></p>\n</li>\n<li><p><strong>要判断问题是不是NP完全问题很难，易于解决的问题和NP完全问题的差别通常很小</strong>。例如最短路径问题可以解决，但如果要找出经由指定几个点的最短路径，就是旅行商问题—–NP完全问题。简言之，不好判断问题是不是NP完全问题，但还是有一些经验的：</p>\n<ul>\n<li>元素较少时算法的运行速度非常快，但随着元素数量的增加，速度会变得非常慢。</li>\n<li>涉及“所有组合”的问题通常是NP完全问题</li>\n<li>不能将问题分成小问题，必须考虑各种可能的情况。这可能是NP完全问题</li>\n<li>如果问题涉及序列（如旅行商问题中的城市序列）且难以解决，它可能就是NP完全问题</li>\n<li>如果问题涉及集合（如广播台集合）且难以解决，它可能就是NP完全问题</li>\n<li>如果问题可转换为集合覆盖问题或旅行商问题，那它肯定是NP完全问题<blockquote>\n<p>面临NP完全问题时，最佳的做法是使用近似算法，例如贪心算法，易于实现、运行速度快。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>使用动态规划时，要么考虑拿走整件商品，要么考虑不拿，而<strong>没法判断</strong>该不该拿走商品的一部分。但使用<strong>贪心算法可轻松地处理</strong>这种情况！首先，尽可能多地拿价值最高的商品；如果拿光了，再尽可能多地拿价值次高的商品，以此类推</p>\n</li>\n<li><p>动态规划功能强大，它能够解决子问题并使用这些答案来解决大问题，<strong>但仅当每个子问题都是离散的，即不依赖于其他子问题时，动态规划才管用</strong></p>\n</li>\n<li><p><strong>计算最终的解时会涉及两个以上的子背包吗？</strong>根据动态规划算法的设计，最多只需合并两个子背包，即根本不会涉及两个以上的子背包。不过这些子背包可能又包含子背包</p>\n</li>\n<li><p><strong>在问题可分解为彼此独立且离散的子问题时，就可使用动态规划来解决</strong>，下面是一些技巧：</p>\n<ul>\n<li><strong>每种动态规划解决方案都涉及网格</strong></li>\n<li>单元格中的值通常就是你要优化的值。</li>\n<li>每个单元格都是一个子问题，因此应考虑如果将问题分成子问题，这有助于找出网格的坐标轴</li>\n<li><strong>没有放之四海而皆准的计算动态规划解决方案的公式</strong></li>\n<li>例如，<strong>动态规划甚至可以解决最长公共子串问题</strong><ul>\n<li>两个字符串都包含的最长字串的长度为要优化的值，所以这就是单元格中的值</li>\n<li>是要比较字串，而不是比较单词，故而坐标轴应该是两个单词</li>\n<li>算法：<ul>\n<li>如果两个字母不相同，值为 0 </li>\n<li>如果两个字母相同，值为左上角邻居的值加 1</li>\n</ul>\n</li>\n<li>需要注意的一点是，<strong>这个问题的最终答案并不在最后一个单元格中，答案为网格中最大的数字</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><code>git diff</code> 是用动态规划实现的</p>\n</li>\n<li><p>费曼算法（Feynman algorithm）</p>\n<ul>\n<li>(1) 将问题写下来</li>\n<li>(2) 好好思考</li>\n<li>(3) 将答案写下来</li>\n</ul>\n</li>\n<li><p>在计算相似度时，我们通常可以使用余弦相似度或距离算相似度，具体使用哪种方法取决于数据的性质和具体问题的需求。</p>\n<ul>\n<li>余弦相似度（Cosine Similarity）：余弦相似度是衡量两个向量方向之间的相似性。<strong>当我们关注向量的方向而不是其大小时</strong>，通常使用余弦相似度。<ul>\n<li>适用情况：<ul>\n<li>当文本数据表示为向量（如词袋模型、TF-IDF向量）时，可以使用余弦相似度来比较文本之间的相似性。</li>\n<li>当我们关注特征的方向而不关心其大小时，如<strong>推荐系统中的用户兴趣向量或文档主题向量</strong>，可以使用余弦相似度。</li>\n</ul>\n</li>\n<li>优点：<ul>\n<li>对于高维稀疏数据（如文本），余弦相似度能够有效地忽略向量的大小差异，更关注向量的方向，适用于表示稀疏特征的数据。</li>\n</ul>\n</li>\n<li>缺点：<ul>\n<li>余弦相似度无法捕捉到向量之间的欧几里德距离（大小）信息，可能导致相似度计算不准确。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>距离相似度：距离相似度是通过计算向量之间的距离来度量它们的相似性。常见的距离度量包括欧几里德距离（Euclidean Distance）、曼哈顿距离（Manhattan Distance）和闵可夫斯基距离（Minkowski Distance）等。<ul>\n<li>适用情况：<ul>\n<li>当我们希望考虑向量的大小信息，或者关注向量之间的距离差异时，可以使用距离相似度。</li>\n<li><strong>当特征空间较小且维度较低（非稀疏）时</strong>，距离相似度通常更适用。</li>\n</ul>\n</li>\n<li>优点：<ul>\n<li>距离相似度可以准确地度量向量之间的距离差异，更适用于表示密集特征的数据。</li>\n</ul>\n</li>\n<li>缺点：<ul>\n<li><strong>距离相似度在处理高维稀疏数据时可能会受到维度灾难（curse of dimensionality）的影响，计算复杂度较高。</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>综上所述，选择使用余弦相似度还是距离相似度取决于数据的特点和具体问题的需求。如果关注特征的方向而不关心其大小，或者处理高维稀疏数据，可以使用余弦相似度。如果需要考虑向量的大小信息，或者处理低维密集数据，可以使用距离相似度。</li>\n</ul>\n</li>\n<li><p><strong>KNN中如果考虑的邻居太少，结果很可能存在偏差。一个不错的经验规则是：如果有N位用户，应考虑sqrt(N)个邻居</strong></p>\n</li>\n<li><p>OCR指的是光学字符识别（optical character recongnition）</p>\n</li>\n<li><p><strong>垃圾邮件过滤器采用的是朴素贝叶斯分类器（Naive Bayes classifier）</strong></p>\n</li>\n<li><p>在数组中查找时，最快的方式是二分查找，但问题是，每当有新数据插入数组时需要将数组重新排序，<strong>因为二分查找仅在数组有序时才管用。如果能将数据插入到数组的正确位置就好了</strong>，这样就无需在插入后再排序。为此，有人设计了一种名为<strong>二叉查找树（binary search tree）</strong>的数据结构</p>\n</li>\n<li><p>一个散列表，将单词映射到包含它的页面。这种数据结构被称为<strong>反向索引（inverted index）</strong>，常用于创建搜索引擎</p>\n</li>\n<li><p><a href=\"https://betterexplained.com/articles/an-interactive-guide-to-the-fourier-transform/\">An Interactive Guide To The Fourier Transform</a> 对于傅里叶变换做了一个绝佳的比喻：给它一杯冰沙，它能告诉你其中包含哪些成分。换言之，给定一首歌曲，<strong>傅里叶变换能够将其中的各种频率分离出来</strong>。所以，<strong>傅里叶变换非常适合用于处理信号</strong>，可使用它来压缩音乐。</p>\n</li>\n<li><p>在最佳情况下，排序算法的速度大致为$O(nlogn)$。众所周知，对数组进行排序时，除非使用并行算法，否则运行时间不可能为O(n)</p>\n</li>\n<li><p>并行算法，有一点是确定的，那就是<strong>速度的提升并非线性的</strong>，因此即便你的笔记本电脑<strong>装备了两个而不是一个内核，算法的速度也不可能提高一倍</strong>，其中的原因有两个。</p>\n<ul>\n<li><strong>并行性管理开销</strong></li>\n<li><strong>负载均衡</strong></li>\n</ul>\n</li>\n<li><p>有一种特殊的并行算法正越来越流行，它就是<strong>分布式算法</strong>。可让算法在多台计算机上运行。<strong>MapReduce是一种流行的分布式算法</strong>。分布式算法非常适用于在短时间内完成海量工作，<strong>其中MapReduce基于两个简单的理念：映射（map）函数和归并（reduce）函数</strong></p>\n<ul>\n<li><strong>map就是能够自动将工作分配给计算机，也就是说，映射时将一个数组转换为另一个数组</strong></li>\n<li><strong>归并是将一个数组转换为一个元素</strong></li>\n</ul>\n</li>\n<li><p>当要索引的东西过多时，散列表就稍显乏力。是因为此时的散列表非常大，需要占用大量的存储空间。面临海量数据，<strong>布隆过滤器</strong>提供了解决之道。<strong>布隆过滤器是一种概率性数据结构</strong>，他提供的答案有可能不对，但很可能是正确的。</p>\n</li>\n<li><p>使用散列表时，答案绝对可靠，而使用布隆过滤器时，答案却是很可能是正确的。</p>\n<ul>\n<li><strong>可能出现漏报的情况</strong>，即指出存储了某个数据，但实际上没有存储</li>\n<li><strong>不可能出现漏报的情况</strong>，即如果布隆过滤器说没有存储某个数据，就肯定没有存储</li>\n<li>布隆过滤器的<strong>优点在于占用的存储空间很少</strong>，非常适用于不要求答案绝对准确的情况</li>\n</ul>\n</li>\n<li><p>HyperLogLog是一种类似于布隆过滤器的算法</p>\n</li>\n<li><p>散列函数接受一个字符串，并返回一个索引号。<strong>另一种散列函数是安全散列算法（secure hash algorithm，SHA）函数，给定一个字符串，SHA返回其散列值</strong>.</p>\n<ul>\n<li><strong>可以使用SHA来判断两个文件是否相同</strong>，如果两个文件都很大，不需要一一对比，而可计算它们的SHA散列值，再对结果进行比较</li>\n<li>SHA也可以用来检查密码，可以将密码转换为散列值，但反过来不行。也就是说<strong>SHA是单向的</strong></li>\n</ul>\n</li>\n<li><p><strong>SHA-0 和 SHA-1 已被发现存在一些缺陷</strong>。如果要使用SHA算法来计算密码的散列值，应使用SHA-2 和SHA-3.当前，<strong>最安全的密码散列函数是bcrypt</strong>，但没有任何东西是万无一失的。</p>\n</li>\n<li><p>SHA 还有一个重要特征，那就是<strong>局部不敏感</strong>的。也就是说假设有一个字符串，并计算了其散列值。如果修改其中一个字符，再计算其散列值，结果将截然不同！</p>\n</li>\n<li><p><strong>如果希望散列函数是局部敏感的，可以使用Simhash</strong>，需要检查两项内容的相似程度时，Simhash很有用</p>\n</li>\n<li><p>Diffie-Hellman算法，它以优雅的方法解决了一个古老的问题：如何对消息进行加密，以便只有收件人才能看懂。Diffie-Hellman算法解决了如下两个问题：</p>\n<ul>\n<li><strong>双发无需知道加密算法</strong>。他们不必会面协商要使用的加密算法</li>\n<li><strong>要破解加密的消息比登天还难</strong></li>\n</ul>\n</li>\n<li><p>Diffie-Hellman使用两个密钥：公钥和私钥。Diffie-Hellman算法及其替代者<strong>RSA</strong>依然被广泛使用。</p>\n</li>\n<li><p><strong>线性规划用于在给定约束条件下最大限度地改善指定的指标</strong>。也就是说，最优化问题与线性规划关系密切。所有的图算法都可使用线性规划来实现。线性规划是一个宽泛得多的框架，图问题只是其中的一个子集。<strong>线性规划使用Simplex算法</strong>，很复杂。</p>\n</li>\n</ul>\n<blockquote>\n<p>上述内容来自《算法图解》</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<ul>\n<li><p>要计算<strong>非加权图</strong>中的最短路径，可使用<strong>广度优先搜索</strong>。要计算<strong>加权图</strong>中的最短路径，可使用<strong>狄克斯特拉算法</strong></p>\n</li>\n<li><p><strong>如果有负权边，就不能使用狄克斯特拉算法.原因在于，已经处理过的结点，可能会由于负权边的原因，更新到它的最近距离</strong>.也就是说，狄克斯特拉算法假设：<strong>对于是处理过的节点，没有前往该节点的更短路径</strong>。</p></li></ul>","more":"<p></p>\n\n<li><p>在包含负权边的图中，要找出最短路径，可使用另一种算法：<strong>贝尔曼-福德算法（Bellman-Ford algorithm）</strong></p>\n</li>\n<li><p><strong>要判断问题是不是NP完全问题很难，易于解决的问题和NP完全问题的差别通常很小</strong>。例如最短路径问题可以解决，但如果要找出经由指定几个点的最短路径，就是旅行商问题—–NP完全问题。简言之，不好判断问题是不是NP完全问题，但还是有一些经验的：</p>\n<ul>\n<li>元素较少时算法的运行速度非常快，但随着元素数量的增加，速度会变得非常慢。</li>\n<li>涉及“所有组合”的问题通常是NP完全问题</li>\n<li>不能将问题分成小问题，必须考虑各种可能的情况。这可能是NP完全问题</li>\n<li>如果问题涉及序列（如旅行商问题中的城市序列）且难以解决，它可能就是NP完全问题</li>\n<li>如果问题涉及集合（如广播台集合）且难以解决，它可能就是NP完全问题</li>\n<li>如果问题可转换为集合覆盖问题或旅行商问题，那它肯定是NP完全问题<blockquote>\n<p>面临NP完全问题时，最佳的做法是使用近似算法，例如贪心算法，易于实现、运行速度快。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>使用动态规划时，要么考虑拿走整件商品，要么考虑不拿，而<strong>没法判断</strong>该不该拿走商品的一部分。但使用<strong>贪心算法可轻松地处理</strong>这种情况！首先，尽可能多地拿价值最高的商品；如果拿光了，再尽可能多地拿价值次高的商品，以此类推</p>\n</li>\n<li><p>动态规划功能强大，它能够解决子问题并使用这些答案来解决大问题，<strong>但仅当每个子问题都是离散的，即不依赖于其他子问题时，动态规划才管用</strong></p>\n</li>\n<li><p><strong>计算最终的解时会涉及两个以上的子背包吗？</strong>根据动态规划算法的设计，最多只需合并两个子背包，即根本不会涉及两个以上的子背包。不过这些子背包可能又包含子背包</p>\n</li>\n<li><p><strong>在问题可分解为彼此独立且离散的子问题时，就可使用动态规划来解决</strong>，下面是一些技巧：</p>\n<ul>\n<li><strong>每种动态规划解决方案都涉及网格</strong></li>\n<li>单元格中的值通常就是你要优化的值。</li>\n<li>每个单元格都是一个子问题，因此应考虑如果将问题分成子问题，这有助于找出网格的坐标轴</li>\n<li><strong>没有放之四海而皆准的计算动态规划解决方案的公式</strong></li>\n<li>例如，<strong>动态规划甚至可以解决最长公共子串问题</strong><ul>\n<li>两个字符串都包含的最长字串的长度为要优化的值，所以这就是单元格中的值</li>\n<li>是要比较字串，而不是比较单词，故而坐标轴应该是两个单词</li>\n<li>算法：<ul>\n<li>如果两个字母不相同，值为 0 </li>\n<li>如果两个字母相同，值为左上角邻居的值加 1</li>\n</ul>\n</li>\n<li>需要注意的一点是，<strong>这个问题的最终答案并不在最后一个单元格中，答案为网格中最大的数字</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><code>git diff</code> 是用动态规划实现的</p>\n</li>\n<li><p>费曼算法（Feynman algorithm）</p>\n<ul>\n<li>(1) 将问题写下来</li>\n<li>(2) 好好思考</li>\n<li>(3) 将答案写下来</li>\n</ul>\n</li>\n<li><p>在计算相似度时，我们通常可以使用余弦相似度或距离算相似度，具体使用哪种方法取决于数据的性质和具体问题的需求。</p>\n<ul>\n<li>余弦相似度（Cosine Similarity）：余弦相似度是衡量两个向量方向之间的相似性。<strong>当我们关注向量的方向而不是其大小时</strong>，通常使用余弦相似度。<ul>\n<li>适用情况：<ul>\n<li>当文本数据表示为向量（如词袋模型、TF-IDF向量）时，可以使用余弦相似度来比较文本之间的相似性。</li>\n<li>当我们关注特征的方向而不关心其大小时，如<strong>推荐系统中的用户兴趣向量或文档主题向量</strong>，可以使用余弦相似度。</li>\n</ul>\n</li>\n<li>优点：<ul>\n<li>对于高维稀疏数据（如文本），余弦相似度能够有效地忽略向量的大小差异，更关注向量的方向，适用于表示稀疏特征的数据。</li>\n</ul>\n</li>\n<li>缺点：<ul>\n<li>余弦相似度无法捕捉到向量之间的欧几里德距离（大小）信息，可能导致相似度计算不准确。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>距离相似度：距离相似度是通过计算向量之间的距离来度量它们的相似性。常见的距离度量包括欧几里德距离（Euclidean Distance）、曼哈顿距离（Manhattan Distance）和闵可夫斯基距离（Minkowski Distance）等。<ul>\n<li>适用情况：<ul>\n<li>当我们希望考虑向量的大小信息，或者关注向量之间的距离差异时，可以使用距离相似度。</li>\n<li><strong>当特征空间较小且维度较低（非稀疏）时</strong>，距离相似度通常更适用。</li>\n</ul>\n</li>\n<li>优点：<ul>\n<li>距离相似度可以准确地度量向量之间的距离差异，更适用于表示密集特征的数据。</li>\n</ul>\n</li>\n<li>缺点：<ul>\n<li><strong>距离相似度在处理高维稀疏数据时可能会受到维度灾难（curse of dimensionality）的影响，计算复杂度较高。</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>综上所述，选择使用余弦相似度还是距离相似度取决于数据的特点和具体问题的需求。如果关注特征的方向而不关心其大小，或者处理高维稀疏数据，可以使用余弦相似度。如果需要考虑向量的大小信息，或者处理低维密集数据，可以使用距离相似度。</li>\n</ul>\n</li>\n<li><p><strong>KNN中如果考虑的邻居太少，结果很可能存在偏差。一个不错的经验规则是：如果有N位用户，应考虑sqrt(N)个邻居</strong></p>\n</li>\n<li><p>OCR指的是光学字符识别（optical character recongnition）</p>\n</li>\n<li><p><strong>垃圾邮件过滤器采用的是朴素贝叶斯分类器（Naive Bayes classifier）</strong></p>\n</li>\n<li><p>在数组中查找时，最快的方式是二分查找，但问题是，每当有新数据插入数组时需要将数组重新排序，<strong>因为二分查找仅在数组有序时才管用。如果能将数据插入到数组的正确位置就好了</strong>，这样就无需在插入后再排序。为此，有人设计了一种名为<strong>二叉查找树（binary search tree）</strong>的数据结构</p>\n</li>\n<li><p>一个散列表，将单词映射到包含它的页面。这种数据结构被称为<strong>反向索引（inverted index）</strong>，常用于创建搜索引擎</p>\n</li>\n<li><p><a href=\"https://betterexplained.com/articles/an-interactive-guide-to-the-fourier-transform/\">An Interactive Guide To The Fourier Transform</a> 对于傅里叶变换做了一个绝佳的比喻：给它一杯冰沙，它能告诉你其中包含哪些成分。换言之，给定一首歌曲，<strong>傅里叶变换能够将其中的各种频率分离出来</strong>。所以，<strong>傅里叶变换非常适合用于处理信号</strong>，可使用它来压缩音乐。</p>\n</li>\n<li><p>在最佳情况下，排序算法的速度大致为$O(nlogn)$。众所周知，对数组进行排序时，除非使用并行算法，否则运行时间不可能为O(n)</p>\n</li>\n<li><p>并行算法，有一点是确定的，那就是<strong>速度的提升并非线性的</strong>，因此即便你的笔记本电脑<strong>装备了两个而不是一个内核，算法的速度也不可能提高一倍</strong>，其中的原因有两个。</p>\n<ul>\n<li><strong>并行性管理开销</strong></li>\n<li><strong>负载均衡</strong></li>\n</ul>\n</li>\n<li><p>有一种特殊的并行算法正越来越流行，它就是<strong>分布式算法</strong>。可让算法在多台计算机上运行。<strong>MapReduce是一种流行的分布式算法</strong>。分布式算法非常适用于在短时间内完成海量工作，<strong>其中MapReduce基于两个简单的理念：映射（map）函数和归并（reduce）函数</strong></p>\n<ul>\n<li><strong>map就是能够自动将工作分配给计算机，也就是说，映射时将一个数组转换为另一个数组</strong></li>\n<li><strong>归并是将一个数组转换为一个元素</strong></li>\n</ul>\n</li>\n<li><p>当要索引的东西过多时，散列表就稍显乏力。是因为此时的散列表非常大，需要占用大量的存储空间。面临海量数据，<strong>布隆过滤器</strong>提供了解决之道。<strong>布隆过滤器是一种概率性数据结构</strong>，他提供的答案有可能不对，但很可能是正确的。</p>\n</li>\n<li><p>使用散列表时，答案绝对可靠，而使用布隆过滤器时，答案却是很可能是正确的。</p>\n<ul>\n<li><strong>可能出现漏报的情况</strong>，即指出存储了某个数据，但实际上没有存储</li>\n<li><strong>不可能出现漏报的情况</strong>，即如果布隆过滤器说没有存储某个数据，就肯定没有存储</li>\n<li>布隆过滤器的<strong>优点在于占用的存储空间很少</strong>，非常适用于不要求答案绝对准确的情况</li>\n</ul>\n</li>\n<li><p>HyperLogLog是一种类似于布隆过滤器的算法</p>\n</li>\n<li><p>散列函数接受一个字符串，并返回一个索引号。<strong>另一种散列函数是安全散列算法（secure hash algorithm，SHA）函数，给定一个字符串，SHA返回其散列值</strong>.</p>\n<ul>\n<li><strong>可以使用SHA来判断两个文件是否相同</strong>，如果两个文件都很大，不需要一一对比，而可计算它们的SHA散列值，再对结果进行比较</li>\n<li>SHA也可以用来检查密码，可以将密码转换为散列值，但反过来不行。也就是说<strong>SHA是单向的</strong></li>\n</ul>\n</li>\n<li><p><strong>SHA-0 和 SHA-1 已被发现存在一些缺陷</strong>。如果要使用SHA算法来计算密码的散列值，应使用SHA-2 和SHA-3.当前，<strong>最安全的密码散列函数是bcrypt</strong>，但没有任何东西是万无一失的。</p>\n</li>\n<li><p>SHA 还有一个重要特征，那就是<strong>局部不敏感</strong>的。也就是说假设有一个字符串，并计算了其散列值。如果修改其中一个字符，再计算其散列值，结果将截然不同！</p>\n</li>\n<li><p><strong>如果希望散列函数是局部敏感的，可以使用Simhash</strong>，需要检查两项内容的相似程度时，Simhash很有用</p>\n</li>\n<li><p>Diffie-Hellman算法，它以优雅的方法解决了一个古老的问题：如何对消息进行加密，以便只有收件人才能看懂。Diffie-Hellman算法解决了如下两个问题：</p>\n<ul>\n<li><strong>双发无需知道加密算法</strong>。他们不必会面协商要使用的加密算法</li>\n<li><strong>要破解加密的消息比登天还难</strong></li>\n</ul>\n</li>\n<li><p>Diffie-Hellman使用两个密钥：公钥和私钥。Diffie-Hellman算法及其替代者<strong>RSA</strong>依然被广泛使用。</p>\n</li>\n<li><p><strong>线性规划用于在给定约束条件下最大限度地改善指定的指标</strong>。也就是说，最优化问题与线性规划关系密切。所有的图算法都可使用线性规划来实现。线性规划是一个宽泛得多的框架，图问题只是其中的一个子集。<strong>线性规划使用Simplex算法</strong>，很复杂。</p>\n</li>\n\n<blockquote>\n<p>上述内容来自《算法图解》</p>\n</blockquote>"},{"title":"网关代理","date":"2023-05-25T16:31:34.000Z","declare":true,"_content":"拓扑图如下：<!--more-->\n![20230525163331](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230525163331.png)\n[安卓手机充当旁路网关](https://youtu.be/r6nXCgYkXTQ)\n- Mac、Linux使用clash的TUN模式并开启ip转发\n  - Linux开启ip转发：`sysctl -w net.ipv4.ip_forward=1`<!--more-->\n  - Mac开启ip转发：`sysctl -w net.inet.ip.forwarding=1`\n> Mac系统也可以直接使用[clashX Pro](https://install.appcenter.ms/users/clashx/apps/clashx-pro/distribution_groups/public)的增强模式实现\n\n- 安装服务，之后reload app\n![20230525164402](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230525164402.png)\n- 此时 Service Mode旁边的地球应该从灰色变成绿色 \n- 打开TUN Mode\n![20230525165051](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230525165051.png)\n\n- 接下来让其余电脑填写本机的ip作为网关即可\n> 本机的网关不要修改\n-----------------------------\nreferences\n[【建议收藏】一个视频讲清楚所有局域网共享科学上网方法，让家里所有网络设备无需安装代理工具即可翻墙，没有软路由怎么让全家科学上网？http代理/socks代理/透明代理/WIFI热点，总有一种方法适合你](https://youtu.be/GjhetHGIKLg)\n[【全网首发】windows系统充当软路由，实现全家科学上网，小白也能轻松上手，代替电视盒子的openwrt，旁路网关、旁路由、透明代理、透明网关、网关代理、网关模式](https://youtu.be/dpmnkKhBFtc)\n[将科学上网环境共享给局域网内其它设备的各种方式](https://bulianglin.com/archives/sharenetwork.html)\n\n------------------------------\n- 通过修改sysctl.conf文件来实现ip转发功能的开机自启动。\n```shell\nsudo vim /etc/sysctl.conf\nnet.ipv4.ip_forward=1 # 在文件末尾添加内容\n```\n- 使修改生效：`sudo sysctl -p`\n","source":"_posts/网关代理.md","raw":"---\ntitle: 网关代理\ndate: 2023-05-25 16:31:34\ntags:\n  - 路由器\ndeclare: true\n---\n拓扑图如下：<!--more-->\n![20230525163331](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230525163331.png)\n[安卓手机充当旁路网关](https://youtu.be/r6nXCgYkXTQ)\n- Mac、Linux使用clash的TUN模式并开启ip转发\n  - Linux开启ip转发：`sysctl -w net.ipv4.ip_forward=1`<!--more-->\n  - Mac开启ip转发：`sysctl -w net.inet.ip.forwarding=1`\n> Mac系统也可以直接使用[clashX Pro](https://install.appcenter.ms/users/clashx/apps/clashx-pro/distribution_groups/public)的增强模式实现\n\n- 安装服务，之后reload app\n![20230525164402](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230525164402.png)\n- 此时 Service Mode旁边的地球应该从灰色变成绿色 \n- 打开TUN Mode\n![20230525165051](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230525165051.png)\n\n- 接下来让其余电脑填写本机的ip作为网关即可\n> 本机的网关不要修改\n-----------------------------\nreferences\n[【建议收藏】一个视频讲清楚所有局域网共享科学上网方法，让家里所有网络设备无需安装代理工具即可翻墙，没有软路由怎么让全家科学上网？http代理/socks代理/透明代理/WIFI热点，总有一种方法适合你](https://youtu.be/GjhetHGIKLg)\n[【全网首发】windows系统充当软路由，实现全家科学上网，小白也能轻松上手，代替电视盒子的openwrt，旁路网关、旁路由、透明代理、透明网关、网关代理、网关模式](https://youtu.be/dpmnkKhBFtc)\n[将科学上网环境共享给局域网内其它设备的各种方式](https://bulianglin.com/archives/sharenetwork.html)\n\n------------------------------\n- 通过修改sysctl.conf文件来实现ip转发功能的开机自启动。\n```shell\nsudo vim /etc/sysctl.conf\nnet.ipv4.ip_forward=1 # 在文件末尾添加内容\n```\n- 使修改生效：`sudo sysctl -p`\n","slug":"网关代理","published":1,"updated":"2024-04-25T17:26:45.913Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvjbaqki005w0vn1cht36f95","content":"<p>拓扑图如下：<span id=\"more\"></span><br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230525163331.png\" alt=\"20230525163331\"><br><a href=\"https://youtu.be/r6nXCgYkXTQ\">安卓手机充当旁路网关</a></p>\n<ul>\n<li><p>Mac、Linux使用clash的TUN模式并开启ip转发</p>\n<ul>\n<li>Linux开启ip转发：<code>sysctl -w net.ipv4.ip_forward=1</code><!--more--></li>\n<li>Mac开启ip转发：<code>sysctl -w net.inet.ip.forwarding=1</code><blockquote>\n<p>Mac系统也可以直接使用<a href=\"https://install.appcenter.ms/users/clashx/apps/clashx-pro/distribution_groups/public\">clashX Pro</a>的增强模式实现</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>安装服务，之后reload app<br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230525164402.png\" alt=\"20230525164402\"></p>\n</li>\n<li><p>此时 Service Mode旁边的地球应该从灰色变成绿色 </p>\n</li>\n<li><p>打开TUN Mode<br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230525165051.png\" alt=\"20230525165051\"></p>\n</li>\n<li><p>接下来让其余电脑填写本机的ip作为网关即可</p>\n<blockquote>\n<p>本机的网关不要修改</p>\n</blockquote>\n</li>\n</ul>\n<hr>\n<p>references<br><a href=\"https://youtu.be/GjhetHGIKLg\">【建议收藏】一个视频讲清楚所有局域网共享科学上网方法，让家里所有网络设备无需安装代理工具即可翻墙，没有软路由怎么让全家科学上网？http代理&#x2F;socks代理&#x2F;透明代理&#x2F;WIFI热点，总有一种方法适合你</a><br><a href=\"https://youtu.be/dpmnkKhBFtc\">【全网首发】windows系统充当软路由，实现全家科学上网，小白也能轻松上手，代替电视盒子的openwrt，旁路网关、旁路由、透明代理、透明网关、网关代理、网关模式</a><br><a href=\"https://bulianglin.com/archives/sharenetwork.html\">将科学上网环境共享给局域网内其它设备的各种方式</a></p>\n<hr>\n<ul>\n<li>通过修改sysctl.conf文件来实现ip转发功能的开机自启动。<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vim /etc/sysctl.conf</span><br><span class=\"line\">net.ipv4.ip_forward=1 # 在文件末尾添加内容</span><br></pre></td></tr></table></figure></li>\n<li>使修改生效：<code>sudo sysctl -p</code></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>拓扑图如下：</p>","more":"<br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230525163331.png\" alt=\"20230525163331\"><br><a href=\"https://youtu.be/r6nXCgYkXTQ\">安卓手机充当旁路网关</a><p></p>\n<ul>\n<li><p>Mac、Linux使用clash的TUN模式并开启ip转发</p>\n<ul>\n<li>Linux开启ip转发：<code>sysctl -w net.ipv4.ip_forward=1</code><!--more--></li>\n<li>Mac开启ip转发：<code>sysctl -w net.inet.ip.forwarding=1</code><blockquote>\n<p>Mac系统也可以直接使用<a href=\"https://install.appcenter.ms/users/clashx/apps/clashx-pro/distribution_groups/public\">clashX Pro</a>的增强模式实现</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>安装服务，之后reload app<br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230525164402.png\" alt=\"20230525164402\"></p>\n</li>\n<li><p>此时 Service Mode旁边的地球应该从灰色变成绿色 </p>\n</li>\n<li><p>打开TUN Mode<br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230525165051.png\" alt=\"20230525165051\"></p>\n</li>\n<li><p>接下来让其余电脑填写本机的ip作为网关即可</p>\n<blockquote>\n<p>本机的网关不要修改</p>\n</blockquote>\n</li>\n</ul>\n<hr>\n<p>references<br><a href=\"https://youtu.be/GjhetHGIKLg\">【建议收藏】一个视频讲清楚所有局域网共享科学上网方法，让家里所有网络设备无需安装代理工具即可翻墙，没有软路由怎么让全家科学上网？http代理&#x2F;socks代理&#x2F;透明代理&#x2F;WIFI热点，总有一种方法适合你</a><br><a href=\"https://youtu.be/dpmnkKhBFtc\">【全网首发】windows系统充当软路由，实现全家科学上网，小白也能轻松上手，代替电视盒子的openwrt，旁路网关、旁路由、透明代理、透明网关、网关代理、网关模式</a><br><a href=\"https://bulianglin.com/archives/sharenetwork.html\">将科学上网环境共享给局域网内其它设备的各种方式</a></p>\n<hr>\n<ul>\n<li>通过修改sysctl.conf文件来实现ip转发功能的开机自启动。<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vim /etc/sysctl.conf</span><br><span class=\"line\">net.ipv4.ip_forward=1 # 在文件末尾添加内容</span><br></pre></td></tr></table></figure></li>\n<li>使修改生效：<code>sudo sysctl -p</code></li>\n</ul>"},{"title":"节点和客户端的选择","date":"2023-06-04T23:17:12.000Z","declare":true,"password":"ysyhl_9T","_content":"测速好用节点如下：<!--more-->\n- 性价比\n  - 日本1\n  - 新加坡1\n  - 新加坡2\n  - 香港3\n  - 日本2\n  - 防污染5\n  - 防污染4\n  - 日本3\n- 魔戒\n  - 日本优化\n  - 美国LA.优化(ChatGPT)\n  - 日本-优化2\n  - 美国LA-优化3 (ChatGPT)\n  - 新加坡-优化\n  - 新加坡-优化2\n  - 香港Az-优化2\n  - 韩国KR-T\n  - 日本-优化3\n  - 日本JP-T\n- nano\n  - 日本草草莓大福01-IAPL2-IP\n- 赔钱\n  - AWS I JP | IPLC专线2号\n  - AWS| SG | IPLC专线1号\n  - AZ |JP | IPLC专线1号\n  - AZ|SG|IPLC专线2号\n  - AWS |JP | IPLC专线3号\n  - AZ | SG | IPLC专线1号\n  - 新加坡|三网低延迟| IPLC专线\n- 极速云\n  - 日本4|GPT|奈飞|\n  - 新加坡8|GPT|奈飞|\n  - 香港8|GPT|奈飞|\n  - 香港4|GPT|奈飞|\n  - 香港1|GPT|奈飞|\n  - 香港3|GPT|奈飞|\n  - 香港5|GPT|奈飞|\n\n\n\n-------------------------------------------------\n\n- nano测速图\n  - 平时的测试\n![20230531-141345](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230531-141345.png)\n  - 高峰期的测试\n![20230531-190910](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230531-190910.png)\n  - 特殊时期的测试\n![20230604-202254](https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20230604-202254.png)\n\n--------------------------------------------------------\n- 性价比测速图\n  - 平时的测试\n![20230531-130354](https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20230531-130354.png)\n  - 高峰期的测试\n![20230531-185728](https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20230531-185728.png)\n  - 特殊时期的测试\n![20230604-204623](https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20230604-204623.png)\n\n--------------------------------------------------------\n- 赔钱测速图\n  - 平时的测试\n![20230531-131834](https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20230531-131834.png)\n  - 高峰期的测试\n![20230531-183856](https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20230531-183856.png)\n  - 特殊时期的测试\n![20230604-205848](https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20230604-205848.png)\n\n--------------------------------------------------------\n- 魔戒测速图\n  - 平时的测试\n![20230605-151626](https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20230605-151626.png)\n  - 高峰期的测试\n\n  - 特殊时期的测试\n![20230604-195852](https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20230604-195852.png)\n\n-------------------------------------------------------------\n- 极速云测速图\n  - 平时的测试\n![20230623-092834](https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20230623-092834.png)\n  - 高峰期的测试\n![20230622-210242](https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20230622-210242.png)\n  - 特殊时期的测试\n\n\n------------------------------------------\n- 总结\n> 应该使用三个客户端，passwall、ssrplus和helloworld（vssr），其中passwall用来跑赔钱，可以运行chatgpt；ssrplus用来跑性价比；helloword跑魔戒，最稳定\n> 这应该是最好的方式了\n\n----------------------------------\n补充：赔钱、性价比都没有通过v2ray的真连接测试，放路由器里面非常不稳定。\n再补充：只有极速云和魔戒是靠谱的","source":"_posts/节点和客户端的选择.md","raw":"---\ntitle: 节点和客户端的选择\ndate: 2023-06-04 23:17:12\ntags:\n  - 科学上网\ndeclare: true\npassword: ysyhl_9T\n---\n测速好用节点如下：<!--more-->\n- 性价比\n  - 日本1\n  - 新加坡1\n  - 新加坡2\n  - 香港3\n  - 日本2\n  - 防污染5\n  - 防污染4\n  - 日本3\n- 魔戒\n  - 日本优化\n  - 美国LA.优化(ChatGPT)\n  - 日本-优化2\n  - 美国LA-优化3 (ChatGPT)\n  - 新加坡-优化\n  - 新加坡-优化2\n  - 香港Az-优化2\n  - 韩国KR-T\n  - 日本-优化3\n  - 日本JP-T\n- nano\n  - 日本草草莓大福01-IAPL2-IP\n- 赔钱\n  - AWS I JP | IPLC专线2号\n  - AWS| SG | IPLC专线1号\n  - AZ |JP | IPLC专线1号\n  - AZ|SG|IPLC专线2号\n  - AWS |JP | IPLC专线3号\n  - AZ | SG | IPLC专线1号\n  - 新加坡|三网低延迟| IPLC专线\n- 极速云\n  - 日本4|GPT|奈飞|\n  - 新加坡8|GPT|奈飞|\n  - 香港8|GPT|奈飞|\n  - 香港4|GPT|奈飞|\n  - 香港1|GPT|奈飞|\n  - 香港3|GPT|奈飞|\n  - 香港5|GPT|奈飞|\n\n\n\n-------------------------------------------------\n\n- nano测速图\n  - 平时的测试\n![20230531-141345](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230531-141345.png)\n  - 高峰期的测试\n![20230531-190910](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230531-190910.png)\n  - 特殊时期的测试\n![20230604-202254](https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20230604-202254.png)\n\n--------------------------------------------------------\n- 性价比测速图\n  - 平时的测试\n![20230531-130354](https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20230531-130354.png)\n  - 高峰期的测试\n![20230531-185728](https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20230531-185728.png)\n  - 特殊时期的测试\n![20230604-204623](https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20230604-204623.png)\n\n--------------------------------------------------------\n- 赔钱测速图\n  - 平时的测试\n![20230531-131834](https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20230531-131834.png)\n  - 高峰期的测试\n![20230531-183856](https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20230531-183856.png)\n  - 特殊时期的测试\n![20230604-205848](https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20230604-205848.png)\n\n--------------------------------------------------------\n- 魔戒测速图\n  - 平时的测试\n![20230605-151626](https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20230605-151626.png)\n  - 高峰期的测试\n\n  - 特殊时期的测试\n![20230604-195852](https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20230604-195852.png)\n\n-------------------------------------------------------------\n- 极速云测速图\n  - 平时的测试\n![20230623-092834](https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20230623-092834.png)\n  - 高峰期的测试\n![20230622-210242](https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20230622-210242.png)\n  - 特殊时期的测试\n\n\n------------------------------------------\n- 总结\n> 应该使用三个客户端，passwall、ssrplus和helloworld（vssr），其中passwall用来跑赔钱，可以运行chatgpt；ssrplus用来跑性价比；helloword跑魔戒，最稳定\n> 这应该是最好的方式了\n\n----------------------------------\n补充：赔钱、性价比都没有通过v2ray的真连接测试，放路由器里面非常不稳定。\n再补充：只有极速云和魔戒是靠谱的","slug":"节点和客户端的选择","published":1,"updated":"2024-04-25T17:26:47.383Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvjbaqkj005y0vn19xh35o8p","content":"<div class=\"hbe hbe-container\" id=\"hexo-blog-encrypt\" data-wpm=\"Oh, this is an invalid password. Check and try again, please.\" data-whm=\"OOPS, these decrypted content may changed, but you can still have a look.\">\n  <script id=\"hbeData\" type=\"hbeData\" data-hmacdigest=\"88efb285b4d6002e51e1a8662e5dcd48affc67202ce0308ff9f8295d91d49aea\">3c80f97a31aabd0aff25829721ee67b664cf945facf2946a63334d772ded010257c163259081b319d3c0af6d5b4a7aeecdceb6174fa1ca58ed69eab334b3d473549532b19b857f5e3effa4d4b0cea02aa322eb103387c34798cacf0b5b8f1b6d8bcee027e0106030e73eae6a76a892e6ed199b2dd3f81d95162d2aaf585aea7065b02c542c34ff649c8ca5729837ab6635629b9671cbfa706e6e7bd0fd7cb2b9cd42223758b0ffad4ddc6fbb47325a2c39a3443aceeda41d94a6a40c725772a91c8a804f64ddc983cae04a4682e7b042a6076b9334e9f3ea585e85d5ad9cbcab0041cf84507489b04428a6c4e06db74d639d114438d401696f2bdbc6cf5a6451a12d81bee4a82a38315b042e1f6ed81e7b88f0ef0007190c2f12f6c6f73ef9d5bed178f5eccd3f681c38f3d164c3a2f4287db32201a3c4be582fd6ced1e3cde26485ba9364128d6ee0c02f277a4e6d328b4ee80021c94bfb27cf44bba5509ab0d4dafba2b84083e91831c52ea27057803c4cc6de75e2c7908b8969c2f013837607716fabfcab0980fdcbbf4eb7ac0e543f236fa95b26f47bf7fb8030e5746f9588739d1cf0c92d496f7a70aa728ec24fa17a9b1326871558a5be980e16eaf0ff110ec1f4e0220d428d17ee20b36cb4038d6bbd655b3819cef3fb66bf42a9c862b1f5ff7ec6f57c6df63c77db22710ca1ecd0b9f6e439d3880ec697c2d66567a8995cda452aaf42b23120f8efaf98d9287ad16c5e8b4ba53e9b5cd928ea7bd8672444341b79c2588062d9867f0b5302304e5ba9f40757e5571a29e3e99bceb1a803bdbfd1194c7f89622f5bba98c251be9f48759b85bc5db40d675d65498fdb55031de7b09827c306a1e19b453bd91f3a979ec84fbf617ecb2820b132a07f4d3d4bc159378f64ffd78f6d19c4189e7f67e8b326bdf5d9541925cacf2c40721ff5a3151f7ef6d05b04a3c057517de3f53a7b9c7e9d5f5db4968668ef3f171681468cc7da02385d61d84185416715d171f0c748be07d3a03bceba68b1ff40069a3254650b7cfe866cd0b6f0a46f2bc88e66b6bb1573203479bd243ec045c5985b3a1dc213c17ca6a61468a264487c106a42d870f7eecc6ff007eb29cc4ed634384c57411ae49effec67b6b336e1c23aaab996d3370642f84c6293431b1f00f0beb097adc72dd6686689396bbf014259ab29a601f766ece6e3fc3066b7094d01acd3fbb7d7133e29c6d050cfb60f52e56f5aa38f2c95005aeebf6dc5e1cd4099b400ae566a9a397bc3e02dabdc0a05362afcc7fc9849fc65889c7ef66a08ad0c8e73129454486d8ac0fac3c237cf192ddeace30cecd639f95765511acd49132cdd3225888ba1be17a5a650d21cdcce7535ef9090c2a430f2428c1716644a056da35572e00ea566f567d65d425f7be1f4a36e1f29d8ffb56367ced65c31a3f4328e571746564129ad37484df00743b83f4e4708de3e650e787154d13549dbbcf824f1f2928b2c64a614cdb2509bad69f4480fc8e3d4b1a0baff2767094024b7e85c0d58994f1eafd471706422b96d18489b425f4909fae67ca1e722e4af9f05828b0939de96bce589981e3045d6b921909c2fae444ee9a8c3ccb3078186b312f9af10772664b057b2db03eeaa61fee7a5807dad106bd4fb8083597bb2abfffb88a7dffa18750dc416b3bfc34db4885cddc91bc953d3099c5e3cb3041b2504a521e482f618ac3f895cc2596e7b4835a9b98daaf86f05f7154fc57c367fc45e92d09497043b3699bf319e6b54d067fb27302fecbc01a6647d1c62bcbf5abacbc9b2672a3e4951bf63a87ac1a8c58d5ac9f7b7bb46866a3b129f30a993595ea120bcdb616cdc3eefb3bd4f66e998a817574217ac8f26db5666c2f451d569cabdb33b671813c9c7709d7718fae24b3715b08f923ebaf73957776ff4c68acf630aefebade8ebed9b42bc2bc25ce4da9d9da3d8cdd7eb593e249ee77a6072a77cc24540f47e52227301f7ddb5acff0e1bcde9a3948d1a05a96502d887099ab7990728a67a9d4ded3496685195a98dbab80f3fe01e7687ca118640600bd1ac027cb21b87a4b1b54b9d7a782ae3ff6bbb127eb3e2a14fb4f28ca638d2f29e00a1703695f86599b2900c88cf509dca3c217bead9af3c59c235856f589f0e65083ab3efdff16854cfaa32560243c56760a696f9dc6bf9dcf120e9670777c300215502ae7035899b6c574d27a43c4e47fac5db162cbf308eb9fc91d269c38d0d6c859d523ca536f62b1ee0b96a1272f0c1d7a6cbe9fc21d700255f52847d43201628c1ad36c2427efc0761a902ecf4103c1b58079496670ac52552b7b0e13bc581dd0bc9775873a7d7bea95e3b2851d6eb8ed1c12fb115873e8eb2566dfc654a06d6ba0c711f335610594a0733dc3e8612a286226cb7563decb5a100dd29fe97c31c9826b8e0e86b8ddf737aa619ead3f99a90349c5d34e05e1ebb0a6002710c30617c8c3c06bbcee9675bfc658cda4a12ae739c51332a08f28f42677cf0d719d97c7b851f6203540af19ef5d7d135c2250f5edbc6f99cddebff000a85487915d6f5557a2c958797907013d118738b005f6c1c3b8df0b0c2c734727372a275f90b122b8c4163d5b9d3b54afb9edc8d0b6c8a767f93f961f5a34c1e0ea6f415d4cd7b2b73ecfee978963271aed3a9b06e84c4aa80279e5de0f2b29b0c92c56845068d7dbc2f4fe84115595cfb2e033e7b5b7bf774afd35ec1858a44d071a76e2a7da9a7234dbf92601ee4209333368fb715489feace210950561caca816bf36c748fbe09df22df4a23e25541e8e592862f25187057d42e51af5bf80d135c9c4f477ee4af91b88212964e42695a1ef01937155504b045f20327c3787cf32b3ae56c047d77f9aa2ced4195e381bab500911c6bc90b0dd3e6d69ae2de86dbc1e7c9892cd5197acf1e75fb0f14da82f3b52585a38a28c2c9c55d38d9574493aad0aa22301c75ff391b3d4a47169ecc644c89b670226644f5b9bf48e00ec90a7a727073d45778ba76a0240df54dcb04104233c255df4fc5efbcd39e8a3859f74b7d1a1accbba8a4451b5df2fae3ff5270508c6e9da859e511fb6d933aa85e17beffecd9ba016817dcd13da045160a9b00193635ff5c2b679fabd0659d3a1a2fdd1e89287f2e0294da82491fe95c46f9395a631ac5a54aa5c11a938cfc73728d954f8766f2e4cffb78fba5d0cac25dc5ef99246a3a287c153ea83351fd9863f88a25af719c1e7bb1d20efc7414230be14311107a67c38b06c92605b8bca7b7dcc249a9c88374a2624f5134121cec234214d9eb050e7a5ca693465732d0f1b0c3edab0334ef8aa37ebf77c668fff36f85496133b7bf7e6b44c3fc94a8b63707a404ca40f8859d86d5629a652286f0ecce60e867242cf7f43b5993e39cecb3bb662d2b8a8b2e7b810da7108bae9211bae9bd3fb65199f486ad3388ff08df21e5526613d973b3a96a5eafc5af1f9ab5582a436b0c3948c220f0111b97b4ff5c5c0cff22663502bff975e991311137d9f966d326db7f1b989f53e320ca31b4fece9a7d1291e26cc019bb8aa7bfb0280076308e987695e9248b75fb65adb17bcccf2b099e059e61345e31139493ba646dd4d1f69eac9972a0c88fb83bd9efc78dbc375d88272dd2a70575cd916d3b9fd3d0f83adf1e17c3523df070726f0d70b73274a3cc339b8ee3e2c12ce2bb0491e82e7e41fbafe9865b5f17070aabf9b730a3aa4bb82185b178503ecf7408ccd8ed29955512471b2b38da619e89225986be0f61e7bdc7efb4cf8ea791f83ebec2ca312f0447f4abbffad48cc9832d98cf272eadd0d2724c31461ddf79001ee8c40efd4ad93e83b8d4ff3cac888212ec8ddf93837b80c2af12a1a7e2798aea9fa847858dab5baf7e6e43db62cefcbcbfca46902841bdb80cea4522dc0322f96bfd1feb2045075f05f03e86b3f20f92e15a16bfbc2fc5ecdd1b0d2f36be03cfcdab4a00890926a563b575b86de1ab414f336df3d8ddbdcc6a707fcf5728c38e707bf9b1219a78305ce95198d6183e74d6218314b8f4dbd44fb91fcab79e7272c1064bf1917a1abc53358bfb73a0beea22514dea1f52111b76026c365fb0e191b6d47d938938338676ee3cd91f0441b311a5204490c3414e269db1cd43d23acb6f6c6808072386ea26f73957d703591c109f3bca20fb8bec4457918b3be94fb51c43413dff8627847480b9650e85339f74c5e7e270ab5503173d49c807135ddc43b1a026b53893fbb83e6b8482de32160c1c298e4e4dee3d57f1dd30888943fc8b1de0fcc1562f6f1bdaf85cc192fdc3c7358a6d576a860f4ac4e12c0ed1038339a4302a15a72202df73009f9f5b5a6bdfc92d670158eca94d132aa881d4e79558afdfd38c85227a9a85b909ee68d9bdaec2882e180b8d16619c002324fbf603849fb2c4d6adfc2507d28a08d10608e91c09aa634109be4211e54420628ea321aa8bea275bee9f2619d362b4f889c654eade73dc31035b7e5469fd51a946107e1000cfa08f9febe007242140aaaf69ff918426083a14f223ee83fabdfce96412a718ea7c35d1568545d0808b7d66443d2e5570e82554a5ebd525f15dc7858bae0e43a35ca155b58c5321acf62d4e97805617d6ceabfd60f71de26d44575e32ba53edec77a4722beacd67c8a6828300cb92ce1997cae8d7691ba85cca87b2598b93d700a934dba09ef7cc6740c3c98bb8949d4735788b484e05694fc9a0fee1963af553a4a826fcc6ce0933a4dc3a706bd24f5429458c2cca55cc12a1ce740ac8b359023716b94aaccf9f8aabe5634b464b6040cf49f1352ebf130f8c32fcfadc05662696c072eb7ea9345cd7ba31ad08492c491476b933d8b7bfc33031364e659906123e02eb96e60018fc8e8cbc91276618ece0376d7289ae5379ad834bdd49f7978cfc7e12cd6de1d025b5c0541721c913cc57182d56ea18156fd70ad151c402d4c5617be04d079d4733e1e8e71537870845d3e945aded036c00f9a20b114a424e1a8de24f80f88f486b847211cbb03bcc90b951105028b8ac5692ba136269ad164e9828dcefdcff2a5eb8e6de6888fa7262dfc4c150e1266ba38a05e37f4d9d35a6eb99fc4f4e6b6d6466a96a3526dda0fc8811893a26dd66a0b80947251ae5a118d31d5529f76d4b2ba6441f220f5241cf8771d15a6612278a5f48009ec858fc85a1ed24893052e3e7f59ad3d7df7a63eee414eca0a84f14ae5a9e5c07ab69f603ef44d4ce052519ec220ec2f3d6ae175dc93ccb5047f2a26f031b4525aca</script>\n  <div class=\"hbe hbe-content\">\n    <div class=\"hbe hbe-input hbe-input-default\">\n      <input class=\"hbe hbe-input-field hbe-input-field-default\" type=\"password\" id=\"hbePass\">\n      <label class=\"hbe hbe-input-label hbe-input-label-default\" for=\"hbePass\">\n        <span class=\"hbe hbe-input-label-content hbe-input-label-content-default\">Hey, password is required here.</span>\n      </label>\n    </div>\n  </div>\n</div>\n<script data-pjax src=\"/lib/hbe.js\"></script><link href=\"/css/hbe.style.css\" rel=\"stylesheet\" type=\"text/css\">","site":{"data":{}},"excerpt":"Here's something encrypted, password is required to continue reading.","more":"Here's something encrypted, password is required to continue reading.","origin":"<p>测速好用节点如下：<span id=\"more\"></span></p>\n<ul>\n<li>性价比<ul>\n<li>日本1</li>\n<li>新加坡1</li>\n<li>新加坡2</li>\n<li>香港3</li>\n<li>日本2</li>\n<li>防污染5</li>\n<li>防污染4</li>\n<li>日本3</li>\n</ul>\n</li>\n<li>魔戒<ul>\n<li>日本优化</li>\n<li>美国LA.优化(ChatGPT)</li>\n<li>日本-优化2</li>\n<li>美国LA-优化3 (ChatGPT)</li>\n<li>新加坡-优化</li>\n<li>新加坡-优化2</li>\n<li>香港Az-优化2</li>\n<li>韩国KR-T</li>\n<li>日本-优化3</li>\n<li>日本JP-T</li>\n</ul>\n</li>\n<li>nano<ul>\n<li>日本草草莓大福01-IAPL2-IP</li>\n</ul>\n</li>\n<li>赔钱<ul>\n<li>AWS I JP | IPLC专线2号</li>\n<li>AWS| SG | IPLC专线1号</li>\n<li>AZ |JP | IPLC专线1号</li>\n<li>AZ|SG|IPLC专线2号</li>\n<li>AWS |JP | IPLC专线3号</li>\n<li>AZ | SG | IPLC专线1号</li>\n<li>新加坡|三网低延迟| IPLC专线</li>\n</ul>\n</li>\n<li>极速云<ul>\n<li>日本4|GPT|奈飞|</li>\n<li>新加坡8|GPT|奈飞|</li>\n<li>香港8|GPT|奈飞|</li>\n<li>香港4|GPT|奈飞|</li>\n<li>香港1|GPT|奈飞|</li>\n<li>香港3|GPT|奈飞|</li>\n<li>香港5|GPT|奈飞|</li>\n</ul>\n</li>\n</ul>\n<hr>\n<ul>\n<li>nano测速图<ul>\n<li>平时的测试<br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230531-141345.png\" alt=\"20230531-141345\"></li>\n<li>高峰期的测试<br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230531-190910.png\" alt=\"20230531-190910\"></li>\n<li>特殊时期的测试<br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20230604-202254.png\" alt=\"20230604-202254\"></li>\n</ul>\n</li>\n</ul>\n<hr>\n<ul>\n<li>性价比测速图<ul>\n<li>平时的测试<br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20230531-130354.png\" alt=\"20230531-130354\"></li>\n<li>高峰期的测试<br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20230531-185728.png\" alt=\"20230531-185728\"></li>\n<li>特殊时期的测试<br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20230604-204623.png\" alt=\"20230604-204623\"></li>\n</ul>\n</li>\n</ul>\n<hr>\n<ul>\n<li>赔钱测速图<ul>\n<li>平时的测试<br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20230531-131834.png\" alt=\"20230531-131834\"></li>\n<li>高峰期的测试<br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20230531-183856.png\" alt=\"20230531-183856\"></li>\n<li>特殊时期的测试<br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20230604-205848.png\" alt=\"20230604-205848\"></li>\n</ul>\n</li>\n</ul>\n<hr>\n<ul>\n<li>魔戒测速图<ul>\n<li><p>平时的测试<br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20230605-151626.png\" alt=\"20230605-151626\"></p>\n</li>\n<li><p>高峰期的测试</p>\n</li>\n<li><p>特殊时期的测试</p>\n</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20230604-195852.png\" alt=\"20230604-195852\"></p>\n<hr>\n<ul>\n<li>极速云测速图<ul>\n<li>平时的测试<br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20230623-092834.png\" alt=\"20230623-092834\"></li>\n<li>高峰期的测试<br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20230622-210242.png\" alt=\"20230622-210242\"></li>\n<li>特殊时期的测试</li>\n</ul>\n</li>\n</ul>\n<hr>\n<ul>\n<li>总结<blockquote>\n<p>应该使用三个客户端，passwall、ssrplus和helloworld（vssr），其中passwall用来跑赔钱，可以运行chatgpt；ssrplus用来跑性价比；helloword跑魔戒，最稳定<br>这应该是最好的方式了</p>\n</blockquote>\n</li>\n</ul>\n<hr>\n<p>补充：赔钱、性价比都没有通过v2ray的真连接测试，放路由器里面非常不稳定。<br>再补充：只有极速云和魔戒是靠谱的</p>\n","encrypt":true},{"title":"路由AP模式设置","date":"2023-05-13T00:49:34.000Z","declare":true,"_content":"对于自带AP模式的路由，可以直接设置，如果不带AP模式，就要采用桥接（手动AP）的方式。<!--more-->\n\n首先，对于WAN口，保持断开状态不要动，LAN 口 的ip地址要手动设置，例如\n- r2s: 192.168.1.1\n- tp_link: 192.168.1.2\n- lj: 192.168.1.3\n\n![20230514160537](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230514160537.png)\n![20230514162625](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230514162625.png)\n![20230514162718](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230514162718.png)\n\n\n关闭除一级路由外的所有路由的DHCP功能\n![tp_dhcp](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/tp_dhcp.png)\n挑选一个路由开启无线，其余无线关闭\n\n--------------------------------\n![20230514162847](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230514162847.png)\n\n-------------------------------\n> 这样配置，将会导致所有的路由器的wan口都失效。\n\n-----------------------------\n> 重启所有路由器！！！","source":"_posts/路由AP模式设置.md","raw":"---\ntitle: 路由AP模式设置\ndate: 2023-05-13 00:49:34\ntags:\n    - 路由器\ndeclare: true\n---\n对于自带AP模式的路由，可以直接设置，如果不带AP模式，就要采用桥接（手动AP）的方式。<!--more-->\n\n首先，对于WAN口，保持断开状态不要动，LAN 口 的ip地址要手动设置，例如\n- r2s: 192.168.1.1\n- tp_link: 192.168.1.2\n- lj: 192.168.1.3\n\n![20230514160537](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230514160537.png)\n![20230514162625](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230514162625.png)\n![20230514162718](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230514162718.png)\n\n\n关闭除一级路由外的所有路由的DHCP功能\n![tp_dhcp](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/tp_dhcp.png)\n挑选一个路由开启无线，其余无线关闭\n\n--------------------------------\n![20230514162847](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230514162847.png)\n\n-------------------------------\n> 这样配置，将会导致所有的路由器的wan口都失效。\n\n-----------------------------\n> 重启所有路由器！！！","slug":"路由AP模式设置","published":1,"updated":"2024-04-25T17:26:46.913Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvjbaqkk00610vn1fxh41rjs","content":"<p>对于自带AP模式的路由，可以直接设置，如果不带AP模式，就要采用桥接（手动AP）的方式。<span id=\"more\"></span></p>\n<p>首先，对于WAN口，保持断开状态不要动，LAN 口 的ip地址要手动设置，例如</p>\n<ul>\n<li>r2s: 192.168.1.1</li>\n<li>tp_link: 192.168.1.2</li>\n<li>lj: 192.168.1.3</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230514160537.png\" alt=\"20230514160537\"><br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230514162625.png\" alt=\"20230514162625\"><br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230514162718.png\" alt=\"20230514162718\"></p>\n<p>关闭除一级路由外的所有路由的DHCP功能<br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/tp_dhcp.png\" alt=\"tp_dhcp\"><br>挑选一个路由开启无线，其余无线关闭</p>\n<hr>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230514162847.png\" alt=\"20230514162847\"></p>\n<hr>\n<blockquote>\n<p>这样配置，将会导致所有的路由器的wan口都失效。</p>\n</blockquote>\n<hr>\n<blockquote>\n<p>重启所有路由器！！！</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>对于自带AP模式的路由，可以直接设置，如果不带AP模式，就要采用桥接（手动AP）的方式。</p>","more":"<p></p>\n<p>首先，对于WAN口，保持断开状态不要动，LAN 口 的ip地址要手动设置，例如</p>\n<ul>\n<li>r2s: 192.168.1.1</li>\n<li>tp_link: 192.168.1.2</li>\n<li>lj: 192.168.1.3</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230514160537.png\" alt=\"20230514160537\"><br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230514162625.png\" alt=\"20230514162625\"><br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230514162718.png\" alt=\"20230514162718\"></p>\n<p>关闭除一级路由外的所有路由的DHCP功能<br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/tp_dhcp.png\" alt=\"tp_dhcp\"><br>挑选一个路由开启无线，其余无线关闭</p>\n<hr>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230514162847.png\" alt=\"20230514162847\"></p>\n<hr>\n<blockquote>\n<p>这样配置，将会导致所有的路由器的wan口都失效。</p>\n</blockquote>\n<hr>\n<blockquote>\n<p>重启所有路由器！！！</p>\n</blockquote>"},{"title":"路由器无线桥接","date":"2023-05-16T18:37:59.000Z","declare":true,"_content":"<img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230516183829.png\" width=\"50%\" height=\"50%\">","source":"_posts/路由器无线桥接.md","raw":"---\ntitle: 路由器无线桥接\ndate: 2023-05-16 18:37:59\ntags:\n    - 路由器\ndeclare: true\n---\n<img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230516183829.png\" width=\"50%\" height=\"50%\">","slug":"路由器无线桥接","published":1,"updated":"2024-04-25T17:26:47.243Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvjbaqkl00630vn12luk3vxq","content":"<img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230516183829.png\" width=\"50%\" height=\"50%\">","site":{"data":{}},"excerpt":"","more":"<img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230516183829.png\" width=\"50%\" height=\"50%\">"},{"title":"通过openwrt进行远程开机","date":"2023-05-18T08:35:19.000Z","declare":true,"_content":"1. 防火墙->端口转发，开启openwrt的外网访问。<!--more-->\n2. 网络适配器->属性->配置\n![20230518084317](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230518084317.png)\n3. 开启如下服务，参照google\n![20230518084506](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230518084506.png)\n4. 设置主板允许WOL（wake on lan）\n5. openwrt网络唤醒\n![20230518084609](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230518084609.png)","source":"_posts/通过openwrt进行远程开机.md","raw":"---\ntitle: 通过openwrt进行远程开机\ndate: 2023-05-18 08:35:19\ntags:\n    - openwrt\n    - 路由器\ndeclare: true\n---\n1. 防火墙->端口转发，开启openwrt的外网访问。<!--more-->\n2. 网络适配器->属性->配置\n![20230518084317](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230518084317.png)\n3. 开启如下服务，参照google\n![20230518084506](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230518084506.png)\n4. 设置主板允许WOL（wake on lan）\n5. openwrt网络唤醒\n![20230518084609](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230518084609.png)","slug":"通过openwrt进行远程开机","published":1,"updated":"2024-04-25T17:26:47.043Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvjbaqkm00660vn1aodqak2m","content":"<ol>\n<li>防火墙-&gt;端口转发，开启openwrt的外网访问。<span id=\"more\"></span></li>\n<li>网络适配器-&gt;属性-&gt;配置<br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230518084317.png\" alt=\"20230518084317\"></li>\n<li>开启如下服务，参照google<br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230518084506.png\" alt=\"20230518084506\"></li>\n<li>设置主板允许WOL（wake on lan）</li>\n<li>openwrt网络唤醒<br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230518084609.png\" alt=\"20230518084609\"></li>\n</ol>\n","site":{"data":{}},"excerpt":"<ol>\n<li>防火墙-&gt;端口转发，开启openwrt的外网访问。</li></ol>","more":"\n<li>网络适配器-&gt;属性-&gt;配置<br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230518084317.png\" alt=\"20230518084317\"></li>\n<li>开启如下服务，参照google<br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230518084506.png\" alt=\"20230518084506\"></li>\n<li>设置主板允许WOL（wake on lan）</li>\n<li>openwrt网络唤醒<br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230518084609.png\" alt=\"20230518084609\"></li>\n"},{"title":"键位映射","date":"2023-06-07T02:11:58.000Z","declare":true,"_content":"在windows上是可以直接通过注册表进行键位映射的，巧妙的利用 `Scancode Map` 就可将普通键盘改造成随心随意的个性化键盘\n接下来以要将Caps Lock键映射为Fn键为例<!--more-->\n\n> 警告：修改注册表可能会对系统造成意外的影响。在进行修改之前，强烈建议你备份注册表或创建系统还原点以防万一。\n\n1. 打开\"运行\"对话框。你可以按下Win + R键同时打开它。\n2. 输入`regedit`并按下Enter键，这将打开注册表编辑器。\n3. 导航到以下路径：`HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Keyboard Layout`\n4. 在\"键盘布局\"键下创建一个新的二进制值。右键单击\"键盘布局\"键，选择\"新建\" -> \"二进制值\"。\n5. 将新创建的二进制值命名为`Scancode Map`（大小写敏感）。\n6. 右键单击`Scancode Map`，选择\"修改\"。\n7. 在\"数值数据\"字段中，输入以下数值：\n`00 00 00 00 00 00 00 00 02 00 00 00 E0 00 3A 00 00 00 00 00`\n这个数值将会将Caps Lock键映射为Fn键。\n8. 点击\"确定\"保存修改。\n9. 关闭注册表编辑器。\n10. 重新启动计算机使更改生效。\n\n完成以上步骤后，Caps Lock键应该已被成功映射为Fn键。请注意，这个修改是系统级的，会影响所有用户的键盘布局。如果想要还原为原始设置，可以在注册表编辑器中删除`Scancode Map`键，或将其数值数据字段清空，并重新启动计算机。\n\n- 数值字段的规则含义：\n  - 第一部份：8 个 00 ，这是版本信息号。照例写就是了\n  - 第二部份：4 个字节。表示映射键的总数。按照二进制数的读写规则，低位在左，高位在右，也就是\"大端存储\"。`02 00 00 00` 这个数实际就是：`00 00 00 02` 。 从 02 开始，一个映射键是 02 ，两个是03 ，依次递加，十个是 0B\n  - 第三部份：每 4 个是一组，前两个是映射后键位的扫描码，后两个是键位原扫描码\n  - 第五部份：以 4 个 00 结束\n> 注意：在注册表中输入时，需要将扫描码的高低字节交换一下。例如左Ctrl为`1D`，那么就应该写成`1D 00`\n\n\n> 实际上，Fn键并没有一个特定的扫描码（scan code）。Fn键通常是作为一个特殊功能键（special function key）存在，它不会被单独的扫描码所表示。\n\n\n- 参考[Windows 上借助注册表来修改键盘按键的映射](https://flyzto.com/windows-scancode-map.html)\n\n----------------------------\n\nUbuntu上就比较简单了\n打开 `/usr/share/X11/xkb/keycodes/evdev` 文件，找到 `<CAPS> = 66`; 和 `<LCTL>=37`; 这两行进行修改就可以了。\n","source":"_posts/键位映射.md","raw":"---\ntitle: 键位映射\ndate: 2023-06-07 02:11:58\ntags:\n  - 键位映射\n  - windows\n  - Ubuntu\ndeclare: true\n---\n在windows上是可以直接通过注册表进行键位映射的，巧妙的利用 `Scancode Map` 就可将普通键盘改造成随心随意的个性化键盘\n接下来以要将Caps Lock键映射为Fn键为例<!--more-->\n\n> 警告：修改注册表可能会对系统造成意外的影响。在进行修改之前，强烈建议你备份注册表或创建系统还原点以防万一。\n\n1. 打开\"运行\"对话框。你可以按下Win + R键同时打开它。\n2. 输入`regedit`并按下Enter键，这将打开注册表编辑器。\n3. 导航到以下路径：`HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Keyboard Layout`\n4. 在\"键盘布局\"键下创建一个新的二进制值。右键单击\"键盘布局\"键，选择\"新建\" -> \"二进制值\"。\n5. 将新创建的二进制值命名为`Scancode Map`（大小写敏感）。\n6. 右键单击`Scancode Map`，选择\"修改\"。\n7. 在\"数值数据\"字段中，输入以下数值：\n`00 00 00 00 00 00 00 00 02 00 00 00 E0 00 3A 00 00 00 00 00`\n这个数值将会将Caps Lock键映射为Fn键。\n8. 点击\"确定\"保存修改。\n9. 关闭注册表编辑器。\n10. 重新启动计算机使更改生效。\n\n完成以上步骤后，Caps Lock键应该已被成功映射为Fn键。请注意，这个修改是系统级的，会影响所有用户的键盘布局。如果想要还原为原始设置，可以在注册表编辑器中删除`Scancode Map`键，或将其数值数据字段清空，并重新启动计算机。\n\n- 数值字段的规则含义：\n  - 第一部份：8 个 00 ，这是版本信息号。照例写就是了\n  - 第二部份：4 个字节。表示映射键的总数。按照二进制数的读写规则，低位在左，高位在右，也就是\"大端存储\"。`02 00 00 00` 这个数实际就是：`00 00 00 02` 。 从 02 开始，一个映射键是 02 ，两个是03 ，依次递加，十个是 0B\n  - 第三部份：每 4 个是一组，前两个是映射后键位的扫描码，后两个是键位原扫描码\n  - 第五部份：以 4 个 00 结束\n> 注意：在注册表中输入时，需要将扫描码的高低字节交换一下。例如左Ctrl为`1D`，那么就应该写成`1D 00`\n\n\n> 实际上，Fn键并没有一个特定的扫描码（scan code）。Fn键通常是作为一个特殊功能键（special function key）存在，它不会被单独的扫描码所表示。\n\n\n- 参考[Windows 上借助注册表来修改键盘按键的映射](https://flyzto.com/windows-scancode-map.html)\n\n----------------------------\n\nUbuntu上就比较简单了\n打开 `/usr/share/X11/xkb/keycodes/evdev` 文件，找到 `<CAPS> = 66`; 和 `<LCTL>=37`; 这两行进行修改就可以了。\n","slug":"键位映射","published":1,"updated":"2024-04-25T17:26:48.153Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvjbaqkn00680vn15ssoc0ae","content":"<p>在windows上是可以直接通过注册表进行键位映射的，巧妙的利用 <code>Scancode Map</code> 就可将普通键盘改造成随心随意的个性化键盘<br>接下来以要将Caps Lock键映射为Fn键为例<span id=\"more\"></span></p>\n<blockquote>\n<p>警告：修改注册表可能会对系统造成意外的影响。在进行修改之前，强烈建议你备份注册表或创建系统还原点以防万一。</p>\n</blockquote>\n<ol>\n<li>打开”运行”对话框。你可以按下Win + R键同时打开它。</li>\n<li>输入<code>regedit</code>并按下Enter键，这将打开注册表编辑器。</li>\n<li>导航到以下路径：<code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Keyboard Layout</code></li>\n<li>在”键盘布局”键下创建一个新的二进制值。右键单击”键盘布局”键，选择”新建” -&gt; “二进制值”。</li>\n<li>将新创建的二进制值命名为<code>Scancode Map</code>（大小写敏感）。</li>\n<li>右键单击<code>Scancode Map</code>，选择”修改”。</li>\n<li>在”数值数据”字段中，输入以下数值：<br><code>00 00 00 00 00 00 00 00 02 00 00 00 E0 00 3A 00 00 00 00 00</code><br>这个数值将会将Caps Lock键映射为Fn键。</li>\n<li>点击”确定”保存修改。</li>\n<li>关闭注册表编辑器。</li>\n<li>重新启动计算机使更改生效。</li>\n</ol>\n<p>完成以上步骤后，Caps Lock键应该已被成功映射为Fn键。请注意，这个修改是系统级的，会影响所有用户的键盘布局。如果想要还原为原始设置，可以在注册表编辑器中删除<code>Scancode Map</code>键，或将其数值数据字段清空，并重新启动计算机。</p>\n<ul>\n<li>数值字段的规则含义：<ul>\n<li>第一部份：8 个 00 ，这是版本信息号。照例写就是了</li>\n<li>第二部份：4 个字节。表示映射键的总数。按照二进制数的读写规则，低位在左，高位在右，也就是”大端存储”。<code>02 00 00 00</code> 这个数实际就是：<code>00 00 00 02</code> 。 从 02 开始，一个映射键是 02 ，两个是03 ，依次递加，十个是 0B</li>\n<li>第三部份：每 4 个是一组，前两个是映射后键位的扫描码，后两个是键位原扫描码</li>\n<li>第五部份：以 4 个 00 结束<blockquote>\n<p>注意：在注册表中输入时，需要将扫描码的高低字节交换一下。例如左Ctrl为<code>1D</code>，那么就应该写成<code>1D 00</code></p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>实际上，Fn键并没有一个特定的扫描码（scan code）。Fn键通常是作为一个特殊功能键（special function key）存在，它不会被单独的扫描码所表示。</p>\n</blockquote>\n<ul>\n<li>参考<a href=\"https://flyzto.com/windows-scancode-map.html\">Windows 上借助注册表来修改键盘按键的映射</a></li>\n</ul>\n<hr>\n<p>Ubuntu上就比较简单了<br>打开 <code>/usr/share/X11/xkb/keycodes/evdev</code> 文件，找到 <code>&lt;CAPS&gt; = 66</code>; 和 <code>&lt;LCTL&gt;=37</code>; 这两行进行修改就可以了。</p>\n","site":{"data":{}},"excerpt":"<p>在windows上是可以直接通过注册表进行键位映射的，巧妙的利用 <code>Scancode Map</code> 就可将普通键盘改造成随心随意的个性化键盘<br>接下来以要将Caps Lock键映射为Fn键为例</p>","more":"<p></p>\n<blockquote>\n<p>警告：修改注册表可能会对系统造成意外的影响。在进行修改之前，强烈建议你备份注册表或创建系统还原点以防万一。</p>\n</blockquote>\n<ol>\n<li>打开”运行”对话框。你可以按下Win + R键同时打开它。</li>\n<li>输入<code>regedit</code>并按下Enter键，这将打开注册表编辑器。</li>\n<li>导航到以下路径：<code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Keyboard Layout</code></li>\n<li>在”键盘布局”键下创建一个新的二进制值。右键单击”键盘布局”键，选择”新建” -&gt; “二进制值”。</li>\n<li>将新创建的二进制值命名为<code>Scancode Map</code>（大小写敏感）。</li>\n<li>右键单击<code>Scancode Map</code>，选择”修改”。</li>\n<li>在”数值数据”字段中，输入以下数值：<br><code>00 00 00 00 00 00 00 00 02 00 00 00 E0 00 3A 00 00 00 00 00</code><br>这个数值将会将Caps Lock键映射为Fn键。</li>\n<li>点击”确定”保存修改。</li>\n<li>关闭注册表编辑器。</li>\n<li>重新启动计算机使更改生效。</li>\n</ol>\n<p>完成以上步骤后，Caps Lock键应该已被成功映射为Fn键。请注意，这个修改是系统级的，会影响所有用户的键盘布局。如果想要还原为原始设置，可以在注册表编辑器中删除<code>Scancode Map</code>键，或将其数值数据字段清空，并重新启动计算机。</p>\n<ul>\n<li>数值字段的规则含义：<ul>\n<li>第一部份：8 个 00 ，这是版本信息号。照例写就是了</li>\n<li>第二部份：4 个字节。表示映射键的总数。按照二进制数的读写规则，低位在左，高位在右，也就是”大端存储”。<code>02 00 00 00</code> 这个数实际就是：<code>00 00 00 02</code> 。 从 02 开始，一个映射键是 02 ，两个是03 ，依次递加，十个是 0B</li>\n<li>第三部份：每 4 个是一组，前两个是映射后键位的扫描码，后两个是键位原扫描码</li>\n<li>第五部份：以 4 个 00 结束<blockquote>\n<p>注意：在注册表中输入时，需要将扫描码的高低字节交换一下。例如左Ctrl为<code>1D</code>，那么就应该写成<code>1D 00</code></p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>实际上，Fn键并没有一个特定的扫描码（scan code）。Fn键通常是作为一个特殊功能键（special function key）存在，它不会被单独的扫描码所表示。</p>\n</blockquote>\n<ul>\n<li>参考<a href=\"https://flyzto.com/windows-scancode-map.html\">Windows 上借助注册表来修改键盘按键的映射</a></li>\n</ul>\n<hr>\n<p>Ubuntu上就比较简单了<br>打开 <code>/usr/share/X11/xkb/keycodes/evdev</code> 文件，找到 <code>&lt;CAPS&gt; = 66</code>; 和 <code>&lt;LCTL&gt;=37</code>; 这两行进行修改就可以了。</p>"},{"title":"阿里云最新活动","date":"2023-11-03T03:15:49.000Z","_content":"[云工开物](https://university.aliyun.com/)\n[2核1g 3mbps/年轻量云服务器](https://www.aliyun.com/product/swas?scm=20140722.S_card@@%E4%BA%A7%E5%93%81@@172363.S_card0.ID_card@@%E4%BA%A7%E5%93%81@@172363-RL_%E8%BD%BB%E9%87%8F-LOC_search~UND~card~UND~item-OR_ser-V_3-P0_0&source=5176.11533457&userCode=p9e3trrw)\n[阿里云99一年，2核2g，3mbps/年，续费同价服务器](https://www.aliyun.com/activity/allinaliyun/yunchuang?userCode=p9e3trrw)","source":"_posts/阿里云最新活动.md","raw":"---\ntitle: 阿里云最新活动\ndate: 2023-11-03 03:15:49\ntags:\n    - 阿里云\n---\n[云工开物](https://university.aliyun.com/)\n[2核1g 3mbps/年轻量云服务器](https://www.aliyun.com/product/swas?scm=20140722.S_card@@%E4%BA%A7%E5%93%81@@172363.S_card0.ID_card@@%E4%BA%A7%E5%93%81@@172363-RL_%E8%BD%BB%E9%87%8F-LOC_search~UND~card~UND~item-OR_ser-V_3-P0_0&source=5176.11533457&userCode=p9e3trrw)\n[阿里云99一年，2核2g，3mbps/年，续费同价服务器](https://www.aliyun.com/activity/allinaliyun/yunchuang?userCode=p9e3trrw)","slug":"阿里云最新活动","published":1,"updated":"2024-04-25T17:26:47.403Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvjbaqko006a0vn17cux0kl4","content":"<p><a href=\"https://university.aliyun.com/\">云工开物</a><br><a href=\"https://www.aliyun.com/product/swas?scm=20140722.S_card@@%E4%BA%A7%E5%93%81@@172363.S_card0.ID_card@@%E4%BA%A7%E5%93%81@@172363-RL_%E8%BD%BB%E9%87%8F-LOC_search~UND~card~UND~item-OR_ser-V_3-P0_0&source=5176.11533457&userCode=p9e3trrw\">2核1g 3mbps&#x2F;年轻量云服务器</a><br><a href=\"https://www.aliyun.com/activity/allinaliyun/yunchuang?userCode=p9e3trrw\">阿里云99一年，2核2g，3mbps&#x2F;年，续费同价服务器</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://university.aliyun.com/\">云工开物</a><br><a href=\"https://www.aliyun.com/product/swas?scm=20140722.S_card@@%E4%BA%A7%E5%93%81@@172363.S_card0.ID_card@@%E4%BA%A7%E5%93%81@@172363-RL_%E8%BD%BB%E9%87%8F-LOC_search~UND~card~UND~item-OR_ser-V_3-P0_0&source=5176.11533457&userCode=p9e3trrw\">2核1g 3mbps&#x2F;年轻量云服务器</a><br><a href=\"https://www.aliyun.com/activity/allinaliyun/yunchuang?userCode=p9e3trrw\">阿里云99一年，2核2g，3mbps&#x2F;年，续费同价服务器</a></p>\n"},{"title":"阿里云盘应用网络状况不佳","date":"2023-05-29T12:10:00.000Z","declare":true,"_content":"时区不同步导致的问题，改回中国即可。","source":"_posts/阿里云盘应用网络状况不佳.md","raw":"---\ntitle: 阿里云盘应用网络状况不佳\ndate: 2023-05-29 12:10:00\ntags:\n    - 阿里云盘\ndeclare: true\n---\n时区不同步导致的问题，改回中国即可。","slug":"阿里云盘应用网络状况不佳","published":1,"updated":"2024-04-25T17:26:46.023Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvjbaqkq006d0vn10rt49xv3","content":"<p>时区不同步导致的问题，改回中国即可。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>时区不同步导致的问题，改回中国即可。</p>\n"},{"title":"黑群晖NAS安装","date":"2023-05-22T00:29:46.000Z","declare":true,"_content":"[img下载](https://xpenology.club/downloads/)\n[pat下载](https://www.synology.com/en-global/support/download/DS918+?version=7.1#system)\n[pat旧版本下载](https://archive.synology.com/download/Os/DSM)\n[Win32 Disk Imager下载](https://sourceforge.net/projects/win32diskimager/)\n[芯片无忧ChipEasy](https://www.upan.cc/tools/test/ChipEasy.html)\n[芯片无忧ChipEasy英文版](https://www.upan.cc/tools/test/ChipEasy_EN.html)\n<!--more-->\n\n# 方案一\n通过[arpl](https://github.com/fbelavenuto/arpl)进行引导，出现了两个问题\n1. 分配ip不显示，会显示waiting ip ......... error\n解决方案，ifconfig自行查看ip，之后浏览器通过ip:7681进入即可\n2. build loader时候报错，参照[Error: zImage not Patched #27](https://github.com/fbelavenuto/arpl/issues/27)\n解决方案，无\n\n参考 [手把手教你安装自己的黑群晖DMS7.1.1NAS系统](https://www.youtube.com/watch?v=oxD0Qb_DClA&t=282s)\n\n# 方案二\n准备如下工具\n![20230522003434](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230522003434.png)\n1. 使用Win32DiskImager将synoboot.img镜像写入系统\n![20230522003613](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230522003613.png)\n2. 通过芯片无忧查看U盘的pid 和vid\n![20230522003944](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230522003944.png)\n> 注意这里的0x不要删除\n3. 使用DiskGenius查看引导优盘里面的文件\n![20230522004235](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230522004235.png)\n> 需要复制到桌面修改，之后再拖回来\n4. 浏览器查找黑群晖\nhttps://find.synology.com/\n5. 选择手动安装\n![20230522004422](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230522004422.png)\n6. 创建账号和密码\n![20230522010539](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230522010539.png)\n7. 黑群啊黑群\n![20230522010659](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230522010659.png)\n![20230522010744](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230522010744.png)\n8. 分享网络，打上勾，就可以通过https://find.synology.com/找到设备。\n\n[保姆级黑群晖安装教程，小白也能轻松安装！！！！](https://zhuanlan.zhihu.com/p/515187738)\n\n第三方套件，[我不是矿神](https://imnks.com/)\n","source":"_posts/黑群晖NAS安装.md","raw":"---\ntitle: 黑群晖NAS安装\ndate: 2023-05-22 00:29:46\ntags:\n    - NAS\ndeclare: true\n---\n[img下载](https://xpenology.club/downloads/)\n[pat下载](https://www.synology.com/en-global/support/download/DS918+?version=7.1#system)\n[pat旧版本下载](https://archive.synology.com/download/Os/DSM)\n[Win32 Disk Imager下载](https://sourceforge.net/projects/win32diskimager/)\n[芯片无忧ChipEasy](https://www.upan.cc/tools/test/ChipEasy.html)\n[芯片无忧ChipEasy英文版](https://www.upan.cc/tools/test/ChipEasy_EN.html)\n<!--more-->\n\n# 方案一\n通过[arpl](https://github.com/fbelavenuto/arpl)进行引导，出现了两个问题\n1. 分配ip不显示，会显示waiting ip ......... error\n解决方案，ifconfig自行查看ip，之后浏览器通过ip:7681进入即可\n2. build loader时候报错，参照[Error: zImage not Patched #27](https://github.com/fbelavenuto/arpl/issues/27)\n解决方案，无\n\n参考 [手把手教你安装自己的黑群晖DMS7.1.1NAS系统](https://www.youtube.com/watch?v=oxD0Qb_DClA&t=282s)\n\n# 方案二\n准备如下工具\n![20230522003434](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230522003434.png)\n1. 使用Win32DiskImager将synoboot.img镜像写入系统\n![20230522003613](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230522003613.png)\n2. 通过芯片无忧查看U盘的pid 和vid\n![20230522003944](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230522003944.png)\n> 注意这里的0x不要删除\n3. 使用DiskGenius查看引导优盘里面的文件\n![20230522004235](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230522004235.png)\n> 需要复制到桌面修改，之后再拖回来\n4. 浏览器查找黑群晖\nhttps://find.synology.com/\n5. 选择手动安装\n![20230522004422](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230522004422.png)\n6. 创建账号和密码\n![20230522010539](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230522010539.png)\n7. 黑群啊黑群\n![20230522010659](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230522010659.png)\n![20230522010744](https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230522010744.png)\n8. 分享网络，打上勾，就可以通过https://find.synology.com/找到设备。\n\n[保姆级黑群晖安装教程，小白也能轻松安装！！！！](https://zhuanlan.zhihu.com/p/515187738)\n\n第三方套件，[我不是矿神](https://imnks.com/)\n","slug":"黑群晖NAS安装","published":1,"updated":"2024-04-25T17:26:48.243Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvjbaqkr006f0vn113u43dfw","content":"<p><a href=\"https://xpenology.club/downloads/\">img下载</a><br><a href=\"https://www.synology.com/en-global/support/download/DS918+?version=7.1#system\">pat下载</a><br><a href=\"https://archive.synology.com/download/Os/DSM\">pat旧版本下载</a><br><a href=\"https://sourceforge.net/projects/win32diskimager/\">Win32 Disk Imager下载</a><br><a href=\"https://www.upan.cc/tools/test/ChipEasy.html\">芯片无忧ChipEasy</a><br><a href=\"https://www.upan.cc/tools/test/ChipEasy_EN.html\">芯片无忧ChipEasy英文版</a></p>\n<span id=\"more\"></span>\n\n<h1 id=\"方案一\"><a href=\"#方案一\" class=\"headerlink\" title=\"方案一\"></a>方案一</h1><p>通过<a href=\"https://github.com/fbelavenuto/arpl\">arpl</a>进行引导，出现了两个问题</p>\n<ol>\n<li>分配ip不显示，会显示waiting ip ……… error<br>解决方案，ifconfig自行查看ip，之后浏览器通过ip:7681进入即可</li>\n<li>build loader时候报错，参照<a href=\"https://github.com/fbelavenuto/arpl/issues/27\">Error: zImage not Patched #27</a><br>解决方案，无</li>\n</ol>\n<p>参考 <a href=\"https://www.youtube.com/watch?v=oxD0Qb_DClA&t=282s\">手把手教你安装自己的黑群晖DMS7.1.1NAS系统</a></p>\n<h1 id=\"方案二\"><a href=\"#方案二\" class=\"headerlink\" title=\"方案二\"></a>方案二</h1><p>准备如下工具<br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230522003434.png\" alt=\"20230522003434\"></p>\n<ol>\n<li>使用Win32DiskImager将synoboot.img镜像写入系统<br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230522003613.png\" alt=\"20230522003613\"></li>\n<li>通过芯片无忧查看U盘的pid 和vid<br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230522003944.png\" alt=\"20230522003944\"><blockquote>\n<p>注意这里的0x不要删除</p>\n</blockquote>\n</li>\n<li>使用DiskGenius查看引导优盘里面的文件<br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230522004235.png\" alt=\"20230522004235\"><blockquote>\n<p>需要复制到桌面修改，之后再拖回来</p>\n</blockquote>\n</li>\n<li>浏览器查找黑群晖<br><a href=\"https://find.synology.com/\">https://find.synology.com/</a></li>\n<li>选择手动安装<br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230522004422.png\" alt=\"20230522004422\"></li>\n<li>创建账号和密码<br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230522010539.png\" alt=\"20230522010539\"></li>\n<li>黑群啊黑群<br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230522010659.png\" alt=\"20230522010659\"><br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230522010744.png\" alt=\"20230522010744\"></li>\n<li>分享网络，打上勾，就可以通过<a href=\"https://find.synology.com/%E6%89%BE%E5%88%B0%E8%AE%BE%E5%A4%87%E3%80%82\">https://find.synology.com/找到设备。</a></li>\n</ol>\n<p><a href=\"https://zhuanlan.zhihu.com/p/515187738\">保姆级黑群晖安装教程，小白也能轻松安装！！！！</a></p>\n<p>第三方套件，<a href=\"https://imnks.com/\">我不是矿神</a></p>\n","site":{"data":{}},"excerpt":"<p><a href=\"https://xpenology.club/downloads/\">img下载</a><br><a href=\"https://www.synology.com/en-global/support/download/DS918+?version=7.1#system\">pat下载</a><br><a href=\"https://archive.synology.com/download/Os/DSM\">pat旧版本下载</a><br><a href=\"https://sourceforge.net/projects/win32diskimager/\">Win32 Disk Imager下载</a><br><a href=\"https://www.upan.cc/tools/test/ChipEasy.html\">芯片无忧ChipEasy</a><br><a href=\"https://www.upan.cc/tools/test/ChipEasy_EN.html\">芯片无忧ChipEasy英文版</a></p>","more":"<h1 id=\"方案一\"><a href=\"#方案一\" class=\"headerlink\" title=\"方案一\"></a>方案一</h1><p>通过<a href=\"https://github.com/fbelavenuto/arpl\">arpl</a>进行引导，出现了两个问题</p>\n<ol>\n<li>分配ip不显示，会显示waiting ip ……… error<br>解决方案，ifconfig自行查看ip，之后浏览器通过ip:7681进入即可</li>\n<li>build loader时候报错，参照<a href=\"https://github.com/fbelavenuto/arpl/issues/27\">Error: zImage not Patched #27</a><br>解决方案，无</li>\n</ol>\n<p>参考 <a href=\"https://www.youtube.com/watch?v=oxD0Qb_DClA&t=282s\">手把手教你安装自己的黑群晖DMS7.1.1NAS系统</a></p>\n<h1 id=\"方案二\"><a href=\"#方案二\" class=\"headerlink\" title=\"方案二\"></a>方案二</h1><p>准备如下工具<br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230522003434.png\" alt=\"20230522003434\"></p>\n<ol>\n<li>使用Win32DiskImager将synoboot.img镜像写入系统<br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230522003613.png\" alt=\"20230522003613\"></li>\n<li>通过芯片无忧查看U盘的pid 和vid<br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230522003944.png\" alt=\"20230522003944\"><blockquote>\n<p>注意这里的0x不要删除</p>\n</blockquote>\n</li>\n<li>使用DiskGenius查看引导优盘里面的文件<br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230522004235.png\" alt=\"20230522004235\"><blockquote>\n<p>需要复制到桌面修改，之后再拖回来</p>\n</blockquote>\n</li>\n<li>浏览器查找黑群晖<br><a href=\"https://find.synology.com/\">https://find.synology.com/</a></li>\n<li>选择手动安装<br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230522004422.png\" alt=\"20230522004422\"></li>\n<li>创建账号和密码<br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230522010539.png\" alt=\"20230522010539\"></li>\n<li>黑群啊黑群<br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230522010659.png\" alt=\"20230522010659\"><br><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture/images/20230522010744.png\" alt=\"20230522010744\"></li>\n<li>分享网络，打上勾，就可以通过<a href=\"https://find.synology.com/%E6%89%BE%E5%88%B0%E8%AE%BE%E5%A4%87%E3%80%82\">https://find.synology.com/找到设备。</a></li>\n</ol>\n<p><a href=\"https://zhuanlan.zhihu.com/p/515187738\">保姆级黑群晖安装教程，小白也能轻松安装！！！！</a></p>\n<p>第三方套件，<a href=\"https://imnks.com/\">我不是矿神</a></p>"},{"title":"How to build a hexo blog on Ubuntu through gitee\\github?","date":"2021-05-29T22:44:03.000Z","declare":true,"toc":1,"_content":"### 1. Install Node.js\n> Note: If you use `sudo apt install node npm` directly, there will be a problem that the downloaded version does not match. The Ubuntu warehouse list is the v10 version.\n<!--more-->\n\nIf you need to install the latest version of Node.js, you can use a PPA software repository or nvm (Node Version Manager) to install and manage multiple versions of Node.js. Here are the steps to install the latest version of Node.js using the PPA software repository:\n\n- Add the PPA repository:`curl -sL https://deb.nodesource.com/setup_16.x | sudo -E bash -`\n\n- Install Node.js:`sudo apt-get install -y nodejs`\n\n- Check the installed Node.js version:`node --version`\n- Check installed npm version:`npm --version`\n- Update npm:`sudo npm install -g npm`\n\n### 2. Install hexo\nRefer to [official github](https://github.com/hexojs/hexo) to install hexo\n\n> Note: add sudo\n\n- Install cnpm(optional)\n\nSince the default server image of npm is abroad, direct calls may time out or be particularly slow. So here is the way to download cnpm.\n\n`npm install -g cnpm --registry=http://registry.npm.taobao.org`\n\nCheck the version of cnpm to check whether the installation is successful:\n\n`cnpm -v`\n\nAll configuration reference [official document](https://hexo.io/docs/)\n\n### 3. Deploy blog to gitee/github\n- Create a new warehouse.\n    - For repository name, just fill in \"github name+.gitee+.io\" (you can access the blog by entering this address `https://corner647.gitee.io` in the browser later)\n\n    - Description is the warehouse introduction, just fill in whatever you want. Create it afterwards.\n- Install the Git plugin\n   `npm install --save hexo-deployer-git`\n- configuration config.yml\n```shell\ndeploy:\n    type: git\n    repo: Fill in the full path of the warehouse you created on Gitee before, remember to add .git (in fact, paste the clone ssh address of the newly created warehouse)\n    branch: master\n```\n> Note:If you want to push to github, just change the repository here.\n\n- Generate key, ssh verify gitee\n`ssh-keygen -t rsa -C \"email\"`\n\n- Test whether the connection is successful\n`ssh -T git@github.com`\n\n> Beware of Proxy Issues\n\n- push to remote\n```shell\nhexo g\t\t# generate blog \nhexo d\t\t# push blog\n```\n\n### 4. yilia theme configuragion\n[yilia](https://github.com/litten/hexo-theme-yilia) is a simple and elegant theme for hexo.\n- Refer to [official github](https://github.com/litten/hexo-theme-yilia) for installation\n- Click **所有文章** on the left,and there will be a prompt that the 模块缺失.\n<!-- ![模块缺失](How-to-build-a-hexo-blog-on-Ubuntu-through-gitee-github/模块缺失.png) -->\n\n<img src=\"How-to-build-a-hexo-blog-on-Ubuntu-through-gitee-github/模块缺失.png\" width=\"50%\" height=\"50%\">\n\n- Follow the prompts to execute the command in the root directory of the blog\n`cnpm i hexo-generator-json-content --save`\n- Follow the prompts to add configuration in the root directory _config.yml\n```json\njsonContent:\n    meta: false\n    pages: false\n    posts:\n      title: true\n      date: true\n      path: true\n      text: false\n      raw: false\n      content: false\n      slug: false\n      updated: false\n      comments: false\n      link: false\n      permalink: false\n      excerpt: false\n      categories: false\n      tags: true\n```\n- Just re-push\n\n<!-- ![模块完整](How-to-build-a-hexo-blog-on-Ubuntu-through-gitee-github/模块完整.png) -->\n<img src=\"How-to-build-a-hexo-blog-on-Ubuntu-through-gitee-github/模块完整.png\" width=\"50%\" height=\"50%\">\n\n### 5 Configure image resources\nPut the picture in **themes/yilia/source/img**, and then directly reference it in the theme configuration file(*themes/yilia/_config.yml*).\n```json\navatar: /img/avatar.jpg     #头像图片\nfavicon: /img/timg.png      #网页图标\nweixin: /img/qr_code.jpg    #微信二维码图片\nalipay:                     #支付宝二维码\n```\n### 6 The local picture does not display the problem solution\n- Change the value of post_asset_folder in _config.yml to true\n- Install hexo-asset-image, a plugin that can upload local images\n`npm install https://github.com/EricGerry/hexo-asset-image-0.0.5.git --save`\nTo install the specified version, you must not use the following command to install, because the version number is wrong.\n`npm install hexo-asset-image --save`\nIn this way, every time a new blog post is created, a folder with the same name will appear for pictures.\n\n- Use md syntax to reference pictures.\n`![Picture name](picture path)`\n- Or use css style to specify the image size\n`<img src=\"picture path\" width=\"50%\" height=\"50%\">`\n\n### 7 The article shows part of the content\nIn a MarkDown article, just insert <!--more-->, and the content after that will not be displayed. Need to click to expand the full text to be displayed.\nIts related configuration is in *themes/yilia/_config.yml*\n```json\nexcerpt_link: more    #文章太长，截断按钮文字\nshow_all_link: '展开全文'   #文章卡片右下角常驻链接，不需要请设置为false\n```\n\n### 8 Added 不蒜子统计\n[不蒜子](http://ibruce.info/2015/04/04/busuanzi/), which can be used to count the number of visits to the blog.\n- install script\nSuanzi can be used for any type of personal site. For hexo, open *themes/your theme/layout/_partial/footer.ejs* and add the following script, of course, it can also be added to the *header*.\n```js\n<script async src=\"//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js\">\n</script>\n```\n\n- Show total site visits\nOpen *themes/your theme/layout/_partial/footer.ejs* and add the script.\n  - 算法a：pv的方式，单个用户连续点击n篇文章，记录n词访问量\n```js\n<span id=\"busuanzi_container_site_pv\">\n    本站总访问量<span id=\"busuanzi_value_site_pv\"></span>次\n</span>\n```\n  - 算法b：uv的方式，单个用户连续点击n篇文章，只记录1次访客数。\n```js\n<span id=\"busuanzi_container_site_uv\">\n    本站访客数<span id=\"busuanzi_value_site_uv\"></span>人次\n</span>\n```\n\n- Show single article hits\n算法：pv的方式，单个用户点击1篇文章，本篇文章记录1次阅读量。\n打开themes/yilia/layout/_partial/article.ejs，\n在`<%- partial('post/title', {class_name: 'article-title'}) %>`后加下述代码\n```js\n<!--显示阅读次数-->\n<% if (!index && post.comments){ %>\n  <br/>\n  <a class=\"cloud-tie-join-count\" href=\"javascript:void(0);\" style=\"color:gray;font-size:14px;\">\n  <span class=\"icon-sort\"></span>\n  <span id=\"busuanzi_container_page_pv\" style=\"color:#ef7522;font-size:14px;\">\n            阅读数: <span id=\"busuanzi_value_page_pv\"></span>次 &nbsp;&nbsp;\n  </span>\n  </a>\n<% } %>\n<!--显示阅读次数完毕-->\n```\n> 更多方式见[不蒜子](http://ibruce.info/2015/04/04/busuanzi/)\n\n### 9 Increase word count\nIt is recommended to use the hexo article word count plug-in[WordCount](https://www.npmjs.com/package/hexo-wordcount)\n- install plugin\n`npm install hexo-wordcount --save`\nThe plug-in has two statistical methods, post and total. Generally speaking, the post statistics are introduced into the article and displayed, and the total word count statistics are displayed on the home page where you want to place them (**footer, left-col** or other places).\nMy blog is imported to the left column.\n- In **yilia/layout/_partial/left-col.ejs** file, the **class name is header-smart-menu** and add the following code to display the total word count.\n```js\n<div class=\"post-count\" style='font-size:14px'>总字数:<%= totalcount(site, '0,0.0a') %>字</div>\n```\n![总字数](How-to-build-a-hexo-blog-on-Ubuntu-through-gitee-github/总字数.png)\n<!-- <img src=\"How-to-build-a-hexo-blog-on-Ubuntu-through-gitee-github/总字数.png\" width=\"50%\" height=\"50%\"> -->\n- In the **yilia/layout/_partial/article.ejs** file, **class name is article-header** and add the following code to display the number of words and estimated reading time of a single article.\n```js\n<div align=\"center\" class=\"post-count\">\n    字数：<%= wordcount(post.content) %>字 | 预计阅读时长：<%= min2read(post.content) %>分钟\n</div>\n```\n![单篇字数和阅读时长](How-to-build-a-hexo-blog-on-Ubuntu-through-gitee-github/单篇字数.png)\n<!-- <img src=\"How-to-build-a-hexo-blog-on-Ubuntu-through-gitee-github/单篇字数.png\" width=\"50%\" height=\"50%\"> -->\n\n> 注：node版本7.6.0之前的，WordCount需要安装2.x版本\n\n`npm install hexo-wordcount@2 --save             2.x版本`\n\n### 10 Add NetEase Cloud Music\nWe can directly search for the music we want to insert on Netease Cloud, and then click to generate an external link player (you can choose whether to play automatically)\n![网易云生成外链](How-to-build-a-hexo-blog-on-Ubuntu-through-gitee-github/网易云生成外链.png)\n\nThen you can generate the corresponding html code according to your settings, and insert the obtained html code into the position you want to insert.\n\n![选择外链插件](How-to-build-a-hexo-blog-on-Ubuntu-through-gitee-github/选择外链插件.png)\n![复制HTML代码](How-to-build-a-hexo-blog-on-Ubuntu-through-gitee-github/复制HTML代码.png)\n\n### 11 Add article directory\nThe yilia theme has its own directory, open *themes/yilia/_config.yml*, and there are *toc* settings in it. After setting, add *toc: 1* at the beginning of each article.\n\n### 12 About the problem of losing the avatar of the secondary content of hexo\nThe problem is that *avatar: /img/avatar.jpg* is written as *avatar: img/avatar.jpg*\n\n### 13 How to pin the article\n- install [plugin](https://github.com/netcan/hexo-generator-index-pin-top)<!--more-->\n```shell\nnpm uninstall hexo-generator-index --save\nnpm install hexo-generator-index-pin-top --save\n```\n- Configure top criteria\nOpen *themes/yilia/layout/post.ejs* and insert the following code directly at the front.\n```js\n<% if (page.top) { %>\n  <i class=\"fa fa-thumb-tack\"></i>\n  <font color=7D26CD>置顶</font>\n  <span class=\"post-meta-divider\">|</span>\n<% } %>\n```\n- Configuration article\nJust add the top option in the Front-matter of the article that needs to be pinned to the top. The larger the number after top, the higher the priority\n\n![测试置顶](How-to-build-a-hexo-blog-on-Ubuntu-through-gitee-github/测试置顶.png)\n- Priority configuration\nModify the root directory configuration file *_config.yml*, the *top* value *-1* indicates the reverse order according to the *top* value (just set *1* in the positive order), and the *date* is also reversed according to the creation date.\n\n![优先级配置](How-to-build-a-hexo-blog-on-Ubuntu-through-gitee-github/置顶优先级配置.png)\n\n- Effect\n\n![效果](How-to-build-a-hexo-blog-on-Ubuntu-through-gitee-github/置顶效果图.png)\n\n### 14 鼠标点击小心心的设置\n- Add the file *love.js* under the *themes/yilia/source* path, the content is as follows\n```js\n!function(e,t,a){function r(){for(var e=0;e<s.length;e++)s[e].alpha<=0?(t.body.removeChild(s[e].el),s.splice(e,1)):(s[e].y--,s[e].scale+=.004,s[e].alpha-=.013,s[e].el.style.cssText=\"left:\"+s[e].x+\"px;top:\"+s[e].y+\"px;opacity:\"+s[e].alpha+\";transform:scale(\"+s[e].scale+\",\"+s[e].scale+\") rotate(45deg);background:\"+s[e].color+\";z-index:99999\");requestAnimationFrame(r)}function n(){var t=\"function\"==typeof e.onclick&&e.onclick;e.onclick=function(e){t&&t(),o(e)}}function o(e){var a=t.createElement(\"div\");a.className=\"heart\",s.push({el:a,x:e.clientX-5,y:e.clientY-5,scale:1,alpha:1,color:c()}),t.body.appendChild(a)}function i(e){var a=t.createElement(\"style\");a.type=\"text/css\";try{a.appendChild(t.createTextNode(e))}catch(t){a.styleSheet.cssText=e}t.getElementsByTagName(\"head\")[0].appendChild(a)}function c(){return\"rgb(\"+~~(255*Math.random())+\",\"+~~(255*Math.random())+\",\"+~~(255*Math.random())+\")\"}var s=[];e.requestAnimationFrame=e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||function(e){setTimeout(e,1e3/60)},i(\".heart{width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);}.heart:after,.heart:before{content: '';width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;}.heart:after{top: -5px;}.heart:before{left: -5px;}\"),n(),r()}(window,document);\n```\n- Open hexo *themes/yilia/layout/_partial/footer.ejs* and add the following code at the end\n```js\n<!--页面点击小红心-->\n<script type=\"text/javascript\" src=\"/love.js\"></script>\n```\n\n### 15 Add copyright statement\n- Configure yilia\nAdd code where marked\n```js\n<div class=\"article-entry\" itemprop=\"articleBody\">\n  <% if (post.excerpt && index){ %>\n    <%- post.excerpt %>\n    <% if (theme.excerpt_link) { %>\n      <a class=\"article-more-a\" href=\"<%- url_for(post.path) %>#more\"><%= theme.excerpt_link %> >></a>\n    <% } %>\n  <% } else { %>\n    <%- post.content %>\n  <% } %>\n  <-- 在此处添加代码-->\n  <% if ((theme.reward_type === 2 || (theme.reward_type === 1 && post.reward)) && !index){ %>\n  <div class=\"page-reward\">\n    <a href=\"javascript:;\" class=\"page-reward-btn tooltip-top\">\n    <div class=\"tooltip tooltip-east\">\n```\n添加的代码如下\n```js\n<!-- 增加版权声明 -->\n\n<%\n  var sUrl = url.replace(/index\\.html$/, '');\n  sUrl = /^(http:|https:)\\/\\//.test(sUrl) ? sUrl : 'https:' + sUrl;\n%>\n<% if ((theme.declare_type === 2 || (theme.declare_type === 1 && post.declare)) && !index){ %>\n  <div class=\"declare\">\n    <strong>本文作者：</strong>\n    <% if(config.author != undefined){ %>\n      <%= config.author%>\n    <% }else{%>\n      <font color=\"red\">请在博客根目录“_config.yml”中填入正确的“author”</font>\n    <%}%>\n    <br>\n    <strong>本文链接：</strong>\n    <a rel=\"license\" href=\"<%=sUrl%>\"><%=sUrl%></a>\n    <br>\n    <strong>版权声明：</strong>\n    本作品采用\n    <a rel=\"license\" href=\"<%= theme.licensee_url%>\"><%= theme.licensee_name%></a>\n    进行许可。转载请注明出处！\n    <% if(theme.licensee_img != undefined){ %>\n      <br>\n      <a rel=\"license\" href=\"<%= theme.licensee_url%>\"><img alt=\"知识共享许可协议\" style=\"border-width:0\" src=\"<%= theme.licensee_img%>\"/></a>\n    <% } %>\n  </div>\n<% } else {%>\n  <div class=\"declare\" hidden=\"hidden\"></div>\n<% } %>\n\n<!-- 增加版权声明结束 -->\n```\nCreate a new file *themes/yilia/source-src/css/declare.scss* and add the following CSS code\n```CSS\n.declare {\n    background-color: #eaeaea;\n    margin-top: 2em;\n    border-left: 3px solid #ff1700;\n    padding: .5em 1em;\n}\n```\nOpen *themes/yilia/source-src/css/main.scss* and add the following code\n```scss\n@import \"./declare\";\n```\n- Configuration display\nOpen *themes/yilia/_config.yml* and add the following content in it\n```yml\n#版权基础设定：0-关闭声明； 1-文章对应的md文件里有declare: true属性，才有版权声明； 2-所有文章均有版权声明\n#当前应用的版权协议地址。\n#版权协议的名称\n#版权协议的Logo\n\ndeclare_type: 1\nlicensee_url: https://creativecommons.org/licenses/by-nc-sa/4.0/\nlicensee_name: '知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议'\nlicensee_img: https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png\n```\nThen set the attribute in the header of the *md* file of the article that needs copyright statement.\n```js\ndeclare:true\n```\n\n### 16 End of text (no conflict with more)\n- Open the *themes\\yilia\\layout\\_partial\\article.ejs* file, and add the code in the following code.\n```js\n<% if (!post.noDate){ %>\n        <%- partial('post/date', {class_name: 'archive-article-date', date_format: null}) %>\n        <% } %>\n      </header>\n    <% } %>\n    <div class=\"article-entry\" itemprop=\"articleBody\">\n      <% if (post.excerpt && index){ %>\n        <%- post.excerpt %>\n        <% if (theme.excerpt_link) { %>\n          <a class=\"article-more-a\" href=\"<%- url_for(post.path) %>#more\"><%= theme.excerpt_link %> >></a>\n        <% } %>\n      <% } else { %>\n        <%- post.content %>\n      <% } %>\n```\n添加的代码如下\n```js\n<% if ((theme.essayending_type === 2 || (theme.essayending_type === 1 && post.essayending)) && !index){ %>\n       <% if  (!index){ %>\n         <div class=\"essayending\">\n           <div>\n            <div style=\"text-align:center;color: #ccc;font-size:22px;\">\n            <br/>\n            <br/>\n            -------------本文结束<i class=\"fa fa-paw\"></i>感谢您的阅读-------------\n            <br/>\n            <br/>\n             <br/>\n             <br/>\n            </div>\n           </div>\n         </div>\n       <% } else {%>\n         <div class=\"essayending\" hidden=\"hidden\"></div>\n       <% } %>\n\n   <% } %>\n```\n- Configuration\nOpen *theme\\yilia\\_config.yml* and add the following content in the appropriate position.\n```yml\n#文章结束\nessayending_type: 2 #0关闭文章结束提示 2全开 1需要在文章开头加上 essayending: true\n```\n> 0表示关闭文章结束提示\n2表示全开\n1表示需要在文章开头加上 essayending: true 才会开启文章结束提示\n\n### 17 Add pet\n- Install plugin\n`npm install --save hexo-helper-live2d`\n\n- Download model\nSelect the corresponding model to install, [project address](https://github.com/xiazeyu/live2d-widget-models)\n[Effect display website](https://huaji8.top/post/live2d-plugin-2.0/), here I choose the *live2d-widget-model-hijiki* model package.\n`npm install live2d-widget-model-hijiki`\n\n- Configuration\nOpen the _config.yml file in the root directory of the blog, and add the following code at the end.\n```yml\nlive2d:\n  enable: true\n  scriptFrom: local\n  pluginRootPath: live2dw/\n  pluginJsPath: lib/\n  pluginModelPath: assets/\n  tagMode: false\n  debug: false\n  model:\n    use: live2d-widget-model-hijiki\n  display:\n    position: right\n    width: 150\n    height: 300\n  mobile:\n    show: true\n```\n\n### 18 Article encryption\n[hexo-blog-encrypt](https://github.com/D0n9X1n/hexo-blog-encrypt)","source":"_posts/How-to-build-a-hexo-blog-on-Ubuntu-through-gitee-github.md","raw":"---\ntitle: How to build a hexo blog on Ubuntu through gitee\\github?\ndate: 2021-05-29 22:44:03\ntags:\n  - hexo\n  - Ubuntu\ndeclare: true\ntoc: 1\n---\n### 1. Install Node.js\n> Note: If you use `sudo apt install node npm` directly, there will be a problem that the downloaded version does not match. The Ubuntu warehouse list is the v10 version.\n<!--more-->\n\nIf you need to install the latest version of Node.js, you can use a PPA software repository or nvm (Node Version Manager) to install and manage multiple versions of Node.js. Here are the steps to install the latest version of Node.js using the PPA software repository:\n\n- Add the PPA repository:`curl -sL https://deb.nodesource.com/setup_16.x | sudo -E bash -`\n\n- Install Node.js:`sudo apt-get install -y nodejs`\n\n- Check the installed Node.js version:`node --version`\n- Check installed npm version:`npm --version`\n- Update npm:`sudo npm install -g npm`\n\n### 2. Install hexo\nRefer to [official github](https://github.com/hexojs/hexo) to install hexo\n\n> Note: add sudo\n\n- Install cnpm(optional)\n\nSince the default server image of npm is abroad, direct calls may time out or be particularly slow. So here is the way to download cnpm.\n\n`npm install -g cnpm --registry=http://registry.npm.taobao.org`\n\nCheck the version of cnpm to check whether the installation is successful:\n\n`cnpm -v`\n\nAll configuration reference [official document](https://hexo.io/docs/)\n\n### 3. Deploy blog to gitee/github\n- Create a new warehouse.\n    - For repository name, just fill in \"github name+.gitee+.io\" (you can access the blog by entering this address `https://corner647.gitee.io` in the browser later)\n\n    - Description is the warehouse introduction, just fill in whatever you want. Create it afterwards.\n- Install the Git plugin\n   `npm install --save hexo-deployer-git`\n- configuration config.yml\n```shell\ndeploy:\n    type: git\n    repo: Fill in the full path of the warehouse you created on Gitee before, remember to add .git (in fact, paste the clone ssh address of the newly created warehouse)\n    branch: master\n```\n> Note:If you want to push to github, just change the repository here.\n\n- Generate key, ssh verify gitee\n`ssh-keygen -t rsa -C \"email\"`\n\n- Test whether the connection is successful\n`ssh -T git@github.com`\n\n> Beware of Proxy Issues\n\n- push to remote\n```shell\nhexo g\t\t# generate blog \nhexo d\t\t# push blog\n```\n\n### 4. yilia theme configuragion\n[yilia](https://github.com/litten/hexo-theme-yilia) is a simple and elegant theme for hexo.\n- Refer to [official github](https://github.com/litten/hexo-theme-yilia) for installation\n- Click **所有文章** on the left,and there will be a prompt that the 模块缺失.\n<!-- ![模块缺失](How-to-build-a-hexo-blog-on-Ubuntu-through-gitee-github/模块缺失.png) -->\n\n<img src=\"How-to-build-a-hexo-blog-on-Ubuntu-through-gitee-github/模块缺失.png\" width=\"50%\" height=\"50%\">\n\n- Follow the prompts to execute the command in the root directory of the blog\n`cnpm i hexo-generator-json-content --save`\n- Follow the prompts to add configuration in the root directory _config.yml\n```json\njsonContent:\n    meta: false\n    pages: false\n    posts:\n      title: true\n      date: true\n      path: true\n      text: false\n      raw: false\n      content: false\n      slug: false\n      updated: false\n      comments: false\n      link: false\n      permalink: false\n      excerpt: false\n      categories: false\n      tags: true\n```\n- Just re-push\n\n<!-- ![模块完整](How-to-build-a-hexo-blog-on-Ubuntu-through-gitee-github/模块完整.png) -->\n<img src=\"How-to-build-a-hexo-blog-on-Ubuntu-through-gitee-github/模块完整.png\" width=\"50%\" height=\"50%\">\n\n### 5 Configure image resources\nPut the picture in **themes/yilia/source/img**, and then directly reference it in the theme configuration file(*themes/yilia/_config.yml*).\n```json\navatar: /img/avatar.jpg     #头像图片\nfavicon: /img/timg.png      #网页图标\nweixin: /img/qr_code.jpg    #微信二维码图片\nalipay:                     #支付宝二维码\n```\n### 6 The local picture does not display the problem solution\n- Change the value of post_asset_folder in _config.yml to true\n- Install hexo-asset-image, a plugin that can upload local images\n`npm install https://github.com/EricGerry/hexo-asset-image-0.0.5.git --save`\nTo install the specified version, you must not use the following command to install, because the version number is wrong.\n`npm install hexo-asset-image --save`\nIn this way, every time a new blog post is created, a folder with the same name will appear for pictures.\n\n- Use md syntax to reference pictures.\n`![Picture name](picture path)`\n- Or use css style to specify the image size\n`<img src=\"picture path\" width=\"50%\" height=\"50%\">`\n\n### 7 The article shows part of the content\nIn a MarkDown article, just insert <!--more-->, and the content after that will not be displayed. Need to click to expand the full text to be displayed.\nIts related configuration is in *themes/yilia/_config.yml*\n```json\nexcerpt_link: more    #文章太长，截断按钮文字\nshow_all_link: '展开全文'   #文章卡片右下角常驻链接，不需要请设置为false\n```\n\n### 8 Added 不蒜子统计\n[不蒜子](http://ibruce.info/2015/04/04/busuanzi/), which can be used to count the number of visits to the blog.\n- install script\nSuanzi can be used for any type of personal site. For hexo, open *themes/your theme/layout/_partial/footer.ejs* and add the following script, of course, it can also be added to the *header*.\n```js\n<script async src=\"//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js\">\n</script>\n```\n\n- Show total site visits\nOpen *themes/your theme/layout/_partial/footer.ejs* and add the script.\n  - 算法a：pv的方式，单个用户连续点击n篇文章，记录n词访问量\n```js\n<span id=\"busuanzi_container_site_pv\">\n    本站总访问量<span id=\"busuanzi_value_site_pv\"></span>次\n</span>\n```\n  - 算法b：uv的方式，单个用户连续点击n篇文章，只记录1次访客数。\n```js\n<span id=\"busuanzi_container_site_uv\">\n    本站访客数<span id=\"busuanzi_value_site_uv\"></span>人次\n</span>\n```\n\n- Show single article hits\n算法：pv的方式，单个用户点击1篇文章，本篇文章记录1次阅读量。\n打开themes/yilia/layout/_partial/article.ejs，\n在`<%- partial('post/title', {class_name: 'article-title'}) %>`后加下述代码\n```js\n<!--显示阅读次数-->\n<% if (!index && post.comments){ %>\n  <br/>\n  <a class=\"cloud-tie-join-count\" href=\"javascript:void(0);\" style=\"color:gray;font-size:14px;\">\n  <span class=\"icon-sort\"></span>\n  <span id=\"busuanzi_container_page_pv\" style=\"color:#ef7522;font-size:14px;\">\n            阅读数: <span id=\"busuanzi_value_page_pv\"></span>次 &nbsp;&nbsp;\n  </span>\n  </a>\n<% } %>\n<!--显示阅读次数完毕-->\n```\n> 更多方式见[不蒜子](http://ibruce.info/2015/04/04/busuanzi/)\n\n### 9 Increase word count\nIt is recommended to use the hexo article word count plug-in[WordCount](https://www.npmjs.com/package/hexo-wordcount)\n- install plugin\n`npm install hexo-wordcount --save`\nThe plug-in has two statistical methods, post and total. Generally speaking, the post statistics are introduced into the article and displayed, and the total word count statistics are displayed on the home page where you want to place them (**footer, left-col** or other places).\nMy blog is imported to the left column.\n- In **yilia/layout/_partial/left-col.ejs** file, the **class name is header-smart-menu** and add the following code to display the total word count.\n```js\n<div class=\"post-count\" style='font-size:14px'>总字数:<%= totalcount(site, '0,0.0a') %>字</div>\n```\n![总字数](How-to-build-a-hexo-blog-on-Ubuntu-through-gitee-github/总字数.png)\n<!-- <img src=\"How-to-build-a-hexo-blog-on-Ubuntu-through-gitee-github/总字数.png\" width=\"50%\" height=\"50%\"> -->\n- In the **yilia/layout/_partial/article.ejs** file, **class name is article-header** and add the following code to display the number of words and estimated reading time of a single article.\n```js\n<div align=\"center\" class=\"post-count\">\n    字数：<%= wordcount(post.content) %>字 | 预计阅读时长：<%= min2read(post.content) %>分钟\n</div>\n```\n![单篇字数和阅读时长](How-to-build-a-hexo-blog-on-Ubuntu-through-gitee-github/单篇字数.png)\n<!-- <img src=\"How-to-build-a-hexo-blog-on-Ubuntu-through-gitee-github/单篇字数.png\" width=\"50%\" height=\"50%\"> -->\n\n> 注：node版本7.6.0之前的，WordCount需要安装2.x版本\n\n`npm install hexo-wordcount@2 --save             2.x版本`\n\n### 10 Add NetEase Cloud Music\nWe can directly search for the music we want to insert on Netease Cloud, and then click to generate an external link player (you can choose whether to play automatically)\n![网易云生成外链](How-to-build-a-hexo-blog-on-Ubuntu-through-gitee-github/网易云生成外链.png)\n\nThen you can generate the corresponding html code according to your settings, and insert the obtained html code into the position you want to insert.\n\n![选择外链插件](How-to-build-a-hexo-blog-on-Ubuntu-through-gitee-github/选择外链插件.png)\n![复制HTML代码](How-to-build-a-hexo-blog-on-Ubuntu-through-gitee-github/复制HTML代码.png)\n\n### 11 Add article directory\nThe yilia theme has its own directory, open *themes/yilia/_config.yml*, and there are *toc* settings in it. After setting, add *toc: 1* at the beginning of each article.\n\n### 12 About the problem of losing the avatar of the secondary content of hexo\nThe problem is that *avatar: /img/avatar.jpg* is written as *avatar: img/avatar.jpg*\n\n### 13 How to pin the article\n- install [plugin](https://github.com/netcan/hexo-generator-index-pin-top)<!--more-->\n```shell\nnpm uninstall hexo-generator-index --save\nnpm install hexo-generator-index-pin-top --save\n```\n- Configure top criteria\nOpen *themes/yilia/layout/post.ejs* and insert the following code directly at the front.\n```js\n<% if (page.top) { %>\n  <i class=\"fa fa-thumb-tack\"></i>\n  <font color=7D26CD>置顶</font>\n  <span class=\"post-meta-divider\">|</span>\n<% } %>\n```\n- Configuration article\nJust add the top option in the Front-matter of the article that needs to be pinned to the top. The larger the number after top, the higher the priority\n\n![测试置顶](How-to-build-a-hexo-blog-on-Ubuntu-through-gitee-github/测试置顶.png)\n- Priority configuration\nModify the root directory configuration file *_config.yml*, the *top* value *-1* indicates the reverse order according to the *top* value (just set *1* in the positive order), and the *date* is also reversed according to the creation date.\n\n![优先级配置](How-to-build-a-hexo-blog-on-Ubuntu-through-gitee-github/置顶优先级配置.png)\n\n- Effect\n\n![效果](How-to-build-a-hexo-blog-on-Ubuntu-through-gitee-github/置顶效果图.png)\n\n### 14 鼠标点击小心心的设置\n- Add the file *love.js* under the *themes/yilia/source* path, the content is as follows\n```js\n!function(e,t,a){function r(){for(var e=0;e<s.length;e++)s[e].alpha<=0?(t.body.removeChild(s[e].el),s.splice(e,1)):(s[e].y--,s[e].scale+=.004,s[e].alpha-=.013,s[e].el.style.cssText=\"left:\"+s[e].x+\"px;top:\"+s[e].y+\"px;opacity:\"+s[e].alpha+\";transform:scale(\"+s[e].scale+\",\"+s[e].scale+\") rotate(45deg);background:\"+s[e].color+\";z-index:99999\");requestAnimationFrame(r)}function n(){var t=\"function\"==typeof e.onclick&&e.onclick;e.onclick=function(e){t&&t(),o(e)}}function o(e){var a=t.createElement(\"div\");a.className=\"heart\",s.push({el:a,x:e.clientX-5,y:e.clientY-5,scale:1,alpha:1,color:c()}),t.body.appendChild(a)}function i(e){var a=t.createElement(\"style\");a.type=\"text/css\";try{a.appendChild(t.createTextNode(e))}catch(t){a.styleSheet.cssText=e}t.getElementsByTagName(\"head\")[0].appendChild(a)}function c(){return\"rgb(\"+~~(255*Math.random())+\",\"+~~(255*Math.random())+\",\"+~~(255*Math.random())+\")\"}var s=[];e.requestAnimationFrame=e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||function(e){setTimeout(e,1e3/60)},i(\".heart{width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);}.heart:after,.heart:before{content: '';width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;}.heart:after{top: -5px;}.heart:before{left: -5px;}\"),n(),r()}(window,document);\n```\n- Open hexo *themes/yilia/layout/_partial/footer.ejs* and add the following code at the end\n```js\n<!--页面点击小红心-->\n<script type=\"text/javascript\" src=\"/love.js\"></script>\n```\n\n### 15 Add copyright statement\n- Configure yilia\nAdd code where marked\n```js\n<div class=\"article-entry\" itemprop=\"articleBody\">\n  <% if (post.excerpt && index){ %>\n    <%- post.excerpt %>\n    <% if (theme.excerpt_link) { %>\n      <a class=\"article-more-a\" href=\"<%- url_for(post.path) %>#more\"><%= theme.excerpt_link %> >></a>\n    <% } %>\n  <% } else { %>\n    <%- post.content %>\n  <% } %>\n  <-- 在此处添加代码-->\n  <% if ((theme.reward_type === 2 || (theme.reward_type === 1 && post.reward)) && !index){ %>\n  <div class=\"page-reward\">\n    <a href=\"javascript:;\" class=\"page-reward-btn tooltip-top\">\n    <div class=\"tooltip tooltip-east\">\n```\n添加的代码如下\n```js\n<!-- 增加版权声明 -->\n\n<%\n  var sUrl = url.replace(/index\\.html$/, '');\n  sUrl = /^(http:|https:)\\/\\//.test(sUrl) ? sUrl : 'https:' + sUrl;\n%>\n<% if ((theme.declare_type === 2 || (theme.declare_type === 1 && post.declare)) && !index){ %>\n  <div class=\"declare\">\n    <strong>本文作者：</strong>\n    <% if(config.author != undefined){ %>\n      <%= config.author%>\n    <% }else{%>\n      <font color=\"red\">请在博客根目录“_config.yml”中填入正确的“author”</font>\n    <%}%>\n    <br>\n    <strong>本文链接：</strong>\n    <a rel=\"license\" href=\"<%=sUrl%>\"><%=sUrl%></a>\n    <br>\n    <strong>版权声明：</strong>\n    本作品采用\n    <a rel=\"license\" href=\"<%= theme.licensee_url%>\"><%= theme.licensee_name%></a>\n    进行许可。转载请注明出处！\n    <% if(theme.licensee_img != undefined){ %>\n      <br>\n      <a rel=\"license\" href=\"<%= theme.licensee_url%>\"><img alt=\"知识共享许可协议\" style=\"border-width:0\" src=\"<%= theme.licensee_img%>\"/></a>\n    <% } %>\n  </div>\n<% } else {%>\n  <div class=\"declare\" hidden=\"hidden\"></div>\n<% } %>\n\n<!-- 增加版权声明结束 -->\n```\nCreate a new file *themes/yilia/source-src/css/declare.scss* and add the following CSS code\n```CSS\n.declare {\n    background-color: #eaeaea;\n    margin-top: 2em;\n    border-left: 3px solid #ff1700;\n    padding: .5em 1em;\n}\n```\nOpen *themes/yilia/source-src/css/main.scss* and add the following code\n```scss\n@import \"./declare\";\n```\n- Configuration display\nOpen *themes/yilia/_config.yml* and add the following content in it\n```yml\n#版权基础设定：0-关闭声明； 1-文章对应的md文件里有declare: true属性，才有版权声明； 2-所有文章均有版权声明\n#当前应用的版权协议地址。\n#版权协议的名称\n#版权协议的Logo\n\ndeclare_type: 1\nlicensee_url: https://creativecommons.org/licenses/by-nc-sa/4.0/\nlicensee_name: '知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议'\nlicensee_img: https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png\n```\nThen set the attribute in the header of the *md* file of the article that needs copyright statement.\n```js\ndeclare:true\n```\n\n### 16 End of text (no conflict with more)\n- Open the *themes\\yilia\\layout\\_partial\\article.ejs* file, and add the code in the following code.\n```js\n<% if (!post.noDate){ %>\n        <%- partial('post/date', {class_name: 'archive-article-date', date_format: null}) %>\n        <% } %>\n      </header>\n    <% } %>\n    <div class=\"article-entry\" itemprop=\"articleBody\">\n      <% if (post.excerpt && index){ %>\n        <%- post.excerpt %>\n        <% if (theme.excerpt_link) { %>\n          <a class=\"article-more-a\" href=\"<%- url_for(post.path) %>#more\"><%= theme.excerpt_link %> >></a>\n        <% } %>\n      <% } else { %>\n        <%- post.content %>\n      <% } %>\n```\n添加的代码如下\n```js\n<% if ((theme.essayending_type === 2 || (theme.essayending_type === 1 && post.essayending)) && !index){ %>\n       <% if  (!index){ %>\n         <div class=\"essayending\">\n           <div>\n            <div style=\"text-align:center;color: #ccc;font-size:22px;\">\n            <br/>\n            <br/>\n            -------------本文结束<i class=\"fa fa-paw\"></i>感谢您的阅读-------------\n            <br/>\n            <br/>\n             <br/>\n             <br/>\n            </div>\n           </div>\n         </div>\n       <% } else {%>\n         <div class=\"essayending\" hidden=\"hidden\"></div>\n       <% } %>\n\n   <% } %>\n```\n- Configuration\nOpen *theme\\yilia\\_config.yml* and add the following content in the appropriate position.\n```yml\n#文章结束\nessayending_type: 2 #0关闭文章结束提示 2全开 1需要在文章开头加上 essayending: true\n```\n> 0表示关闭文章结束提示\n2表示全开\n1表示需要在文章开头加上 essayending: true 才会开启文章结束提示\n\n### 17 Add pet\n- Install plugin\n`npm install --save hexo-helper-live2d`\n\n- Download model\nSelect the corresponding model to install, [project address](https://github.com/xiazeyu/live2d-widget-models)\n[Effect display website](https://huaji8.top/post/live2d-plugin-2.0/), here I choose the *live2d-widget-model-hijiki* model package.\n`npm install live2d-widget-model-hijiki`\n\n- Configuration\nOpen the _config.yml file in the root directory of the blog, and add the following code at the end.\n```yml\nlive2d:\n  enable: true\n  scriptFrom: local\n  pluginRootPath: live2dw/\n  pluginJsPath: lib/\n  pluginModelPath: assets/\n  tagMode: false\n  debug: false\n  model:\n    use: live2d-widget-model-hijiki\n  display:\n    position: right\n    width: 150\n    height: 300\n  mobile:\n    show: true\n```\n\n### 18 Article encryption\n[hexo-blog-encrypt](https://github.com/D0n9X1n/hexo-blog-encrypt)","slug":"How-to-build-a-hexo-blog-on-Ubuntu-through-gitee-github","published":1,"updated":"2024-04-25T17:26:46.283Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvjbaqm400ay0vn1g1pg9wqs","content":"<h3 id=\"1-Install-Node-js\"><a href=\"#1-Install-Node-js\" class=\"headerlink\" title=\"1. Install Node.js\"></a>1. Install Node.js</h3><blockquote>\n<p>Note: If you use <code>sudo apt install node npm</code> directly, there will be a problem that the downloaded version does not match. The Ubuntu warehouse list is the v10 version.</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<p>If you need to install the latest version of Node.js, you can use a PPA software repository or nvm (Node Version Manager) to install and manage multiple versions of Node.js. Here are the steps to install the latest version of Node.js using the PPA software repository:</p>\n<ul>\n<li><p>Add the PPA repository:<code>curl -sL https://deb.nodesource.com/setup_16.x | sudo -E bash -</code></p>\n</li>\n<li><p>Install Node.js:<code>sudo apt-get install -y nodejs</code></p>\n</li>\n<li><p>Check the installed Node.js version:<code>node --version</code></p>\n</li>\n<li><p>Check installed npm version:<code>npm --version</code></p>\n</li>\n<li><p>Update npm:<code>sudo npm install -g npm</code></p>\n</li>\n</ul>\n<h3 id=\"2-Install-hexo\"><a href=\"#2-Install-hexo\" class=\"headerlink\" title=\"2. Install hexo\"></a>2. Install hexo</h3><p>Refer to <a href=\"https://github.com/hexojs/hexo\">official github</a> to install hexo</p>\n<blockquote>\n<p>Note: add sudo</p>\n</blockquote>\n<ul>\n<li>Install cnpm(optional)</li>\n</ul>\n<p>Since the default server image of npm is abroad, direct calls may time out or be particularly slow. So here is the way to download cnpm.</p>\n<p><code>npm install -g cnpm --registry=http://registry.npm.taobao.org</code></p>\n<p>Check the version of cnpm to check whether the installation is successful:</p>\n<p><code>cnpm -v</code></p>\n<p>All configuration reference <a href=\"https://hexo.io/docs/\">official document</a></p>\n<h3 id=\"3-Deploy-blog-to-gitee-x2F-github\"><a href=\"#3-Deploy-blog-to-gitee-x2F-github\" class=\"headerlink\" title=\"3. Deploy blog to gitee&#x2F;github\"></a>3. Deploy blog to gitee&#x2F;github</h3><ul>\n<li><p>Create a new warehouse.</p>\n<ul>\n<li><p>For repository name, just fill in “github name+.gitee+.io” (you can access the blog by entering this address <code>https://corner647.gitee.io</code> in the browser later)</p>\n</li>\n<li><p>Description is the warehouse introduction, just fill in whatever you want. Create it afterwards.</p>\n</li>\n</ul>\n</li>\n<li><p>Install the Git plugin<br> <code>npm install --save hexo-deployer-git</code></p>\n</li>\n<li><p>configuration config.yml</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">    type: git</span><br><span class=\"line\">    repo: Fill in the full path of the warehouse you created on Gitee before, remember to add .git (in fact, paste the clone ssh address of the newly created warehouse)</span><br><span class=\"line\">    branch: master</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>Note:If you want to push to github, just change the repository here.</p>\n</blockquote>\n</li>\n<li><p>Generate key, ssh verify gitee<br><code>ssh-keygen -t rsa -C &quot;email&quot;</code></p>\n</li>\n<li><p>Test whether the connection is successful<br><code>ssh -T git@github.com</code></p>\n</li>\n</ul>\n<blockquote>\n<p>Beware of Proxy Issues</p>\n</blockquote>\n<ul>\n<li>push to remote<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g\t\t# generate blog </span><br><span class=\"line\">hexo d\t\t# push blog</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"4-yilia-theme-configuragion\"><a href=\"#4-yilia-theme-configuragion\" class=\"headerlink\" title=\"4. yilia theme configuragion\"></a>4. yilia theme configuragion</h3><p><a href=\"https://github.com/litten/hexo-theme-yilia\">yilia</a> is a simple and elegant theme for hexo.</p>\n<ul>\n<li>Refer to <a href=\"https://github.com/litten/hexo-theme-yilia\">official github</a> for installation</li>\n<li>Click <strong>所有文章</strong> on the left,and there will be a prompt that the 模块缺失.<!-- ![模块缺失](How-to-build-a-hexo-blog-on-Ubuntu-through-gitee-github/模块缺失.png) --></li>\n</ul>\n<img src=\"/2021/05/29/How-to-build-a-hexo-blog-on-Ubuntu-through-gitee-github/模块缺失.png\" width=\"50%\" height=\"50%\">\n\n<ul>\n<li>Follow the prompts to execute the command in the root directory of the blog<br><code>cnpm i hexo-generator-json-content --save</code></li>\n<li>Follow the prompts to add configuration in the root directory _config.yml<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jsonContent<span class=\"punctuation\">:</span></span><br><span class=\"line\">    meta<span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span></span><br><span class=\"line\">    pages<span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span></span><br><span class=\"line\">    posts<span class=\"punctuation\">:</span></span><br><span class=\"line\">      title<span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span></span><br><span class=\"line\">      date<span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span></span><br><span class=\"line\">      path<span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span></span><br><span class=\"line\">      text<span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span></span><br><span class=\"line\">      raw<span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span></span><br><span class=\"line\">      content<span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span></span><br><span class=\"line\">      slug<span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span></span><br><span class=\"line\">      updated<span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span></span><br><span class=\"line\">      comments<span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span></span><br><span class=\"line\">      link<span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span></span><br><span class=\"line\">      permalink<span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span></span><br><span class=\"line\">      excerpt<span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span></span><br><span class=\"line\">      categories<span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span></span><br><span class=\"line\">      tags<span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span></span><br></pre></td></tr></table></figure></li>\n<li>Just re-push</li>\n</ul>\n<!-- ![模块完整](How-to-build-a-hexo-blog-on-Ubuntu-through-gitee-github/模块完整.png) -->\n<img src=\"/2021/05/29/How-to-build-a-hexo-blog-on-Ubuntu-through-gitee-github/模块完整.png\" width=\"50%\" height=\"50%\">\n\n<h3 id=\"5-Configure-image-resources\"><a href=\"#5-Configure-image-resources\" class=\"headerlink\" title=\"5 Configure image resources\"></a>5 Configure image resources</h3><p>Put the picture in <strong>themes&#x2F;yilia&#x2F;source&#x2F;img</strong>, and then directly reference it in the theme configuration file(<em>themes&#x2F;yilia&#x2F;_config.yml</em>).</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">avatar<span class=\"punctuation\">:</span> /img/avatar.jpg     #头像图片</span><br><span class=\"line\">favicon<span class=\"punctuation\">:</span> /img/timg.png      #网页图标</span><br><span class=\"line\">weixin<span class=\"punctuation\">:</span> /img/qr_code.jpg    #微信二维码图片</span><br><span class=\"line\">alipay<span class=\"punctuation\">:</span>                     #支付宝二维码</span><br></pre></td></tr></table></figure>\n<h3 id=\"6-The-local-picture-does-not-display-the-problem-solution\"><a href=\"#6-The-local-picture-does-not-display-the-problem-solution\" class=\"headerlink\" title=\"6 The local picture does not display the problem solution\"></a>6 The local picture does not display the problem solution</h3><ul>\n<li><p>Change the value of post_asset_folder in _config.yml to true</p>\n</li>\n<li><p>Install hexo-asset-image, a plugin that can upload local images<br><code>npm install https://github.com/EricGerry/hexo-asset-image-0.0.5.git --save</code><br>To install the specified version, you must not use the following command to install, because the version number is wrong.<br><code>npm install hexo-asset-image --save</code><br>In this way, every time a new blog post is created, a folder with the same name will appear for pictures.</p>\n</li>\n<li><p>Use md syntax to reference pictures.<br><code>![Picture name](picture path)</code></p>\n</li>\n<li><p>Or use css style to specify the image size<br><code>&lt;img src=&quot;picture path&quot; width=&quot;50%&quot; height=&quot;50%&quot;&gt;</code></p>\n</li>\n</ul>\n<h3 id=\"7-The-article-shows-part-of-the-content\"><a href=\"#7-The-article-shows-part-of-the-content\" class=\"headerlink\" title=\"7 The article shows part of the content\"></a>7 The article shows part of the content</h3><p>In a MarkDown article, just insert <!--more-->, and the content after that will not be displayed. Need to click to expand the full text to be displayed.<br>Its related configuration is in <em>themes&#x2F;yilia&#x2F;_config.yml</em></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">excerpt_link<span class=\"punctuation\">:</span> more    #文章太长，截断按钮文字</span><br><span class=\"line\">show_all_link<span class=\"punctuation\">:</span> &#x27;展开全文&#x27;   #文章卡片右下角常驻链接，不需要请设置为<span class=\"literal\"><span class=\"keyword\">false</span></span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"8-Added-不蒜子统计\"><a href=\"#8-Added-不蒜子统计\" class=\"headerlink\" title=\"8 Added 不蒜子统计\"></a>8 Added 不蒜子统计</h3><p><a href=\"http://ibruce.info/2015/04/04/busuanzi/\">不蒜子</a>, which can be used to count the number of visits to the blog.</p>\n<ul>\n<li><p>install script<br>Suanzi can be used for any type of personal site. For hexo, open <em>themes&#x2F;your theme&#x2F;layout&#x2F;_partial&#x2F;footer.ejs</em> and add the following script, of course, it can also be added to the <em>header</em>.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script <span class=\"keyword\">async</span> src=<span class=\"string\">&quot;//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&quot;</span>&gt;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Show total site visits<br>Open <em>themes&#x2F;your theme&#x2F;layout&#x2F;_partial&#x2F;footer.ejs</em> and add the script.</p>\n<ul>\n<li>算法a：pv的方式，单个用户连续点击n篇文章，记录n词访问量<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;span id=<span class=\"string\">&quot;busuanzi_container_site_pv&quot;</span>&gt;</span><br><span class=\"line\">    本站总访问量&lt;span id=<span class=\"string\">&quot;busuanzi_value_site_pv&quot;</span>&gt;&lt;/span&gt;次</span><br><span class=\"line\">&lt;/span&gt;</span><br></pre></td></tr></table></figure></li>\n<li>算法b：uv的方式，单个用户连续点击n篇文章，只记录1次访客数。<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;span id=<span class=\"string\">&quot;busuanzi_container_site_uv&quot;</span>&gt;</span><br><span class=\"line\">    本站访客数&lt;span id=<span class=\"string\">&quot;busuanzi_value_site_uv&quot;</span>&gt;&lt;/span&gt;人次</span><br><span class=\"line\">&lt;/span&gt;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>Show single article hits<br>算法：pv的方式，单个用户点击1篇文章，本篇文章记录1次阅读量。<br>打开themes&#x2F;yilia&#x2F;layout&#x2F;_partial&#x2F;article.ejs，<br>在<code>&lt;%- partial(&#39;post/title&#39;, &#123;class_name: &#39;article-title&#39;&#125;) %&gt;</code>后加下述代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--显示阅读次数--&gt;</span><br><span class=\"line\">&lt;% <span class=\"keyword\">if</span> (!index &amp;&amp; post.<span class=\"property\">comments</span>)&#123; %&gt;</span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span></span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;cloud-tie-join-count&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;javascript:void(0);&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;color:gray;font-size:14px;&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;icon-sort&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;busuanzi_container_page_pv&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;color:#ef7522;font-size:14px;&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            阅读数: <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;busuanzi_value_page_pv&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>次 <span class=\"symbol\">&amp;nbsp;</span><span class=\"symbol\">&amp;nbsp;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span></span><br><span class=\"line\">&lt;% &#125; %&gt;</span><br><span class=\"line\">&lt;!--显示阅读次数完毕--&gt;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>更多方式见<a href=\"http://ibruce.info/2015/04/04/busuanzi/\">不蒜子</a></p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"9-Increase-word-count\"><a href=\"#9-Increase-word-count\" class=\"headerlink\" title=\"9 Increase word count\"></a>9 Increase word count</h3><p>It is recommended to use the hexo article word count plug-in<a href=\"https://www.npmjs.com/package/hexo-wordcount\">WordCount</a></p>\n<ul>\n<li>install plugin<br><code>npm install hexo-wordcount --save</code><br>The plug-in has two statistical methods, post and total. Generally speaking, the post statistics are introduced into the article and displayed, and the total word count statistics are displayed on the home page where you want to place them (<strong>footer, left-col</strong> or other places).<br>My blog is imported to the left column.</li>\n<li>In <strong>yilia&#x2F;layout&#x2F;_partial&#x2F;left-col.ejs</strong> file, the <strong>class name is header-smart-menu</strong> and add the following code to display the total word count.<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div <span class=\"keyword\">class</span>=<span class=\"string\">&quot;post-count&quot;</span> style=<span class=\"string\">&#x27;font-size:14px&#x27;</span>&gt;总字数:&lt;%= <span class=\"title function_\">totalcount</span>(site, <span class=\"string\">&#x27;0,0.0a&#x27;</span>) %&gt;字&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<img src=\"/2021/05/29/How-to-build-a-hexo-blog-on-Ubuntu-through-gitee-github/%E6%80%BB%E5%AD%97%E6%95%B0.png\" alt=\"总字数\"><!-- <img src=\"How-to-build-a-hexo-blog-on-Ubuntu-through-gitee-github/总字数.png\" width=\"50%\" height=\"50%\"> --></li>\n<li>In the <strong>yilia&#x2F;layout&#x2F;_partial&#x2F;article.ejs</strong> file, <strong>class name is article-header</strong> and add the following code to display the number of words and estimated reading time of a single article.<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div align=<span class=\"string\">&quot;center&quot;</span> <span class=\"keyword\">class</span>=<span class=\"string\">&quot;post-count&quot;</span>&gt;</span><br><span class=\"line\">    字数：&lt;%= <span class=\"title function_\">wordcount</span>(post.<span class=\"property\">content</span>) %&gt;字 | 预计阅读时长：&lt;%= <span class=\"title function_\">min2read</span>(post.<span class=\"property\">content</span>) %&gt;分钟</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<img src=\"/2021/05/29/How-to-build-a-hexo-blog-on-Ubuntu-through-gitee-github/%E5%8D%95%E7%AF%87%E5%AD%97%E6%95%B0.png\" alt=\"单篇字数和阅读时长\"><!-- <img src=\"How-to-build-a-hexo-blog-on-Ubuntu-through-gitee-github/单篇字数.png\" width=\"50%\" height=\"50%\"> --></li>\n</ul>\n<blockquote>\n<p>注：node版本7.6.0之前的，WordCount需要安装2.x版本</p>\n</blockquote>\n<p><code>npm install hexo-wordcount@2 --save             2.x版本</code></p>\n<h3 id=\"10-Add-NetEase-Cloud-Music\"><a href=\"#10-Add-NetEase-Cloud-Music\" class=\"headerlink\" title=\"10 Add NetEase Cloud Music\"></a>10 Add NetEase Cloud Music</h3><p>We can directly search for the music we want to insert on Netease Cloud, and then click to generate an external link player (you can choose whether to play automatically)<br><img src=\"/2021/05/29/How-to-build-a-hexo-blog-on-Ubuntu-through-gitee-github/%E7%BD%91%E6%98%93%E4%BA%91%E7%94%9F%E6%88%90%E5%A4%96%E9%93%BE.png\" alt=\"网易云生成外链\"></p>\n<p>Then you can generate the corresponding html code according to your settings, and insert the obtained html code into the position you want to insert.</p>\n<p><img src=\"/2021/05/29/How-to-build-a-hexo-blog-on-Ubuntu-through-gitee-github/%E9%80%89%E6%8B%A9%E5%A4%96%E9%93%BE%E6%8F%92%E4%BB%B6.png\" alt=\"选择外链插件\"><br><img src=\"/2021/05/29/How-to-build-a-hexo-blog-on-Ubuntu-through-gitee-github/%E5%A4%8D%E5%88%B6HTML%E4%BB%A3%E7%A0%81.png\" alt=\"复制HTML代码\"></p>\n<h3 id=\"11-Add-article-directory\"><a href=\"#11-Add-article-directory\" class=\"headerlink\" title=\"11 Add article directory\"></a>11 Add article directory</h3><p>The yilia theme has its own directory, open <em>themes&#x2F;yilia&#x2F;_config.yml</em>, and there are <em>toc</em> settings in it. After setting, add <em>toc: 1</em> at the beginning of each article.</p>\n<h3 id=\"12-About-the-problem-of-losing-the-avatar-of-the-secondary-content-of-hexo\"><a href=\"#12-About-the-problem-of-losing-the-avatar-of-the-secondary-content-of-hexo\" class=\"headerlink\" title=\"12 About the problem of losing the avatar of the secondary content of hexo\"></a>12 About the problem of losing the avatar of the secondary content of hexo</h3><p>The problem is that <em>avatar: &#x2F;img&#x2F;avatar.jpg</em> is written as <em>avatar: img&#x2F;avatar.jpg</em></p>\n<h3 id=\"13-How-to-pin-the-article\"><a href=\"#13-How-to-pin-the-article\" class=\"headerlink\" title=\"13 How to pin the article\"></a>13 How to pin the article</h3><ul>\n<li>install <a href=\"https://github.com/netcan/hexo-generator-index-pin-top\">plugin</a><!--more--><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm uninstall hexo-generator-index --save</span><br><span class=\"line\">npm install hexo-generator-index-pin-top --save</span><br></pre></td></tr></table></figure></li>\n<li>Configure top criteria<br>Open <em>themes&#x2F;yilia&#x2F;layout&#x2F;post.ejs</em> and insert the following code directly at the front.<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;% <span class=\"keyword\">if</span> (page.<span class=\"property\">top</span>) &#123; %&gt;</span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;fa fa-thumb-tack&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span></span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">font</span> <span class=\"attr\">color</span>=<span class=\"string\">7D26CD</span>&gt;</span>置顶<span class=\"tag\">&lt;/<span class=\"name\">font</span>&gt;</span></span></span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;post-meta-divider&quot;</span>&gt;</span>|<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure></li>\n<li>Configuration article<br>Just add the top option in the Front-matter of the article that needs to be pinned to the top. The larger the number after top, the higher the priority</li>\n</ul>\n<p><img src=\"/2021/05/29/How-to-build-a-hexo-blog-on-Ubuntu-through-gitee-github/%E6%B5%8B%E8%AF%95%E7%BD%AE%E9%A1%B6.png\" alt=\"测试置顶\"></p>\n<ul>\n<li>Priority configuration<br>Modify the root directory configuration file <em>_config.yml</em>, the <em>top</em> value <em>-1</em> indicates the reverse order according to the <em>top</em> value (just set <em>1</em> in the positive order), and the <em>date</em> is also reversed according to the creation date.</li>\n</ul>\n<p><img src=\"/2021/05/29/How-to-build-a-hexo-blog-on-Ubuntu-through-gitee-github/%E7%BD%AE%E9%A1%B6%E4%BC%98%E5%85%88%E7%BA%A7%E9%85%8D%E7%BD%AE.png\" alt=\"优先级配置\"></p>\n<ul>\n<li>Effect</li>\n</ul>\n<p><img src=\"/2021/05/29/How-to-build-a-hexo-blog-on-Ubuntu-through-gitee-github/%E7%BD%AE%E9%A1%B6%E6%95%88%E6%9E%9C%E5%9B%BE.png\" alt=\"效果\"></p>\n<h3 id=\"14-鼠标点击小心心的设置\"><a href=\"#14-鼠标点击小心心的设置\" class=\"headerlink\" title=\"14 鼠标点击小心心的设置\"></a>14 鼠标点击小心心的设置</h3><ul>\n<li>Add the file <em>love.js</em> under the <em>themes&#x2F;yilia&#x2F;source</em> path, the content is as follows<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">!<span class=\"keyword\">function</span>(<span class=\"params\">e,t,a</span>)&#123;<span class=\"keyword\">function</span> <span class=\"title function_\">r</span>(<span class=\"params\"></span>)&#123;<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> e=<span class=\"number\">0</span>;e&lt;s.<span class=\"property\">length</span>;e++)s[e].<span class=\"property\">alpha</span>&lt;=<span class=\"number\">0</span>?(t.<span class=\"property\">body</span>.<span class=\"title function_\">removeChild</span>(s[e].<span class=\"property\">el</span>),s.<span class=\"title function_\">splice</span>(e,<span class=\"number\">1</span>)):(s[e].<span class=\"property\">y</span>--,s[e].<span class=\"property\">scale</span>+=<span class=\"number\">.004</span>,s[e].<span class=\"property\">alpha</span>-=<span class=\"number\">.013</span>,s[e].<span class=\"property\">el</span>.<span class=\"property\">style</span>.<span class=\"property\">cssText</span>=<span class=\"string\">&quot;left:&quot;</span>+s[e].<span class=\"property\">x</span>+<span class=\"string\">&quot;px;top:&quot;</span>+s[e].<span class=\"property\">y</span>+<span class=\"string\">&quot;px;opacity:&quot;</span>+s[e].<span class=\"property\">alpha</span>+<span class=\"string\">&quot;;transform:scale(&quot;</span>+s[e].<span class=\"property\">scale</span>+<span class=\"string\">&quot;,&quot;</span>+s[e].<span class=\"property\">scale</span>+<span class=\"string\">&quot;) rotate(45deg);background:&quot;</span>+s[e].<span class=\"property\">color</span>+<span class=\"string\">&quot;;z-index:99999&quot;</span>);<span class=\"title function_\">requestAnimationFrame</span>(r)&#125;<span class=\"keyword\">function</span> <span class=\"title function_\">n</span>(<span class=\"params\"></span>)&#123;<span class=\"keyword\">var</span> t=<span class=\"string\">&quot;function&quot;</span>==<span class=\"keyword\">typeof</span> e.<span class=\"property\">onclick</span>&amp;&amp;e.<span class=\"property\">onclick</span>;e.<span class=\"property\">onclick</span>=<span class=\"keyword\">function</span>(<span class=\"params\">e</span>)&#123;t&amp;&amp;<span class=\"title function_\">t</span>(),<span class=\"title function_\">o</span>(e)&#125;&#125;<span class=\"keyword\">function</span> <span class=\"title function_\">o</span>(<span class=\"params\">e</span>)&#123;<span class=\"keyword\">var</span> a=t.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;div&quot;</span>);a.<span class=\"property\">className</span>=<span class=\"string\">&quot;heart&quot;</span>,s.<span class=\"title function_\">push</span>(&#123;<span class=\"attr\">el</span>:a,<span class=\"attr\">x</span>:e.<span class=\"property\">clientX</span>-<span class=\"number\">5</span>,<span class=\"attr\">y</span>:e.<span class=\"property\">clientY</span>-<span class=\"number\">5</span>,<span class=\"attr\">scale</span>:<span class=\"number\">1</span>,<span class=\"attr\">alpha</span>:<span class=\"number\">1</span>,<span class=\"attr\">color</span>:<span class=\"title function_\">c</span>()&#125;),t.<span class=\"property\">body</span>.<span class=\"title function_\">appendChild</span>(a)&#125;<span class=\"keyword\">function</span> <span class=\"title function_\">i</span>(<span class=\"params\">e</span>)&#123;<span class=\"keyword\">var</span> a=t.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;style&quot;</span>);a.<span class=\"property\">type</span>=<span class=\"string\">&quot;text/css&quot;</span>;<span class=\"keyword\">try</span>&#123;a.<span class=\"title function_\">appendChild</span>(t.<span class=\"title function_\">createTextNode</span>(e))&#125;<span class=\"keyword\">catch</span>(t)&#123;a.<span class=\"property\">styleSheet</span>.<span class=\"property\">cssText</span>=e&#125;t.<span class=\"title function_\">getElementsByTagName</span>(<span class=\"string\">&quot;head&quot;</span>)[<span class=\"number\">0</span>].<span class=\"title function_\">appendChild</span>(a)&#125;<span class=\"keyword\">function</span> <span class=\"title function_\">c</span>(<span class=\"params\"></span>)&#123;<span class=\"keyword\">return</span><span class=\"string\">&quot;rgb(&quot;</span>+~~(<span class=\"number\">255</span>*<span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>())+<span class=\"string\">&quot;,&quot;</span>+~~(<span class=\"number\">255</span>*<span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>())+<span class=\"string\">&quot;,&quot;</span>+~~(<span class=\"number\">255</span>*<span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>())+<span class=\"string\">&quot;)&quot;</span>&#125;<span class=\"keyword\">var</span> s=[];e.<span class=\"property\">requestAnimationFrame</span>=e.<span class=\"property\">requestAnimationFrame</span>||e.<span class=\"property\">webkitRequestAnimationFrame</span>||e.<span class=\"property\">mozRequestAnimationFrame</span>||e.<span class=\"property\">oRequestAnimationFrame</span>||e.<span class=\"property\">msRequestAnimationFrame</span>||<span class=\"keyword\">function</span>(<span class=\"params\">e</span>)&#123;<span class=\"built_in\">setTimeout</span>(e,<span class=\"number\">1e3</span>/<span class=\"number\">60</span>)&#125;,<span class=\"title function_\">i</span>(<span class=\"string\">&quot;.heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: &#x27;&#x27;;width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;&quot;</span>),<span class=\"title function_\">n</span>(),<span class=\"title function_\">r</span>()&#125;(<span class=\"variable language_\">window</span>,<span class=\"variable language_\">document</span>);</span><br></pre></td></tr></table></figure></li>\n<li>Open hexo <em>themes&#x2F;yilia&#x2F;layout&#x2F;_partial&#x2F;footer.ejs</em> and add the following code at the end<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--页面点击小红心--&gt;</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;/love.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"15-Add-copyright-statement\"><a href=\"#15-Add-copyright-statement\" class=\"headerlink\" title=\"15 Add copyright statement\"></a>15 Add copyright statement</h3><ul>\n<li>Configure yilia<br>Add code where marked<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div <span class=\"keyword\">class</span>=<span class=\"string\">&quot;article-entry&quot;</span> itemprop=<span class=\"string\">&quot;articleBody&quot;</span>&gt;</span><br><span class=\"line\">  &lt;% <span class=\"keyword\">if</span> (post.<span class=\"property\">excerpt</span> &amp;&amp; index)&#123; %&gt;</span><br><span class=\"line\">    &lt;%- post.<span class=\"property\">excerpt</span> %&gt;</span><br><span class=\"line\">    &lt;% <span class=\"keyword\">if</span> (theme.<span class=\"property\">excerpt_link</span>) &#123; %&gt;</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;article-more-a&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&lt;%- url_for(post.path) %&gt;#more&quot;</span>&gt;</span>&lt;%= theme.excerpt_link %&gt; &gt;&gt;<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span></span><br><span class=\"line\">    &lt;% &#125; %&gt;</span><br><span class=\"line\">  &lt;% &#125; <span class=\"keyword\">else</span> &#123; %&gt;</span><br><span class=\"line\">    &lt;%- post.<span class=\"property\">content</span> %&gt;</span><br><span class=\"line\">  &lt;% &#125; %&gt;</span><br><span class=\"line\">  &lt;-- 在此处添加代码--&gt;</span><br><span class=\"line\">  &lt;% if ((theme.reward_type === 2 || (theme.reward_type === 1 &amp;&amp; post.reward)) &amp;&amp; !index)&#123; %&gt;</span><br><span class=\"line\">  &lt;div class=&quot;page-reward&quot;&gt;</span><br><span class=\"line\">    &lt;a href=&quot;javascript:;&quot; class=&quot;page-reward-btn tooltip-top&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;tooltip tooltip-east&quot;&gt;</span><br></pre></td></tr></table></figure>\n添加的代码如下<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 增加版权声明 --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;%</span><br><span class=\"line\">  <span class=\"keyword\">var</span> sUrl = url.<span class=\"title function_\">replace</span>(<span class=\"regexp\">/index\\.html$/</span>, <span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\">  sUrl = <span class=\"regexp\">/^(http:|https:)\\/\\//</span>.<span class=\"title function_\">test</span>(sUrl) ? sUrl : <span class=\"string\">&#x27;https:&#x27;</span> + sUrl;</span><br><span class=\"line\">%&gt;</span><br><span class=\"line\">&lt;% <span class=\"keyword\">if</span> ((theme.<span class=\"property\">declare_type</span> === <span class=\"number\">2</span> || (theme.<span class=\"property\">declare_type</span> === <span class=\"number\">1</span> &amp;&amp; post.<span class=\"property\">declare</span>)) &amp;&amp; !index)&#123; %&gt;</span><br><span class=\"line\">  &lt;div class=&quot;declare&quot;&gt;</span><br><span class=\"line\">    &lt;strong&gt;本文作者：&lt;/strong&gt;</span><br><span class=\"line\">    &lt;% if(config.author != undefined)&#123; %&gt;</span><br><span class=\"line\">      &lt;%= config.author%&gt;</span><br><span class=\"line\">    &lt;% &#125;else&#123;%&gt;</span><br><span class=\"line\">      &lt;font color=&quot;red&quot;&gt;请在博客根目录“_config.yml”中填入正确的“author”&lt;/font&gt;</span><br><span class=\"line\">    &lt;%&#125;%&gt;</span><br><span class=\"line\">    &lt;br&gt;</span><br><span class=\"line\">    &lt;strong&gt;本文链接：&lt;/strong&gt;</span><br><span class=\"line\">    &lt;a rel=&quot;license&quot; href=&quot;&lt;%=sUrl%&gt;&quot;&gt;&lt;%=sUrl%&gt;&lt;/a&gt;</span><br><span class=\"line\">    &lt;br&gt;</span><br><span class=\"line\">    &lt;strong&gt;版权声明：&lt;/strong&gt;</span><br><span class=\"line\">    本作品采用</span><br><span class=\"line\">    &lt;a rel=&quot;license&quot; href=&quot;&lt;%= theme.licensee_url%&gt;&quot;&gt;&lt;%= theme.licensee_name%&gt;&lt;/a&gt;</span><br><span class=\"line\">    进行许可。转载请注明出处！</span><br><span class=\"line\">    &lt;% if(theme.licensee_img != undefined)&#123; %&gt;</span><br><span class=\"line\">      &lt;br&gt;</span><br><span class=\"line\">      &lt;a rel=&quot;license&quot; href=&quot;&lt;%= theme.licensee_url%&gt;&quot;&gt;&lt;img alt=&quot;知识共享许可协议&quot; style=&quot;border-width:0&quot; src=&quot;&lt;%= theme.licensee_img%&gt;&quot;/&gt;&lt;/a&gt;</span><br><span class=\"line\">    &lt;% &#125; %&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;% &#125; else &#123;%&gt;</span><br><span class=\"line\">  &lt;div class=&quot;declare&quot; hidden=&quot;hidden&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;% &#125; %&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- 增加版权声明结束 --&gt;</span><br></pre></td></tr></table></figure>\nCreate a new file <em>themes&#x2F;yilia&#x2F;source-src&#x2F;css&#x2F;declare.scss</em> and add the following CSS code<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.declare</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#eaeaea</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin-top</span>: <span class=\"number\">2em</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-left</span>: <span class=\"number\">3px</span> solid <span class=\"number\">#ff1700</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: .<span class=\"number\">5em</span> <span class=\"number\">1em</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\nOpen <em>themes&#x2F;yilia&#x2F;source-src&#x2F;css&#x2F;main.scss</em> and add the following code<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@import</span> <span class=\"string\">&quot;./declare&quot;</span>;</span><br></pre></td></tr></table></figure></li>\n<li>Configuration display<br>Open <em>themes&#x2F;yilia&#x2F;_config.yml</em> and add the following content in it<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#版权基础设定：0-关闭声明； 1-文章对应的md文件里有declare: true属性，才有版权声明； 2-所有文章均有版权声明</span></span><br><span class=\"line\"><span class=\"comment\">#当前应用的版权协议地址。</span></span><br><span class=\"line\"><span class=\"comment\">#版权协议的名称</span></span><br><span class=\"line\"><span class=\"comment\">#版权协议的Logo</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">declare_type:</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"attr\">licensee_url:</span> <span class=\"string\">https://creativecommons.org/licenses/by-nc-sa/4.0/</span></span><br><span class=\"line\"><span class=\"attr\">licensee_name:</span> <span class=\"string\">&#x27;知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议&#x27;</span></span><br><span class=\"line\"><span class=\"attr\">licensee_img:</span> <span class=\"string\">https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png</span></span><br></pre></td></tr></table></figure>\nThen set the attribute in the header of the <em>md</em> file of the article that needs copyright statement.<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">declare</span>:<span class=\"literal\">true</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"16-End-of-text-no-conflict-with-more\"><a href=\"#16-End-of-text-no-conflict-with-more\" class=\"headerlink\" title=\"16 End of text (no conflict with more)\"></a>16 End of text (no conflict with more)</h3><ul>\n<li>Open the <em>themes\\yilia\\layout_partial\\article.ejs</em> file, and add the code in the following code.<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;% <span class=\"keyword\">if</span> (!post.<span class=\"property\">noDate</span>)&#123; %&gt;</span><br><span class=\"line\">        &lt;%- <span class=\"title function_\">partial</span>(<span class=\"string\">&#x27;post/date&#x27;</span>, &#123;<span class=\"attr\">class_name</span>: <span class=\"string\">&#x27;archive-article-date&#x27;</span>, <span class=\"attr\">date_format</span>: <span class=\"literal\">null</span>&#125;) %&gt;</span><br><span class=\"line\">        &lt;% &#125; %&gt;</span><br><span class=\"line\">      &lt;/header&gt;</span><br><span class=\"line\">    &lt;% &#125; %&gt;</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;article-entry&quot;</span> <span class=\"attr\">itemprop</span>=<span class=\"string\">&quot;articleBody&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      &lt;% if (post.excerpt &amp;&amp; index)&#123; %&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">        &lt;%- post.excerpt %&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">        &lt;% if (theme.excerpt_link) &#123; %&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;article-more-a&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&lt;%- url_for(post.path) %&gt;#more&quot;</span>&gt;</span>&lt;%= theme.excerpt_link %&gt; &gt;&gt;<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        &lt;% &#125; %&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">      &lt;% &#125; else &#123; %&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">        &lt;%- post.content %&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">      &lt;% &#125; %&gt;</span></span><br></pre></td></tr></table></figure>\n添加的代码如下<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;% <span class=\"keyword\">if</span> ((theme.<span class=\"property\">essayending_type</span> === <span class=\"number\">2</span> || (theme.<span class=\"property\">essayending_type</span> === <span class=\"number\">1</span> &amp;&amp; post.<span class=\"property\">essayending</span>)) &amp;&amp; !index)&#123; %&gt;</span><br><span class=\"line\">       &lt;% <span class=\"keyword\">if</span>  (!index)&#123; %&gt;</span><br><span class=\"line\">         <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;essayending&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">           <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;text-align:center;color: #ccc;font-size:22px;&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            -------------本文结束<span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;fa fa-paw&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span>感谢您的阅读-------------</span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">             <span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">             <span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">           <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">         <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">       &lt;% &#125; <span class=\"keyword\">else</span> &#123;%&gt;</span><br><span class=\"line\">         <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;essayending&quot;</span> <span class=\"attr\">hidden</span>=<span class=\"string\">&quot;hidden&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">       &lt;% &#125; %&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">   &lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure></li>\n<li>Configuration<br>Open <em>theme\\yilia_config.yml</em> and add the following content in the appropriate position.<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#文章结束</span></span><br><span class=\"line\"><span class=\"attr\">essayending_type:</span> <span class=\"number\">2</span> <span class=\"comment\">#0关闭文章结束提示 2全开 1需要在文章开头加上 essayending: true</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>0表示关闭文章结束提示<br>2表示全开<br>1表示需要在文章开头加上 essayending: true 才会开启文章结束提示</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"17-Add-pet\"><a href=\"#17-Add-pet\" class=\"headerlink\" title=\"17 Add pet\"></a>17 Add pet</h3><ul>\n<li><p>Install plugin<br><code>npm install --save hexo-helper-live2d</code></p>\n</li>\n<li><p>Download model<br>Select the corresponding model to install, <a href=\"https://github.com/xiazeyu/live2d-widget-models\">project address</a><br><a href=\"https://huaji8.top/post/live2d-plugin-2.0/\">Effect display website</a>, here I choose the <em>live2d-widget-model-hijiki</em> model package.<br><code>npm install live2d-widget-model-hijiki</code></p>\n</li>\n<li><p>Configuration<br>Open the _config.yml file in the root directory of the blog, and add the following code at the end.</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">live2d:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">scriptFrom:</span> <span class=\"string\">local</span></span><br><span class=\"line\">  <span class=\"attr\">pluginRootPath:</span> <span class=\"string\">live2dw/</span></span><br><span class=\"line\">  <span class=\"attr\">pluginJsPath:</span> <span class=\"string\">lib/</span></span><br><span class=\"line\">  <span class=\"attr\">pluginModelPath:</span> <span class=\"string\">assets/</span></span><br><span class=\"line\">  <span class=\"attr\">tagMode:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">debug:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">model:</span></span><br><span class=\"line\">    <span class=\"attr\">use:</span> <span class=\"string\">live2d-widget-model-hijiki</span></span><br><span class=\"line\">  <span class=\"attr\">display:</span></span><br><span class=\"line\">    <span class=\"attr\">position:</span> <span class=\"string\">right</span></span><br><span class=\"line\">    <span class=\"attr\">width:</span> <span class=\"number\">150</span></span><br><span class=\"line\">    <span class=\"attr\">height:</span> <span class=\"number\">300</span></span><br><span class=\"line\">  <span class=\"attr\">mobile:</span></span><br><span class=\"line\">    <span class=\"attr\">show:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"18-Article-encryption\"><a href=\"#18-Article-encryption\" class=\"headerlink\" title=\"18 Article encryption\"></a>18 Article encryption</h3><p><a href=\"https://github.com/D0n9X1n/hexo-blog-encrypt\">hexo-blog-encrypt</a></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"1-Install-Node-js\"><a href=\"#1-Install-Node-js\" class=\"headerlink\" title=\"1. Install Node.js\"></a>1. Install Node.js</h3><blockquote>\n<p>Note: If you use <code>sudo apt install node npm</code> directly, there will be a problem that the downloaded version does not match. The Ubuntu warehouse list is the v10 version.</p>\n</blockquote>","more":"<p>If you need to install the latest version of Node.js, you can use a PPA software repository or nvm (Node Version Manager) to install and manage multiple versions of Node.js. Here are the steps to install the latest version of Node.js using the PPA software repository:</p>\n<ul>\n<li><p>Add the PPA repository:<code>curl -sL https://deb.nodesource.com/setup_16.x | sudo -E bash -</code></p>\n</li>\n<li><p>Install Node.js:<code>sudo apt-get install -y nodejs</code></p>\n</li>\n<li><p>Check the installed Node.js version:<code>node --version</code></p>\n</li>\n<li><p>Check installed npm version:<code>npm --version</code></p>\n</li>\n<li><p>Update npm:<code>sudo npm install -g npm</code></p>\n</li>\n</ul>\n<h3 id=\"2-Install-hexo\"><a href=\"#2-Install-hexo\" class=\"headerlink\" title=\"2. Install hexo\"></a>2. Install hexo</h3><p>Refer to <a href=\"https://github.com/hexojs/hexo\">official github</a> to install hexo</p>\n<blockquote>\n<p>Note: add sudo</p>\n</blockquote>\n<ul>\n<li>Install cnpm(optional)</li>\n</ul>\n<p>Since the default server image of npm is abroad, direct calls may time out or be particularly slow. So here is the way to download cnpm.</p>\n<p><code>npm install -g cnpm --registry=http://registry.npm.taobao.org</code></p>\n<p>Check the version of cnpm to check whether the installation is successful:</p>\n<p><code>cnpm -v</code></p>\n<p>All configuration reference <a href=\"https://hexo.io/docs/\">official document</a></p>\n<h3 id=\"3-Deploy-blog-to-gitee-x2F-github\"><a href=\"#3-Deploy-blog-to-gitee-x2F-github\" class=\"headerlink\" title=\"3. Deploy blog to gitee&#x2F;github\"></a>3. Deploy blog to gitee&#x2F;github</h3><ul>\n<li><p>Create a new warehouse.</p>\n<ul>\n<li><p>For repository name, just fill in “github name+.gitee+.io” (you can access the blog by entering this address <code>https://corner647.gitee.io</code> in the browser later)</p>\n</li>\n<li><p>Description is the warehouse introduction, just fill in whatever you want. Create it afterwards.</p>\n</li>\n</ul>\n</li>\n<li><p>Install the Git plugin<br> <code>npm install --save hexo-deployer-git</code></p>\n</li>\n<li><p>configuration config.yml</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">    type: git</span><br><span class=\"line\">    repo: Fill in the full path of the warehouse you created on Gitee before, remember to add .git (in fact, paste the clone ssh address of the newly created warehouse)</span><br><span class=\"line\">    branch: master</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>Note:If you want to push to github, just change the repository here.</p>\n</blockquote>\n</li>\n<li><p>Generate key, ssh verify gitee<br><code>ssh-keygen -t rsa -C &quot;email&quot;</code></p>\n</li>\n<li><p>Test whether the connection is successful<br><code>ssh -T git@github.com</code></p>\n</li>\n</ul>\n<blockquote>\n<p>Beware of Proxy Issues</p>\n</blockquote>\n<ul>\n<li>push to remote<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g\t\t# generate blog </span><br><span class=\"line\">hexo d\t\t# push blog</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"4-yilia-theme-configuragion\"><a href=\"#4-yilia-theme-configuragion\" class=\"headerlink\" title=\"4. yilia theme configuragion\"></a>4. yilia theme configuragion</h3><p><a href=\"https://github.com/litten/hexo-theme-yilia\">yilia</a> is a simple and elegant theme for hexo.</p>\n<ul>\n<li>Refer to <a href=\"https://github.com/litten/hexo-theme-yilia\">official github</a> for installation</li>\n<li>Click <strong>所有文章</strong> on the left,and there will be a prompt that the 模块缺失.<!-- ![模块缺失](How-to-build-a-hexo-blog-on-Ubuntu-through-gitee-github/模块缺失.png) --></li>\n</ul>\n<img src=\"/2021/05/29/How-to-build-a-hexo-blog-on-Ubuntu-through-gitee-github/模块缺失.png\" width=\"50%\" height=\"50%\">\n\n<ul>\n<li>Follow the prompts to execute the command in the root directory of the blog<br><code>cnpm i hexo-generator-json-content --save</code></li>\n<li>Follow the prompts to add configuration in the root directory _config.yml<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jsonContent<span class=\"punctuation\">:</span></span><br><span class=\"line\">    meta<span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span></span><br><span class=\"line\">    pages<span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span></span><br><span class=\"line\">    posts<span class=\"punctuation\">:</span></span><br><span class=\"line\">      title<span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span></span><br><span class=\"line\">      date<span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span></span><br><span class=\"line\">      path<span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span></span><br><span class=\"line\">      text<span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span></span><br><span class=\"line\">      raw<span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span></span><br><span class=\"line\">      content<span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span></span><br><span class=\"line\">      slug<span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span></span><br><span class=\"line\">      updated<span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span></span><br><span class=\"line\">      comments<span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span></span><br><span class=\"line\">      link<span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span></span><br><span class=\"line\">      permalink<span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span></span><br><span class=\"line\">      excerpt<span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span></span><br><span class=\"line\">      categories<span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span></span><br><span class=\"line\">      tags<span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span></span><br></pre></td></tr></table></figure></li>\n<li>Just re-push</li>\n</ul>\n<!-- ![模块完整](How-to-build-a-hexo-blog-on-Ubuntu-through-gitee-github/模块完整.png) -->\n<img src=\"/2021/05/29/How-to-build-a-hexo-blog-on-Ubuntu-through-gitee-github/模块完整.png\" width=\"50%\" height=\"50%\">\n\n<h3 id=\"5-Configure-image-resources\"><a href=\"#5-Configure-image-resources\" class=\"headerlink\" title=\"5 Configure image resources\"></a>5 Configure image resources</h3><p>Put the picture in <strong>themes&#x2F;yilia&#x2F;source&#x2F;img</strong>, and then directly reference it in the theme configuration file(<em>themes&#x2F;yilia&#x2F;_config.yml</em>).</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">avatar<span class=\"punctuation\">:</span> /img/avatar.jpg     #头像图片</span><br><span class=\"line\">favicon<span class=\"punctuation\">:</span> /img/timg.png      #网页图标</span><br><span class=\"line\">weixin<span class=\"punctuation\">:</span> /img/qr_code.jpg    #微信二维码图片</span><br><span class=\"line\">alipay<span class=\"punctuation\">:</span>                     #支付宝二维码</span><br></pre></td></tr></table></figure>\n<h3 id=\"6-The-local-picture-does-not-display-the-problem-solution\"><a href=\"#6-The-local-picture-does-not-display-the-problem-solution\" class=\"headerlink\" title=\"6 The local picture does not display the problem solution\"></a>6 The local picture does not display the problem solution</h3><ul>\n<li><p>Change the value of post_asset_folder in _config.yml to true</p>\n</li>\n<li><p>Install hexo-asset-image, a plugin that can upload local images<br><code>npm install https://github.com/EricGerry/hexo-asset-image-0.0.5.git --save</code><br>To install the specified version, you must not use the following command to install, because the version number is wrong.<br><code>npm install hexo-asset-image --save</code><br>In this way, every time a new blog post is created, a folder with the same name will appear for pictures.</p>\n</li>\n<li><p>Use md syntax to reference pictures.<br><code>![Picture name](picture path)</code></p>\n</li>\n<li><p>Or use css style to specify the image size<br><code>&lt;img src=&quot;picture path&quot; width=&quot;50%&quot; height=&quot;50%&quot;&gt;</code></p>\n</li>\n</ul>\n<h3 id=\"7-The-article-shows-part-of-the-content\"><a href=\"#7-The-article-shows-part-of-the-content\" class=\"headerlink\" title=\"7 The article shows part of the content\"></a>7 The article shows part of the content</h3><p>In a MarkDown article, just insert <!--more-->, and the content after that will not be displayed. Need to click to expand the full text to be displayed.<br>Its related configuration is in <em>themes&#x2F;yilia&#x2F;_config.yml</em></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">excerpt_link<span class=\"punctuation\">:</span> more    #文章太长，截断按钮文字</span><br><span class=\"line\">show_all_link<span class=\"punctuation\">:</span> &#x27;展开全文&#x27;   #文章卡片右下角常驻链接，不需要请设置为<span class=\"literal\"><span class=\"keyword\">false</span></span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"8-Added-不蒜子统计\"><a href=\"#8-Added-不蒜子统计\" class=\"headerlink\" title=\"8 Added 不蒜子统计\"></a>8 Added 不蒜子统计</h3><p><a href=\"http://ibruce.info/2015/04/04/busuanzi/\">不蒜子</a>, which can be used to count the number of visits to the blog.</p>\n<ul>\n<li><p>install script<br>Suanzi can be used for any type of personal site. For hexo, open <em>themes&#x2F;your theme&#x2F;layout&#x2F;_partial&#x2F;footer.ejs</em> and add the following script, of course, it can also be added to the <em>header</em>.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script <span class=\"keyword\">async</span> src=<span class=\"string\">&quot;//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&quot;</span>&gt;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Show total site visits<br>Open <em>themes&#x2F;your theme&#x2F;layout&#x2F;_partial&#x2F;footer.ejs</em> and add the script.</p>\n<ul>\n<li>算法a：pv的方式，单个用户连续点击n篇文章，记录n词访问量<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;span id=<span class=\"string\">&quot;busuanzi_container_site_pv&quot;</span>&gt;</span><br><span class=\"line\">    本站总访问量&lt;span id=<span class=\"string\">&quot;busuanzi_value_site_pv&quot;</span>&gt;&lt;/span&gt;次</span><br><span class=\"line\">&lt;/span&gt;</span><br></pre></td></tr></table></figure></li>\n<li>算法b：uv的方式，单个用户连续点击n篇文章，只记录1次访客数。<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;span id=<span class=\"string\">&quot;busuanzi_container_site_uv&quot;</span>&gt;</span><br><span class=\"line\">    本站访客数&lt;span id=<span class=\"string\">&quot;busuanzi_value_site_uv&quot;</span>&gt;&lt;/span&gt;人次</span><br><span class=\"line\">&lt;/span&gt;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>Show single article hits<br>算法：pv的方式，单个用户点击1篇文章，本篇文章记录1次阅读量。<br>打开themes&#x2F;yilia&#x2F;layout&#x2F;_partial&#x2F;article.ejs，<br>在<code>&lt;%- partial(&#39;post/title&#39;, &#123;class_name: &#39;article-title&#39;&#125;) %&gt;</code>后加下述代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--显示阅读次数--&gt;</span><br><span class=\"line\">&lt;% <span class=\"keyword\">if</span> (!index &amp;&amp; post.<span class=\"property\">comments</span>)&#123; %&gt;</span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span></span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;cloud-tie-join-count&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;javascript:void(0);&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;color:gray;font-size:14px;&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;icon-sort&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;busuanzi_container_page_pv&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;color:#ef7522;font-size:14px;&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            阅读数: <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;busuanzi_value_page_pv&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>次 <span class=\"symbol\">&amp;nbsp;</span><span class=\"symbol\">&amp;nbsp;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span></span><br><span class=\"line\">&lt;% &#125; %&gt;</span><br><span class=\"line\">&lt;!--显示阅读次数完毕--&gt;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>更多方式见<a href=\"http://ibruce.info/2015/04/04/busuanzi/\">不蒜子</a></p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"9-Increase-word-count\"><a href=\"#9-Increase-word-count\" class=\"headerlink\" title=\"9 Increase word count\"></a>9 Increase word count</h3><p>It is recommended to use the hexo article word count plug-in<a href=\"https://www.npmjs.com/package/hexo-wordcount\">WordCount</a></p>\n<ul>\n<li>install plugin<br><code>npm install hexo-wordcount --save</code><br>The plug-in has two statistical methods, post and total. Generally speaking, the post statistics are introduced into the article and displayed, and the total word count statistics are displayed on the home page where you want to place them (<strong>footer, left-col</strong> or other places).<br>My blog is imported to the left column.</li>\n<li>In <strong>yilia&#x2F;layout&#x2F;_partial&#x2F;left-col.ejs</strong> file, the <strong>class name is header-smart-menu</strong> and add the following code to display the total word count.<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div <span class=\"keyword\">class</span>=<span class=\"string\">&quot;post-count&quot;</span> style=<span class=\"string\">&#x27;font-size:14px&#x27;</span>&gt;总字数:&lt;%= <span class=\"title function_\">totalcount</span>(site, <span class=\"string\">&#x27;0,0.0a&#x27;</span>) %&gt;字&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<img src=\"/2021/05/29/How-to-build-a-hexo-blog-on-Ubuntu-through-gitee-github/%E6%80%BB%E5%AD%97%E6%95%B0.png\" alt=\"总字数\"><!-- <img src=\"How-to-build-a-hexo-blog-on-Ubuntu-through-gitee-github/总字数.png\" width=\"50%\" height=\"50%\"> --></li>\n<li>In the <strong>yilia&#x2F;layout&#x2F;_partial&#x2F;article.ejs</strong> file, <strong>class name is article-header</strong> and add the following code to display the number of words and estimated reading time of a single article.<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div align=<span class=\"string\">&quot;center&quot;</span> <span class=\"keyword\">class</span>=<span class=\"string\">&quot;post-count&quot;</span>&gt;</span><br><span class=\"line\">    字数：&lt;%= <span class=\"title function_\">wordcount</span>(post.<span class=\"property\">content</span>) %&gt;字 | 预计阅读时长：&lt;%= <span class=\"title function_\">min2read</span>(post.<span class=\"property\">content</span>) %&gt;分钟</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<img src=\"/2021/05/29/How-to-build-a-hexo-blog-on-Ubuntu-through-gitee-github/%E5%8D%95%E7%AF%87%E5%AD%97%E6%95%B0.png\" alt=\"单篇字数和阅读时长\"><!-- <img src=\"How-to-build-a-hexo-blog-on-Ubuntu-through-gitee-github/单篇字数.png\" width=\"50%\" height=\"50%\"> --></li>\n</ul>\n<blockquote>\n<p>注：node版本7.6.0之前的，WordCount需要安装2.x版本</p>\n</blockquote>\n<p><code>npm install hexo-wordcount@2 --save             2.x版本</code></p>\n<h3 id=\"10-Add-NetEase-Cloud-Music\"><a href=\"#10-Add-NetEase-Cloud-Music\" class=\"headerlink\" title=\"10 Add NetEase Cloud Music\"></a>10 Add NetEase Cloud Music</h3><p>We can directly search for the music we want to insert on Netease Cloud, and then click to generate an external link player (you can choose whether to play automatically)<br><img src=\"/2021/05/29/How-to-build-a-hexo-blog-on-Ubuntu-through-gitee-github/%E7%BD%91%E6%98%93%E4%BA%91%E7%94%9F%E6%88%90%E5%A4%96%E9%93%BE.png\" alt=\"网易云生成外链\"></p>\n<p>Then you can generate the corresponding html code according to your settings, and insert the obtained html code into the position you want to insert.</p>\n<p><img src=\"/2021/05/29/How-to-build-a-hexo-blog-on-Ubuntu-through-gitee-github/%E9%80%89%E6%8B%A9%E5%A4%96%E9%93%BE%E6%8F%92%E4%BB%B6.png\" alt=\"选择外链插件\"><br><img src=\"/2021/05/29/How-to-build-a-hexo-blog-on-Ubuntu-through-gitee-github/%E5%A4%8D%E5%88%B6HTML%E4%BB%A3%E7%A0%81.png\" alt=\"复制HTML代码\"></p>\n<h3 id=\"11-Add-article-directory\"><a href=\"#11-Add-article-directory\" class=\"headerlink\" title=\"11 Add article directory\"></a>11 Add article directory</h3><p>The yilia theme has its own directory, open <em>themes&#x2F;yilia&#x2F;_config.yml</em>, and there are <em>toc</em> settings in it. After setting, add <em>toc: 1</em> at the beginning of each article.</p>\n<h3 id=\"12-About-the-problem-of-losing-the-avatar-of-the-secondary-content-of-hexo\"><a href=\"#12-About-the-problem-of-losing-the-avatar-of-the-secondary-content-of-hexo\" class=\"headerlink\" title=\"12 About the problem of losing the avatar of the secondary content of hexo\"></a>12 About the problem of losing the avatar of the secondary content of hexo</h3><p>The problem is that <em>avatar: &#x2F;img&#x2F;avatar.jpg</em> is written as <em>avatar: img&#x2F;avatar.jpg</em></p>\n<h3 id=\"13-How-to-pin-the-article\"><a href=\"#13-How-to-pin-the-article\" class=\"headerlink\" title=\"13 How to pin the article\"></a>13 How to pin the article</h3><ul>\n<li>install <a href=\"https://github.com/netcan/hexo-generator-index-pin-top\">plugin</a><!--more--><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm uninstall hexo-generator-index --save</span><br><span class=\"line\">npm install hexo-generator-index-pin-top --save</span><br></pre></td></tr></table></figure></li>\n<li>Configure top criteria<br>Open <em>themes&#x2F;yilia&#x2F;layout&#x2F;post.ejs</em> and insert the following code directly at the front.<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;% <span class=\"keyword\">if</span> (page.<span class=\"property\">top</span>) &#123; %&gt;</span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;fa fa-thumb-tack&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span></span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">font</span> <span class=\"attr\">color</span>=<span class=\"string\">7D26CD</span>&gt;</span>置顶<span class=\"tag\">&lt;/<span class=\"name\">font</span>&gt;</span></span></span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;post-meta-divider&quot;</span>&gt;</span>|<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure></li>\n<li>Configuration article<br>Just add the top option in the Front-matter of the article that needs to be pinned to the top. The larger the number after top, the higher the priority</li>\n</ul>\n<p><img src=\"/2021/05/29/How-to-build-a-hexo-blog-on-Ubuntu-through-gitee-github/%E6%B5%8B%E8%AF%95%E7%BD%AE%E9%A1%B6.png\" alt=\"测试置顶\"></p>\n<ul>\n<li>Priority configuration<br>Modify the root directory configuration file <em>_config.yml</em>, the <em>top</em> value <em>-1</em> indicates the reverse order according to the <em>top</em> value (just set <em>1</em> in the positive order), and the <em>date</em> is also reversed according to the creation date.</li>\n</ul>\n<p><img src=\"/2021/05/29/How-to-build-a-hexo-blog-on-Ubuntu-through-gitee-github/%E7%BD%AE%E9%A1%B6%E4%BC%98%E5%85%88%E7%BA%A7%E9%85%8D%E7%BD%AE.png\" alt=\"优先级配置\"></p>\n<ul>\n<li>Effect</li>\n</ul>\n<p><img src=\"/2021/05/29/How-to-build-a-hexo-blog-on-Ubuntu-through-gitee-github/%E7%BD%AE%E9%A1%B6%E6%95%88%E6%9E%9C%E5%9B%BE.png\" alt=\"效果\"></p>\n<h3 id=\"14-鼠标点击小心心的设置\"><a href=\"#14-鼠标点击小心心的设置\" class=\"headerlink\" title=\"14 鼠标点击小心心的设置\"></a>14 鼠标点击小心心的设置</h3><ul>\n<li>Add the file <em>love.js</em> under the <em>themes&#x2F;yilia&#x2F;source</em> path, the content is as follows<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">!<span class=\"keyword\">function</span>(<span class=\"params\">e,t,a</span>)&#123;<span class=\"keyword\">function</span> <span class=\"title function_\">r</span>(<span class=\"params\"></span>)&#123;<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> e=<span class=\"number\">0</span>;e&lt;s.<span class=\"property\">length</span>;e++)s[e].<span class=\"property\">alpha</span>&lt;=<span class=\"number\">0</span>?(t.<span class=\"property\">body</span>.<span class=\"title function_\">removeChild</span>(s[e].<span class=\"property\">el</span>),s.<span class=\"title function_\">splice</span>(e,<span class=\"number\">1</span>)):(s[e].<span class=\"property\">y</span>--,s[e].<span class=\"property\">scale</span>+=<span class=\"number\">.004</span>,s[e].<span class=\"property\">alpha</span>-=<span class=\"number\">.013</span>,s[e].<span class=\"property\">el</span>.<span class=\"property\">style</span>.<span class=\"property\">cssText</span>=<span class=\"string\">&quot;left:&quot;</span>+s[e].<span class=\"property\">x</span>+<span class=\"string\">&quot;px;top:&quot;</span>+s[e].<span class=\"property\">y</span>+<span class=\"string\">&quot;px;opacity:&quot;</span>+s[e].<span class=\"property\">alpha</span>+<span class=\"string\">&quot;;transform:scale(&quot;</span>+s[e].<span class=\"property\">scale</span>+<span class=\"string\">&quot;,&quot;</span>+s[e].<span class=\"property\">scale</span>+<span class=\"string\">&quot;) rotate(45deg);background:&quot;</span>+s[e].<span class=\"property\">color</span>+<span class=\"string\">&quot;;z-index:99999&quot;</span>);<span class=\"title function_\">requestAnimationFrame</span>(r)&#125;<span class=\"keyword\">function</span> <span class=\"title function_\">n</span>(<span class=\"params\"></span>)&#123;<span class=\"keyword\">var</span> t=<span class=\"string\">&quot;function&quot;</span>==<span class=\"keyword\">typeof</span> e.<span class=\"property\">onclick</span>&amp;&amp;e.<span class=\"property\">onclick</span>;e.<span class=\"property\">onclick</span>=<span class=\"keyword\">function</span>(<span class=\"params\">e</span>)&#123;t&amp;&amp;<span class=\"title function_\">t</span>(),<span class=\"title function_\">o</span>(e)&#125;&#125;<span class=\"keyword\">function</span> <span class=\"title function_\">o</span>(<span class=\"params\">e</span>)&#123;<span class=\"keyword\">var</span> a=t.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;div&quot;</span>);a.<span class=\"property\">className</span>=<span class=\"string\">&quot;heart&quot;</span>,s.<span class=\"title function_\">push</span>(&#123;<span class=\"attr\">el</span>:a,<span class=\"attr\">x</span>:e.<span class=\"property\">clientX</span>-<span class=\"number\">5</span>,<span class=\"attr\">y</span>:e.<span class=\"property\">clientY</span>-<span class=\"number\">5</span>,<span class=\"attr\">scale</span>:<span class=\"number\">1</span>,<span class=\"attr\">alpha</span>:<span class=\"number\">1</span>,<span class=\"attr\">color</span>:<span class=\"title function_\">c</span>()&#125;),t.<span class=\"property\">body</span>.<span class=\"title function_\">appendChild</span>(a)&#125;<span class=\"keyword\">function</span> <span class=\"title function_\">i</span>(<span class=\"params\">e</span>)&#123;<span class=\"keyword\">var</span> a=t.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;style&quot;</span>);a.<span class=\"property\">type</span>=<span class=\"string\">&quot;text/css&quot;</span>;<span class=\"keyword\">try</span>&#123;a.<span class=\"title function_\">appendChild</span>(t.<span class=\"title function_\">createTextNode</span>(e))&#125;<span class=\"keyword\">catch</span>(t)&#123;a.<span class=\"property\">styleSheet</span>.<span class=\"property\">cssText</span>=e&#125;t.<span class=\"title function_\">getElementsByTagName</span>(<span class=\"string\">&quot;head&quot;</span>)[<span class=\"number\">0</span>].<span class=\"title function_\">appendChild</span>(a)&#125;<span class=\"keyword\">function</span> <span class=\"title function_\">c</span>(<span class=\"params\"></span>)&#123;<span class=\"keyword\">return</span><span class=\"string\">&quot;rgb(&quot;</span>+~~(<span class=\"number\">255</span>*<span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>())+<span class=\"string\">&quot;,&quot;</span>+~~(<span class=\"number\">255</span>*<span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>())+<span class=\"string\">&quot;,&quot;</span>+~~(<span class=\"number\">255</span>*<span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>())+<span class=\"string\">&quot;)&quot;</span>&#125;<span class=\"keyword\">var</span> s=[];e.<span class=\"property\">requestAnimationFrame</span>=e.<span class=\"property\">requestAnimationFrame</span>||e.<span class=\"property\">webkitRequestAnimationFrame</span>||e.<span class=\"property\">mozRequestAnimationFrame</span>||e.<span class=\"property\">oRequestAnimationFrame</span>||e.<span class=\"property\">msRequestAnimationFrame</span>||<span class=\"keyword\">function</span>(<span class=\"params\">e</span>)&#123;<span class=\"built_in\">setTimeout</span>(e,<span class=\"number\">1e3</span>/<span class=\"number\">60</span>)&#125;,<span class=\"title function_\">i</span>(<span class=\"string\">&quot;.heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: &#x27;&#x27;;width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;&quot;</span>),<span class=\"title function_\">n</span>(),<span class=\"title function_\">r</span>()&#125;(<span class=\"variable language_\">window</span>,<span class=\"variable language_\">document</span>);</span><br></pre></td></tr></table></figure></li>\n<li>Open hexo <em>themes&#x2F;yilia&#x2F;layout&#x2F;_partial&#x2F;footer.ejs</em> and add the following code at the end<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--页面点击小红心--&gt;</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;/love.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"15-Add-copyright-statement\"><a href=\"#15-Add-copyright-statement\" class=\"headerlink\" title=\"15 Add copyright statement\"></a>15 Add copyright statement</h3><ul>\n<li>Configure yilia<br>Add code where marked<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div <span class=\"keyword\">class</span>=<span class=\"string\">&quot;article-entry&quot;</span> itemprop=<span class=\"string\">&quot;articleBody&quot;</span>&gt;</span><br><span class=\"line\">  &lt;% <span class=\"keyword\">if</span> (post.<span class=\"property\">excerpt</span> &amp;&amp; index)&#123; %&gt;</span><br><span class=\"line\">    &lt;%- post.<span class=\"property\">excerpt</span> %&gt;</span><br><span class=\"line\">    &lt;% <span class=\"keyword\">if</span> (theme.<span class=\"property\">excerpt_link</span>) &#123; %&gt;</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;article-more-a&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&lt;%- url_for(post.path) %&gt;#more&quot;</span>&gt;</span>&lt;%= theme.excerpt_link %&gt; &gt;&gt;<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span></span><br><span class=\"line\">    &lt;% &#125; %&gt;</span><br><span class=\"line\">  &lt;% &#125; <span class=\"keyword\">else</span> &#123; %&gt;</span><br><span class=\"line\">    &lt;%- post.<span class=\"property\">content</span> %&gt;</span><br><span class=\"line\">  &lt;% &#125; %&gt;</span><br><span class=\"line\">  &lt;-- 在此处添加代码--&gt;</span><br><span class=\"line\">  &lt;% if ((theme.reward_type === 2 || (theme.reward_type === 1 &amp;&amp; post.reward)) &amp;&amp; !index)&#123; %&gt;</span><br><span class=\"line\">  &lt;div class=&quot;page-reward&quot;&gt;</span><br><span class=\"line\">    &lt;a href=&quot;javascript:;&quot; class=&quot;page-reward-btn tooltip-top&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;tooltip tooltip-east&quot;&gt;</span><br></pre></td></tr></table></figure>\n添加的代码如下<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 增加版权声明 --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;%</span><br><span class=\"line\">  <span class=\"keyword\">var</span> sUrl = url.<span class=\"title function_\">replace</span>(<span class=\"regexp\">/index\\.html$/</span>, <span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\">  sUrl = <span class=\"regexp\">/^(http:|https:)\\/\\//</span>.<span class=\"title function_\">test</span>(sUrl) ? sUrl : <span class=\"string\">&#x27;https:&#x27;</span> + sUrl;</span><br><span class=\"line\">%&gt;</span><br><span class=\"line\">&lt;% <span class=\"keyword\">if</span> ((theme.<span class=\"property\">declare_type</span> === <span class=\"number\">2</span> || (theme.<span class=\"property\">declare_type</span> === <span class=\"number\">1</span> &amp;&amp; post.<span class=\"property\">declare</span>)) &amp;&amp; !index)&#123; %&gt;</span><br><span class=\"line\">  &lt;div class=&quot;declare&quot;&gt;</span><br><span class=\"line\">    &lt;strong&gt;本文作者：&lt;/strong&gt;</span><br><span class=\"line\">    &lt;% if(config.author != undefined)&#123; %&gt;</span><br><span class=\"line\">      &lt;%= config.author%&gt;</span><br><span class=\"line\">    &lt;% &#125;else&#123;%&gt;</span><br><span class=\"line\">      &lt;font color=&quot;red&quot;&gt;请在博客根目录“_config.yml”中填入正确的“author”&lt;/font&gt;</span><br><span class=\"line\">    &lt;%&#125;%&gt;</span><br><span class=\"line\">    &lt;br&gt;</span><br><span class=\"line\">    &lt;strong&gt;本文链接：&lt;/strong&gt;</span><br><span class=\"line\">    &lt;a rel=&quot;license&quot; href=&quot;&lt;%=sUrl%&gt;&quot;&gt;&lt;%=sUrl%&gt;&lt;/a&gt;</span><br><span class=\"line\">    &lt;br&gt;</span><br><span class=\"line\">    &lt;strong&gt;版权声明：&lt;/strong&gt;</span><br><span class=\"line\">    本作品采用</span><br><span class=\"line\">    &lt;a rel=&quot;license&quot; href=&quot;&lt;%= theme.licensee_url%&gt;&quot;&gt;&lt;%= theme.licensee_name%&gt;&lt;/a&gt;</span><br><span class=\"line\">    进行许可。转载请注明出处！</span><br><span class=\"line\">    &lt;% if(theme.licensee_img != undefined)&#123; %&gt;</span><br><span class=\"line\">      &lt;br&gt;</span><br><span class=\"line\">      &lt;a rel=&quot;license&quot; href=&quot;&lt;%= theme.licensee_url%&gt;&quot;&gt;&lt;img alt=&quot;知识共享许可协议&quot; style=&quot;border-width:0&quot; src=&quot;&lt;%= theme.licensee_img%&gt;&quot;/&gt;&lt;/a&gt;</span><br><span class=\"line\">    &lt;% &#125; %&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;% &#125; else &#123;%&gt;</span><br><span class=\"line\">  &lt;div class=&quot;declare&quot; hidden=&quot;hidden&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;% &#125; %&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!-- 增加版权声明结束 --&gt;</span><br></pre></td></tr></table></figure>\nCreate a new file <em>themes&#x2F;yilia&#x2F;source-src&#x2F;css&#x2F;declare.scss</em> and add the following CSS code<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.declare</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#eaeaea</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin-top</span>: <span class=\"number\">2em</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-left</span>: <span class=\"number\">3px</span> solid <span class=\"number\">#ff1700</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: .<span class=\"number\">5em</span> <span class=\"number\">1em</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\nOpen <em>themes&#x2F;yilia&#x2F;source-src&#x2F;css&#x2F;main.scss</em> and add the following code<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@import</span> <span class=\"string\">&quot;./declare&quot;</span>;</span><br></pre></td></tr></table></figure></li>\n<li>Configuration display<br>Open <em>themes&#x2F;yilia&#x2F;_config.yml</em> and add the following content in it<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#版权基础设定：0-关闭声明； 1-文章对应的md文件里有declare: true属性，才有版权声明； 2-所有文章均有版权声明</span></span><br><span class=\"line\"><span class=\"comment\">#当前应用的版权协议地址。</span></span><br><span class=\"line\"><span class=\"comment\">#版权协议的名称</span></span><br><span class=\"line\"><span class=\"comment\">#版权协议的Logo</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">declare_type:</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"attr\">licensee_url:</span> <span class=\"string\">https://creativecommons.org/licenses/by-nc-sa/4.0/</span></span><br><span class=\"line\"><span class=\"attr\">licensee_name:</span> <span class=\"string\">&#x27;知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议&#x27;</span></span><br><span class=\"line\"><span class=\"attr\">licensee_img:</span> <span class=\"string\">https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png</span></span><br></pre></td></tr></table></figure>\nThen set the attribute in the header of the <em>md</em> file of the article that needs copyright statement.<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">declare</span>:<span class=\"literal\">true</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"16-End-of-text-no-conflict-with-more\"><a href=\"#16-End-of-text-no-conflict-with-more\" class=\"headerlink\" title=\"16 End of text (no conflict with more)\"></a>16 End of text (no conflict with more)</h3><ul>\n<li>Open the <em>themes\\yilia\\layout_partial\\article.ejs</em> file, and add the code in the following code.<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;% <span class=\"keyword\">if</span> (!post.<span class=\"property\">noDate</span>)&#123; %&gt;</span><br><span class=\"line\">        &lt;%- <span class=\"title function_\">partial</span>(<span class=\"string\">&#x27;post/date&#x27;</span>, &#123;<span class=\"attr\">class_name</span>: <span class=\"string\">&#x27;archive-article-date&#x27;</span>, <span class=\"attr\">date_format</span>: <span class=\"literal\">null</span>&#125;) %&gt;</span><br><span class=\"line\">        &lt;% &#125; %&gt;</span><br><span class=\"line\">      &lt;/header&gt;</span><br><span class=\"line\">    &lt;% &#125; %&gt;</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;article-entry&quot;</span> <span class=\"attr\">itemprop</span>=<span class=\"string\">&quot;articleBody&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      &lt;% if (post.excerpt &amp;&amp; index)&#123; %&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">        &lt;%- post.excerpt %&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">        &lt;% if (theme.excerpt_link) &#123; %&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;article-more-a&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&lt;%- url_for(post.path) %&gt;#more&quot;</span>&gt;</span>&lt;%= theme.excerpt_link %&gt; &gt;&gt;<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        &lt;% &#125; %&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">      &lt;% &#125; else &#123; %&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">        &lt;%- post.content %&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">      &lt;% &#125; %&gt;</span></span><br></pre></td></tr></table></figure>\n添加的代码如下<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;% <span class=\"keyword\">if</span> ((theme.<span class=\"property\">essayending_type</span> === <span class=\"number\">2</span> || (theme.<span class=\"property\">essayending_type</span> === <span class=\"number\">1</span> &amp;&amp; post.<span class=\"property\">essayending</span>)) &amp;&amp; !index)&#123; %&gt;</span><br><span class=\"line\">       &lt;% <span class=\"keyword\">if</span>  (!index)&#123; %&gt;</span><br><span class=\"line\">         <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;essayending&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">           <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;text-align:center;color: #ccc;font-size:22px;&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            -------------本文结束<span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;fa fa-paw&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span>感谢您的阅读-------------</span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">             <span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">             <span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">           <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">         <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">       &lt;% &#125; <span class=\"keyword\">else</span> &#123;%&gt;</span><br><span class=\"line\">         <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;essayending&quot;</span> <span class=\"attr\">hidden</span>=<span class=\"string\">&quot;hidden&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">       &lt;% &#125; %&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">   &lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure></li>\n<li>Configuration<br>Open <em>theme\\yilia_config.yml</em> and add the following content in the appropriate position.<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#文章结束</span></span><br><span class=\"line\"><span class=\"attr\">essayending_type:</span> <span class=\"number\">2</span> <span class=\"comment\">#0关闭文章结束提示 2全开 1需要在文章开头加上 essayending: true</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>0表示关闭文章结束提示<br>2表示全开<br>1表示需要在文章开头加上 essayending: true 才会开启文章结束提示</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"17-Add-pet\"><a href=\"#17-Add-pet\" class=\"headerlink\" title=\"17 Add pet\"></a>17 Add pet</h3><ul>\n<li><p>Install plugin<br><code>npm install --save hexo-helper-live2d</code></p>\n</li>\n<li><p>Download model<br>Select the corresponding model to install, <a href=\"https://github.com/xiazeyu/live2d-widget-models\">project address</a><br><a href=\"https://huaji8.top/post/live2d-plugin-2.0/\">Effect display website</a>, here I choose the <em>live2d-widget-model-hijiki</em> model package.<br><code>npm install live2d-widget-model-hijiki</code></p>\n</li>\n<li><p>Configuration<br>Open the _config.yml file in the root directory of the blog, and add the following code at the end.</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">live2d:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">scriptFrom:</span> <span class=\"string\">local</span></span><br><span class=\"line\">  <span class=\"attr\">pluginRootPath:</span> <span class=\"string\">live2dw/</span></span><br><span class=\"line\">  <span class=\"attr\">pluginJsPath:</span> <span class=\"string\">lib/</span></span><br><span class=\"line\">  <span class=\"attr\">pluginModelPath:</span> <span class=\"string\">assets/</span></span><br><span class=\"line\">  <span class=\"attr\">tagMode:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">debug:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">model:</span></span><br><span class=\"line\">    <span class=\"attr\">use:</span> <span class=\"string\">live2d-widget-model-hijiki</span></span><br><span class=\"line\">  <span class=\"attr\">display:</span></span><br><span class=\"line\">    <span class=\"attr\">position:</span> <span class=\"string\">right</span></span><br><span class=\"line\">    <span class=\"attr\">width:</span> <span class=\"number\">150</span></span><br><span class=\"line\">    <span class=\"attr\">height:</span> <span class=\"number\">300</span></span><br><span class=\"line\">  <span class=\"attr\">mobile:</span></span><br><span class=\"line\">    <span class=\"attr\">show:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"18-Article-encryption\"><a href=\"#18-Article-encryption\" class=\"headerlink\" title=\"18 Article encryption\"></a>18 Article encryption</h3><p><a href=\"https://github.com/D0n9X1n/hexo-blog-encrypt\">hexo-blog-encrypt</a></p>"},{"title":"PAT刷题","date":"2022-03-05T11:32:10.000Z","declare":true,"toc":1,"_content":"[浙大PAT刷题](https://pintia.cn/problem-sets/994805260223102976/problems/type/7)\n### [1001 害死人不偿命的(3n+1)猜想 (15 分)](https://pintia.cn/problem-sets/994805260223102976/problems/994805325918486528)\n卡拉兹(Callatz)猜想：\n\n对任何一个正整数 n，如果它是偶数，那么把它砍掉一半；如果它是奇数，那么把 (3n+1) 砍掉一半。这样一直反复砍下去，最后一定在某一步得到 n=1。卡拉兹在 1950 年的世界数学家大会上公布了这个猜想，传说当时耶鲁大学师生齐动员，拼命想证明这个貌似很傻很天真的命题，结果闹得学生们无心学业，一心只证 (3n+1)，以至于有人说这是一个阴谋，卡拉兹是在蓄意延缓美国数学界教学与科研的进展……<!--more-->\n\n我们今天的题目不是证明卡拉兹猜想，而是对给定的任一不超过 1000 的正整数 n，简单地数一下，需要多少步（砍几下）才能得到 n=1？\n\n**输入格式**：\n每个测试输入包含 1 个测试用例，即给出正整数 n 的值。\n\n**输出格式：**\n输出从 n 计算到 1 需要的步数。\n\n**输入样例**：\n`3`\n\n**输出样例**：\n`5`\n\n**代码**\n```C\n#include<stdio.h>\n\nint main(){\n    int n,count = 0;\n    scanf(\"%d\",&n);\n    while(n!=1){\n        if(n%2 == 0){\n            n = n/2;\n        }\n        else{\n            n = (3*n+1)/2;\n        }\n        count++;\n    }\n    printf(\"%d\\n\",count);\n    return 0;\n}\n```\n\n### [1002 写出这个数 (20 分)](https://pintia.cn/problem-sets/994805260223102976/problems/994805324509200384)\n读入一个正整数 n，计算其各位数字之和，用汉语拼音写出和的每一位数字。\n\n**输入格式**：\n每个测试输入包含 1 个测试用例，即给出自然数 n 的值。这里保证 n 小于 10^100\n\n**输出格式**：\n在一行内输出 n 的各位数字之和的每一位，拼音数字间有 1 空格，但一行中最后一个拼音数字后没有空格。\n\n**输入样例**：\n`1234567890987654321123456789`\n\n**输出样例**：\n`yi san wu`\n\n**代码**\n```C\n#include<stdio.h>\n#include<string.h>\n\nint main(){\n    char n[108] = \"0\";\n    scanf(\"%s\",n);          //用字符串接收数字\n    int len;                 //用于计算字符串的长度\n    len = strlen(n);\n    int num = 0,temp;                 //用于计算各位之和\n    for(int i = 0;i < len;i++){\n        temp = (int)(n[i] - 48);        //强制类型转换\n        num = num + temp;\n    }\n    //printf(\"%d\\n\",num);\n    char str[10][5] =  {\"ling\", \"yi\", \"er\", \"san\", \"si\", \"wu\", \"liu\", \"qi\", \"ba\", \"jiu\"};   //定义字符串数组\n    //printf(\"%s\",str[1]);\n    if(num<10){                         //num绝对不可能大于900\n        printf(\"%s\",str[num]);\n    }\n    else if(num<100){\n        printf(\"%s %s\",str[num/10],str[num%10]);\n    }\n    else{\n        temp = num/100;\n        num = num - temp * 100;\n        printf(\"%s %s %s\",str[temp],str[num/10],str[num%10]);\n    } \n\n    return 0;\n}\n```\n\n### [1004 成绩排名 (20 分)](https://pintia.cn/problem-sets/994805260223102976/problems/994805321640296448)\n读入 n（>0）名学生的姓名、学号、成绩，分别输出成绩最高和成绩最低学生的姓名和学号。\n\n**输入格式**：\n每个测试输入包含 1 个测试用例，格式为\n\n>第 1 行：正整数 n\n>第 2 行：第 1 个学生的姓名 学号 成绩\n>第 3 行：第 2 个学生的姓名 学号 成绩\n>  ... ... ...\n>第 n+1 行：第 n 个学生的姓名 学号 成绩\n\n其中`姓名`和`学号`均为不超过 10 个字符的字符串，成绩为 0 到 100 之间的一个整数，这里保证在一组测试用例中没有两个学生的成绩是相同的。\n\n**输出格式**：\n对每个测试用例输出 2 行，第 1 行是成绩最高学生的姓名和学号，第 2 行是成绩最低学生的姓名和学号，字符串间有 1 空格。\n\n**输入样例**：\n```C++\n3\nJoe Math990112 89\nMike CS991301 100\nMary EE990830 95\n```\n\n**输出样例**：\n```C++\nMike CS991301\nJoe Math990112\n```\n\n\n**代码**\n```C++\n//用结构体来存储每位学生的信息，用一个结构体指针来指向一个结构体数组。\n//用find函数来找出结构体数组中成绩最低和最高的结构体\n\n#include <stdio.h>\n#include <stdlib.h> //要用到malloc函数\n#include <iostream>\nusing namespace std;\n\ntypedef struct stduent\n{\n    char name[11];//注意题意，这里要用10以上\n    char num[11];\n    int score;\n} stu;\n\nvoid find(int &min_i, int &max_j, stu *p, int len) //找出成绩最高和最低的学生\n{\n    for (int i = 0; i < len; i++)\n    {\n        if (p[i].score < p[min_i].score)\n        {\n            min_i = i;\n        }\n        if (p[i].score > p[max_j].score)\n        {\n            max_j = i;\n        }\n    }\n}\n\nint main()\n{\n    int n;\n    scanf(\"%d\", &n);\n    stu *p = (stu *)malloc(sizeof(stu) * n);\n    for (int i = 0; i < n; i++)\n    {\n        scanf(\"%s%s%d\", p[i].name, p[i].num, &(p[i].score));\n    }\n    int min_i = 0, max_j = 0;\n    find(min_i, max_j, p, n);\n    cout << p[max_j].name << ' ' << p[max_j].num << endl;\n    cout << p[min_i].name << ' ' << p[min_i].num << endl;\n    return 0;\n}\n```\n\n```C++\n下面是优化之后的代码\n#include <iostream>\nusing namespace std;\n\nstruct student\n{\n    string name, num;//不需要指定长度\n    int score;\n};\n\nint main()\n{\n    int n;\n    cin >> n;\n    student temp;\n    student max = {\"\", \"\", 0};   //最大值最起码要设为最小的\n    student min = {\"\", \"\", 100}; //最小值最起码要设为最大的\n    while (n--)\n    {\n        cin >> temp.name >> temp.num >> temp.score;\n        max = temp.score >= max.score ? temp : max;\n        min = temp.score <= min.score ? temp : min;\n    }\n\n    cout << max.name << ' ' << max.num << endl;\n    cout << min.name << ' ' << min.num << endl;\n    return 0;\n}\n```\n\n### [1005 继续(3n+1)猜想 (25 分)](https://pintia.cn/problem-sets/994805260223102976/problems/994805320306507776)\n\n卡拉兹(Callatz)猜想已经在[1001](https://pintia.cn/problem-sets/994805260223102976/problems/994805325918486528)中给出了描述。在这个题目里，情况稍微有些复杂。\n\n当我们验证卡拉兹猜想的时候，为了避免重复计算，可以记录下递推过程中遇到的每一个数。例如对 n=3 进行验证的时候，我们需要计算 3、5、8、4、2、1，则当我们对 n=5、8、4、2 进行验证的时候，就可以直接判定卡拉兹猜想的真伪，而不需要重复计算，因为这 4 个数已经在验证3的时候遇到过了，我们称 5、8、4、2 是被 3“覆盖”的数。我们称一个数列中的某个数 n 为“关键数”，如果 n 不能被数列中的其他数字所覆盖。\n\n现在给定一系列待验证的数字，我们只需要验证其中的几个关键数，就可以不必再重复验证余下的数字。你的任务就是找出这些关键数字，并按从大到小的顺序输出它们。\n\n**输入格式**：\n每个测试输入包含 1 个测试用例，第 1 行给出一个正整数 K (<100)，第 2 行给出 K 个互不相同的待验证的正整数 n (1<n≤100)的值，数字间用空格隔开。\n\n**输出格式**：\n每个测试用例的输出占一行，按从大到小的顺序输出关键数字。数字间用 1 个空格隔开，但一行中最后一个数字后没有空格。\n\n**输入样例**：\n\n```C++\n6\n3 5 6 7 8 11\n```\n\n**输出样例**：\n`7 6`\n\n**代码**\n基本思想:对每一个输入的数字i进行验证，把验证过的数字对应的b[i]标记为1，所有b[i]=-1的数字即为关键数字,所有b[i] = 0的数字代表本次测试未曾用到。最后对关键数字数字从大到小进行输出。\n\nb的数组长度必须要设定的很大，因为3n+1时候可能会出现数组越界的情况\n\n```C++\n#include <iostream>\nusing namespace std;\n\nint main()\n{\n    int b[10000] = {0}; //用桶排序的思想存储标记,为防止数组越界，这里设定数组长度为10000\n    int K;\n    cin >> K;\n    int *a = (int *)malloc(sizeof(int) * K); //定义一个长度为K的数组，用于暂时存储输入的数据\n    for (int i = 0; i < K; i++)\n    {\n        cin >> a[i];\n    }\n\n    for (int i = 0; i < K; i++) //把输入的数据的标志位设为-1，-1代表未被覆盖，1代表被覆盖\n    {\n        b[a[i]] = -1;\n    }\n\n    for (int i = 0; i < K; i++)//对每一个输入的数字i进行验证\n    {\n        if (b[a[i]] == 1)\n            continue;\n        while (a[i] != 1)\n        {\n            if (a[i] % 2 == 0)\n            {\n                a[i] = a[i] / 2;\n                b[a[i]] = 1;\n            }\n            else\n            {\n                a[i] = (3 * a[i] + 1) / 2;\n                b[a[i]] = 1;\n            }\n        }\n    }\n    free(a);\n    int flag = 1;\n    for (int i = 100; i > 0; i--)\n    { //保证每个测试用例的输出占一行，按从大到小的顺序输出关键数字。数字间用 1 个空格隔开，但一行中最后一个数字后没有空格。\n        if (b[i] == -1 && flag == 1)\n        {\n            cout << i;\n            flag++;\n            continue;\n        }\n        if (b[i] == -1 && flag > 1)\n        {\n            cout << ' ' << i;\n        }\n    }\n    return 0;\n}\n```\n这里给出[柳婼 の blog姐姐](https://www.liuchuo.net/archives/452)的解法，其中[向量(vector)](https://doc.bccnsoft.com/docs/cppreference/cppvector.html)一个封装了动态大小数组的顺序容器（Sequence Container）。跟任意其它类型容器一样，它能够存放各种类型的对象。可以简单的认为，向量是一个能够存放任意类型的动态数组。\n\n[sort](http://www.cplusplus.com/reference/algorithm/sort/)是库algorithm中的一个函数\n\n**本题重点就是一方面是想到桶排序的思想，另一方面是注意到b的数组长度需要很大。**\n\n### [1006 换个格式输出整数 (15 分)](https://pintia.cn/problem-sets/994805260223102976/problems/994805318855278592)\n让我们用字母 B 来表示“百”、字母 S 表示“十”，用 12...n 来表示不为零的个位数字 n（<10），换个格式来输出任一个不超过 3 位的正整数。例如 234 应该被输出为 BBSSS1234，因为它有 2 个“百”、3 个“十”、以及个位的 4。\n\n**输入格式：**\n每个测试输入包含 1 个测试用例，给出正整数 n（<1000）。\n\n**输出格式：**\n每个测试用例的输出占一行，用规定的格式输出 n。\n\n**输入样例 1：**\n`234`\n\n**输出样例 1：**\n`BBSSS1234`\n\n**输入样例 2：**\n`23`\n\n**输出样例 2：**\n`SS123`\n\n**代码**\n过于简单，不加详述\n```C++\n#include <iostream>\nusing namespace std;\n\nint main()\n{\n    int num;\n    cin >> num;\n    for (int i = 0; i < num / 100; i++)\n    {\n        cout << 'B';\n    }\n    for (int i = 0; i < (num - num / 100 * 100) / 10; i++)\n    {\n        cout << 'S';\n    }\n    for (int i = 1; i <= (num % 10); i++)\n    {\n        cout << i;\n    }\n    return 0;\n}\n```\n\n### [1007 素数对猜想 (20 分)](https://pintia.cn/problem-sets/994805260223102976/problems/994805317546655744)\n让我们定义$d_n = p_{n+1} - p_n$，其中$p_i$是第i个素数。显然有$d_1 = 1$，且对于n>1有$d_n$是偶数。“素数对猜想”认为“存在无穷多对相邻且差为2的素数”。现给定任意正整数`N`($<10^5$)，请计算不超过`N`的满足猜想的素数对的个数。\n\n**输入格式:**\n输入在一行给出正整数`N`。\n\n**输出格式:**\n在一行中输出不超过`N`的满足猜想的素数对的个数。\n\n**输入样例:**\n`20`\n**输出样例:**\n`4`\n\n**代码**\n```C++\n#include <iostream>\nusing namespace std;\n\nbool is_prime(int n)//判断是否是素数\n{\n    for (int i = 2; i * i <= n; i++)//注意i的条件\n    {\n        if (n % i == 0)\n        {\n            return false;\n        }\n    }\n    return true;\n}\n\nint main()\n{\n    int N;\n    cin >> N;\n    if (N < 5)//如果N小于5，没有满足条件的素数对\n    {\n        cout << 0;\n        return 0;\n    }\n    int count = 0;\n    for (int i = 5; i <= N; i++)\n    {\n        if (is_prime(i) && is_prime(i - 2))//判断存在多少个满足条件的素数对\n        {\n            count++;\n        }\n    }\n    cout << count;\n    return 0;\n}\n```\n\n### [1008 数组元素循环右移问题 (20 分)](https://pintia.cn/problem-sets/994805260223102976/problems/994805316250615808)\n一个数组A中存有N（>0）个整数，在不允许使用另外数组的前提下，将每个整数循环向右移M（≥0）个位置，即将A中的数据由($A_0 A_1 ⋯ A_{N−1}$)变换为($A_{N−M} ⋯ A_{N−1} A_0 A_1 ⋯ A_{N−M−1}$)（最后M个数循环移至最前面的M个位置）。如果需要考虑程序移动数据的次数尽量少，要如何设计移动的方法？\n\n**输入格式:**\n每个输入包含一个测试用例，第1行输入N（1≤N≤100）和M（≥0）；第2行输入N个整数，之间用空格分隔。\n\n**输出格式:**\n在一行中输出循环右移M位以后的整数序列，之间用空格分隔，序列结尾不能有多余空格。\n\n**输入样例:**\n```C++\n6 2\n1 2 3 4 5 6\n```\n\n**输出样例:**\n`5 6 1 2 3 4`\n\n**代码**\n```C++\n//分析:数组的循环右移，可以用逆序数组的组合来实现，因为数组长度最大只有100，所有可以直接使用顺序表进行操作\n//只要保证如果右移位数的大小超出了数组的长度，不能出现数组越界的情况\n\n#include <iostream>\nusing namespace std;\n\n#define MaxSize 120 //定义线性表的最大长度\ntypedef int ElemType;\n\ntypedef struct //用顺序表定义数组\n{\n    ElemType data[MaxSize];\n    int length;\n} SqList;\n\nvoid reverse(SqList &L, int left, int right)\n{ //对线性表L的left到right这一部分进行逆序\n    for (ElemType temp; left < right; left++, right--)\n    {\n        temp = L.data[left];\n        L.data[left] = L.data[right];\n        L.data[right] = temp;\n    }\n}\n\nvoid right_move(SqList &L, int M) //将线性表L循环右移M位\n{\n    reverse(L, 0, L.length - M - 1);\n    reverse(L, L.length - M, L.length - 1);\n    reverse(L, 0, L.length - 1);\n}\n\nint main()\n{\n    SqList L;\n    cin >> L.length; //确定数组长度\n    int M;           //将数组循环右移M位\n    cin >> M;\n    for (int i = 0; i < L.length; i++) //输入数组数据\n    {\n        cin >> L.data[i];\n    }\n    // if(L.length == 1){\n    //     cout<<L.data[0];\n    //     return 0;\n    // }\n    right_move(L, M % L.length); //如果右移位数的大小超出了数组的长度，要保证不出现数组越界的情况\n    int flag = 0;\n    for (int i = 0; i < L.length; i++) //保证在一行中输出循环右移M位以后的整数序列，之间用空格分隔，序列结尾不能有多余空格。\n    {\n        if (flag)\n        {\n            cout << ' ' << L.data[i];\n        }\n        else\n        {\n            cout << L.data[i];\n            flag++;\n        }\n    }\n    return 0;\n}\n```\n\n### [1009 说反话 (20 分)](https://pintia.cn/problem-sets/994805260223102976/problems/994805314941992960)\n给定一句英语，要求你编写程序，将句中所有单词的顺序颠倒输出。\n\n**输入格式：**\n测试输入包含一个测试用例，在一行内给出总长度不超过 80 的字符串。字符串由若干单词和若干空格组成，其中单词是由英文字母（大小写有区分）组成的字符串，单词之间用 1 个空格分开，输入保证句子末尾没有多余的空格。\n\n**输出格式：**\n每个测试用例的输出占一行，输出倒序后的句子。\n\n**输入样例：**\n`Hello World Here I Come`\n\n**输出样例：**\n`Come I Here World Hello`\n\n**代码**\n```C++\n//分析，定义一个字符数组用于存储字符串，用游标i指向数组的最后一个字符，依次向前遍历，当遇到空格或者起点时，将刚才遍历的字符从前向后///用游标j取出。\n//需要注意的是，PAT的OJ系统需要用fgets,而不能用gets\n\n#include <iostream>\nusing namespace std;\n#include <string.h>\n\nint main()\n{\n    char a[100];\n    // cin >> a; //这里用cin或者scanf会出现无法读取' '之后的内容\n    fgets(a, 100, stdin);//如果用gets()，OJ会出现编译错误,stdin代表读取输入缓冲区的值\n    int len, i;\n    len = strlen(a) - 1;//fgets会接收回车，所以长度要长1\n    for (i = len - 1; i > 0; i--)\n    {\n        if (a[i] == ' ')\n        {\n            for (int j = i + 1; a[j] != ' ' && a[j] != '\\n'; j++)\n            {\n                cout << a[j];\n            }\n            cout << ' ';\n        }\n    }\n    if (i == 0)\n        for (; a[i] != ' ' && a[i] != '\\n'; i++)\n        {\n            cout << a[i];\n        }\n    return 0;\n}\n```\n这里给出[柳婼 の blog姐姐](https://www.liuchuo.net/archives/524)的解法，用到了[栈](https://doc.bccnsoft.com/docs/cppreference/cppstack.html)，使问题简化,但用的cin，**不理解为什么可以通过。**\n**这里对于这个问题做出解答。**\n1. `cin`是没有返回值，问题在于`>>`输入操作符，应该考虑的是它返回了什么\n2. “`>>`”操作重载函数`istream& operator>>(istream&, T &);`的返回值，其中第二个参数由`cin>>`后续参数类型决定。其返回值类型为`istream&`类型，大多数情况下其返回值为`cin`本身（非0值），只有当遇到EOF输入时，返回值为0。所以会有这种`cin`连续读取的方法。当输入所有数据后，通过输入`EOF`的方法，可以退出`while(cin>>a)`这样的循环。\n3. 输入`EOF`的方法，windows下输入`ctrl+z`, Linux下输入`ctrl+d`。\n4. `cin`是不接收空格的，空格作为其分界符。当`cin`读取到空格时，`cin`会从缓冲区读出，但却不会被`cin`接收到字符串当中去。\n\n### [1010 一元多项式求导 (25 分)](https://pintia.cn/problem-sets/994805260223102976/problems/994805313708867584)\n设计函数求一元多项式的导数。(注：$x_n$(n为整数)的一阶导数为$nx_{n−1}$。)\n\n**输入格式:**\n以指数递降方式输入多项式**非零项系数**和指数（绝对值均为不超过 1000 的整数）。数字间以空格分隔。\n\n**输出格式:**\n以与输入相同的格式输出导数多项式非零项的系数和指数。数字间以空格分隔，但结尾不能有多余空格。注意“零多项式”的指数和系数都是 0，但是表示为 `0 0`。\n\n**输入样例:**\n`3 4 -5 2 6 1 -2 0`\n\n**输出样例:**\n`12 3 -10 1 6 0`\n\n**代码**\n```C++\n//此题比较简单，只需注意当输入是常数多项式的情况即可，还要注意给出的是所有非零项系数\n#include <iostream>\nusing namespace std;\n#define MaxSize 1000\n\ntypedef struct\n{\n    int data[MaxSize];\n    int length = 0;\n} SqList;\n\nint main()\n{\n    SqList L;\n    while (cin >> L.data[L.length]) //将输入的数据存入顺序表中\n    {\n        L.length++;\n    }\n    if (L.data[1] == 0) //如果输入是常数多项式\n    {\n        cout << \"0 0\";\n        return 0;\n    }\n    int flag = 0;\n    for (int i = 0; i < L.length - 1; i = i + 2)\n    {\n        if (L.data[i] != 0 && L.data[i + 1] != 0)\n        {\n            if (flag != 0)\n            {\n                cout << ' ' << L.data[i] * L.data[i + 1] << ' ' << L.data[i + 1] - 1;\n            }\n            else\n            {\n                cout << L.data[i] * L.data[i + 1] << ' ' << L.data[i + 1] - 1;\n                flag++;\n            }\n        }\n    }\n    return 0;\n}\n```\n\n下面给出**[柳婼 の blog姐姐](https://www.liuchuo.net/archives/526)**的解法，不需要数组存储，节省了空间。\n```C++\n#include <iostream>\nusing namespace std;\n\nint main()\n{\n    int a, b, flag = 0;//flag用来判断是否已经有过输出\n    while (cin >> a >> b)\n    {\n        if (b != 0)\n        {//当b!=0时，因为给出的是所有非零项系数，所以必定会有输出，先判断flag是否为1，如果为1表示已经有过输出，那么在前面要先输出一个空格\n            if (flag != 0)\n            {\n                cout << ' ';\n            }\n            cout << a * b << ' ' << b - 1;//输出 a * b 和 b – 1，然后将flag标记为1表示已经有过输出\n            flag = 1;\n        }\n    }\n    if (flag == 0)//当没有输出并且b==0的时候，输出“0 0”\n    {\n        cout << \"0 0\";\n    }\n    return 0;\n}\n```\n\n### [1011 A+B 和 C (15 分)](https://pintia.cn/problem-sets/994805260223102976/problems/994805312417021952)\n给定区间$[{−2}^{31},2^{31}]$内的3个整数$A、B$和$C$，请判断$A+B$是否大于$C$。\n\n**输入格式：**\n输入第 1 行给出正整数 T (≤10)，是测试用例的个数。随后给出 T 组测试用例，每组占一行，顺序给出 A、B 和 C。整数间以空格分隔。\n\n**输出格式：**\n对每组测试用例，在一行中输出 Case #X: true 如果 A+B>C，否则输出 Case #X: false，其中 X 是测试用例的编号（从 1 开始）。\n\n**输入样例：**\n```C++\n4\n1 2 3\n2 3 4\n2147483647 0 2147483646\n0 -2147483648 -2147483647\n```\n\n**输出样例：**\n```C++\nCase #1: false\nCase #2: true\nCase #3: true\nCase #4: false\n```\n\n**代码**\n```C++\n//分析:可以用队列来暂存需要用到的数字，需要注意的是，要用long int\n#include <iostream>\n#include <queue>\nusing namespace std;\n\nint main()\n{\n    queue<long int> q; //定义一个队列\n    long int T, a, b, c;\n    cin >> T; //输入测试用例的个数\n    while (cin >> a >> b >> c)\n    {\n        q.push(a);\n        q.push(b);\n        q.push(c);\n        // i++;\n        // if (i == T)//这里可以用来代替循环终止条件\n        // {\n        //     break;\n        // }\n    }\n    int i = 1; // i代替X,用作测试用例的编号（从 1 开始）\n    while (!q.empty())\n    {\n        a = q.front();\n        q.pop();\n        b = q.front();\n        q.pop();\n        c = q.front();\n        q.pop();\n        if (!q.empty()) //如果不是最后一个输出，则输出换行，否则不输出\n            cout << \"Case #\" << i << ((a + b) > c ? \": true\" : \": false\") << endl;\n        else\n            cout << \"Case #\" << i << ((a + b) > c ? \": true\" : \": false\");\n        i++;\n    }\n    return 0;\n}\n```\n\n下面给出[柳婼 の blog姐姐](https://www.liuchuo.net/archives/822)的解法，和我一开始所想一致，但是担心控制台误判，未曾采用。\n\n### [1012 数字分类 (20 分)](https://pintia.cn/problem-sets/994805260223102976/problems/994805311146147840)\n给定一系列正整数，请按要求对数字进行分类，并输出以下 5 个数字：\n - $A_1$ = 能被 5 整除的数字中所有偶数的和；\n - $A_2$ = 将被 5 除后余 1 的数字按给出顺序进行交错求和，即计算 $n_1−n_2+n_3−n_4⋯$；\n - $A_3$ = 被 5 除后余 2 的数字的个数；\n - $A_4$ = 被 5 除后余 3 的数字的平均数，精确到小数点后 1 位；\n - $A_5$ = 被 5 除后余 4 的数字中最大数字。\n\n**输入格式：**\n每个输入包含 1 个测试用例。每个测试用例先给出一个不超过 1000 的正整数 N，随后给出 N 个不超过 1000 的待分类的正整数。数字间以空格分隔。\n\n**输出格式：**\n对给定的 $N$ 个正整数，按题目要求计算 $A_1$~$A_5$并在一行中顺序输出。数字间以空格分隔，但行末不得有多余空格。\n若分类之后某一类不存在数字，则在相应位置输出 `N`。\n\n**输入样例 1：**\n`13 1 2 3 4 5 6 7 8 9 10 20 16 18`\n\n**输出样例 1：**\n`30 11 2 9.7 9`\n\n**输入样例 2：**\n`8 1 2 4 5 6 7 9 16`\n\n**输出样例 2：**\n`N 11 2 N 9`\n\n**代码**\n```C++\n#include <iostream>\n#include <stdio.h>\nusing namespace std;\nint main()\n{\n    int N;\n    cin >> N; //正整数的个数\n    int temp, count = 0, num = 0;\n    int k = 0;\n    int a[5] = {0, 0, 0, 0, 0}; //用来存储题意上的A1~A5\n    while (cin >> temp)\n    {\n        if (temp % 10 == 0)\n        {\n            a[0] += temp;\n        }\n        else if (temp % 5 == 1)\n        { //用k来代替(-1)^k\n            if (k == 0)\n            {\n                a[1] += temp;\n                k = 1;\n                num++;\n            }\n            else\n            {\n                a[1] -= temp;\n                k = 0;\n            }\n        }\n        else if (temp % 5 == 2)\n        {\n            a[2]++;\n        }\n        else if (temp % 5 == 3)\n        {\n            a[3] += temp;\n            count++;\n        }\n        else if (temp % 5 == 4)\n        {\n            a[4] = (temp >= a[4] ? temp : a[4]);\n        }\n    }\n    if (a[0])\n    {\n        cout << a[0] << ' ';\n    }\n    else\n        cout << 'N' << ' ';\n    if (num)\n    {\n        cout << a[1] << ' ';\n    }\n    else\n        cout << 'N' << ' ';\n    if (a[2])\n    {\n        cout << a[2] << ' ';\n    }\n    else\n        cout << 'N' << ' ';\n    if (a[3])\n    {\n        printf(\"%.1f \", (float)a[3] / count);\n    }\n    else\n        cout << 'N' << ' ';\n    if (a[4])\n    {\n        cout << a[4];\n    }\n    else\n        cout << 'N';\n\n    return 0;\n}\n```\n\n下面给出[柳婼 の blog姐姐](https://www.liuchuo.net/archives/528)的解法，只是她用到了类似数组的[C++ Vectors](https://doc.bccnsoft.com/docs/cppreference/cppvector.html)，占用了更大的空间。\n\n### [1013 数素数 (20 分)](https://pintia.cn/problem-sets/994805260223102976/problems/994805309963354112)\n令 $P_i$表示第 i 个素数。现任给两个正整数 $M≤N≤10^4$，请输出 $P_M$到 $P_N$的所有素数。\n\n**输入格式：**\n输入在一行中给出 $M$ 和 $N$，其间以空格分隔。\n\n**输出格式：**\n输出从 $P_M$到 $P_N$的所有素数，每 10 个数字占 1 行，其间以空格分隔，但行末不得有多余空格。\n\n**输入样例：**\n`5 27`\n\n**输出样例：**\n```C++\n11 13 17 19 23 29 31 37 41 43\n47 53 59 61 67 71 73 79 83 89\n97 101 103\n```\n\n**代码**\n```C++\n#include <iostream>\nusing namespace std;\n\nbool is_prime(int x)//判断x是否是素数\n{\n    for (int i = 2; i * i <= x; i++)\n    {\n        if (x % i == 0)\n        {\n            return false;\n        }\n    }\n    return true;\n}\n\nint main()\n{\n    int m, n, k = 0;//k用来保证空格和十个之后换行\n    int count = 0;//count用于记录当前i是第几个素数\n    cin >> m >> n;//m用来指出第m个素数，n同理\n    for (int i = 1; count <= n; i++)\n    {\n        if (is_prime(i) && count < m)\n        {\n            count++;\n        }\n        else if (is_prime(i) && count >= m)\n        {\n            if (k % 10 == 0)\n            {\n                cout << i;\n            }\n            else\n            {\n                cout << ' ' << i;\n            }\n            count++;\n            k++;\n            if (k % 10 == 0)\n            {\n                cout << endl;\n            }\n        }\n    }\n    return 0;\n}\n```\n\n下面给出[柳婼 の blog姐姐](https://www.liuchuo.net/archives/530)的解法，只是她用到了类似数组的[C++ Vectors](https://doc.bccnsoft.com/docs/cppreference/cppvector.html)，占用了更大的空间\n\n### [1014 福尔摩斯的约会 (20 分)](https://pintia.cn/problem-sets/994805260223102976/problems/994805308755394560)\n大侦探福尔摩斯接到一张奇怪的字条：\n\n```C\n我们约会吧！ \n3485djDkxh4hhGE \n2984akDfkkkkggEdsb \ns&hgsfdk \nd&Hyscvnm\n```\n\n大侦探很快就明白了，字条上奇怪的乱码实际上就是约会的时间`星期四 14:04`，因为前面两字符串中第 1 对相同的大写英文字母（大小写有区分）是第 4 个字母 `D`，代表星期四；第 2 对相同的字符是 `E` ，那是第 5 个英文字母，代表一天里的第 14 个钟头（于是一天的 0 点到 23 点由数字 0 到 9、以及大写字母 `A` 到 `N` 表示）；后面两字符串第 1 对相同的英文字母 `s` 出现在第 4 个位置（从 0 开始计数）上，代表第 4 分钟。现给定两对字符串，请帮助福尔摩斯解码得到约会的时间。\n\n**输入格式：**\n输入在 4 行中分别给出 4 个非空、不包含空格、且长度不超过 60 的字符串。\n\n**输出格式：**\n在一行中输出约会的时间，格式为 `DAY HH:MM`，其中 `DAY` 是某星期的 3 字符缩写，即 `MON` 表示星期一，`TUE` 表示星期二，`WED` 表示星期三，`THU` 表示星期四，`FRI` 表示星期五，`SAT` 表示星期六，`SUN` 表示星期日。题目输入保证每个测试存在唯一解。\n\n**输入样例：**\n```C\n3485djDkxh4hhGE \n2984akDfkkkkggEdsb \ns&hgsfdk \nd&Hyscvnm\n```\n\n**输出样例：**\n`THU 14:04`\n\n**代码**\n```C++\n\n```","source":"_posts/PAT刷题.md","raw":"---\ntitle: PAT刷题\ndate: 2022-03-05 11:32:10\ntags:\n    - C/C++\n    - 考研\ndeclare: true\ntoc: 1\n---\n[浙大PAT刷题](https://pintia.cn/problem-sets/994805260223102976/problems/type/7)\n### [1001 害死人不偿命的(3n+1)猜想 (15 分)](https://pintia.cn/problem-sets/994805260223102976/problems/994805325918486528)\n卡拉兹(Callatz)猜想：\n\n对任何一个正整数 n，如果它是偶数，那么把它砍掉一半；如果它是奇数，那么把 (3n+1) 砍掉一半。这样一直反复砍下去，最后一定在某一步得到 n=1。卡拉兹在 1950 年的世界数学家大会上公布了这个猜想，传说当时耶鲁大学师生齐动员，拼命想证明这个貌似很傻很天真的命题，结果闹得学生们无心学业，一心只证 (3n+1)，以至于有人说这是一个阴谋，卡拉兹是在蓄意延缓美国数学界教学与科研的进展……<!--more-->\n\n我们今天的题目不是证明卡拉兹猜想，而是对给定的任一不超过 1000 的正整数 n，简单地数一下，需要多少步（砍几下）才能得到 n=1？\n\n**输入格式**：\n每个测试输入包含 1 个测试用例，即给出正整数 n 的值。\n\n**输出格式：**\n输出从 n 计算到 1 需要的步数。\n\n**输入样例**：\n`3`\n\n**输出样例**：\n`5`\n\n**代码**\n```C\n#include<stdio.h>\n\nint main(){\n    int n,count = 0;\n    scanf(\"%d\",&n);\n    while(n!=1){\n        if(n%2 == 0){\n            n = n/2;\n        }\n        else{\n            n = (3*n+1)/2;\n        }\n        count++;\n    }\n    printf(\"%d\\n\",count);\n    return 0;\n}\n```\n\n### [1002 写出这个数 (20 分)](https://pintia.cn/problem-sets/994805260223102976/problems/994805324509200384)\n读入一个正整数 n，计算其各位数字之和，用汉语拼音写出和的每一位数字。\n\n**输入格式**：\n每个测试输入包含 1 个测试用例，即给出自然数 n 的值。这里保证 n 小于 10^100\n\n**输出格式**：\n在一行内输出 n 的各位数字之和的每一位，拼音数字间有 1 空格，但一行中最后一个拼音数字后没有空格。\n\n**输入样例**：\n`1234567890987654321123456789`\n\n**输出样例**：\n`yi san wu`\n\n**代码**\n```C\n#include<stdio.h>\n#include<string.h>\n\nint main(){\n    char n[108] = \"0\";\n    scanf(\"%s\",n);          //用字符串接收数字\n    int len;                 //用于计算字符串的长度\n    len = strlen(n);\n    int num = 0,temp;                 //用于计算各位之和\n    for(int i = 0;i < len;i++){\n        temp = (int)(n[i] - 48);        //强制类型转换\n        num = num + temp;\n    }\n    //printf(\"%d\\n\",num);\n    char str[10][5] =  {\"ling\", \"yi\", \"er\", \"san\", \"si\", \"wu\", \"liu\", \"qi\", \"ba\", \"jiu\"};   //定义字符串数组\n    //printf(\"%s\",str[1]);\n    if(num<10){                         //num绝对不可能大于900\n        printf(\"%s\",str[num]);\n    }\n    else if(num<100){\n        printf(\"%s %s\",str[num/10],str[num%10]);\n    }\n    else{\n        temp = num/100;\n        num = num - temp * 100;\n        printf(\"%s %s %s\",str[temp],str[num/10],str[num%10]);\n    } \n\n    return 0;\n}\n```\n\n### [1004 成绩排名 (20 分)](https://pintia.cn/problem-sets/994805260223102976/problems/994805321640296448)\n读入 n（>0）名学生的姓名、学号、成绩，分别输出成绩最高和成绩最低学生的姓名和学号。\n\n**输入格式**：\n每个测试输入包含 1 个测试用例，格式为\n\n>第 1 行：正整数 n\n>第 2 行：第 1 个学生的姓名 学号 成绩\n>第 3 行：第 2 个学生的姓名 学号 成绩\n>  ... ... ...\n>第 n+1 行：第 n 个学生的姓名 学号 成绩\n\n其中`姓名`和`学号`均为不超过 10 个字符的字符串，成绩为 0 到 100 之间的一个整数，这里保证在一组测试用例中没有两个学生的成绩是相同的。\n\n**输出格式**：\n对每个测试用例输出 2 行，第 1 行是成绩最高学生的姓名和学号，第 2 行是成绩最低学生的姓名和学号，字符串间有 1 空格。\n\n**输入样例**：\n```C++\n3\nJoe Math990112 89\nMike CS991301 100\nMary EE990830 95\n```\n\n**输出样例**：\n```C++\nMike CS991301\nJoe Math990112\n```\n\n\n**代码**\n```C++\n//用结构体来存储每位学生的信息，用一个结构体指针来指向一个结构体数组。\n//用find函数来找出结构体数组中成绩最低和最高的结构体\n\n#include <stdio.h>\n#include <stdlib.h> //要用到malloc函数\n#include <iostream>\nusing namespace std;\n\ntypedef struct stduent\n{\n    char name[11];//注意题意，这里要用10以上\n    char num[11];\n    int score;\n} stu;\n\nvoid find(int &min_i, int &max_j, stu *p, int len) //找出成绩最高和最低的学生\n{\n    for (int i = 0; i < len; i++)\n    {\n        if (p[i].score < p[min_i].score)\n        {\n            min_i = i;\n        }\n        if (p[i].score > p[max_j].score)\n        {\n            max_j = i;\n        }\n    }\n}\n\nint main()\n{\n    int n;\n    scanf(\"%d\", &n);\n    stu *p = (stu *)malloc(sizeof(stu) * n);\n    for (int i = 0; i < n; i++)\n    {\n        scanf(\"%s%s%d\", p[i].name, p[i].num, &(p[i].score));\n    }\n    int min_i = 0, max_j = 0;\n    find(min_i, max_j, p, n);\n    cout << p[max_j].name << ' ' << p[max_j].num << endl;\n    cout << p[min_i].name << ' ' << p[min_i].num << endl;\n    return 0;\n}\n```\n\n```C++\n下面是优化之后的代码\n#include <iostream>\nusing namespace std;\n\nstruct student\n{\n    string name, num;//不需要指定长度\n    int score;\n};\n\nint main()\n{\n    int n;\n    cin >> n;\n    student temp;\n    student max = {\"\", \"\", 0};   //最大值最起码要设为最小的\n    student min = {\"\", \"\", 100}; //最小值最起码要设为最大的\n    while (n--)\n    {\n        cin >> temp.name >> temp.num >> temp.score;\n        max = temp.score >= max.score ? temp : max;\n        min = temp.score <= min.score ? temp : min;\n    }\n\n    cout << max.name << ' ' << max.num << endl;\n    cout << min.name << ' ' << min.num << endl;\n    return 0;\n}\n```\n\n### [1005 继续(3n+1)猜想 (25 分)](https://pintia.cn/problem-sets/994805260223102976/problems/994805320306507776)\n\n卡拉兹(Callatz)猜想已经在[1001](https://pintia.cn/problem-sets/994805260223102976/problems/994805325918486528)中给出了描述。在这个题目里，情况稍微有些复杂。\n\n当我们验证卡拉兹猜想的时候，为了避免重复计算，可以记录下递推过程中遇到的每一个数。例如对 n=3 进行验证的时候，我们需要计算 3、5、8、4、2、1，则当我们对 n=5、8、4、2 进行验证的时候，就可以直接判定卡拉兹猜想的真伪，而不需要重复计算，因为这 4 个数已经在验证3的时候遇到过了，我们称 5、8、4、2 是被 3“覆盖”的数。我们称一个数列中的某个数 n 为“关键数”，如果 n 不能被数列中的其他数字所覆盖。\n\n现在给定一系列待验证的数字，我们只需要验证其中的几个关键数，就可以不必再重复验证余下的数字。你的任务就是找出这些关键数字，并按从大到小的顺序输出它们。\n\n**输入格式**：\n每个测试输入包含 1 个测试用例，第 1 行给出一个正整数 K (<100)，第 2 行给出 K 个互不相同的待验证的正整数 n (1<n≤100)的值，数字间用空格隔开。\n\n**输出格式**：\n每个测试用例的输出占一行，按从大到小的顺序输出关键数字。数字间用 1 个空格隔开，但一行中最后一个数字后没有空格。\n\n**输入样例**：\n\n```C++\n6\n3 5 6 7 8 11\n```\n\n**输出样例**：\n`7 6`\n\n**代码**\n基本思想:对每一个输入的数字i进行验证，把验证过的数字对应的b[i]标记为1，所有b[i]=-1的数字即为关键数字,所有b[i] = 0的数字代表本次测试未曾用到。最后对关键数字数字从大到小进行输出。\n\nb的数组长度必须要设定的很大，因为3n+1时候可能会出现数组越界的情况\n\n```C++\n#include <iostream>\nusing namespace std;\n\nint main()\n{\n    int b[10000] = {0}; //用桶排序的思想存储标记,为防止数组越界，这里设定数组长度为10000\n    int K;\n    cin >> K;\n    int *a = (int *)malloc(sizeof(int) * K); //定义一个长度为K的数组，用于暂时存储输入的数据\n    for (int i = 0; i < K; i++)\n    {\n        cin >> a[i];\n    }\n\n    for (int i = 0; i < K; i++) //把输入的数据的标志位设为-1，-1代表未被覆盖，1代表被覆盖\n    {\n        b[a[i]] = -1;\n    }\n\n    for (int i = 0; i < K; i++)//对每一个输入的数字i进行验证\n    {\n        if (b[a[i]] == 1)\n            continue;\n        while (a[i] != 1)\n        {\n            if (a[i] % 2 == 0)\n            {\n                a[i] = a[i] / 2;\n                b[a[i]] = 1;\n            }\n            else\n            {\n                a[i] = (3 * a[i] + 1) / 2;\n                b[a[i]] = 1;\n            }\n        }\n    }\n    free(a);\n    int flag = 1;\n    for (int i = 100; i > 0; i--)\n    { //保证每个测试用例的输出占一行，按从大到小的顺序输出关键数字。数字间用 1 个空格隔开，但一行中最后一个数字后没有空格。\n        if (b[i] == -1 && flag == 1)\n        {\n            cout << i;\n            flag++;\n            continue;\n        }\n        if (b[i] == -1 && flag > 1)\n        {\n            cout << ' ' << i;\n        }\n    }\n    return 0;\n}\n```\n这里给出[柳婼 の blog姐姐](https://www.liuchuo.net/archives/452)的解法，其中[向量(vector)](https://doc.bccnsoft.com/docs/cppreference/cppvector.html)一个封装了动态大小数组的顺序容器（Sequence Container）。跟任意其它类型容器一样，它能够存放各种类型的对象。可以简单的认为，向量是一个能够存放任意类型的动态数组。\n\n[sort](http://www.cplusplus.com/reference/algorithm/sort/)是库algorithm中的一个函数\n\n**本题重点就是一方面是想到桶排序的思想，另一方面是注意到b的数组长度需要很大。**\n\n### [1006 换个格式输出整数 (15 分)](https://pintia.cn/problem-sets/994805260223102976/problems/994805318855278592)\n让我们用字母 B 来表示“百”、字母 S 表示“十”，用 12...n 来表示不为零的个位数字 n（<10），换个格式来输出任一个不超过 3 位的正整数。例如 234 应该被输出为 BBSSS1234，因为它有 2 个“百”、3 个“十”、以及个位的 4。\n\n**输入格式：**\n每个测试输入包含 1 个测试用例，给出正整数 n（<1000）。\n\n**输出格式：**\n每个测试用例的输出占一行，用规定的格式输出 n。\n\n**输入样例 1：**\n`234`\n\n**输出样例 1：**\n`BBSSS1234`\n\n**输入样例 2：**\n`23`\n\n**输出样例 2：**\n`SS123`\n\n**代码**\n过于简单，不加详述\n```C++\n#include <iostream>\nusing namespace std;\n\nint main()\n{\n    int num;\n    cin >> num;\n    for (int i = 0; i < num / 100; i++)\n    {\n        cout << 'B';\n    }\n    for (int i = 0; i < (num - num / 100 * 100) / 10; i++)\n    {\n        cout << 'S';\n    }\n    for (int i = 1; i <= (num % 10); i++)\n    {\n        cout << i;\n    }\n    return 0;\n}\n```\n\n### [1007 素数对猜想 (20 分)](https://pintia.cn/problem-sets/994805260223102976/problems/994805317546655744)\n让我们定义$d_n = p_{n+1} - p_n$，其中$p_i$是第i个素数。显然有$d_1 = 1$，且对于n>1有$d_n$是偶数。“素数对猜想”认为“存在无穷多对相邻且差为2的素数”。现给定任意正整数`N`($<10^5$)，请计算不超过`N`的满足猜想的素数对的个数。\n\n**输入格式:**\n输入在一行给出正整数`N`。\n\n**输出格式:**\n在一行中输出不超过`N`的满足猜想的素数对的个数。\n\n**输入样例:**\n`20`\n**输出样例:**\n`4`\n\n**代码**\n```C++\n#include <iostream>\nusing namespace std;\n\nbool is_prime(int n)//判断是否是素数\n{\n    for (int i = 2; i * i <= n; i++)//注意i的条件\n    {\n        if (n % i == 0)\n        {\n            return false;\n        }\n    }\n    return true;\n}\n\nint main()\n{\n    int N;\n    cin >> N;\n    if (N < 5)//如果N小于5，没有满足条件的素数对\n    {\n        cout << 0;\n        return 0;\n    }\n    int count = 0;\n    for (int i = 5; i <= N; i++)\n    {\n        if (is_prime(i) && is_prime(i - 2))//判断存在多少个满足条件的素数对\n        {\n            count++;\n        }\n    }\n    cout << count;\n    return 0;\n}\n```\n\n### [1008 数组元素循环右移问题 (20 分)](https://pintia.cn/problem-sets/994805260223102976/problems/994805316250615808)\n一个数组A中存有N（>0）个整数，在不允许使用另外数组的前提下，将每个整数循环向右移M（≥0）个位置，即将A中的数据由($A_0 A_1 ⋯ A_{N−1}$)变换为($A_{N−M} ⋯ A_{N−1} A_0 A_1 ⋯ A_{N−M−1}$)（最后M个数循环移至最前面的M个位置）。如果需要考虑程序移动数据的次数尽量少，要如何设计移动的方法？\n\n**输入格式:**\n每个输入包含一个测试用例，第1行输入N（1≤N≤100）和M（≥0）；第2行输入N个整数，之间用空格分隔。\n\n**输出格式:**\n在一行中输出循环右移M位以后的整数序列，之间用空格分隔，序列结尾不能有多余空格。\n\n**输入样例:**\n```C++\n6 2\n1 2 3 4 5 6\n```\n\n**输出样例:**\n`5 6 1 2 3 4`\n\n**代码**\n```C++\n//分析:数组的循环右移，可以用逆序数组的组合来实现，因为数组长度最大只有100，所有可以直接使用顺序表进行操作\n//只要保证如果右移位数的大小超出了数组的长度，不能出现数组越界的情况\n\n#include <iostream>\nusing namespace std;\n\n#define MaxSize 120 //定义线性表的最大长度\ntypedef int ElemType;\n\ntypedef struct //用顺序表定义数组\n{\n    ElemType data[MaxSize];\n    int length;\n} SqList;\n\nvoid reverse(SqList &L, int left, int right)\n{ //对线性表L的left到right这一部分进行逆序\n    for (ElemType temp; left < right; left++, right--)\n    {\n        temp = L.data[left];\n        L.data[left] = L.data[right];\n        L.data[right] = temp;\n    }\n}\n\nvoid right_move(SqList &L, int M) //将线性表L循环右移M位\n{\n    reverse(L, 0, L.length - M - 1);\n    reverse(L, L.length - M, L.length - 1);\n    reverse(L, 0, L.length - 1);\n}\n\nint main()\n{\n    SqList L;\n    cin >> L.length; //确定数组长度\n    int M;           //将数组循环右移M位\n    cin >> M;\n    for (int i = 0; i < L.length; i++) //输入数组数据\n    {\n        cin >> L.data[i];\n    }\n    // if(L.length == 1){\n    //     cout<<L.data[0];\n    //     return 0;\n    // }\n    right_move(L, M % L.length); //如果右移位数的大小超出了数组的长度，要保证不出现数组越界的情况\n    int flag = 0;\n    for (int i = 0; i < L.length; i++) //保证在一行中输出循环右移M位以后的整数序列，之间用空格分隔，序列结尾不能有多余空格。\n    {\n        if (flag)\n        {\n            cout << ' ' << L.data[i];\n        }\n        else\n        {\n            cout << L.data[i];\n            flag++;\n        }\n    }\n    return 0;\n}\n```\n\n### [1009 说反话 (20 分)](https://pintia.cn/problem-sets/994805260223102976/problems/994805314941992960)\n给定一句英语，要求你编写程序，将句中所有单词的顺序颠倒输出。\n\n**输入格式：**\n测试输入包含一个测试用例，在一行内给出总长度不超过 80 的字符串。字符串由若干单词和若干空格组成，其中单词是由英文字母（大小写有区分）组成的字符串，单词之间用 1 个空格分开，输入保证句子末尾没有多余的空格。\n\n**输出格式：**\n每个测试用例的输出占一行，输出倒序后的句子。\n\n**输入样例：**\n`Hello World Here I Come`\n\n**输出样例：**\n`Come I Here World Hello`\n\n**代码**\n```C++\n//分析，定义一个字符数组用于存储字符串，用游标i指向数组的最后一个字符，依次向前遍历，当遇到空格或者起点时，将刚才遍历的字符从前向后///用游标j取出。\n//需要注意的是，PAT的OJ系统需要用fgets,而不能用gets\n\n#include <iostream>\nusing namespace std;\n#include <string.h>\n\nint main()\n{\n    char a[100];\n    // cin >> a; //这里用cin或者scanf会出现无法读取' '之后的内容\n    fgets(a, 100, stdin);//如果用gets()，OJ会出现编译错误,stdin代表读取输入缓冲区的值\n    int len, i;\n    len = strlen(a) - 1;//fgets会接收回车，所以长度要长1\n    for (i = len - 1; i > 0; i--)\n    {\n        if (a[i] == ' ')\n        {\n            for (int j = i + 1; a[j] != ' ' && a[j] != '\\n'; j++)\n            {\n                cout << a[j];\n            }\n            cout << ' ';\n        }\n    }\n    if (i == 0)\n        for (; a[i] != ' ' && a[i] != '\\n'; i++)\n        {\n            cout << a[i];\n        }\n    return 0;\n}\n```\n这里给出[柳婼 の blog姐姐](https://www.liuchuo.net/archives/524)的解法，用到了[栈](https://doc.bccnsoft.com/docs/cppreference/cppstack.html)，使问题简化,但用的cin，**不理解为什么可以通过。**\n**这里对于这个问题做出解答。**\n1. `cin`是没有返回值，问题在于`>>`输入操作符，应该考虑的是它返回了什么\n2. “`>>`”操作重载函数`istream& operator>>(istream&, T &);`的返回值，其中第二个参数由`cin>>`后续参数类型决定。其返回值类型为`istream&`类型，大多数情况下其返回值为`cin`本身（非0值），只有当遇到EOF输入时，返回值为0。所以会有这种`cin`连续读取的方法。当输入所有数据后，通过输入`EOF`的方法，可以退出`while(cin>>a)`这样的循环。\n3. 输入`EOF`的方法，windows下输入`ctrl+z`, Linux下输入`ctrl+d`。\n4. `cin`是不接收空格的，空格作为其分界符。当`cin`读取到空格时，`cin`会从缓冲区读出，但却不会被`cin`接收到字符串当中去。\n\n### [1010 一元多项式求导 (25 分)](https://pintia.cn/problem-sets/994805260223102976/problems/994805313708867584)\n设计函数求一元多项式的导数。(注：$x_n$(n为整数)的一阶导数为$nx_{n−1}$。)\n\n**输入格式:**\n以指数递降方式输入多项式**非零项系数**和指数（绝对值均为不超过 1000 的整数）。数字间以空格分隔。\n\n**输出格式:**\n以与输入相同的格式输出导数多项式非零项的系数和指数。数字间以空格分隔，但结尾不能有多余空格。注意“零多项式”的指数和系数都是 0，但是表示为 `0 0`。\n\n**输入样例:**\n`3 4 -5 2 6 1 -2 0`\n\n**输出样例:**\n`12 3 -10 1 6 0`\n\n**代码**\n```C++\n//此题比较简单，只需注意当输入是常数多项式的情况即可，还要注意给出的是所有非零项系数\n#include <iostream>\nusing namespace std;\n#define MaxSize 1000\n\ntypedef struct\n{\n    int data[MaxSize];\n    int length = 0;\n} SqList;\n\nint main()\n{\n    SqList L;\n    while (cin >> L.data[L.length]) //将输入的数据存入顺序表中\n    {\n        L.length++;\n    }\n    if (L.data[1] == 0) //如果输入是常数多项式\n    {\n        cout << \"0 0\";\n        return 0;\n    }\n    int flag = 0;\n    for (int i = 0; i < L.length - 1; i = i + 2)\n    {\n        if (L.data[i] != 0 && L.data[i + 1] != 0)\n        {\n            if (flag != 0)\n            {\n                cout << ' ' << L.data[i] * L.data[i + 1] << ' ' << L.data[i + 1] - 1;\n            }\n            else\n            {\n                cout << L.data[i] * L.data[i + 1] << ' ' << L.data[i + 1] - 1;\n                flag++;\n            }\n        }\n    }\n    return 0;\n}\n```\n\n下面给出**[柳婼 の blog姐姐](https://www.liuchuo.net/archives/526)**的解法，不需要数组存储，节省了空间。\n```C++\n#include <iostream>\nusing namespace std;\n\nint main()\n{\n    int a, b, flag = 0;//flag用来判断是否已经有过输出\n    while (cin >> a >> b)\n    {\n        if (b != 0)\n        {//当b!=0时，因为给出的是所有非零项系数，所以必定会有输出，先判断flag是否为1，如果为1表示已经有过输出，那么在前面要先输出一个空格\n            if (flag != 0)\n            {\n                cout << ' ';\n            }\n            cout << a * b << ' ' << b - 1;//输出 a * b 和 b – 1，然后将flag标记为1表示已经有过输出\n            flag = 1;\n        }\n    }\n    if (flag == 0)//当没有输出并且b==0的时候，输出“0 0”\n    {\n        cout << \"0 0\";\n    }\n    return 0;\n}\n```\n\n### [1011 A+B 和 C (15 分)](https://pintia.cn/problem-sets/994805260223102976/problems/994805312417021952)\n给定区间$[{−2}^{31},2^{31}]$内的3个整数$A、B$和$C$，请判断$A+B$是否大于$C$。\n\n**输入格式：**\n输入第 1 行给出正整数 T (≤10)，是测试用例的个数。随后给出 T 组测试用例，每组占一行，顺序给出 A、B 和 C。整数间以空格分隔。\n\n**输出格式：**\n对每组测试用例，在一行中输出 Case #X: true 如果 A+B>C，否则输出 Case #X: false，其中 X 是测试用例的编号（从 1 开始）。\n\n**输入样例：**\n```C++\n4\n1 2 3\n2 3 4\n2147483647 0 2147483646\n0 -2147483648 -2147483647\n```\n\n**输出样例：**\n```C++\nCase #1: false\nCase #2: true\nCase #3: true\nCase #4: false\n```\n\n**代码**\n```C++\n//分析:可以用队列来暂存需要用到的数字，需要注意的是，要用long int\n#include <iostream>\n#include <queue>\nusing namespace std;\n\nint main()\n{\n    queue<long int> q; //定义一个队列\n    long int T, a, b, c;\n    cin >> T; //输入测试用例的个数\n    while (cin >> a >> b >> c)\n    {\n        q.push(a);\n        q.push(b);\n        q.push(c);\n        // i++;\n        // if (i == T)//这里可以用来代替循环终止条件\n        // {\n        //     break;\n        // }\n    }\n    int i = 1; // i代替X,用作测试用例的编号（从 1 开始）\n    while (!q.empty())\n    {\n        a = q.front();\n        q.pop();\n        b = q.front();\n        q.pop();\n        c = q.front();\n        q.pop();\n        if (!q.empty()) //如果不是最后一个输出，则输出换行，否则不输出\n            cout << \"Case #\" << i << ((a + b) > c ? \": true\" : \": false\") << endl;\n        else\n            cout << \"Case #\" << i << ((a + b) > c ? \": true\" : \": false\");\n        i++;\n    }\n    return 0;\n}\n```\n\n下面给出[柳婼 の blog姐姐](https://www.liuchuo.net/archives/822)的解法，和我一开始所想一致，但是担心控制台误判，未曾采用。\n\n### [1012 数字分类 (20 分)](https://pintia.cn/problem-sets/994805260223102976/problems/994805311146147840)\n给定一系列正整数，请按要求对数字进行分类，并输出以下 5 个数字：\n - $A_1$ = 能被 5 整除的数字中所有偶数的和；\n - $A_2$ = 将被 5 除后余 1 的数字按给出顺序进行交错求和，即计算 $n_1−n_2+n_3−n_4⋯$；\n - $A_3$ = 被 5 除后余 2 的数字的个数；\n - $A_4$ = 被 5 除后余 3 的数字的平均数，精确到小数点后 1 位；\n - $A_5$ = 被 5 除后余 4 的数字中最大数字。\n\n**输入格式：**\n每个输入包含 1 个测试用例。每个测试用例先给出一个不超过 1000 的正整数 N，随后给出 N 个不超过 1000 的待分类的正整数。数字间以空格分隔。\n\n**输出格式：**\n对给定的 $N$ 个正整数，按题目要求计算 $A_1$~$A_5$并在一行中顺序输出。数字间以空格分隔，但行末不得有多余空格。\n若分类之后某一类不存在数字，则在相应位置输出 `N`。\n\n**输入样例 1：**\n`13 1 2 3 4 5 6 7 8 9 10 20 16 18`\n\n**输出样例 1：**\n`30 11 2 9.7 9`\n\n**输入样例 2：**\n`8 1 2 4 5 6 7 9 16`\n\n**输出样例 2：**\n`N 11 2 N 9`\n\n**代码**\n```C++\n#include <iostream>\n#include <stdio.h>\nusing namespace std;\nint main()\n{\n    int N;\n    cin >> N; //正整数的个数\n    int temp, count = 0, num = 0;\n    int k = 0;\n    int a[5] = {0, 0, 0, 0, 0}; //用来存储题意上的A1~A5\n    while (cin >> temp)\n    {\n        if (temp % 10 == 0)\n        {\n            a[0] += temp;\n        }\n        else if (temp % 5 == 1)\n        { //用k来代替(-1)^k\n            if (k == 0)\n            {\n                a[1] += temp;\n                k = 1;\n                num++;\n            }\n            else\n            {\n                a[1] -= temp;\n                k = 0;\n            }\n        }\n        else if (temp % 5 == 2)\n        {\n            a[2]++;\n        }\n        else if (temp % 5 == 3)\n        {\n            a[3] += temp;\n            count++;\n        }\n        else if (temp % 5 == 4)\n        {\n            a[4] = (temp >= a[4] ? temp : a[4]);\n        }\n    }\n    if (a[0])\n    {\n        cout << a[0] << ' ';\n    }\n    else\n        cout << 'N' << ' ';\n    if (num)\n    {\n        cout << a[1] << ' ';\n    }\n    else\n        cout << 'N' << ' ';\n    if (a[2])\n    {\n        cout << a[2] << ' ';\n    }\n    else\n        cout << 'N' << ' ';\n    if (a[3])\n    {\n        printf(\"%.1f \", (float)a[3] / count);\n    }\n    else\n        cout << 'N' << ' ';\n    if (a[4])\n    {\n        cout << a[4];\n    }\n    else\n        cout << 'N';\n\n    return 0;\n}\n```\n\n下面给出[柳婼 の blog姐姐](https://www.liuchuo.net/archives/528)的解法，只是她用到了类似数组的[C++ Vectors](https://doc.bccnsoft.com/docs/cppreference/cppvector.html)，占用了更大的空间。\n\n### [1013 数素数 (20 分)](https://pintia.cn/problem-sets/994805260223102976/problems/994805309963354112)\n令 $P_i$表示第 i 个素数。现任给两个正整数 $M≤N≤10^4$，请输出 $P_M$到 $P_N$的所有素数。\n\n**输入格式：**\n输入在一行中给出 $M$ 和 $N$，其间以空格分隔。\n\n**输出格式：**\n输出从 $P_M$到 $P_N$的所有素数，每 10 个数字占 1 行，其间以空格分隔，但行末不得有多余空格。\n\n**输入样例：**\n`5 27`\n\n**输出样例：**\n```C++\n11 13 17 19 23 29 31 37 41 43\n47 53 59 61 67 71 73 79 83 89\n97 101 103\n```\n\n**代码**\n```C++\n#include <iostream>\nusing namespace std;\n\nbool is_prime(int x)//判断x是否是素数\n{\n    for (int i = 2; i * i <= x; i++)\n    {\n        if (x % i == 0)\n        {\n            return false;\n        }\n    }\n    return true;\n}\n\nint main()\n{\n    int m, n, k = 0;//k用来保证空格和十个之后换行\n    int count = 0;//count用于记录当前i是第几个素数\n    cin >> m >> n;//m用来指出第m个素数，n同理\n    for (int i = 1; count <= n; i++)\n    {\n        if (is_prime(i) && count < m)\n        {\n            count++;\n        }\n        else if (is_prime(i) && count >= m)\n        {\n            if (k % 10 == 0)\n            {\n                cout << i;\n            }\n            else\n            {\n                cout << ' ' << i;\n            }\n            count++;\n            k++;\n            if (k % 10 == 0)\n            {\n                cout << endl;\n            }\n        }\n    }\n    return 0;\n}\n```\n\n下面给出[柳婼 の blog姐姐](https://www.liuchuo.net/archives/530)的解法，只是她用到了类似数组的[C++ Vectors](https://doc.bccnsoft.com/docs/cppreference/cppvector.html)，占用了更大的空间\n\n### [1014 福尔摩斯的约会 (20 分)](https://pintia.cn/problem-sets/994805260223102976/problems/994805308755394560)\n大侦探福尔摩斯接到一张奇怪的字条：\n\n```C\n我们约会吧！ \n3485djDkxh4hhGE \n2984akDfkkkkggEdsb \ns&hgsfdk \nd&Hyscvnm\n```\n\n大侦探很快就明白了，字条上奇怪的乱码实际上就是约会的时间`星期四 14:04`，因为前面两字符串中第 1 对相同的大写英文字母（大小写有区分）是第 4 个字母 `D`，代表星期四；第 2 对相同的字符是 `E` ，那是第 5 个英文字母，代表一天里的第 14 个钟头（于是一天的 0 点到 23 点由数字 0 到 9、以及大写字母 `A` 到 `N` 表示）；后面两字符串第 1 对相同的英文字母 `s` 出现在第 4 个位置（从 0 开始计数）上，代表第 4 分钟。现给定两对字符串，请帮助福尔摩斯解码得到约会的时间。\n\n**输入格式：**\n输入在 4 行中分别给出 4 个非空、不包含空格、且长度不超过 60 的字符串。\n\n**输出格式：**\n在一行中输出约会的时间，格式为 `DAY HH:MM`，其中 `DAY` 是某星期的 3 字符缩写，即 `MON` 表示星期一，`TUE` 表示星期二，`WED` 表示星期三，`THU` 表示星期四，`FRI` 表示星期五，`SAT` 表示星期六，`SUN` 表示星期日。题目输入保证每个测试存在唯一解。\n\n**输入样例：**\n```C\n3485djDkxh4hhGE \n2984akDfkkkkggEdsb \ns&hgsfdk \nd&Hyscvnm\n```\n\n**输出样例：**\n`THU 14:04`\n\n**代码**\n```C++\n\n```","slug":"PAT刷题","published":1,"updated":"2024-04-25T17:26:46.803Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvjbaqm500az0vn1hvcl82sh","content":"<p><a href=\"https://pintia.cn/problem-sets/994805260223102976/problems/type/7\">浙大PAT刷题</a></p>\n<h3 id=\"1001-害死人不偿命的-3n-1-猜想-15-分\"><a href=\"#1001-害死人不偿命的-3n-1-猜想-15-分\" class=\"headerlink\" title=\"1001 害死人不偿命的(3n+1)猜想 (15 分)\"></a><a href=\"https://pintia.cn/problem-sets/994805260223102976/problems/994805325918486528\">1001 害死人不偿命的(3n+1)猜想 (15 分)</a></h3><p>卡拉兹(Callatz)猜想：</p>\n<p>对任何一个正整数 n，如果它是偶数，那么把它砍掉一半；如果它是奇数，那么把 (3n+1) 砍掉一半。这样一直反复砍下去，最后一定在某一步得到 n&#x3D;1。卡拉兹在 1950 年的世界数学家大会上公布了这个猜想，传说当时耶鲁大学师生齐动员，拼命想证明这个貌似很傻很天真的命题，结果闹得学生们无心学业，一心只证 (3n+1)，以至于有人说这是一个阴谋，卡拉兹是在蓄意延缓美国数学界教学与科研的进展……<span id=\"more\"></span></p>\n<p>我们今天的题目不是证明卡拉兹猜想，而是对给定的任一不超过 1000 的正整数 n，简单地数一下，需要多少步（砍几下）才能得到 n&#x3D;1？</p>\n<p><strong>输入格式</strong>：<br>每个测试输入包含 1 个测试用例，即给出正整数 n 的值。</p>\n<p><strong>输出格式：</strong><br>输出从 n 计算到 1 需要的步数。</p>\n<p><strong>输入样例</strong>：<br><code>3</code></p>\n<p><strong>输出样例</strong>：<br><code>5</code></p>\n<p><strong>代码</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n,count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n!=<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n%<span class=\"number\">2</span> == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            n = n/<span class=\"number\">2</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            n = (<span class=\"number\">3</span>*n+<span class=\"number\">1</span>)/<span class=\"number\">2</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        count++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,count);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1002-写出这个数-20-分\"><a href=\"#1002-写出这个数-20-分\" class=\"headerlink\" title=\"1002 写出这个数 (20 分)\"></a><a href=\"https://pintia.cn/problem-sets/994805260223102976/problems/994805324509200384\">1002 写出这个数 (20 分)</a></h3><p>读入一个正整数 n，计算其各位数字之和，用汉语拼音写出和的每一位数字。</p>\n<p><strong>输入格式</strong>：<br>每个测试输入包含 1 个测试用例，即给出自然数 n 的值。这里保证 n 小于 10^100</p>\n<p><strong>输出格式</strong>：<br>在一行内输出 n 的各位数字之和的每一位，拼音数字间有 1 空格，但一行中最后一个拼音数字后没有空格。</p>\n<p><strong>输入样例</strong>：<br><code>1234567890987654321123456789</code></p>\n<p><strong>输出样例</strong>：<br><code>yi san wu</code></p>\n<p><strong>代码</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">char</span> n[<span class=\"number\">108</span>] = <span class=\"string\">&quot;0&quot;</span>;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s&quot;</span>,n);          <span class=\"comment\">//用字符串接收数字</span></span><br><span class=\"line\">    <span class=\"type\">int</span> len;                 <span class=\"comment\">//用于计算字符串的长度</span></span><br><span class=\"line\">    len = <span class=\"built_in\">strlen</span>(n);</span><br><span class=\"line\">    <span class=\"type\">int</span> num = <span class=\"number\">0</span>,temp;                 <span class=\"comment\">//用于计算各位之和</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; len;i++)&#123;</span><br><span class=\"line\">        temp = (<span class=\"type\">int</span>)(n[i] - <span class=\"number\">48</span>);        <span class=\"comment\">//强制类型转换</span></span><br><span class=\"line\">        num = num + temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//printf(&quot;%d\\n&quot;,num);</span></span><br><span class=\"line\">    <span class=\"type\">char</span> str[<span class=\"number\">10</span>][<span class=\"number\">5</span>] =  &#123;<span class=\"string\">&quot;ling&quot;</span>, <span class=\"string\">&quot;yi&quot;</span>, <span class=\"string\">&quot;er&quot;</span>, <span class=\"string\">&quot;san&quot;</span>, <span class=\"string\">&quot;si&quot;</span>, <span class=\"string\">&quot;wu&quot;</span>, <span class=\"string\">&quot;liu&quot;</span>, <span class=\"string\">&quot;qi&quot;</span>, <span class=\"string\">&quot;ba&quot;</span>, <span class=\"string\">&quot;jiu&quot;</span>&#125;;   <span class=\"comment\">//定义字符串数组</span></span><br><span class=\"line\">    <span class=\"comment\">//printf(&quot;%s&quot;,str[1]);</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(num&lt;<span class=\"number\">10</span>)&#123;                         <span class=\"comment\">//num绝对不可能大于900</span></span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s&quot;</span>,str[num]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(num&lt;<span class=\"number\">100</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s %s&quot;</span>,str[num/<span class=\"number\">10</span>],str[num%<span class=\"number\">10</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        temp = num/<span class=\"number\">100</span>;</span><br><span class=\"line\">        num = num - temp * <span class=\"number\">100</span>;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s %s %s&quot;</span>,str[temp],str[num/<span class=\"number\">10</span>],str[num%<span class=\"number\">10</span>]);</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1004-成绩排名-20-分\"><a href=\"#1004-成绩排名-20-分\" class=\"headerlink\" title=\"1004 成绩排名 (20 分)\"></a><a href=\"https://pintia.cn/problem-sets/994805260223102976/problems/994805321640296448\">1004 成绩排名 (20 分)</a></h3><p>读入 n（&gt;0）名学生的姓名、学号、成绩，分别输出成绩最高和成绩最低学生的姓名和学号。</p>\n<p><strong>输入格式</strong>：<br>每个测试输入包含 1 个测试用例，格式为</p>\n<blockquote>\n<p>第 1 行：正整数 n<br>第 2 行：第 1 个学生的姓名 学号 成绩<br>第 3 行：第 2 个学生的姓名 学号 成绩<br> … … …<br>第 n+1 行：第 n 个学生的姓名 学号 成绩</p>\n</blockquote>\n<p>其中<code>姓名</code>和<code>学号</code>均为不超过 10 个字符的字符串，成绩为 0 到 100 之间的一个整数，这里保证在一组测试用例中没有两个学生的成绩是相同的。</p>\n<p><strong>输出格式</strong>：<br>对每个测试用例输出 2 行，第 1 行是成绩最高学生的姓名和学号，第 2 行是成绩最低学生的姓名和学号，字符串间有 1 空格。</p>\n<p><strong>输入样例</strong>：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\">Joe Math990112 <span class=\"number\">89</span></span><br><span class=\"line\">Mike CS991301 <span class=\"number\">100</span></span><br><span class=\"line\">Mary EE990830 <span class=\"number\">95</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>输出样例</strong>：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Mike CS991301</span><br><span class=\"line\">Joe Math990112</span><br></pre></td></tr></table></figure>\n\n\n<p><strong>代码</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//用结构体来存储每位学生的信息，用一个结构体指针来指向一个结构体数组。</span></span><br><span class=\"line\"><span class=\"comment\">//用find函数来找出结构体数组中成绩最低和最高的结构体</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span> <span class=\"comment\">//要用到malloc函数</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">stduent</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">char</span> name[<span class=\"number\">11</span>];<span class=\"comment\">//注意题意，这里要用10以上</span></span><br><span class=\"line\">    <span class=\"type\">char</span> num[<span class=\"number\">11</span>];</span><br><span class=\"line\">    <span class=\"type\">int</span> score;</span><br><span class=\"line\">&#125; stu;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"type\">int</span> &amp;min_i, <span class=\"type\">int</span> &amp;max_j, stu *p, <span class=\"type\">int</span> len)</span> <span class=\"comment\">//找出成绩最高和最低的学生</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; len; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (p[i].score &lt; p[min_i].score)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            min_i = i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (p[i].score &gt; p[max_j].score)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            max_j = i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;n);</span><br><span class=\"line\">    stu *p = (stu *)<span class=\"built_in\">malloc</span>(<span class=\"built_in\">sizeof</span>(stu) * n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s%s%d&quot;</span>, p[i].name, p[i].num, &amp;(p[i].score));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> min_i = <span class=\"number\">0</span>, max_j = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">find</span>(min_i, max_j, p, n);</span><br><span class=\"line\">    cout &lt;&lt; p[max_j].name &lt;&lt; <span class=\"string\">&#x27; &#x27;</span> &lt;&lt; p[max_j].num &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; p[min_i].name &lt;&lt; <span class=\"string\">&#x27; &#x27;</span> &lt;&lt; p[min_i].num &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">下面是优化之后的代码</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">student</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    string name, num;<span class=\"comment\">//不需要指定长度</span></span><br><span class=\"line\">    <span class=\"type\">int</span> score;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    student temp;</span><br><span class=\"line\">    student max = &#123;<span class=\"string\">&quot;&quot;</span>, <span class=\"string\">&quot;&quot;</span>, <span class=\"number\">0</span>&#125;;   <span class=\"comment\">//最大值最起码要设为最小的</span></span><br><span class=\"line\">    student min = &#123;<span class=\"string\">&quot;&quot;</span>, <span class=\"string\">&quot;&quot;</span>, <span class=\"number\">100</span>&#125;; <span class=\"comment\">//最小值最起码要设为最大的</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (n--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cin &gt;&gt; temp.name &gt;&gt; temp.num &gt;&gt; temp.score;</span><br><span class=\"line\">        max = temp.score &gt;= max.score ? temp : max;</span><br><span class=\"line\">        min = temp.score &lt;= min.score ? temp : min;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    cout &lt;&lt; max.name &lt;&lt; <span class=\"string\">&#x27; &#x27;</span> &lt;&lt; max.num &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; min.name &lt;&lt; <span class=\"string\">&#x27; &#x27;</span> &lt;&lt; min.num &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1005-继续-3n-1-猜想-25-分\"><a href=\"#1005-继续-3n-1-猜想-25-分\" class=\"headerlink\" title=\"1005 继续(3n+1)猜想 (25 分)\"></a><a href=\"https://pintia.cn/problem-sets/994805260223102976/problems/994805320306507776\">1005 继续(3n+1)猜想 (25 分)</a></h3><p>卡拉兹(Callatz)猜想已经在<a href=\"https://pintia.cn/problem-sets/994805260223102976/problems/994805325918486528\">1001</a>中给出了描述。在这个题目里，情况稍微有些复杂。</p>\n<p>当我们验证卡拉兹猜想的时候，为了避免重复计算，可以记录下递推过程中遇到的每一个数。例如对 n&#x3D;3 进行验证的时候，我们需要计算 3、5、8、4、2、1，则当我们对 n&#x3D;5、8、4、2 进行验证的时候，就可以直接判定卡拉兹猜想的真伪，而不需要重复计算，因为这 4 个数已经在验证3的时候遇到过了，我们称 5、8、4、2 是被 3“覆盖”的数。我们称一个数列中的某个数 n 为“关键数”，如果 n 不能被数列中的其他数字所覆盖。</p>\n<p>现在给定一系列待验证的数字，我们只需要验证其中的几个关键数，就可以不必再重复验证余下的数字。你的任务就是找出这些关键数字，并按从大到小的顺序输出它们。</p>\n<p><strong>输入格式</strong>：<br>每个测试输入包含 1 个测试用例，第 1 行给出一个正整数 K (&lt;100)，第 2 行给出 K 个互不相同的待验证的正整数 n (1&lt;n≤100)的值，数字间用空格隔开。</p>\n<p><strong>输出格式</strong>：<br>每个测试用例的输出占一行，按从大到小的顺序输出关键数字。数字间用 1 个空格隔开，但一行中最后一个数字后没有空格。</p>\n<p><strong>输入样例</strong>：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">6</span></span><br><span class=\"line\"><span class=\"number\">3</span> <span class=\"number\">5</span> <span class=\"number\">6</span> <span class=\"number\">7</span> <span class=\"number\">8</span> <span class=\"number\">11</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>输出样例</strong>：<br><code>7 6</code></p>\n<p><strong>代码</strong><br>基本思想:对每一个输入的数字i进行验证，把验证过的数字对应的b[i]标记为1，所有b[i]&#x3D;-1的数字即为关键数字,所有b[i] &#x3D; 0的数字代表本次测试未曾用到。最后对关键数字数字从大到小进行输出。</p>\n<p>b的数组长度必须要设定的很大，因为3n+1时候可能会出现数组越界的情况</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> b[<span class=\"number\">10000</span>] = &#123;<span class=\"number\">0</span>&#125;; <span class=\"comment\">//用桶排序的思想存储标记,为防止数组越界，这里设定数组长度为10000</span></span><br><span class=\"line\">    <span class=\"type\">int</span> K;</span><br><span class=\"line\">    cin &gt;&gt; K;</span><br><span class=\"line\">    <span class=\"type\">int</span> *a = (<span class=\"type\">int</span> *)<span class=\"built_in\">malloc</span>(<span class=\"built_in\">sizeof</span>(<span class=\"type\">int</span>) * K); <span class=\"comment\">//定义一个长度为K的数组，用于暂时存储输入的数据</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; K; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cin &gt;&gt; a[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; K; i++) <span class=\"comment\">//把输入的数据的标志位设为-1，-1代表未被覆盖，1代表被覆盖</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        b[a[i]] = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; K; i++)<span class=\"comment\">//对每一个输入的数字i进行验证</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (b[a[i]] == <span class=\"number\">1</span>)</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (a[i] != <span class=\"number\">1</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (a[i] % <span class=\"number\">2</span> == <span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                a[i] = a[i] / <span class=\"number\">2</span>;</span><br><span class=\"line\">                b[a[i]] = <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                a[i] = (<span class=\"number\">3</span> * a[i] + <span class=\"number\">1</span>) / <span class=\"number\">2</span>;</span><br><span class=\"line\">                b[a[i]] = <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">free</span>(a);</span><br><span class=\"line\">    <span class=\"type\">int</span> flag = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">100</span>; i &gt; <span class=\"number\">0</span>; i--)</span><br><span class=\"line\">    &#123; <span class=\"comment\">//保证每个测试用例的输出占一行，按从大到小的顺序输出关键数字。数字间用 1 个空格隔开，但一行中最后一个数字后没有空格。</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (b[i] == <span class=\"number\">-1</span> &amp;&amp; flag == <span class=\"number\">1</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            cout &lt;&lt; i;</span><br><span class=\"line\">            flag++;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (b[i] == <span class=\"number\">-1</span> &amp;&amp; flag &gt; <span class=\"number\">1</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&#x27; &#x27;</span> &lt;&lt; i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里给出<a href=\"https://www.liuchuo.net/archives/452\">柳婼 の blog姐姐</a>的解法，其中<a href=\"https://doc.bccnsoft.com/docs/cppreference/cppvector.html\">向量(vector)</a>一个封装了动态大小数组的顺序容器（Sequence Container）。跟任意其它类型容器一样，它能够存放各种类型的对象。可以简单的认为，向量是一个能够存放任意类型的动态数组。</p>\n<p><a href=\"http://www.cplusplus.com/reference/algorithm/sort/\">sort</a>是库algorithm中的一个函数</p>\n<p><strong>本题重点就是一方面是想到桶排序的思想，另一方面是注意到b的数组长度需要很大。</strong></p>\n<h3 id=\"1006-换个格式输出整数-15-分\"><a href=\"#1006-换个格式输出整数-15-分\" class=\"headerlink\" title=\"1006 换个格式输出整数 (15 分)\"></a><a href=\"https://pintia.cn/problem-sets/994805260223102976/problems/994805318855278592\">1006 换个格式输出整数 (15 分)</a></h3><p>让我们用字母 B 来表示“百”、字母 S 表示“十”，用 12…n 来表示不为零的个位数字 n（&lt;10），换个格式来输出任一个不超过 3 位的正整数。例如 234 应该被输出为 BBSSS1234，因为它有 2 个“百”、3 个“十”、以及个位的 4。</p>\n<p><strong>输入格式：</strong><br>每个测试输入包含 1 个测试用例，给出正整数 n（&lt;1000）。</p>\n<p><strong>输出格式：</strong><br>每个测试用例的输出占一行，用规定的格式输出 n。</p>\n<p><strong>输入样例 1：</strong><br><code>234</code></p>\n<p><strong>输出样例 1：</strong><br><code>BBSSS1234</code></p>\n<p><strong>输入样例 2：</strong><br><code>23</code></p>\n<p><strong>输出样例 2：</strong><br><code>SS123</code></p>\n<p><strong>代码</strong><br>过于简单，不加详述</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> num;</span><br><span class=\"line\">    cin &gt;&gt; num;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; num / <span class=\"number\">100</span>; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&#x27;B&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; (num - num / <span class=\"number\">100</span> * <span class=\"number\">100</span>) / <span class=\"number\">10</span>; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&#x27;S&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= (num % <span class=\"number\">10</span>); i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1007-素数对猜想-20-分\"><a href=\"#1007-素数对猜想-20-分\" class=\"headerlink\" title=\"1007 素数对猜想 (20 分)\"></a><a href=\"https://pintia.cn/problem-sets/994805260223102976/problems/994805317546655744\">1007 素数对猜想 (20 分)</a></h3><p>让我们定义$d_n &#x3D; p_{n+1} - p_n$，其中$p_i$是第i个素数。显然有$d_1 &#x3D; 1$，且对于n&gt;1有$d_n$是偶数。“素数对猜想”认为“存在无穷多对相邻且差为2的素数”。现给定任意正整数<code>N</code>($&lt;10^5$)，请计算不超过<code>N</code>的满足猜想的素数对的个数。</p>\n<p><strong>输入格式:</strong><br>输入在一行给出正整数<code>N</code>。</p>\n<p><strong>输出格式:</strong><br>在一行中输出不超过<code>N</code>的满足猜想的素数对的个数。</p>\n<p><strong>输入样例:</strong><br><code>20</code><br><strong>输出样例:</strong><br><code>4</code></p>\n<p><strong>代码</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">is_prime</span><span class=\"params\">(<span class=\"type\">int</span> n)</span><span class=\"comment\">//判断是否是素数</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">2</span>; i * i &lt;= n; i++)<span class=\"comment\">//注意i的条件</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n % i == <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> N;</span><br><span class=\"line\">    cin &gt;&gt; N;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (N &lt; <span class=\"number\">5</span>)<span class=\"comment\">//如果N小于5，没有满足条件的素数对</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">5</span>; i &lt;= N; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">is_prime</span>(i) &amp;&amp; <span class=\"built_in\">is_prime</span>(i - <span class=\"number\">2</span>))<span class=\"comment\">//判断存在多少个满足条件的素数对</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            count++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; count;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1008-数组元素循环右移问题-20-分\"><a href=\"#1008-数组元素循环右移问题-20-分\" class=\"headerlink\" title=\"1008 数组元素循环右移问题 (20 分)\"></a><a href=\"https://pintia.cn/problem-sets/994805260223102976/problems/994805316250615808\">1008 数组元素循环右移问题 (20 分)</a></h3><p>一个数组A中存有N（&gt;0）个整数，在不允许使用另外数组的前提下，将每个整数循环向右移M（≥0）个位置，即将A中的数据由($A_0 A_1 ⋯ A_{N−1}$)变换为($A_{N−M} ⋯ A_{N−1} A_0 A_1 ⋯ A_{N−M−1}$)（最后M个数循环移至最前面的M个位置）。如果需要考虑程序移动数据的次数尽量少，要如何设计移动的方法？</p>\n<p><strong>输入格式:</strong><br>每个输入包含一个测试用例，第1行输入N（1≤N≤100）和M（≥0）；第2行输入N个整数，之间用空格分隔。</p>\n<p><strong>输出格式:</strong><br>在一行中输出循环右移M位以后的整数序列，之间用空格分隔，序列结尾不能有多余空格。</p>\n<p><strong>输入样例:</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">6</span> <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">4</span> <span class=\"number\">5</span> <span class=\"number\">6</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>输出样例:</strong><br><code>5 6 1 2 3 4</code></p>\n<p><strong>代码</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//分析:数组的循环右移，可以用逆序数组的组合来实现，因为数组长度最大只有100，所有可以直接使用顺序表进行操作</span></span><br><span class=\"line\"><span class=\"comment\">//只要保证如果右移位数的大小超出了数组的长度，不能出现数组越界的情况</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MaxSize 120 <span class=\"comment\">//定义线性表的最大长度</span></span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">int</span> ElemType;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"comment\">//用顺序表定义数组</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ElemType data[MaxSize];</span><br><span class=\"line\">    <span class=\"type\">int</span> length;</span><br><span class=\"line\">&#125; SqList;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">reverse</span><span class=\"params\">(SqList &amp;L, <span class=\"type\">int</span> left, <span class=\"type\">int</span> right)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; <span class=\"comment\">//对线性表L的left到right这一部分进行逆序</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (ElemType temp; left &lt; right; left++, right--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        temp = L.data[left];</span><br><span class=\"line\">        L.data[left] = L.data[right];</span><br><span class=\"line\">        L.data[right] = temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">right_move</span><span class=\"params\">(SqList &amp;L, <span class=\"type\">int</span> M)</span> <span class=\"comment\">//将线性表L循环右移M位</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">reverse</span>(L, <span class=\"number\">0</span>, L.length - M - <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">reverse</span>(L, L.length - M, L.length - <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">reverse</span>(L, <span class=\"number\">0</span>, L.length - <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    SqList L;</span><br><span class=\"line\">    cin &gt;&gt; L.length; <span class=\"comment\">//确定数组长度</span></span><br><span class=\"line\">    <span class=\"type\">int</span> M;           <span class=\"comment\">//将数组循环右移M位</span></span><br><span class=\"line\">    cin &gt;&gt; M;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; L.length; i++) <span class=\"comment\">//输入数组数据</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cin &gt;&gt; L.data[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// if(L.length == 1)&#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//     cout&lt;&lt;L.data[0];</span></span><br><span class=\"line\">    <span class=\"comment\">//     return 0;</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">    <span class=\"built_in\">right_move</span>(L, M % L.length); <span class=\"comment\">//如果右移位数的大小超出了数组的长度，要保证不出现数组越界的情况</span></span><br><span class=\"line\">    <span class=\"type\">int</span> flag = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; L.length; i++) <span class=\"comment\">//保证在一行中输出循环右移M位以后的整数序列，之间用空格分隔，序列结尾不能有多余空格。</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (flag)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&#x27; &#x27;</span> &lt;&lt; L.data[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            cout &lt;&lt; L.data[i];</span><br><span class=\"line\">            flag++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1009-说反话-20-分\"><a href=\"#1009-说反话-20-分\" class=\"headerlink\" title=\"1009 说反话 (20 分)\"></a><a href=\"https://pintia.cn/problem-sets/994805260223102976/problems/994805314941992960\">1009 说反话 (20 分)</a></h3><p>给定一句英语，要求你编写程序，将句中所有单词的顺序颠倒输出。</p>\n<p><strong>输入格式：</strong><br>测试输入包含一个测试用例，在一行内给出总长度不超过 80 的字符串。字符串由若干单词和若干空格组成，其中单词是由英文字母（大小写有区分）组成的字符串，单词之间用 1 个空格分开，输入保证句子末尾没有多余的空格。</p>\n<p><strong>输出格式：</strong><br>每个测试用例的输出占一行，输出倒序后的句子。</p>\n<p><strong>输入样例：</strong><br><code>Hello World Here I Come</code></p>\n<p><strong>输出样例：</strong><br><code>Come I Here World Hello</code></p>\n<p><strong>代码</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//分析，定义一个字符数组用于存储字符串，用游标i指向数组的最后一个字符，依次向前遍历，当遇到空格或者起点时，将刚才遍历的字符从前向后///用游标j取出。</span></span><br><span class=\"line\"><span class=\"comment\">//需要注意的是，PAT的OJ系统需要用fgets,而不能用gets</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">char</span> a[<span class=\"number\">100</span>];</span><br><span class=\"line\">    <span class=\"comment\">// cin &gt;&gt; a; //这里用cin或者scanf会出现无法读取&#x27; &#x27;之后的内容</span></span><br><span class=\"line\">    <span class=\"built_in\">fgets</span>(a, <span class=\"number\">100</span>, stdin);<span class=\"comment\">//如果用gets()，OJ会出现编译错误,stdin代表读取输入缓冲区的值</span></span><br><span class=\"line\">    <span class=\"type\">int</span> len, i;</span><br><span class=\"line\">    len = <span class=\"built_in\">strlen</span>(a) - <span class=\"number\">1</span>;<span class=\"comment\">//fgets会接收回车，所以长度要长1</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = len - <span class=\"number\">1</span>; i &gt; <span class=\"number\">0</span>; i--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (a[i] == <span class=\"string\">&#x27; &#x27;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = i + <span class=\"number\">1</span>; a[j] != <span class=\"string\">&#x27; &#x27;</span> &amp;&amp; a[j] != <span class=\"string\">&#x27;\\n&#x27;</span>; j++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                cout &lt;&lt; a[j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&#x27; &#x27;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i == <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (; a[i] != <span class=\"string\">&#x27; &#x27;</span> &amp;&amp; a[i] != <span class=\"string\">&#x27;\\n&#x27;</span>; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            cout &lt;&lt; a[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里给出<a href=\"https://www.liuchuo.net/archives/524\">柳婼 の blog姐姐</a>的解法，用到了<a href=\"https://doc.bccnsoft.com/docs/cppreference/cppstack.html\">栈</a>，使问题简化,但用的cin，<strong>不理解为什么可以通过。</strong><br><strong>这里对于这个问题做出解答。</strong></p>\n<ol>\n<li><code>cin</code>是没有返回值，问题在于<code>&gt;&gt;</code>输入操作符，应该考虑的是它返回了什么</li>\n<li>“<code>&gt;&gt;</code>”操作重载函数<code>istream&amp; operator&gt;&gt;(istream&amp;, T &amp;);</code>的返回值，其中第二个参数由<code>cin&gt;&gt;</code>后续参数类型决定。其返回值类型为<code>istream&amp;</code>类型，大多数情况下其返回值为<code>cin</code>本身（非0值），只有当遇到EOF输入时，返回值为0。所以会有这种<code>cin</code>连续读取的方法。当输入所有数据后，通过输入<code>EOF</code>的方法，可以退出<code>while(cin&gt;&gt;a)</code>这样的循环。</li>\n<li>输入<code>EOF</code>的方法，windows下输入<code>ctrl+z</code>, Linux下输入<code>ctrl+d</code>。</li>\n<li><code>cin</code>是不接收空格的，空格作为其分界符。当<code>cin</code>读取到空格时，<code>cin</code>会从缓冲区读出，但却不会被<code>cin</code>接收到字符串当中去。</li>\n</ol>\n<h3 id=\"1010-一元多项式求导-25-分\"><a href=\"#1010-一元多项式求导-25-分\" class=\"headerlink\" title=\"1010 一元多项式求导 (25 分)\"></a><a href=\"https://pintia.cn/problem-sets/994805260223102976/problems/994805313708867584\">1010 一元多项式求导 (25 分)</a></h3><p>设计函数求一元多项式的导数。(注：$x_n$(n为整数)的一阶导数为$nx_{n−1}$。)</p>\n<p><strong>输入格式:</strong><br>以指数递降方式输入多项式<strong>非零项系数</strong>和指数（绝对值均为不超过 1000 的整数）。数字间以空格分隔。</p>\n<p><strong>输出格式:</strong><br>以与输入相同的格式输出导数多项式非零项的系数和指数。数字间以空格分隔，但结尾不能有多余空格。注意“零多项式”的指数和系数都是 0，但是表示为 <code>0 0</code>。</p>\n<p><strong>输入样例:</strong><br><code>3 4 -5 2 6 1 -2 0</code></p>\n<p><strong>输出样例:</strong><br><code>12 3 -10 1 6 0</code></p>\n<p><strong>代码</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//此题比较简单，只需注意当输入是常数多项式的情况即可，还要注意给出的是所有非零项系数</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MaxSize 1000</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> data[MaxSize];</span><br><span class=\"line\">    <span class=\"type\">int</span> length = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125; SqList;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    SqList L;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (cin &gt;&gt; L.data[L.length]) <span class=\"comment\">//将输入的数据存入顺序表中</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        L.length++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (L.data[<span class=\"number\">1</span>] == <span class=\"number\">0</span>) <span class=\"comment\">//如果输入是常数多项式</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;0 0&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> flag = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; L.length - <span class=\"number\">1</span>; i = i + <span class=\"number\">2</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (L.data[i] != <span class=\"number\">0</span> &amp;&amp; L.data[i + <span class=\"number\">1</span>] != <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (flag != <span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                cout &lt;&lt; <span class=\"string\">&#x27; &#x27;</span> &lt;&lt; L.data[i] * L.data[i + <span class=\"number\">1</span>] &lt;&lt; <span class=\"string\">&#x27; &#x27;</span> &lt;&lt; L.data[i + <span class=\"number\">1</span>] - <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                cout &lt;&lt; L.data[i] * L.data[i + <span class=\"number\">1</span>] &lt;&lt; <span class=\"string\">&#x27; &#x27;</span> &lt;&lt; L.data[i + <span class=\"number\">1</span>] - <span class=\"number\">1</span>;</span><br><span class=\"line\">                flag++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>下面给出**<a href=\"https://www.liuchuo.net/archives/526\">柳婼 の blog姐姐</a>**的解法，不需要数组存储，节省了空间。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> a, b, flag = <span class=\"number\">0</span>;<span class=\"comment\">//flag用来判断是否已经有过输出</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (cin &gt;&gt; a &gt;&gt; b)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (b != <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;<span class=\"comment\">//当b!=0时，因为给出的是所有非零项系数，所以必定会有输出，先判断flag是否为1，如果为1表示已经有过输出，那么在前面要先输出一个空格</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (flag != <span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                cout &lt;&lt; <span class=\"string\">&#x27; &#x27;</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            cout &lt;&lt; a * b &lt;&lt; <span class=\"string\">&#x27; &#x27;</span> &lt;&lt; b - <span class=\"number\">1</span>;<span class=\"comment\">//输出 a * b 和 b – 1，然后将flag标记为1表示已经有过输出</span></span><br><span class=\"line\">            flag = <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (flag == <span class=\"number\">0</span>)<span class=\"comment\">//当没有输出并且b==0的时候，输出“0 0”</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;0 0&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1011-A-B-和-C-15-分\"><a href=\"#1011-A-B-和-C-15-分\" class=\"headerlink\" title=\"1011 A+B 和 C (15 分)\"></a><a href=\"https://pintia.cn/problem-sets/994805260223102976/problems/994805312417021952\">1011 A+B 和 C (15 分)</a></h3><p>给定区间$[{−2}^{31},2^{31}]$内的3个整数$A、B$和$C$，请判断$A+B$是否大于$C$。</p>\n<p><strong>输入格式：</strong><br>输入第 1 行给出正整数 T (≤10)，是测试用例的个数。随后给出 T 组测试用例，每组占一行，顺序给出 A、B 和 C。整数间以空格分隔。</p>\n<p><strong>输出格式：</strong><br>对每组测试用例，在一行中输出 Case #X: true 如果 A+B&gt;C，否则输出 Case #X: false，其中 X 是测试用例的编号（从 1 开始）。</p>\n<p><strong>输入样例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">2147483647</span> <span class=\"number\">0</span> <span class=\"number\">2147483646</span></span><br><span class=\"line\"><span class=\"number\">0</span> <span class=\"number\">-2147483648</span> <span class=\"number\">-2147483647</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>输出样例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Case #<span class=\"number\">1</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">Case #<span class=\"number\">2</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">Case #<span class=\"number\">3</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">Case #<span class=\"number\">4</span>: <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>代码</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//分析:可以用队列来暂存需要用到的数字，需要注意的是，要用long int</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    queue&lt;<span class=\"type\">long</span> <span class=\"type\">int</span>&gt; q; <span class=\"comment\">//定义一个队列</span></span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"type\">int</span> T, a, b, c;</span><br><span class=\"line\">    cin &gt;&gt; T; <span class=\"comment\">//输入测试用例的个数</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (cin &gt;&gt; a &gt;&gt; b &gt;&gt; c)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        q.<span class=\"built_in\">push</span>(a);</span><br><span class=\"line\">        q.<span class=\"built_in\">push</span>(b);</span><br><span class=\"line\">        q.<span class=\"built_in\">push</span>(c);</span><br><span class=\"line\">        <span class=\"comment\">// i++;</span></span><br><span class=\"line\">        <span class=\"comment\">// if (i == T)//这里可以用来代替循环终止条件</span></span><br><span class=\"line\">        <span class=\"comment\">// &#123;</span></span><br><span class=\"line\">        <span class=\"comment\">//     break;</span></span><br><span class=\"line\">        <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> i = <span class=\"number\">1</span>; <span class=\"comment\">// i代替X,用作测试用例的编号（从 1 开始）</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!q.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        a = q.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">        q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        b = q.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">        q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        c = q.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">        q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!q.<span class=\"built_in\">empty</span>()) <span class=\"comment\">//如果不是最后一个输出，则输出换行，否则不输出</span></span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;Case #&quot;</span> &lt;&lt; i &lt;&lt; ((a + b) &gt; c ? <span class=\"string\">&quot;: true&quot;</span> : <span class=\"string\">&quot;: false&quot;</span>) &lt;&lt; endl;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;Case #&quot;</span> &lt;&lt; i &lt;&lt; ((a + b) &gt; c ? <span class=\"string\">&quot;: true&quot;</span> : <span class=\"string\">&quot;: false&quot;</span>);</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>下面给出<a href=\"https://www.liuchuo.net/archives/822\">柳婼 の blog姐姐</a>的解法，和我一开始所想一致，但是担心控制台误判，未曾采用。</p>\n<h3 id=\"1012-数字分类-20-分\"><a href=\"#1012-数字分类-20-分\" class=\"headerlink\" title=\"1012 数字分类 (20 分)\"></a><a href=\"https://pintia.cn/problem-sets/994805260223102976/problems/994805311146147840\">1012 数字分类 (20 分)</a></h3><p>给定一系列正整数，请按要求对数字进行分类，并输出以下 5 个数字：</p>\n<ul>\n<li>$A_1$ &#x3D; 能被 5 整除的数字中所有偶数的和；</li>\n<li>$A_2$ &#x3D; 将被 5 除后余 1 的数字按给出顺序进行交错求和，即计算 $n_1−n_2+n_3−n_4⋯$；</li>\n<li>$A_3$ &#x3D; 被 5 除后余 2 的数字的个数；</li>\n<li>$A_4$ &#x3D; 被 5 除后余 3 的数字的平均数，精确到小数点后 1 位；</li>\n<li>$A_5$ &#x3D; 被 5 除后余 4 的数字中最大数字。</li>\n</ul>\n<p><strong>输入格式：</strong><br>每个输入包含 1 个测试用例。每个测试用例先给出一个不超过 1000 的正整数 N，随后给出 N 个不超过 1000 的待分类的正整数。数字间以空格分隔。</p>\n<p><strong>输出格式：</strong><br>对给定的 $N$ 个正整数，按题目要求计算 $A_1$~$A_5$并在一行中顺序输出。数字间以空格分隔，但行末不得有多余空格。<br>若分类之后某一类不存在数字，则在相应位置输出 <code>N</code>。</p>\n<p><strong>输入样例 1：</strong><br><code>13 1 2 3 4 5 6 7 8 9 10 20 16 18</code></p>\n<p><strong>输出样例 1：</strong><br><code>30 11 2 9.7 9</code></p>\n<p><strong>输入样例 2：</strong><br><code>8 1 2 4 5 6 7 9 16</code></p>\n<p><strong>输出样例 2：</strong><br><code>N 11 2 N 9</code></p>\n<p><strong>代码</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> N;</span><br><span class=\"line\">    cin &gt;&gt; N; <span class=\"comment\">//正整数的个数</span></span><br><span class=\"line\">    <span class=\"type\">int</span> temp, count = <span class=\"number\">0</span>, num = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> k = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> a[<span class=\"number\">5</span>] = &#123;<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>&#125;; <span class=\"comment\">//用来存储题意上的A1~A5</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (cin &gt;&gt; temp)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (temp % <span class=\"number\">10</span> == <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            a[<span class=\"number\">0</span>] += temp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (temp % <span class=\"number\">5</span> == <span class=\"number\">1</span>)</span><br><span class=\"line\">        &#123; <span class=\"comment\">//用k来代替(-1)^k</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (k == <span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                a[<span class=\"number\">1</span>] += temp;</span><br><span class=\"line\">                k = <span class=\"number\">1</span>;</span><br><span class=\"line\">                num++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                a[<span class=\"number\">1</span>] -= temp;</span><br><span class=\"line\">                k = <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (temp % <span class=\"number\">5</span> == <span class=\"number\">2</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            a[<span class=\"number\">2</span>]++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (temp % <span class=\"number\">5</span> == <span class=\"number\">3</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            a[<span class=\"number\">3</span>] += temp;</span><br><span class=\"line\">            count++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (temp % <span class=\"number\">5</span> == <span class=\"number\">4</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            a[<span class=\"number\">4</span>] = (temp &gt;= a[<span class=\"number\">4</span>] ? temp : a[<span class=\"number\">4</span>]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (a[<span class=\"number\">0</span>])</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; a[<span class=\"number\">0</span>] &lt;&lt; <span class=\"string\">&#x27; &#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&#x27;N&#x27;</span> &lt;&lt; <span class=\"string\">&#x27; &#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (num)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; a[<span class=\"number\">1</span>] &lt;&lt; <span class=\"string\">&#x27; &#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&#x27;N&#x27;</span> &lt;&lt; <span class=\"string\">&#x27; &#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (a[<span class=\"number\">2</span>])</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; a[<span class=\"number\">2</span>] &lt;&lt; <span class=\"string\">&#x27; &#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&#x27;N&#x27;</span> &lt;&lt; <span class=\"string\">&#x27; &#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (a[<span class=\"number\">3</span>])</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%.1f &quot;</span>, (<span class=\"type\">float</span>)a[<span class=\"number\">3</span>] / count);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&#x27;N&#x27;</span> &lt;&lt; <span class=\"string\">&#x27; &#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (a[<span class=\"number\">4</span>])</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; a[<span class=\"number\">4</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&#x27;N&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>下面给出<a href=\"https://www.liuchuo.net/archives/528\">柳婼 の blog姐姐</a>的解法，只是她用到了类似数组的<a href=\"https://doc.bccnsoft.com/docs/cppreference/cppvector.html\">C++ Vectors</a>，占用了更大的空间。</p>\n<h3 id=\"1013-数素数-20-分\"><a href=\"#1013-数素数-20-分\" class=\"headerlink\" title=\"1013 数素数 (20 分)\"></a><a href=\"https://pintia.cn/problem-sets/994805260223102976/problems/994805309963354112\">1013 数素数 (20 分)</a></h3><p>令 $P_i$表示第 i 个素数。现任给两个正整数 $M≤N≤10^4$，请输出 $P_M$到 $P_N$的所有素数。</p>\n<p><strong>输入格式：</strong><br>输入在一行中给出 $M$ 和 $N$，其间以空格分隔。</p>\n<p><strong>输出格式：</strong><br>输出从 $P_M$到 $P_N$的所有素数，每 10 个数字占 1 行，其间以空格分隔，但行末不得有多余空格。</p>\n<p><strong>输入样例：</strong><br><code>5 27</code></p>\n<p><strong>输出样例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">11</span> <span class=\"number\">13</span> <span class=\"number\">17</span> <span class=\"number\">19</span> <span class=\"number\">23</span> <span class=\"number\">29</span> <span class=\"number\">31</span> <span class=\"number\">37</span> <span class=\"number\">41</span> <span class=\"number\">43</span></span><br><span class=\"line\"><span class=\"number\">47</span> <span class=\"number\">53</span> <span class=\"number\">59</span> <span class=\"number\">61</span> <span class=\"number\">67</span> <span class=\"number\">71</span> <span class=\"number\">73</span> <span class=\"number\">79</span> <span class=\"number\">83</span> <span class=\"number\">89</span></span><br><span class=\"line\"><span class=\"number\">97</span> <span class=\"number\">101</span> <span class=\"number\">103</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>代码</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">is_prime</span><span class=\"params\">(<span class=\"type\">int</span> x)</span><span class=\"comment\">//判断x是否是素数</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">2</span>; i * i &lt;= x; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x % i == <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> m, n, k = <span class=\"number\">0</span>;<span class=\"comment\">//k用来保证空格和十个之后换行</span></span><br><span class=\"line\">    <span class=\"type\">int</span> count = <span class=\"number\">0</span>;<span class=\"comment\">//count用于记录当前i是第几个素数</span></span><br><span class=\"line\">    cin &gt;&gt; m &gt;&gt; n;<span class=\"comment\">//m用来指出第m个素数，n同理</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; count &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">is_prime</span>(i) &amp;&amp; count &lt; m)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            count++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">is_prime</span>(i) &amp;&amp; count &gt;= m)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (k % <span class=\"number\">10</span> == <span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                cout &lt;&lt; i;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                cout &lt;&lt; <span class=\"string\">&#x27; &#x27;</span> &lt;&lt; i;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            count++;</span><br><span class=\"line\">            k++;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (k % <span class=\"number\">10</span> == <span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                cout &lt;&lt; endl;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>下面给出<a href=\"https://www.liuchuo.net/archives/530\">柳婼 の blog姐姐</a>的解法，只是她用到了类似数组的<a href=\"https://doc.bccnsoft.com/docs/cppreference/cppvector.html\">C++ Vectors</a>，占用了更大的空间</p>\n<h3 id=\"1014-福尔摩斯的约会-20-分\"><a href=\"#1014-福尔摩斯的约会-20-分\" class=\"headerlink\" title=\"1014 福尔摩斯的约会 (20 分)\"></a><a href=\"https://pintia.cn/problem-sets/994805260223102976/problems/994805308755394560\">1014 福尔摩斯的约会 (20 分)</a></h3><p>大侦探福尔摩斯接到一张奇怪的字条：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">我们约会吧！ </span><br><span class=\"line\"><span class=\"number\">3485</span>djDkxh4hhGE </span><br><span class=\"line\"><span class=\"number\">2984</span>akDfkkkkggEdsb </span><br><span class=\"line\">s&amp;hgsfdk </span><br><span class=\"line\">d&amp;Hyscvnm</span><br></pre></td></tr></table></figure>\n\n<p>大侦探很快就明白了，字条上奇怪的乱码实际上就是约会的时间<code>星期四 14:04</code>，因为前面两字符串中第 1 对相同的大写英文字母（大小写有区分）是第 4 个字母 <code>D</code>，代表星期四；第 2 对相同的字符是 <code>E</code> ，那是第 5 个英文字母，代表一天里的第 14 个钟头（于是一天的 0 点到 23 点由数字 0 到 9、以及大写字母 <code>A</code> 到 <code>N</code> 表示）；后面两字符串第 1 对相同的英文字母 <code>s</code> 出现在第 4 个位置（从 0 开始计数）上，代表第 4 分钟。现给定两对字符串，请帮助福尔摩斯解码得到约会的时间。</p>\n<p><strong>输入格式：</strong><br>输入在 4 行中分别给出 4 个非空、不包含空格、且长度不超过 60 的字符串。</p>\n<p><strong>输出格式：</strong><br>在一行中输出约会的时间，格式为 <code>DAY HH:MM</code>，其中 <code>DAY</code> 是某星期的 3 字符缩写，即 <code>MON</code> 表示星期一，<code>TUE</code> 表示星期二，<code>WED</code> 表示星期三，<code>THU</code> 表示星期四，<code>FRI</code> 表示星期五，<code>SAT</code> 表示星期六，<code>SUN</code> 表示星期日。题目输入保证每个测试存在唯一解。</p>\n<p><strong>输入样例：</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">3485</span>djDkxh4hhGE </span><br><span class=\"line\"><span class=\"number\">2984</span>akDfkkkkggEdsb </span><br><span class=\"line\">s&amp;hgsfdk </span><br><span class=\"line\">d&amp;Hyscvnm</span><br></pre></td></tr></table></figure>\n\n<p><strong>输出样例：</strong><br><code>THU 14:04</code></p>\n<p><strong>代码</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p><a href=\"https://pintia.cn/problem-sets/994805260223102976/problems/type/7\">浙大PAT刷题</a></p>\n<h3 id=\"1001-害死人不偿命的-3n-1-猜想-15-分\"><a href=\"#1001-害死人不偿命的-3n-1-猜想-15-分\" class=\"headerlink\" title=\"1001 害死人不偿命的(3n+1)猜想 (15 分)\"></a><a href=\"https://pintia.cn/problem-sets/994805260223102976/problems/994805325918486528\">1001 害死人不偿命的(3n+1)猜想 (15 分)</a></h3><p>卡拉兹(Callatz)猜想：</p>\n<p>对任何一个正整数 n，如果它是偶数，那么把它砍掉一半；如果它是奇数，那么把 (3n+1) 砍掉一半。这样一直反复砍下去，最后一定在某一步得到 n&#x3D;1。卡拉兹在 1950 年的世界数学家大会上公布了这个猜想，传说当时耶鲁大学师生齐动员，拼命想证明这个貌似很傻很天真的命题，结果闹得学生们无心学业，一心只证 (3n+1)，以至于有人说这是一个阴谋，卡拉兹是在蓄意延缓美国数学界教学与科研的进展……</p>","more":"<p></p>\n<p>我们今天的题目不是证明卡拉兹猜想，而是对给定的任一不超过 1000 的正整数 n，简单地数一下，需要多少步（砍几下）才能得到 n&#x3D;1？</p>\n<p><strong>输入格式</strong>：<br>每个测试输入包含 1 个测试用例，即给出正整数 n 的值。</p>\n<p><strong>输出格式：</strong><br>输出从 n 计算到 1 需要的步数。</p>\n<p><strong>输入样例</strong>：<br><code>3</code></p>\n<p><strong>输出样例</strong>：<br><code>5</code></p>\n<p><strong>代码</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n,count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n!=<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n%<span class=\"number\">2</span> == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            n = n/<span class=\"number\">2</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            n = (<span class=\"number\">3</span>*n+<span class=\"number\">1</span>)/<span class=\"number\">2</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        count++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,count);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1002-写出这个数-20-分\"><a href=\"#1002-写出这个数-20-分\" class=\"headerlink\" title=\"1002 写出这个数 (20 分)\"></a><a href=\"https://pintia.cn/problem-sets/994805260223102976/problems/994805324509200384\">1002 写出这个数 (20 分)</a></h3><p>读入一个正整数 n，计算其各位数字之和，用汉语拼音写出和的每一位数字。</p>\n<p><strong>输入格式</strong>：<br>每个测试输入包含 1 个测试用例，即给出自然数 n 的值。这里保证 n 小于 10^100</p>\n<p><strong>输出格式</strong>：<br>在一行内输出 n 的各位数字之和的每一位，拼音数字间有 1 空格，但一行中最后一个拼音数字后没有空格。</p>\n<p><strong>输入样例</strong>：<br><code>1234567890987654321123456789</code></p>\n<p><strong>输出样例</strong>：<br><code>yi san wu</code></p>\n<p><strong>代码</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">char</span> n[<span class=\"number\">108</span>] = <span class=\"string\">&quot;0&quot;</span>;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s&quot;</span>,n);          <span class=\"comment\">//用字符串接收数字</span></span><br><span class=\"line\">    <span class=\"type\">int</span> len;                 <span class=\"comment\">//用于计算字符串的长度</span></span><br><span class=\"line\">    len = <span class=\"built_in\">strlen</span>(n);</span><br><span class=\"line\">    <span class=\"type\">int</span> num = <span class=\"number\">0</span>,temp;                 <span class=\"comment\">//用于计算各位之和</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; len;i++)&#123;</span><br><span class=\"line\">        temp = (<span class=\"type\">int</span>)(n[i] - <span class=\"number\">48</span>);        <span class=\"comment\">//强制类型转换</span></span><br><span class=\"line\">        num = num + temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//printf(&quot;%d\\n&quot;,num);</span></span><br><span class=\"line\">    <span class=\"type\">char</span> str[<span class=\"number\">10</span>][<span class=\"number\">5</span>] =  &#123;<span class=\"string\">&quot;ling&quot;</span>, <span class=\"string\">&quot;yi&quot;</span>, <span class=\"string\">&quot;er&quot;</span>, <span class=\"string\">&quot;san&quot;</span>, <span class=\"string\">&quot;si&quot;</span>, <span class=\"string\">&quot;wu&quot;</span>, <span class=\"string\">&quot;liu&quot;</span>, <span class=\"string\">&quot;qi&quot;</span>, <span class=\"string\">&quot;ba&quot;</span>, <span class=\"string\">&quot;jiu&quot;</span>&#125;;   <span class=\"comment\">//定义字符串数组</span></span><br><span class=\"line\">    <span class=\"comment\">//printf(&quot;%s&quot;,str[1]);</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(num&lt;<span class=\"number\">10</span>)&#123;                         <span class=\"comment\">//num绝对不可能大于900</span></span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s&quot;</span>,str[num]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(num&lt;<span class=\"number\">100</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s %s&quot;</span>,str[num/<span class=\"number\">10</span>],str[num%<span class=\"number\">10</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        temp = num/<span class=\"number\">100</span>;</span><br><span class=\"line\">        num = num - temp * <span class=\"number\">100</span>;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s %s %s&quot;</span>,str[temp],str[num/<span class=\"number\">10</span>],str[num%<span class=\"number\">10</span>]);</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1004-成绩排名-20-分\"><a href=\"#1004-成绩排名-20-分\" class=\"headerlink\" title=\"1004 成绩排名 (20 分)\"></a><a href=\"https://pintia.cn/problem-sets/994805260223102976/problems/994805321640296448\">1004 成绩排名 (20 分)</a></h3><p>读入 n（&gt;0）名学生的姓名、学号、成绩，分别输出成绩最高和成绩最低学生的姓名和学号。</p>\n<p><strong>输入格式</strong>：<br>每个测试输入包含 1 个测试用例，格式为</p>\n<blockquote>\n<p>第 1 行：正整数 n<br>第 2 行：第 1 个学生的姓名 学号 成绩<br>第 3 行：第 2 个学生的姓名 学号 成绩<br> … … …<br>第 n+1 行：第 n 个学生的姓名 学号 成绩</p>\n</blockquote>\n<p>其中<code>姓名</code>和<code>学号</code>均为不超过 10 个字符的字符串，成绩为 0 到 100 之间的一个整数，这里保证在一组测试用例中没有两个学生的成绩是相同的。</p>\n<p><strong>输出格式</strong>：<br>对每个测试用例输出 2 行，第 1 行是成绩最高学生的姓名和学号，第 2 行是成绩最低学生的姓名和学号，字符串间有 1 空格。</p>\n<p><strong>输入样例</strong>：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\">Joe Math990112 <span class=\"number\">89</span></span><br><span class=\"line\">Mike CS991301 <span class=\"number\">100</span></span><br><span class=\"line\">Mary EE990830 <span class=\"number\">95</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>输出样例</strong>：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Mike CS991301</span><br><span class=\"line\">Joe Math990112</span><br></pre></td></tr></table></figure>\n\n\n<p><strong>代码</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//用结构体来存储每位学生的信息，用一个结构体指针来指向一个结构体数组。</span></span><br><span class=\"line\"><span class=\"comment\">//用find函数来找出结构体数组中成绩最低和最高的结构体</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span> <span class=\"comment\">//要用到malloc函数</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">stduent</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">char</span> name[<span class=\"number\">11</span>];<span class=\"comment\">//注意题意，这里要用10以上</span></span><br><span class=\"line\">    <span class=\"type\">char</span> num[<span class=\"number\">11</span>];</span><br><span class=\"line\">    <span class=\"type\">int</span> score;</span><br><span class=\"line\">&#125; stu;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"type\">int</span> &amp;min_i, <span class=\"type\">int</span> &amp;max_j, stu *p, <span class=\"type\">int</span> len)</span> <span class=\"comment\">//找出成绩最高和最低的学生</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; len; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (p[i].score &lt; p[min_i].score)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            min_i = i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (p[i].score &gt; p[max_j].score)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            max_j = i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;n);</span><br><span class=\"line\">    stu *p = (stu *)<span class=\"built_in\">malloc</span>(<span class=\"built_in\">sizeof</span>(stu) * n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s%s%d&quot;</span>, p[i].name, p[i].num, &amp;(p[i].score));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> min_i = <span class=\"number\">0</span>, max_j = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">find</span>(min_i, max_j, p, n);</span><br><span class=\"line\">    cout &lt;&lt; p[max_j].name &lt;&lt; <span class=\"string\">&#x27; &#x27;</span> &lt;&lt; p[max_j].num &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; p[min_i].name &lt;&lt; <span class=\"string\">&#x27; &#x27;</span> &lt;&lt; p[min_i].num &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">下面是优化之后的代码</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">student</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    string name, num;<span class=\"comment\">//不需要指定长度</span></span><br><span class=\"line\">    <span class=\"type\">int</span> score;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    student temp;</span><br><span class=\"line\">    student max = &#123;<span class=\"string\">&quot;&quot;</span>, <span class=\"string\">&quot;&quot;</span>, <span class=\"number\">0</span>&#125;;   <span class=\"comment\">//最大值最起码要设为最小的</span></span><br><span class=\"line\">    student min = &#123;<span class=\"string\">&quot;&quot;</span>, <span class=\"string\">&quot;&quot;</span>, <span class=\"number\">100</span>&#125;; <span class=\"comment\">//最小值最起码要设为最大的</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (n--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cin &gt;&gt; temp.name &gt;&gt; temp.num &gt;&gt; temp.score;</span><br><span class=\"line\">        max = temp.score &gt;= max.score ? temp : max;</span><br><span class=\"line\">        min = temp.score &lt;= min.score ? temp : min;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    cout &lt;&lt; max.name &lt;&lt; <span class=\"string\">&#x27; &#x27;</span> &lt;&lt; max.num &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; min.name &lt;&lt; <span class=\"string\">&#x27; &#x27;</span> &lt;&lt; min.num &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1005-继续-3n-1-猜想-25-分\"><a href=\"#1005-继续-3n-1-猜想-25-分\" class=\"headerlink\" title=\"1005 继续(3n+1)猜想 (25 分)\"></a><a href=\"https://pintia.cn/problem-sets/994805260223102976/problems/994805320306507776\">1005 继续(3n+1)猜想 (25 分)</a></h3><p>卡拉兹(Callatz)猜想已经在<a href=\"https://pintia.cn/problem-sets/994805260223102976/problems/994805325918486528\">1001</a>中给出了描述。在这个题目里，情况稍微有些复杂。</p>\n<p>当我们验证卡拉兹猜想的时候，为了避免重复计算，可以记录下递推过程中遇到的每一个数。例如对 n&#x3D;3 进行验证的时候，我们需要计算 3、5、8、4、2、1，则当我们对 n&#x3D;5、8、4、2 进行验证的时候，就可以直接判定卡拉兹猜想的真伪，而不需要重复计算，因为这 4 个数已经在验证3的时候遇到过了，我们称 5、8、4、2 是被 3“覆盖”的数。我们称一个数列中的某个数 n 为“关键数”，如果 n 不能被数列中的其他数字所覆盖。</p>\n<p>现在给定一系列待验证的数字，我们只需要验证其中的几个关键数，就可以不必再重复验证余下的数字。你的任务就是找出这些关键数字，并按从大到小的顺序输出它们。</p>\n<p><strong>输入格式</strong>：<br>每个测试输入包含 1 个测试用例，第 1 行给出一个正整数 K (&lt;100)，第 2 行给出 K 个互不相同的待验证的正整数 n (1&lt;n≤100)的值，数字间用空格隔开。</p>\n<p><strong>输出格式</strong>：<br>每个测试用例的输出占一行，按从大到小的顺序输出关键数字。数字间用 1 个空格隔开，但一行中最后一个数字后没有空格。</p>\n<p><strong>输入样例</strong>：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">6</span></span><br><span class=\"line\"><span class=\"number\">3</span> <span class=\"number\">5</span> <span class=\"number\">6</span> <span class=\"number\">7</span> <span class=\"number\">8</span> <span class=\"number\">11</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>输出样例</strong>：<br><code>7 6</code></p>\n<p><strong>代码</strong><br>基本思想:对每一个输入的数字i进行验证，把验证过的数字对应的b[i]标记为1，所有b[i]&#x3D;-1的数字即为关键数字,所有b[i] &#x3D; 0的数字代表本次测试未曾用到。最后对关键数字数字从大到小进行输出。</p>\n<p>b的数组长度必须要设定的很大，因为3n+1时候可能会出现数组越界的情况</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> b[<span class=\"number\">10000</span>] = &#123;<span class=\"number\">0</span>&#125;; <span class=\"comment\">//用桶排序的思想存储标记,为防止数组越界，这里设定数组长度为10000</span></span><br><span class=\"line\">    <span class=\"type\">int</span> K;</span><br><span class=\"line\">    cin &gt;&gt; K;</span><br><span class=\"line\">    <span class=\"type\">int</span> *a = (<span class=\"type\">int</span> *)<span class=\"built_in\">malloc</span>(<span class=\"built_in\">sizeof</span>(<span class=\"type\">int</span>) * K); <span class=\"comment\">//定义一个长度为K的数组，用于暂时存储输入的数据</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; K; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cin &gt;&gt; a[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; K; i++) <span class=\"comment\">//把输入的数据的标志位设为-1，-1代表未被覆盖，1代表被覆盖</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        b[a[i]] = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; K; i++)<span class=\"comment\">//对每一个输入的数字i进行验证</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (b[a[i]] == <span class=\"number\">1</span>)</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (a[i] != <span class=\"number\">1</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (a[i] % <span class=\"number\">2</span> == <span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                a[i] = a[i] / <span class=\"number\">2</span>;</span><br><span class=\"line\">                b[a[i]] = <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                a[i] = (<span class=\"number\">3</span> * a[i] + <span class=\"number\">1</span>) / <span class=\"number\">2</span>;</span><br><span class=\"line\">                b[a[i]] = <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">free</span>(a);</span><br><span class=\"line\">    <span class=\"type\">int</span> flag = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">100</span>; i &gt; <span class=\"number\">0</span>; i--)</span><br><span class=\"line\">    &#123; <span class=\"comment\">//保证每个测试用例的输出占一行，按从大到小的顺序输出关键数字。数字间用 1 个空格隔开，但一行中最后一个数字后没有空格。</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (b[i] == <span class=\"number\">-1</span> &amp;&amp; flag == <span class=\"number\">1</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            cout &lt;&lt; i;</span><br><span class=\"line\">            flag++;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (b[i] == <span class=\"number\">-1</span> &amp;&amp; flag &gt; <span class=\"number\">1</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&#x27; &#x27;</span> &lt;&lt; i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里给出<a href=\"https://www.liuchuo.net/archives/452\">柳婼 の blog姐姐</a>的解法，其中<a href=\"https://doc.bccnsoft.com/docs/cppreference/cppvector.html\">向量(vector)</a>一个封装了动态大小数组的顺序容器（Sequence Container）。跟任意其它类型容器一样，它能够存放各种类型的对象。可以简单的认为，向量是一个能够存放任意类型的动态数组。</p>\n<p><a href=\"http://www.cplusplus.com/reference/algorithm/sort/\">sort</a>是库algorithm中的一个函数</p>\n<p><strong>本题重点就是一方面是想到桶排序的思想，另一方面是注意到b的数组长度需要很大。</strong></p>\n<h3 id=\"1006-换个格式输出整数-15-分\"><a href=\"#1006-换个格式输出整数-15-分\" class=\"headerlink\" title=\"1006 换个格式输出整数 (15 分)\"></a><a href=\"https://pintia.cn/problem-sets/994805260223102976/problems/994805318855278592\">1006 换个格式输出整数 (15 分)</a></h3><p>让我们用字母 B 来表示“百”、字母 S 表示“十”，用 12…n 来表示不为零的个位数字 n（&lt;10），换个格式来输出任一个不超过 3 位的正整数。例如 234 应该被输出为 BBSSS1234，因为它有 2 个“百”、3 个“十”、以及个位的 4。</p>\n<p><strong>输入格式：</strong><br>每个测试输入包含 1 个测试用例，给出正整数 n（&lt;1000）。</p>\n<p><strong>输出格式：</strong><br>每个测试用例的输出占一行，用规定的格式输出 n。</p>\n<p><strong>输入样例 1：</strong><br><code>234</code></p>\n<p><strong>输出样例 1：</strong><br><code>BBSSS1234</code></p>\n<p><strong>输入样例 2：</strong><br><code>23</code></p>\n<p><strong>输出样例 2：</strong><br><code>SS123</code></p>\n<p><strong>代码</strong><br>过于简单，不加详述</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> num;</span><br><span class=\"line\">    cin &gt;&gt; num;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; num / <span class=\"number\">100</span>; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&#x27;B&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; (num - num / <span class=\"number\">100</span> * <span class=\"number\">100</span>) / <span class=\"number\">10</span>; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&#x27;S&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= (num % <span class=\"number\">10</span>); i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1007-素数对猜想-20-分\"><a href=\"#1007-素数对猜想-20-分\" class=\"headerlink\" title=\"1007 素数对猜想 (20 分)\"></a><a href=\"https://pintia.cn/problem-sets/994805260223102976/problems/994805317546655744\">1007 素数对猜想 (20 分)</a></h3><p>让我们定义$d_n &#x3D; p_{n+1} - p_n$，其中$p_i$是第i个素数。显然有$d_1 &#x3D; 1$，且对于n&gt;1有$d_n$是偶数。“素数对猜想”认为“存在无穷多对相邻且差为2的素数”。现给定任意正整数<code>N</code>($&lt;10^5$)，请计算不超过<code>N</code>的满足猜想的素数对的个数。</p>\n<p><strong>输入格式:</strong><br>输入在一行给出正整数<code>N</code>。</p>\n<p><strong>输出格式:</strong><br>在一行中输出不超过<code>N</code>的满足猜想的素数对的个数。</p>\n<p><strong>输入样例:</strong><br><code>20</code><br><strong>输出样例:</strong><br><code>4</code></p>\n<p><strong>代码</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">is_prime</span><span class=\"params\">(<span class=\"type\">int</span> n)</span><span class=\"comment\">//判断是否是素数</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">2</span>; i * i &lt;= n; i++)<span class=\"comment\">//注意i的条件</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n % i == <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> N;</span><br><span class=\"line\">    cin &gt;&gt; N;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (N &lt; <span class=\"number\">5</span>)<span class=\"comment\">//如果N小于5，没有满足条件的素数对</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">5</span>; i &lt;= N; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">is_prime</span>(i) &amp;&amp; <span class=\"built_in\">is_prime</span>(i - <span class=\"number\">2</span>))<span class=\"comment\">//判断存在多少个满足条件的素数对</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            count++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; count;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1008-数组元素循环右移问题-20-分\"><a href=\"#1008-数组元素循环右移问题-20-分\" class=\"headerlink\" title=\"1008 数组元素循环右移问题 (20 分)\"></a><a href=\"https://pintia.cn/problem-sets/994805260223102976/problems/994805316250615808\">1008 数组元素循环右移问题 (20 分)</a></h3><p>一个数组A中存有N（&gt;0）个整数，在不允许使用另外数组的前提下，将每个整数循环向右移M（≥0）个位置，即将A中的数据由($A_0 A_1 ⋯ A_{N−1}$)变换为($A_{N−M} ⋯ A_{N−1} A_0 A_1 ⋯ A_{N−M−1}$)（最后M个数循环移至最前面的M个位置）。如果需要考虑程序移动数据的次数尽量少，要如何设计移动的方法？</p>\n<p><strong>输入格式:</strong><br>每个输入包含一个测试用例，第1行输入N（1≤N≤100）和M（≥0）；第2行输入N个整数，之间用空格分隔。</p>\n<p><strong>输出格式:</strong><br>在一行中输出循环右移M位以后的整数序列，之间用空格分隔，序列结尾不能有多余空格。</p>\n<p><strong>输入样例:</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">6</span> <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">4</span> <span class=\"number\">5</span> <span class=\"number\">6</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>输出样例:</strong><br><code>5 6 1 2 3 4</code></p>\n<p><strong>代码</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//分析:数组的循环右移，可以用逆序数组的组合来实现，因为数组长度最大只有100，所有可以直接使用顺序表进行操作</span></span><br><span class=\"line\"><span class=\"comment\">//只要保证如果右移位数的大小超出了数组的长度，不能出现数组越界的情况</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MaxSize 120 <span class=\"comment\">//定义线性表的最大长度</span></span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">int</span> ElemType;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"comment\">//用顺序表定义数组</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ElemType data[MaxSize];</span><br><span class=\"line\">    <span class=\"type\">int</span> length;</span><br><span class=\"line\">&#125; SqList;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">reverse</span><span class=\"params\">(SqList &amp;L, <span class=\"type\">int</span> left, <span class=\"type\">int</span> right)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; <span class=\"comment\">//对线性表L的left到right这一部分进行逆序</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (ElemType temp; left &lt; right; left++, right--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        temp = L.data[left];</span><br><span class=\"line\">        L.data[left] = L.data[right];</span><br><span class=\"line\">        L.data[right] = temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">right_move</span><span class=\"params\">(SqList &amp;L, <span class=\"type\">int</span> M)</span> <span class=\"comment\">//将线性表L循环右移M位</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">reverse</span>(L, <span class=\"number\">0</span>, L.length - M - <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">reverse</span>(L, L.length - M, L.length - <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">reverse</span>(L, <span class=\"number\">0</span>, L.length - <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    SqList L;</span><br><span class=\"line\">    cin &gt;&gt; L.length; <span class=\"comment\">//确定数组长度</span></span><br><span class=\"line\">    <span class=\"type\">int</span> M;           <span class=\"comment\">//将数组循环右移M位</span></span><br><span class=\"line\">    cin &gt;&gt; M;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; L.length; i++) <span class=\"comment\">//输入数组数据</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cin &gt;&gt; L.data[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// if(L.length == 1)&#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//     cout&lt;&lt;L.data[0];</span></span><br><span class=\"line\">    <span class=\"comment\">//     return 0;</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">    <span class=\"built_in\">right_move</span>(L, M % L.length); <span class=\"comment\">//如果右移位数的大小超出了数组的长度，要保证不出现数组越界的情况</span></span><br><span class=\"line\">    <span class=\"type\">int</span> flag = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; L.length; i++) <span class=\"comment\">//保证在一行中输出循环右移M位以后的整数序列，之间用空格分隔，序列结尾不能有多余空格。</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (flag)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&#x27; &#x27;</span> &lt;&lt; L.data[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            cout &lt;&lt; L.data[i];</span><br><span class=\"line\">            flag++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1009-说反话-20-分\"><a href=\"#1009-说反话-20-分\" class=\"headerlink\" title=\"1009 说反话 (20 分)\"></a><a href=\"https://pintia.cn/problem-sets/994805260223102976/problems/994805314941992960\">1009 说反话 (20 分)</a></h3><p>给定一句英语，要求你编写程序，将句中所有单词的顺序颠倒输出。</p>\n<p><strong>输入格式：</strong><br>测试输入包含一个测试用例，在一行内给出总长度不超过 80 的字符串。字符串由若干单词和若干空格组成，其中单词是由英文字母（大小写有区分）组成的字符串，单词之间用 1 个空格分开，输入保证句子末尾没有多余的空格。</p>\n<p><strong>输出格式：</strong><br>每个测试用例的输出占一行，输出倒序后的句子。</p>\n<p><strong>输入样例：</strong><br><code>Hello World Here I Come</code></p>\n<p><strong>输出样例：</strong><br><code>Come I Here World Hello</code></p>\n<p><strong>代码</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//分析，定义一个字符数组用于存储字符串，用游标i指向数组的最后一个字符，依次向前遍历，当遇到空格或者起点时，将刚才遍历的字符从前向后///用游标j取出。</span></span><br><span class=\"line\"><span class=\"comment\">//需要注意的是，PAT的OJ系统需要用fgets,而不能用gets</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">char</span> a[<span class=\"number\">100</span>];</span><br><span class=\"line\">    <span class=\"comment\">// cin &gt;&gt; a; //这里用cin或者scanf会出现无法读取&#x27; &#x27;之后的内容</span></span><br><span class=\"line\">    <span class=\"built_in\">fgets</span>(a, <span class=\"number\">100</span>, stdin);<span class=\"comment\">//如果用gets()，OJ会出现编译错误,stdin代表读取输入缓冲区的值</span></span><br><span class=\"line\">    <span class=\"type\">int</span> len, i;</span><br><span class=\"line\">    len = <span class=\"built_in\">strlen</span>(a) - <span class=\"number\">1</span>;<span class=\"comment\">//fgets会接收回车，所以长度要长1</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = len - <span class=\"number\">1</span>; i &gt; <span class=\"number\">0</span>; i--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (a[i] == <span class=\"string\">&#x27; &#x27;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = i + <span class=\"number\">1</span>; a[j] != <span class=\"string\">&#x27; &#x27;</span> &amp;&amp; a[j] != <span class=\"string\">&#x27;\\n&#x27;</span>; j++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                cout &lt;&lt; a[j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&#x27; &#x27;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i == <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (; a[i] != <span class=\"string\">&#x27; &#x27;</span> &amp;&amp; a[i] != <span class=\"string\">&#x27;\\n&#x27;</span>; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            cout &lt;&lt; a[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里给出<a href=\"https://www.liuchuo.net/archives/524\">柳婼 の blog姐姐</a>的解法，用到了<a href=\"https://doc.bccnsoft.com/docs/cppreference/cppstack.html\">栈</a>，使问题简化,但用的cin，<strong>不理解为什么可以通过。</strong><br><strong>这里对于这个问题做出解答。</strong></p>\n<ol>\n<li><code>cin</code>是没有返回值，问题在于<code>&gt;&gt;</code>输入操作符，应该考虑的是它返回了什么</li>\n<li>“<code>&gt;&gt;</code>”操作重载函数<code>istream&amp; operator&gt;&gt;(istream&amp;, T &amp;);</code>的返回值，其中第二个参数由<code>cin&gt;&gt;</code>后续参数类型决定。其返回值类型为<code>istream&amp;</code>类型，大多数情况下其返回值为<code>cin</code>本身（非0值），只有当遇到EOF输入时，返回值为0。所以会有这种<code>cin</code>连续读取的方法。当输入所有数据后，通过输入<code>EOF</code>的方法，可以退出<code>while(cin&gt;&gt;a)</code>这样的循环。</li>\n<li>输入<code>EOF</code>的方法，windows下输入<code>ctrl+z</code>, Linux下输入<code>ctrl+d</code>。</li>\n<li><code>cin</code>是不接收空格的，空格作为其分界符。当<code>cin</code>读取到空格时，<code>cin</code>会从缓冲区读出，但却不会被<code>cin</code>接收到字符串当中去。</li>\n</ol>\n<h3 id=\"1010-一元多项式求导-25-分\"><a href=\"#1010-一元多项式求导-25-分\" class=\"headerlink\" title=\"1010 一元多项式求导 (25 分)\"></a><a href=\"https://pintia.cn/problem-sets/994805260223102976/problems/994805313708867584\">1010 一元多项式求导 (25 分)</a></h3><p>设计函数求一元多项式的导数。(注：$x_n$(n为整数)的一阶导数为$nx_{n−1}$。)</p>\n<p><strong>输入格式:</strong><br>以指数递降方式输入多项式<strong>非零项系数</strong>和指数（绝对值均为不超过 1000 的整数）。数字间以空格分隔。</p>\n<p><strong>输出格式:</strong><br>以与输入相同的格式输出导数多项式非零项的系数和指数。数字间以空格分隔，但结尾不能有多余空格。注意“零多项式”的指数和系数都是 0，但是表示为 <code>0 0</code>。</p>\n<p><strong>输入样例:</strong><br><code>3 4 -5 2 6 1 -2 0</code></p>\n<p><strong>输出样例:</strong><br><code>12 3 -10 1 6 0</code></p>\n<p><strong>代码</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//此题比较简单，只需注意当输入是常数多项式的情况即可，还要注意给出的是所有非零项系数</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MaxSize 1000</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> data[MaxSize];</span><br><span class=\"line\">    <span class=\"type\">int</span> length = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125; SqList;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    SqList L;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (cin &gt;&gt; L.data[L.length]) <span class=\"comment\">//将输入的数据存入顺序表中</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        L.length++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (L.data[<span class=\"number\">1</span>] == <span class=\"number\">0</span>) <span class=\"comment\">//如果输入是常数多项式</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;0 0&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> flag = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; L.length - <span class=\"number\">1</span>; i = i + <span class=\"number\">2</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (L.data[i] != <span class=\"number\">0</span> &amp;&amp; L.data[i + <span class=\"number\">1</span>] != <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (flag != <span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                cout &lt;&lt; <span class=\"string\">&#x27; &#x27;</span> &lt;&lt; L.data[i] * L.data[i + <span class=\"number\">1</span>] &lt;&lt; <span class=\"string\">&#x27; &#x27;</span> &lt;&lt; L.data[i + <span class=\"number\">1</span>] - <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                cout &lt;&lt; L.data[i] * L.data[i + <span class=\"number\">1</span>] &lt;&lt; <span class=\"string\">&#x27; &#x27;</span> &lt;&lt; L.data[i + <span class=\"number\">1</span>] - <span class=\"number\">1</span>;</span><br><span class=\"line\">                flag++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>下面给出**<a href=\"https://www.liuchuo.net/archives/526\">柳婼 の blog姐姐</a>**的解法，不需要数组存储，节省了空间。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> a, b, flag = <span class=\"number\">0</span>;<span class=\"comment\">//flag用来判断是否已经有过输出</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (cin &gt;&gt; a &gt;&gt; b)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (b != <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;<span class=\"comment\">//当b!=0时，因为给出的是所有非零项系数，所以必定会有输出，先判断flag是否为1，如果为1表示已经有过输出，那么在前面要先输出一个空格</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (flag != <span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                cout &lt;&lt; <span class=\"string\">&#x27; &#x27;</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            cout &lt;&lt; a * b &lt;&lt; <span class=\"string\">&#x27; &#x27;</span> &lt;&lt; b - <span class=\"number\">1</span>;<span class=\"comment\">//输出 a * b 和 b – 1，然后将flag标记为1表示已经有过输出</span></span><br><span class=\"line\">            flag = <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (flag == <span class=\"number\">0</span>)<span class=\"comment\">//当没有输出并且b==0的时候，输出“0 0”</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;0 0&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1011-A-B-和-C-15-分\"><a href=\"#1011-A-B-和-C-15-分\" class=\"headerlink\" title=\"1011 A+B 和 C (15 分)\"></a><a href=\"https://pintia.cn/problem-sets/994805260223102976/problems/994805312417021952\">1011 A+B 和 C (15 分)</a></h3><p>给定区间$[{−2}^{31},2^{31}]$内的3个整数$A、B$和$C$，请判断$A+B$是否大于$C$。</p>\n<p><strong>输入格式：</strong><br>输入第 1 行给出正整数 T (≤10)，是测试用例的个数。随后给出 T 组测试用例，每组占一行，顺序给出 A、B 和 C。整数间以空格分隔。</p>\n<p><strong>输出格式：</strong><br>对每组测试用例，在一行中输出 Case #X: true 如果 A+B&gt;C，否则输出 Case #X: false，其中 X 是测试用例的编号（从 1 开始）。</p>\n<p><strong>输入样例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">2147483647</span> <span class=\"number\">0</span> <span class=\"number\">2147483646</span></span><br><span class=\"line\"><span class=\"number\">0</span> <span class=\"number\">-2147483648</span> <span class=\"number\">-2147483647</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>输出样例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Case #<span class=\"number\">1</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">Case #<span class=\"number\">2</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">Case #<span class=\"number\">3</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">Case #<span class=\"number\">4</span>: <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>代码</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//分析:可以用队列来暂存需要用到的数字，需要注意的是，要用long int</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    queue&lt;<span class=\"type\">long</span> <span class=\"type\">int</span>&gt; q; <span class=\"comment\">//定义一个队列</span></span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"type\">int</span> T, a, b, c;</span><br><span class=\"line\">    cin &gt;&gt; T; <span class=\"comment\">//输入测试用例的个数</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (cin &gt;&gt; a &gt;&gt; b &gt;&gt; c)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        q.<span class=\"built_in\">push</span>(a);</span><br><span class=\"line\">        q.<span class=\"built_in\">push</span>(b);</span><br><span class=\"line\">        q.<span class=\"built_in\">push</span>(c);</span><br><span class=\"line\">        <span class=\"comment\">// i++;</span></span><br><span class=\"line\">        <span class=\"comment\">// if (i == T)//这里可以用来代替循环终止条件</span></span><br><span class=\"line\">        <span class=\"comment\">// &#123;</span></span><br><span class=\"line\">        <span class=\"comment\">//     break;</span></span><br><span class=\"line\">        <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> i = <span class=\"number\">1</span>; <span class=\"comment\">// i代替X,用作测试用例的编号（从 1 开始）</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!q.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        a = q.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">        q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        b = q.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">        q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        c = q.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">        q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!q.<span class=\"built_in\">empty</span>()) <span class=\"comment\">//如果不是最后一个输出，则输出换行，否则不输出</span></span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;Case #&quot;</span> &lt;&lt; i &lt;&lt; ((a + b) &gt; c ? <span class=\"string\">&quot;: true&quot;</span> : <span class=\"string\">&quot;: false&quot;</span>) &lt;&lt; endl;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;Case #&quot;</span> &lt;&lt; i &lt;&lt; ((a + b) &gt; c ? <span class=\"string\">&quot;: true&quot;</span> : <span class=\"string\">&quot;: false&quot;</span>);</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>下面给出<a href=\"https://www.liuchuo.net/archives/822\">柳婼 の blog姐姐</a>的解法，和我一开始所想一致，但是担心控制台误判，未曾采用。</p>\n<h3 id=\"1012-数字分类-20-分\"><a href=\"#1012-数字分类-20-分\" class=\"headerlink\" title=\"1012 数字分类 (20 分)\"></a><a href=\"https://pintia.cn/problem-sets/994805260223102976/problems/994805311146147840\">1012 数字分类 (20 分)</a></h3><p>给定一系列正整数，请按要求对数字进行分类，并输出以下 5 个数字：</p>\n<ul>\n<li>$A_1$ &#x3D; 能被 5 整除的数字中所有偶数的和；</li>\n<li>$A_2$ &#x3D; 将被 5 除后余 1 的数字按给出顺序进行交错求和，即计算 $n_1−n_2+n_3−n_4⋯$；</li>\n<li>$A_3$ &#x3D; 被 5 除后余 2 的数字的个数；</li>\n<li>$A_4$ &#x3D; 被 5 除后余 3 的数字的平均数，精确到小数点后 1 位；</li>\n<li>$A_5$ &#x3D; 被 5 除后余 4 的数字中最大数字。</li>\n</ul>\n<p><strong>输入格式：</strong><br>每个输入包含 1 个测试用例。每个测试用例先给出一个不超过 1000 的正整数 N，随后给出 N 个不超过 1000 的待分类的正整数。数字间以空格分隔。</p>\n<p><strong>输出格式：</strong><br>对给定的 $N$ 个正整数，按题目要求计算 $A_1$~$A_5$并在一行中顺序输出。数字间以空格分隔，但行末不得有多余空格。<br>若分类之后某一类不存在数字，则在相应位置输出 <code>N</code>。</p>\n<p><strong>输入样例 1：</strong><br><code>13 1 2 3 4 5 6 7 8 9 10 20 16 18</code></p>\n<p><strong>输出样例 1：</strong><br><code>30 11 2 9.7 9</code></p>\n<p><strong>输入样例 2：</strong><br><code>8 1 2 4 5 6 7 9 16</code></p>\n<p><strong>输出样例 2：</strong><br><code>N 11 2 N 9</code></p>\n<p><strong>代码</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> N;</span><br><span class=\"line\">    cin &gt;&gt; N; <span class=\"comment\">//正整数的个数</span></span><br><span class=\"line\">    <span class=\"type\">int</span> temp, count = <span class=\"number\">0</span>, num = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> k = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> a[<span class=\"number\">5</span>] = &#123;<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>&#125;; <span class=\"comment\">//用来存储题意上的A1~A5</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (cin &gt;&gt; temp)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (temp % <span class=\"number\">10</span> == <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            a[<span class=\"number\">0</span>] += temp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (temp % <span class=\"number\">5</span> == <span class=\"number\">1</span>)</span><br><span class=\"line\">        &#123; <span class=\"comment\">//用k来代替(-1)^k</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (k == <span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                a[<span class=\"number\">1</span>] += temp;</span><br><span class=\"line\">                k = <span class=\"number\">1</span>;</span><br><span class=\"line\">                num++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                a[<span class=\"number\">1</span>] -= temp;</span><br><span class=\"line\">                k = <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (temp % <span class=\"number\">5</span> == <span class=\"number\">2</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            a[<span class=\"number\">2</span>]++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (temp % <span class=\"number\">5</span> == <span class=\"number\">3</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            a[<span class=\"number\">3</span>] += temp;</span><br><span class=\"line\">            count++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (temp % <span class=\"number\">5</span> == <span class=\"number\">4</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            a[<span class=\"number\">4</span>] = (temp &gt;= a[<span class=\"number\">4</span>] ? temp : a[<span class=\"number\">4</span>]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (a[<span class=\"number\">0</span>])</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; a[<span class=\"number\">0</span>] &lt;&lt; <span class=\"string\">&#x27; &#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&#x27;N&#x27;</span> &lt;&lt; <span class=\"string\">&#x27; &#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (num)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; a[<span class=\"number\">1</span>] &lt;&lt; <span class=\"string\">&#x27; &#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&#x27;N&#x27;</span> &lt;&lt; <span class=\"string\">&#x27; &#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (a[<span class=\"number\">2</span>])</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; a[<span class=\"number\">2</span>] &lt;&lt; <span class=\"string\">&#x27; &#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&#x27;N&#x27;</span> &lt;&lt; <span class=\"string\">&#x27; &#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (a[<span class=\"number\">3</span>])</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%.1f &quot;</span>, (<span class=\"type\">float</span>)a[<span class=\"number\">3</span>] / count);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&#x27;N&#x27;</span> &lt;&lt; <span class=\"string\">&#x27; &#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (a[<span class=\"number\">4</span>])</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; a[<span class=\"number\">4</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&#x27;N&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>下面给出<a href=\"https://www.liuchuo.net/archives/528\">柳婼 の blog姐姐</a>的解法，只是她用到了类似数组的<a href=\"https://doc.bccnsoft.com/docs/cppreference/cppvector.html\">C++ Vectors</a>，占用了更大的空间。</p>\n<h3 id=\"1013-数素数-20-分\"><a href=\"#1013-数素数-20-分\" class=\"headerlink\" title=\"1013 数素数 (20 分)\"></a><a href=\"https://pintia.cn/problem-sets/994805260223102976/problems/994805309963354112\">1013 数素数 (20 分)</a></h3><p>令 $P_i$表示第 i 个素数。现任给两个正整数 $M≤N≤10^4$，请输出 $P_M$到 $P_N$的所有素数。</p>\n<p><strong>输入格式：</strong><br>输入在一行中给出 $M$ 和 $N$，其间以空格分隔。</p>\n<p><strong>输出格式：</strong><br>输出从 $P_M$到 $P_N$的所有素数，每 10 个数字占 1 行，其间以空格分隔，但行末不得有多余空格。</p>\n<p><strong>输入样例：</strong><br><code>5 27</code></p>\n<p><strong>输出样例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">11</span> <span class=\"number\">13</span> <span class=\"number\">17</span> <span class=\"number\">19</span> <span class=\"number\">23</span> <span class=\"number\">29</span> <span class=\"number\">31</span> <span class=\"number\">37</span> <span class=\"number\">41</span> <span class=\"number\">43</span></span><br><span class=\"line\"><span class=\"number\">47</span> <span class=\"number\">53</span> <span class=\"number\">59</span> <span class=\"number\">61</span> <span class=\"number\">67</span> <span class=\"number\">71</span> <span class=\"number\">73</span> <span class=\"number\">79</span> <span class=\"number\">83</span> <span class=\"number\">89</span></span><br><span class=\"line\"><span class=\"number\">97</span> <span class=\"number\">101</span> <span class=\"number\">103</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>代码</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">is_prime</span><span class=\"params\">(<span class=\"type\">int</span> x)</span><span class=\"comment\">//判断x是否是素数</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">2</span>; i * i &lt;= x; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x % i == <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> m, n, k = <span class=\"number\">0</span>;<span class=\"comment\">//k用来保证空格和十个之后换行</span></span><br><span class=\"line\">    <span class=\"type\">int</span> count = <span class=\"number\">0</span>;<span class=\"comment\">//count用于记录当前i是第几个素数</span></span><br><span class=\"line\">    cin &gt;&gt; m &gt;&gt; n;<span class=\"comment\">//m用来指出第m个素数，n同理</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; count &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">is_prime</span>(i) &amp;&amp; count &lt; m)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            count++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">is_prime</span>(i) &amp;&amp; count &gt;= m)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (k % <span class=\"number\">10</span> == <span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                cout &lt;&lt; i;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                cout &lt;&lt; <span class=\"string\">&#x27; &#x27;</span> &lt;&lt; i;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            count++;</span><br><span class=\"line\">            k++;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (k % <span class=\"number\">10</span> == <span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                cout &lt;&lt; endl;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>下面给出<a href=\"https://www.liuchuo.net/archives/530\">柳婼 の blog姐姐</a>的解法，只是她用到了类似数组的<a href=\"https://doc.bccnsoft.com/docs/cppreference/cppvector.html\">C++ Vectors</a>，占用了更大的空间</p>\n<h3 id=\"1014-福尔摩斯的约会-20-分\"><a href=\"#1014-福尔摩斯的约会-20-分\" class=\"headerlink\" title=\"1014 福尔摩斯的约会 (20 分)\"></a><a href=\"https://pintia.cn/problem-sets/994805260223102976/problems/994805308755394560\">1014 福尔摩斯的约会 (20 分)</a></h3><p>大侦探福尔摩斯接到一张奇怪的字条：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">我们约会吧！ </span><br><span class=\"line\"><span class=\"number\">3485</span>djDkxh4hhGE </span><br><span class=\"line\"><span class=\"number\">2984</span>akDfkkkkggEdsb </span><br><span class=\"line\">s&amp;hgsfdk </span><br><span class=\"line\">d&amp;Hyscvnm</span><br></pre></td></tr></table></figure>\n\n<p>大侦探很快就明白了，字条上奇怪的乱码实际上就是约会的时间<code>星期四 14:04</code>，因为前面两字符串中第 1 对相同的大写英文字母（大小写有区分）是第 4 个字母 <code>D</code>，代表星期四；第 2 对相同的字符是 <code>E</code> ，那是第 5 个英文字母，代表一天里的第 14 个钟头（于是一天的 0 点到 23 点由数字 0 到 9、以及大写字母 <code>A</code> 到 <code>N</code> 表示）；后面两字符串第 1 对相同的英文字母 <code>s</code> 出现在第 4 个位置（从 0 开始计数）上，代表第 4 分钟。现给定两对字符串，请帮助福尔摩斯解码得到约会的时间。</p>\n<p><strong>输入格式：</strong><br>输入在 4 行中分别给出 4 个非空、不包含空格、且长度不超过 60 的字符串。</p>\n<p><strong>输出格式：</strong><br>在一行中输出约会的时间，格式为 <code>DAY HH:MM</code>，其中 <code>DAY</code> 是某星期的 3 字符缩写，即 <code>MON</code> 表示星期一，<code>TUE</code> 表示星期二，<code>WED</code> 表示星期三，<code>THU</code> 表示星期四，<code>FRI</code> 表示星期五，<code>SAT</code> 表示星期六，<code>SUN</code> 表示星期日。题目输入保证每个测试存在唯一解。</p>\n<p><strong>输入样例：</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">3485</span>djDkxh4hhGE </span><br><span class=\"line\"><span class=\"number\">2984</span>akDfkkkkggEdsb </span><br><span class=\"line\">s&amp;hgsfdk </span><br><span class=\"line\">d&amp;Hyscvnm</span><br></pre></td></tr></table></figure>\n\n<p><strong>输出样例：</strong><br><code>THU 14:04</code></p>\n<p><strong>代码</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"paper","date":"2023-05-14T20:32:31.000Z","declare":true,"top":1,"_content":"## 目录\n1. [Attention Is All You Need](https://arxiv.org/pdf/1706.03762.pdf) : Transformer\n2. [End-to-End Object Detection with Transformers](https://arxiv.org/abs/2005.12872): DETR\n3. [AN IMAGE IS WORTH 16X16 WORDS: TRANSFORMERS FOR IMAGE RECOGNITION AT SCALE](https://arxiv.org/pdf/2010.11929.pdf): Vision Transformer\n4. [Incremental-DETR: Incremental Few-Shot Object Detection via Self-Supervised Learning](https://arxiv.org/abs/2205.04042)\n5. [Lightweight Transformer for Multi-Modal Object Detection (Student Abstract)](https://ojs.aaai.org/index.php/AAAI/article/view/26946)\n6. [Self-supervised Label Augmentation via Input Transformations](https://arxiv.org/abs/1910.05872)\n7. [Learn More for Food Recognition via Progressive Self-Distillation](https://arxiv.org/abs/2303.05073)\n8. [Solving Math Word Problems concerning Systems of Equations with GPT-3](https://ojs.aaai.org/index.php/AAAI/article/view/26896)\n9. [Curriculum Temperature for Knowledge Distillation](https://arxiv.org/abs/2211.16231)\n10. [SHARPNESS-AWARE MINIMIZATION FOR EFFICIENTLYIMPROVING GENERALIZATION](https://arxiv.org/abs/2010.01412)\n11. [Adaptive Hierarchy-Branch Fusion for Online Knowledge Distillation](https://ojs.aaai.org/index.php/AAAI/article/view/25937)\n12. [Peeling the Onion: Hierarchical Reduction of Data Redundancy for Efficient Vision Transformer Training](https://ojs.aaai.org/index.php/AAAI/article/view/26008)\n13. [Class Incremental Learning for Task-Oriented Dialogue System with Contrastive Distillation on Internal Representations (Student Abstract)](https://ojs.aaai.org/index.php/AAAI/article/view/27044)\n14. [Improving Training and Inference of Face Recognition Models via Random Temperature Scaling](https://ojs.aaai.org/index.php/AAAI/article/view/26760)\n15. [De-biased Teacher: Rethinking IoU Matching for Semi-supervised Object Detection](https://ojs.aaai.org/index.php/AAAI/article/view/25355)\n16. [Grouped Knowledge Distillation for Deep Face Recognition](https://ojs.aaai.org/index.php/AAAI/article/view/25472)<!--more-->\n\n-----------------------------------\n## 泛读文章\n\n\n3. [Can Bad Teaching Induce Forgetting? Unlearning in Deep Networks Using an Incompetent Teacher](https://ojs.aaai.org/index.php/AAAI/article/view/25879)\n\n本文角度清奇，利用知识蒸馏使得模型变弱，有意忘记某些知识。比如某些公司的授权到期，需要忘记相关知识，两种方法，其一是重新训练，其二就是本文（知识蒸馏）。\n\n-----------------------------------\n\n4. [SKDBERT: Compressing BERT via Stochastic Knowledge Distillation](https://ojs.aaai.org/index.php/AAAI/article/view/25902)\n\n- 正如题目所言，本文采用了一种随机知识蒸馏的方法，具体来说，每次迭代中从很多老师中挑选一个老师，然后进行知识蒸馏。（老师们具有不同的容量层级）在能力基本没有损失的情况下，模型的大小减少了 40%。\n\n![20231226095033](https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20231226095033.png)\n\n<table><tr><td bgcolor=#FF00FF>本文提到了很多知识蒸馏的方法，可以参考。</td></tr></table>\n\n--------------------------------------\n\n5. [Boosting Graph Neural Networks via Adaptive Knowledge Distillation](https://ojs.aaai.org/index.php/AAAI/article/view/25944)\n\n- 这篇论文是关于如何利用多个图神经网络（GNNs）的互补知识来提高一个学生GNN的性能。它提出了一个自适应的知识蒸馏（KD）框架，叫做BGNN，它可以顺序地将不同GNNs的知识转移到学生GNN中。**它还引入了一个自适应温度模块和一个权重提升模块**，来指导学生GNN有效地学习。这篇论文在节点分类和图分类任务上都取得了很好的效果，相比于原始的GNNs，分别提升了3.05%和6.35%。\n\n作者认为，对于同一个GNN，采用不同的聚合方式，会学到不同的知识，现在希望互补的掌握这些知识，怎么办呢？**采用知识蒸馏最好。**\n但这会有如下难点：\n1. 传统的 KD teacher 要比 student 大，而本次任务中，两者相同容量\n2. GNN 一般都比较浅\n\n作者的创新在于，提出了这种构想，并引入了 **自适应温度模块和权重提升模块**\n- 自适应温度模块，根据 teacher model 对于节点的 logits 分布，进行设计。**具体依据是针对不同节点的梯度值。**\n- 权重提升模块，哪个节点对应的分类错误率高，就给哪个节点的权重提升。\n\n![20240110124950](https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20240110124950.png)\n\n\n## 正文\n### 1. [Attention Is All You Need](https://arxiv.org/pdf/1706.03762.pdf) : Transformer\n#### 先修知识\n##### BLUE（Bilingual Evaluation Understudy）\n\n**机器翻译中的BLEU是一种用于评估机器翻译质量的指标，它通过计算机器翻译的句子和人工翻译的参考句子之间的n-gram匹配程度，来衡量机器翻译的精确度**。n-gram是指连续的n个词，例如，unigram是一个词，bigram是两个词，trigram是三个词，依此类推。**BLEU的取值范围是0到1，越接近1表示机器翻译越好，越接近0表示机器翻译越差**。BLEU的计算公式如下：\n\n$$\nBLEU = BP \\cdot exp(\\sum_{n=1}^N w_n \\log p_n)\n$$\n\n其中，BP是简短惩罚因子，用于惩罚过短的机器翻译，防止机器翻译只输出少数几个词就获得高分。BP的计算公式如下：\n\n$$\nBP = \\begin{cases}\n1, & \\text{if } c > r \\\\\ne^{(1-r/c)}, & \\text{if } c \\leq r\n\\end{cases}\n$$\n\n其中，c是机器翻译的总长度，r是参考翻译的最佳匹配长度，即与机器翻译最接近的参考翻译的长度。\n\n$p_n$是基于n-gram的改进精确度，用于计算机器翻译中的n-gram和参考翻译中的n-gram的匹配比例。$p_n$的计算公式如下：\n\n{% raw %}\n$$\np_n = \\frac{\\sum_{\\text{n-gram} \\in C} \\text{Count}_{\\text{clip} }(\\text{n-gram})}{\\sum_{\\text{n-gram} \\in C} \\text{Count}(\\text{n-gram})}\n$$\n{% endraw %}\n\n其中，C是机器翻译的句子，$\\text{Count}(\\text{n-gram})$是机器翻译中n-gram的出现次数，$\\text{Count}_{\\text{clip} }(\\text{n-gram})$是机器翻译中n-gram的截断计数，即机器翻译中n-gram的出现次数与参考翻译中n-gram的最大出现次数的较小值。\n\n$w_n$是n-gram的权重，一般取均匀权重，即$w_n = 1/N$，其中N是n-gram的最大阶数，通常取4。\n\n\n#### 简介\n本文发表于 2017 年，提出了一种新的网络结构 Transformer，该结构完全基于 attention 机制，不再使用 CNN 和 RNN，因此可以并行计算，加快训练速度。Transformer 在机器翻译任务上取得了很好的效果，其后被广泛应用于其他任务中。\n\n- 数据集：\n  - WMT 2014 English-German： 包含了约 4.5 万对英德语句子，其中训练集包含 3.7 万对句子，开发集包含 0.5 万对句子，测试集包含 0.3 万对句子。句子来源于新闻、学术论文、书籍和网站等。\n\n  - WMT 2014 English-French： 包含了约 35 万对英法语句子，其中训练集包含 29 万对句子，开发集包含 3 万对句子，测试集包含 3 万对句子。句子来源于新闻、学术论文、书籍和网站等。\n\n- [code](https://github.com/tensorflow/tensor2tensor)\n\n#### 摘要\n- 前人做的 sequence transduction 都是基于 RNN 或者 CNN\n- 都用到了 encoder-decoder 结构\n- 本文仍然基于 encoder-decoder 结构，但是不再使用 RNN 和 CNN，而是使用 attention 机制，这可以更好的并行。\n- 所用指标为 BLUE，效果最好。\n\n#### 引言\n- RNN 需要顺序的计算，无法并行。\n- 已经有人使用了 attention 机制，但大都是和 RNN 或者 CNN 结合使用的。\n- 在 8 个 P100 上训练了 12 个小时。\n\n#### 背景\n- 前人的方法还是没有解决长距离知识学习的问题，距离越长，所需要的计算越多。\n- 在 Transformer 中，我们会通过 embedding 来固定维度，这会带来不好的影响，但所幸有 multi-head attention 来抵消。\n- self-attention\n- 前人已证，基于 recurrent attention mechanism 的效果更好，但还没有人仅用 attention 机制来做。\n\n#### 模型架构\n- 沿用 Encoder-Decoder 结构，**注意这里的 Decoder 是自回归的。（就是当前输入依赖于前面的输出）**\n- *The Transformer - model architecture.*\n\n![20231123172121](https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20231123172121.png)\n\n- Encoder\n  - N = 6\n  - 两层 sub-layer，分别是 multi-head self-attention 和 position-wise fully connected feed-forward network\n  - 每层都有 residual connection，然后接 layer normalization\n  - 为满足 residual connection，embedding 和 encoder 的输出维度都是 d_model = 512\n\n- Decoder\n  - N = 6\n  - 三层 sub-layer，分别是 masked multi-head self-attention，multi-head self-attention 和 position-wise fully connected feed-forward network\n  - 每层都有 residual connection，然后接 layer normalization\n  - 对于编码器的输出执行多头注意力，K（键）和V（值）来自编码器的输出，而Q（查询）来自解码器的输出。这确保了解码器中的每个位置都可以访问编码器输出中的所有位置。\n  - masked multi-head self-attention 用于防止解码器中的位置访问后续位置。这是通过将查询掩码为负无穷来实现的。\n\n- Attention\n  - Scaled Dot-Product Attention\n\n![20231123180055](https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20231123180055.png)\n\n其中 queries 和 keys 的维度是 $d_k$，values 的维度是 $d_v$。\n事实上， 这里是可以并行的，**参见原文3.2.1**\n\n> 作者在这里指出，**点积 要比 加性 效率高，具体谁更好，参见原文。**\n\n> 除以 $\\sqrt{d_k}$ 是为了**消除方差的影响，参见原文第四页页脚**\n\n  - Multi-Head Attention\n\n![20231123180142](https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20231123180142.png)\n\n作者认为，直接将 queries，keys 和 values 映射到 $d_{model}$ 维度的空间中，可能会导致信息损失，因此，作者将 queries，keys 和 values 分别映射到 $d_k$，$d_k$ 和 $d_v$ 维度的空间中，然后进行 Scaled Dot-Product Attention，最后将多个结果拼接起来，再次映射到 $d_{model}$ 维度的空间中。\n\n具体而言，文中设定 h = 8，即将 queries，keys 和 values 分别映射到 $d_k$ = $d_v$ = $d_{model}$/h = 64 维度的空间中，然后进行 Scaled Dot-Product Attention，最后将多个结果拼接起来，再次映射到 $d_{model}$ 维度的空间中。**参见原文3.2.2**\n\n--------------------\n\n- Applications of Attention in our Model\n  - quiries 来自前一个 decoder layer，keys 和 values 来自 encoder 的输出\n  - encoder 包含 self-attention\n  - 通过 mask 来防止 decoder 中的位置访问后续位置，**具体而言，就是将 values 的后续位置 mask 为负无穷，这样过 softmax 之后，就会变成 0，即不会影响结果。**\n\n- Position-wise Feed-Forward Networks\n\n$$\\mathcal{FFN} (x) = \\mathbb{max} (0, x W_1 + b_1)W_2 + b_2$$\n\n其中输入和输出的维度都是 $d_{model}$ = 512，而中间层的维度是 $d_{ff}$ = 2048。\n\n- embedding\n作者将 input embedding 和 output embedding 共享参数，都是通过一个 **线性层再加上一个softmax** 来实现的。\n\n> 在 embedding 的时候，所有的权重乘以 $\\sqrt{d_{model} }$，**这样可以使得 embedding 的结果的方差为 1**，具体原因参考[这篇帖子](https://zhuanlan.zhihu.com/p/442509602)。\n\n![20231123195753](https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20231123195753.png)\n\n- Positional Encoding\n  - attention 机制没有考虑到序列中词的位置信息。因此，作者在 embedding 后加入了位置编码，用于表示词的位置信息。\n  - 维度为 $d_{model}$ = 512，位置编码的维度也是 512。**便于求和**\n\n{% raw %}\n$$\\begin{aligned}\n\\text{PE}_{(pos, 2i)} &= \\sin(pos / 10000^{2i/d_{model} }) \\\\\n\\text{PE}_{(pos, 2i+1)} &= \\cos(pos / 10000^{2i/d_{model} })\n\\end{aligned}$$\n{% endraw %}\n\n其中，pos 是词在句子中的位置，i 是位置编码的维度。\n\n#### Why Self-Attention?\n- 可并行\n- 距离远的词也可以相互影响\n- **作者还提出了 局部注意力**\n\n#### Training\n\n#### Results\n其中大模型用 8 个 P100 GPU 训练了 3.5 天\n\n![20231123222009](https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20231123222009.png)\n\n#### Conclusion\n- 本文提出了一种新的网络结构 Transformer，该结构完全基于 attention 机制，不再使用 CNN 和 RNN，因此可以并行计算，加快训练速度。\n- Transformer 在机器翻译任务上取得了很好的效果，其后被广泛应用于其他任务中。\n- 可以考虑 局部注意力\n- 可以试试在 图像或音频 上应用 Transformer\n\n### 2. [End-to-End Object Detection with Transformers](https://arxiv.org/abs/2005.12872): DETR\n#### 先修知识\n1. [Hungarian algorithm](https://en.wikipedia.org/wiki/Hungarian_algorithm) : 匈牙利算法，用于解决指派问题\n#### 摘要\n- 将目标检测视为 set prediction 问题，使用 Transformer 来解决。去除了 NMS、anchor、poposals 等。**直接输出目标的位置和类别，真正的实现了端到端。**\n- 性能对标 Faster R-CNN，但速度更快。\n- 数据集：COCO\n- [code](https://github.com/facebookresearch/detr)\n\n#### 引言\n- 现在都不是端对端，都是先生成一些 proposals，然后再分类，最后再回归。**这样的结果受限于中间的这些操作。**\n- 虽然用到了 Transformer，**但是却是并行出结果，不需要自回归。**\n\n![20231126215613](https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20231126215613.png)\n\n- 用到了 bipartite matching loss\n- 在大物体上效果好，小物体上效果稍差\n- 消融实验做的很好\n- 很容易扩展到全景分割\n\n#### 相关工作\n- 之前都是需要一些知识给模型，也就是先验知识，比如 anchor，NMS，proposals 等。\n- 也有人通过 bipartite matching 来解决目标检测问题，但是是基于 RNN 的。\n\n#### 模型架构\n\n![20231126230443](https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20231126230443.png)\n\n![20231127012221](https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20231127012221.png)\n\n- object queries 是一个固定的向量，用于表示目标的个数，这里是 100 个（也就是 100 个框，根据数据集设定就好）。\n- **Matching cost 同时考虑了 class 和 box 的信息**\n- 仅对类别为 **非空** 的进行计算损失。\n- 类别预测的损失，去除了 log，详见原文 3.1\n- 边界框预测的损失，详见原文 3.1，使用了广义 IoU\n\n----------------\n**loss 的计算分为如下几个部分：**\n\n**首先通过 $\\mathcal{L}_{match}$ 一对一的找到框，之后算损失：box loss + class loss**\n\n{% raw %}\n$$\n\\hat{\\sigma} = \\text{arg} \\quad \\text{min}_{\\sigma \\in \\mathcal{\\sigma}_N} \\sum_{i=1}^N \\mathcal{L}_{\\text{match} }(y_i, \\hat{y}_{\\sigma(i)})\n$$\n{% endraw %}\n\n- $y_i = (c_i, b_i)$ 是 ground truth\n- $c_i$ 是 class label，可以是 $\\emptyset$\n- $b_i$ 是 bounding box，(center x, center y, height, and width relative to the image size).\n- $\\hat{y}_i$ 是预测的结果，可以 padded with $\\emptyset$ (no object) when N > the number of objects.\n- $\\hat{c_i}$ 是预测的类别\n- $\\hat{b_i}$ 是预测的 bounding box\n- $\\mathcal{\\sigma(i)}$ is an index within a particular permutation of N elements.\n\n\n{% raw %}\n$$\n\\mathcal{L}_{\\text{match} }(y_i, \\hat{y}_{\\sigma(i)}) = - \\mathbb{1}_{\\{c_i \\neq \\emptyset\\} } \\hat{p}_{\\sigma(i)}(c_i) + \\mathbb{1}_{\\{c_i = \\emptyset\\} } \\mathcal{L}_{\\text{box} }(b_i, \\hat{b}_{\\sigma(i)})\n$$\n\n- $\\mathbb{1}_{\\{c_i \\neq \\emptyset\\} }$ 是指当 $c_i \\neq \\emptyset$ 时，取 1，否则取 0\n- $\\hat{p}_{\\sigma(i)}(c_i)$ 是指预测的类别为 $c_i$ 的概率\n- $\\mathcal{L}_{\\text{box} }(b_i, \\hat{b}_{\\sigma(i)})$ 是指预测的 bounding box 与 ground truth 的损失\n\n$$\n\\mathcal{L}_{\\text{box} }(b_i, \\hat{b}_{\\sigma(i)}) = \\lambda_{iou} \\mathcal{L}_{iou} (b_i, \\hat{b}_{\\sigma(i)}) + \\lambda_{L_1} ||b_i - \\hat{b}_{\\sigma(i)}||_1\n$$\n{% endraw %}\n\n> $L_1$ 损失较常用，但是对于小框和大框的损失处理有问题，因此作者加入了 $IoU$ 损失，详见原文\n\n{% raw %}\n$$\n\\mathcal{L}_{\\text{Hungarian} }(y, \\hat{y}) = \\sum_{i=1}^N [- \\log \\hat{p}_{\\hat \\sigma(i)}(c_i) + \\mathbb{1}_{\\{c_i \\neq \\emptyset\\} } \\mathcal{L}_{\\text{box} }(b_i, \\hat{b}_{\\hat \\sigma(i)})]\n$$\n{% endraw %}\n\n> **事实上，作者还加了超参系数做平衡。这里使用了对数，而上文没有，是因为二者考虑的问题不一样，一个是考虑数值相对平衡，一个是考虑梯度相对平衡。**\n\n--------------------\n\n- **positional encoding 也好，object queries 也好，都加入到了每一层 attention layer 的计算**，\n- 作者还加入了 Auxiliary decoding losses，也就是每一层的输出都会计算损失（但是所有的 FFN 共享参数），详见原文 3.2\n\n![paper 中 Fig.10](https://kikaben.com/detr-object-detection-with-transformers-2020/images/fig-10.png)\n\n#### 实验\n- 详细探究了每个组件的作用\n- 全景分割的实验\n\n#### 结论\n- 本文提出了一种新的目标检测方法 DETR，该方法使用 Transformer 来解决目标检测问题，去除了 NMS、anchor、poposals 等，直接输出目标的位置和类别，真正的实现了端到端。\n\n#### 附录代码\n```python\nimport torch\nfrom torch import nn\nfrom torchvision.models import resnet50\n\nclass DETR(nn.Module):\n\n    def __init__(self, num_classes, hidden_dim, nheads, num_encoder_layer, num_decoder_layers):\n        super().__init__()\n\n        # Backbone: ResNet-50 without the last two layers (fully connected and pooling)\n        self.backbone = nn.Sequential(*list(resnet50(pretrained=True).children())[:-2])\n\n        # 1x1 Convolution to reduce channels from 2048 to hidden_dim\n        self.conv = nn.Conv2d(2048, hidden_dim, 1)\n\n        # Transformer layers\n        self.transformer = nn.Transformer(hidden_dim, nheads, num_encoder_layer, num_decoder_layers)\n\n        # Output layers\n        self.linear_class = nn.Linear(hidden_dim, num_classes + 1)  # Class prediction (plus background)\n        self.linear_bbox = nn.Linear(hidden_dim, 4)  # Bounding box prediction (4 coordinates)\n        \n        # Learnable positional embeddings\n        self.query_pos = nn.Parameter(torch.rand(100, hidden_dim))  # Query positional embedding\n        self.row_embed = nn.Parameter(torch.rand(50, hidden_dim // 2))  # Row positional embedding\n        self.col_embed = nn.Parameter(torch.rand(50, hidden_dim // 2))  # Column positional embedding\n\n    def forward(self, inputs):\n        # Backbone feature extraction\n        x = self.backbone(inputs)\n        # 1x1 Convolution\n        h = self.conv(x)\n        \n        # Get height (H) and width (W) of the feature map\n        H, W = h.shape[-2:]\n        \n        # Positional embeddings\n        pos = torch.cat([\n            self.col_embed[:W].unsqueeze(0).repeat(H, 1, 1),\n            self.row_embed[:H].unsqueeze(1).repeat(1, W, 1)\n        ], dim=-1).flatten(0, 1).unsqueeze(1)\n        \n        # Flatten and permute for transformer input\n        h = self.transformer(pos + h.flatten(2).permute(2, 0, 1), self.query_pos.unsqueeze(1))\n        \n        # Output predictions\n        return self.linear_class(h), self.linear_bbox(h).sigmoid()\n\n# Instantiate the model\ndetr = DETR(num_classes=91, hidden_dim=256, nheads=8, num_encoder_layer=6, num_decoder_layers=6)\n\n# Set the model to evaluation mode\ndetr.eval()\n\n# Generate random input tensor\ninputs = torch.rand(1, 3, 800, 1200)\n\n# Forward pass through the model\nlogits, bboxes = detr(inputs)\n```\n\n### 3. [AN IMAGE IS WORTH 16X16 WORDS: TRANSFORMERS FOR IMAGE RECOGNITION AT SCALE](https://arxiv.org/pdf/2010.11929.pdf): Vision Transformer\n作者是 Google Research 的人\n- [code](https://github.com/google-research/vision_transformer)\n\n将一个不修改的 transformer 应用于图像分类，是有一定困难的。因为 transformer 的输入是一个序列，而图像是一个二维的矩阵，我们可以将图像转换为序列，但是这样会导致序列过长，计算量过大。\n\n因此，作者提出了一种新的 transformer，叫做 Vision Transformer（ViT），该 transformer 仍然是基于 attention 机制的，但是在输入的时候，作者将图像分为了一个个 patch，然后将每个 patch 作为一个 token，这样就可以将图像转换为序列，而且序列的长度不会太长。**这样的 transformer 也可以用于目标检测和语义分割。**\n\n**架构图如下：**\n\n![20231209141514](https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20231209141514.png)\n\n将图像分为了 $N$ 个 patch，每个 patch 的维度是 $P$，这样就可以将图像转换为一个序列，序列的长度是 $N$，维度是 $P$。需要单独再加一个 class token，用于表示图像的类别。\n\n### 4. [Incremental-DETR: Incremental Few-Shot Object Detection via Self-Supervised Learning](https://arxiv.org/abs/2205.04042)\n\n作者是新加坡国立大学和哈尔滨工业大学的学生\n\n#### 摘要\n- Incremental 旨在学习新类别的目标检测，而不会影响到已有类别的目标检测。\n- novel class 数据量少\n- 通过在 DETR 上进行 fine-tune 和 self-supervised learning 来实现。\n- 用到了 selective search algorithm\n- 用到了 knowledge distillation\n- [code](https://github.com/dongnana777/Incremental-DETR)\n\n#### 引言\n- 增量学习一直都是一个难题，很容易出现 catastrophic forgetting。\n- **前人通过同时训练 base class 和 novel class 来解决**，但是如果我们**没有 base class 的数据**，方法就会受限。\n- 前人在 Faster R-CNN 做过类似的事情，第一阶段在 base class 上训练，第二阶段冻结**类无关提取器和 RPN**，只对预测头进行 fine-tune。**作者深受启发。**\n- **作者解冻不同的DETR层进行微调，并根据经验确定投影层和分类头是特定于类的，DETR的CNN主干、变压器和回归头与类无关**\n- **假定在进行 incremental 的时候，base class 的数据是不可用的。**\n- 第一阶段：base model 预训练，之后进行 self-supervised fine-tune。第二阶段：在 novel class 上进行 incremental fine-tune。\n- 第一阶段用到了 slecetive search algorithm\n- **提出了 classification distillation loss 和 masked feature distillation loss**\n- dataset：COCO、PASCAL VOC\n\n#### 相关工作\n- Object Detection\n- Few-Shot Object Detection\n- Incrementa Few-Shot Object Detection\n\n#### 问题定义\n- $D_{novel}$ 用的时候 $D_{base}$ 不可用\n- **新类和旧类没有重叠**\n- **新类仅有少量样本**\n\n#### 方法\n##### Base Model Training\n\n![20231127021733](https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20231127021733.png)\n\n1. 在 stage 1 的第一部分，采用正常的 DETR 训练策略在 $D_{base}$ 上进行训练。\n2. 在 stage 1 的第二部分，进来一张图片，通过 selective search algorithm 生成一些 proposals，之后选择 top O 个 proposals，**要求这些 proposals 与 base class 的 ground truth bounding box 不重叠**。之后将这些 proposals 作为 pseudo ground truth，采用 DETR 的方式进行训练。也就是图中的 $b^`$，对应的类别是 $c^`$。\n\n- 找框：\n\n{% raw %}\n$$\n\\hat{\\sigma} = \\text{arg} \\quad \\text{min}_{\\sigma \\in \\mathcal{\\sigma}_N} \\sum_{i=1}^N \\mathcal{L}_{\\text{match} }(y_i, \\hat{y}_{\\sigma(i)})\n$$\n\n$$\n\\mathcal{L}_{\\text{match} }(y_i, \\hat{y}_{\\sigma(i)}) = - \\mathbb{1}_{\\{c_i \\neq \\emptyset\\} } \\hat{p}_{\\sigma(i)}(c_i) + \\mathbb{1}_{\\{c_i = \\emptyset\\} } \\mathcal{L}_{\\text{box} }(b_i, \\hat{b}_{\\sigma(i)})\n$$\n{% endraw %}\n\n\n- Hungarian loss：\n\n{% raw %}\n$$\nL_{hg}(y, \\hat{y}) = \\sum_{i=1}^N [- \\log \\hat{p}_{\\hat \\sigma(i)}(c_i) + \\mathbb{1}_{\\{c_i \\neq \\emptyset\\} } \\mathcal{L}_{\\text{box} }(b_i, \\hat{b}_{\\hat \\sigma(i)})]\n$$\n{% endraw %}\n\n- 在 stage 1 中的第二部分，损失为：\n\n{% raw %}\n$$\n\\mathcal{L}^{base}_{total} = \\mathcal{L}_{hg}(y, \\hat{y}) + \\lambda^` \\mathcal{L}_{hg}(y^`, \\hat{y}^`)\n$$\n{% endraw %}\n\n##### Incremental Few-Shot Fine-Tuning\n\n![20231127192105](https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20231127192105.png)\n\n- 仅白色部分进行 fine-tune\n- 直接 fine-tune，会导致 catastrophic forgetting，因此作者提出了 knowledge distillation。直接 knowledge distillation 会和 novel class 的学习产生冲突，所以这里引入了 $\\mathcal{mask}^{novel}$，（如果是 novel class ground truth boxes，则为 1，否则为 0）。具体而言：\n\n{% raw %}\n$$\n\\mathcal{L}^{kd}_{feat} = \\frac{1}{2 N^{novel}} \\sum_{i=1}^{w} \\sum_{j=1}^{h} \\sum_{k=1}^{c} (1 - \\mathcal{mask}^{novel}_{ij}) ||f_{ijk}^{novel} - f_{ijk}^{base}||^2\n$$\n\n其中，$N^{novel} = \\sum_{i=1}^{w} \\sum_{j=1}^{h} (1 - \\mathcal{mask}^{novel}_{ij})$，$f^{base}$ 和 $f^{novel}$ 分别是 base model 和 novel model 的 feature map。$w$，$h$，$c$ 分别是 feature map 的宽、高和通道数。\n{% endraw %}\n\n> 直观理解，对于每一个像素点，对于它的所有通道，去看它是否是 novel class bounding box 的一部分，如果是，则不需要进行 knowledge distillation，否则，则需要进行 knowledge distillation。\n\n同样，对于分类器头，直接做 knowledge distillation 也不合适，为解决这个问题，如下：\n\n{% raw %}\n$$\n\\mathcal{L}^{kd}_{cls} = \\mathcal{L}_{kl\\_div}(\\log(q^{novel}), q^{base})\n$$\n{% endraw %}\n\n> 进来一张 novel image，通过 base model 进行预测，如果 class probability 大于 0.5，且 bounding box 与 novel class ground truth boxes 不重叠，则认为需要蒸馏，算 KL 散度。\n\n- stage 2 的损失为：\n\n{% raw %}\n$$\n\\mathcal{L}^{novel}_{total} = \\mathcal{L}_{hg}(y, \\hat{y}) + \\lambda_{feat} \\mathcal{L}^{kd}_{feat} + \\lambda_{cls} \\mathcal{L}^{kd}_{cls}\n$$\n{% endraw %}\n\n#### 实验\n#### 结论\n- 通过蒸馏学习，做到了在学习新知识的同时不遗忘旧知识。\n- 提前通过 self-supervised 生成一些 新类标签，进行fine-tune，使得模型更容易接受新知识。\n- 断定模型中的部分可以分为 class-specific 和 class-agnostic 两部分。\n\n### 5. [Lightweight Transformer for Multi-Modal Object Detection (Student Abstract)](https://ojs.aaai.org/index.php/AAAI/article/view/26946)\n\n![20231210112104](https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20231210112104.png)\n\n模型训练时，可以从多个角度进行训练，角度越多越准确，但却更慢。\n\n比如**自动驾驶**，仅有一个传感器肯定没有多个传感器的结果准确，但是多个传感器的结果又太慢。\n\n那么能不能又快又准呢？那就要从模态融合入手。**作者提出了一种新的融合操作符，叫做 Poolformer-based fusion operator。**\n\n> 本质上来讲，本文更换了权重分配的方式，用 pooling 来进行替代，这样可以减少参数量，提高速度，但效果却不差。文章没有提供代码，但是作者[回复邮件推荐了一份代码](https://github.com/autonomousvision/transfuser)\n\n\n### 6. [Self-supervised Label Augmentation via Input Transformations](https://arxiv.org/abs/1910.05872)\n\n一言以蔽之，通过**数据增强**的方式来增强原始标签，**不仅仅对于无监督、半监督学习有效，对于全监督学习也能带来效果的提升。将共享底层特征改成了 unified task**\n\n**共享底层特征**：先前的工作通常为原始任务和自监督任务维护两个独立的分类器（但共享公共特征表示），并同时优化它们的目标。**也就是，不论你图像怎么变（增强），特征表示不能变**。\n\n- [code](https://github.com/hankook/SLA)\n\n> **有效地利用基于 transformation 的自我监督进行全监督的分类任务。对于 few-shot and imbalanced classification scenarios 也有效果**\n\n***Difference with previous approaches:***\n\n![20231210143836](https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20231210143836.png)\n\n- 单纯的 Data Augmentation，只是对输入进行了变换，但却强行使得标签不变的一种方案，这种方案有一定弊端，比如：6 和 9，详见原文\n\n{% raw %}\n$$\n\\mathcal{L}_{DA}(x,y;\\theta,\\mu) = \\frac{1}{M} \\sum_{j=1}^M \\mathcal{L}_{CE}(\\theta(\\hat{z_j}; \\mu), y)\n$$\n{% endraw %}\n\n- Multi-task Learning 同时学习两个任务，同时优化它们。**但是，当数据集是全标签时，这种方法通常不会带来效果的提升。**\n\n{% raw %}\n$$\n\\mathcal{L}_{MT}(x,y;\\theta,u,v) = \\frac{1}{M} \\sum_{j=1}^{M} \\mathcal{L}_{CE}(\\theta(\\hat{z_j};\\mu), y) + \\mathcal{L}_{CE}(\\theta(\\hat{z_j};v),j)\n$$\n{% endraw %}\n\n- 本文所提出的SLA(Self-supervised Label Augmentation)方法直接学习**联合概率分布**。效果最好，也最通用。\n\n{% raw %}\n$$\n\\mathcal{L}_{SLA}(x,y;\\theta,\\omega) = \\frac{1}{M} \\sum_{j=1}^{M} \\mathcal{L}_{CE}(p(\\hat{z_j};\\omega), (y,j))\n$$\n{% endraw %}\n\n> 此处损失详见原文。\n\n**对比效果如下：**\n\n![20231210144438](https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20231210144438.png)\n\n-----------------------\n\n> SLA 仅增加了标签的数量，对于模型的参数基本上没有影响。\n> SLA 可以弱化为 Data Augmentation，也可以弱化为 Multi-task Learning。但是 Multi-task Learning 约束太强（强制 label 不变），难以优化。\n\n------------------------------\n\n![20231210173513](https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20231210173513.png)\n\n由于预测的结果变为了以前的 M 倍，所以先做 Aggregation，也就是把对应的 M 个条件概率加起来，然后再进行 softmax。之后和原来的标签进行交叉熵计算蒸馏损失。\n\n{% raw %}\n$$\n\\mathcal{L}_{SLA}(x,y;\\theta,\\omega,\\mu) = \\mathcal{L}_{SLA}(x,y; \\theta, \\omega) + \\mathcal{D}_{KL}(P_{aggregated}(·|x)|| \\sigma(z;\\mu)) + \\beta \\mathcal{L}_{CE}(\\sigma(z;\\mu), y)\n$$\n{% endraw %}\n\n### 7. [Learn More for Food Recognition via Progressive Self-Distillation](https://arxiv.org/abs/2303.05073)\n\n- 面临的问题：\n\n食品识别一直是一个比较困难的任务，因为这是一个比较细粒度的任务。例如对于鸟的识别，找到鸟头、爪子就好了，但是食品可能是各种水果、蔬菜堆叠在一起构成沙拉，这比较困难。传统的方法是先用弱监督的方式做很多位置的定位，之后聚合并抽取特征，最后分类。**但这样一来，性能就会被位置定位所限制。我们很难把每一部分区域都学好。**\n\n- 解决方案：\n\n作者提出了 PSD（Progressive Self-Distillation），用于去挖掘图像中更有用的区域。teacher model 和 student model 共享相同的 embeding。最后 inference 阶段，仅保留 teacher model。仍然属于 self-supervised 的范畴。\n\n**embedding 可以用 CNN，也可以用 transformer(e.g.,Swin Transformer)。**\n\n- dataset：ETHZ Food-101、Vireo Food-172、ISIA Food-500\n- code: 无\n\n![20231210235852](https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20231210235852.png)\n\nstudent model 和 teacher model 共享同一个 Embeding Network，但是有不同的分类器。输入**原始图片**给 teacher model，经过一个 ViT 得到一个 T x D 的 tokens，reshape 成 H x W x D 的 feature map，之后经过全局平均池化，得到一个 D 维的向量，之后经过一个全连接层，得到一个 C 维的向量，之后送入 Class Response Module。根据 Threshold，得到一个 mask，之后将 mask 与原始图片相乘，得到一个新的图片，送入 student model。如法炮制，进得到了很多的 student model。蒸馏阶段，使用 teacher model 的输出作为 ground truth，student model 的输出作为预测值，计算 KL 散度。\n\n损失如下：\n\n{% raw %}\n$$\n\\mathcal{L} = \\mathcal{L}_{g}(x,y) + \\sum_{i=1}^{m}(\\omega_l \\mathcal{L}_{l}(\\hat{x}_{i-1}, y) + \\omega_d \\mathcal{L}_{d}(x, \\hat{x}_{i}))\n$$\n\n其中 $\\mathcal{L}_{g}(x,y)$ 是原始的分类损失，$\\mathcal{L}_{l}$ 是 locating loss，$\\mathcal{L}_{d}$ 是 distillation loss。\n\n$$\n\\mathcal{L}_{g}(x,y) = \\mathcal{L}_{CE}(h(f(x;\\theta); \\phi_t), y)\n$$\n\n$$\nL_{l}(x,y) = \\mathcal{L}_{ce}(GAP(f(x;\\theta); \\Theta), y)\n$$\n\n$$\n\\mathcal{L}_d(x, \\hat{x}) = \\mathcal{D}_{KL}(h(f(x;\\theta); \\phi_t), h(f(\\hat{x};\\theta); \\phi_s))\n$$\n\n{% endraw %}\n\n所谓渐进，是依靠$\\omega_l$ 和 $\\omega_d$ 来控制的。\n\n{% raw %}\n$$\n\\omega_d = \n\\begin{cases}\n    \\alpha \\cdot \\exp(-5(1 - \\frac{e}{\\beta})^2), & e < \\beta \\\\\n    \\alpha, & e \\geq \\beta\n\\end{cases}\n$$\n{% endraw %}\n\n> 垃圾文章，没有代码，作者邮件不回。$L_l$也没有讲清楚。Class Response Module 出来之后怎么进行 Threshold？怎么得到 mask？这些都没有讲清楚。**或许需要一些食物识别的先验知识。**\n\n### 8. [Solving Math Word Problems concerning Systems of Equations with GPT-3](https://ojs.aaai.org/index.php/AAAI/article/view/26896)\n\n#### 摘要\n本文解决了一个专业领域的问题，就是**数学方程式的提取和求解问题**。作者将其归到了 NLP 的范畴，使用了 GPT-3 来解决这个问题。\n问题分三步：\n1. 对问题进行 **分类**，是几元方程式。这个问题目前 GPT-3 能够达到 80%-100% 的准确率。\n2. 提取方程式，这个问题的精度随着给定模型的例子数量的增加而增加。one-shot 的精度为 31%，3-shot 的精度为 69%。之后再进一步进行 fine-tune，精度可以达到 80%。\n3. 生成新的问题，GPT-3 的精度在 33%-93%，具体取决于问题类型。\n\n#### 引言\n本文聚焦的问题是 **二元一次线性方程组，也就是两个变量，两个方程式**。如上所述，解决问题如下：\n- Q1: How good  is GPT-3 at classifying problems into different themes?\n- Q2: How good is GPT-3 at extracting a system of linear equations directly from problem descriptions?\n- Q3: How good is GPT-3 at creatively generating valid problems?\n\n- [dataset](https://github.com/anrgusc/MWP2L)\n\n**如下为 Q1**. Table1: Instance problem from each category\n| 类别 | 问题 |\n| --- | --- |\n| **Sum and Difference (S&D)** | *The sum of half of a number, x, and another number, y, is -28. The difference of x and y is 7. Find x and y.* |\n| **Item and Property (I&P)** | *Three apples and four bananas cost $4.85. Three apples and ten bananas cost $8.75. Find the cost of an apple.* |\n| **Perimeter of Rectangle (PoR)** | *The length of a rectangle is 3 cm less than double the width, and the perimeter is 53 cm. Find its dimensions.* |\n| **Motion (MO)** | *Joey and Natasha start from the same point and walk in opposite directions. Joey walks 4 km/h faster than Natasha. After 2 hours, they are 31 kilometers apart. How fast did each walk?* |\n| **Mixture (MI)** | *Twelve gallons of a 31% acid mixture is obtained by mixing a 23% solution with a 48% solution. How much of each must be used?* |\n\n**生成表达式的时候，前缀、中缀和后缀的进度不同。**\n\n已经有人通过 Transformer 来解决这个问题，但是作者说泛化性不好。详见文章的 *Prior Applications of Transformers to MWP*。**还有人通过 BERT 来解决这个问题。**\n\n目前关注的问题是以下五个，作者仅考虑了其中的三个：\n- identify the type of problem\n- output step-by-step instructions\n- extract the correct system of linear equations\n- successfully solve the equations\n- generate similar problems for users to practice.\n\nTable 2: Extraction task example.\n\n| Problem | How many gallons of a 20% antifreeze solution and a 10% antifreeze solution must be mixed to obtain 40 gallons of a 16% antifreeze solution? |\n| :---: | :---: |\n| Valid Response | 0.2*x+0.1*y=0.16*(x+y);x+y=40 |\n| Invalid Response | 20x+10y=16*40 (only one equation is derived) |\n| Invalid Response | 20x+10(40-x)=16(40) (failed to use required variable y) |\n| Invalid Response | 2*x+1*y=40;0.2*x+0.1*y=0.16 (incorrect interpretation) |\n\nTable 3: Problem generation.\n| problem given in prompt | The larger of two numbers is 10 more than twice the smaller. If the smaller is subtracted from the larger, the result is 26. Find the numbers. |\n| :---: | :---: |\n| within-topic generation outcome | The larger of two numbers is 15 more than twice the smaller. If the smaller is subtracted from the larger, the result is 33. Find the numbers. |\n| cross-topic generation outcome | The larger of two angles is 10 more than twice the smaller. If the smaller is subtracted from the larger, the result is 26. Find the angles. |\n\n-----------------------------------\n### 9. [Curriculum Temperature for Knowledge Distillation](https://arxiv.org/abs/2211.16231)\n- [code](https://github.com/zhengli97/CTKD?tab=readme-ov-file)\n- [Project Page](https://zhengli97.github.io/CTKD/)\n- [中文解读](https://zhengli97.github.io/CTKD/chinese_interpertation.html)\n\n- 引言中指出：MKD (Liu et al. 2022) 比较重视 **数据增强**。\n- 相关工作中指出：\n  - *This training strategy has been widely applied in various domains, such as computer vision (Wu et al. 2018; Sinha, Garg, and Larochelle 2020) and natural language processing (Platanios et al. 2019; Tay et al. 2019).*\n  - Curriculum Dropout (Morerio et al. 2017)\n\n---------------------------------\n\n### 10. [Sharpness-Aware Minimization for Efficiently Improving Generalization](https://arxiv.org/abs/2010.01412)\n\n- [code](https://github.com/google-research/sam)\n- [Third-party library](https://github.com/davda54/sam)\n\ncifar100 的结果：Percentage correct 96.08，最强结果。\n\n作者认为：现在模型的参数都特别多，单单靠 loss function 去做优化，不足以支撑起整个任务，这会导致太多不同的解。因此，作者提出了 SAM（Sharpness-Aware Minimization），通过优化 sharpness 来提高泛化性能，**也就是优化曲率**。\n\n一言以蔽之：不仅仅要优化模型的 loss，还要优化 loss 最小值附近的 平滑度。**可以将其视为一种学习算法，经测试，相当多的模型和任务，套用上这个算法，效果都会有所提升。**\n\n![20231218094309](https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20231218094309.png)\n\n**Theorem (stated informally) 1.** For any $\\rho$ > 0, with high probability over training set $S$ generated from distribution $\\mathcal{D}$,\n\n{% raw %}\n$$\n\\mathcal{D}(\\omega) \\leq \\text{max}_{|| \\epsilon ||_2 \\leq \\rho} \\mathcal{L}_{S}(\\omega + \\epsilon) + \\mathcal{h}(|| \\omega ||_2^2 / \\rho^2)\n$$\n{% endraw %}\n\nwhere $h : R_+ → R_+$ is a strictly increasing function (under some technical conditions on $L_D (w)$).\n\n事实上，上述公式的右侧可以写为：\n\n{% raw %}\n$$\n[\\text{max}_{|| \\epsilon ||_2 \\leq \\rho} \\mathcal{L}_{S}(\\omega + \\epsilon) - \\mathcal{L}_{S}(\\omega)] + \\mathcal{L}_{S}(\\omega) + \\mathcal{h}(|| \\omega ||_2^2 / \\rho^2)\n$$\n{% endraw %}\n\n其中最后一项可以看成是一个正则项，可以用$\\lambda || \\omega ||_2^2$来代替。[]内的代表锐度，也就是 sharpness。中间那一项是 loss。\n\n故而，SAM 的损失函数为：\n\n{% raw %}\n$$\n\\text{min}_{\\omega} \\mathcal{L}_{S}^{SAM}(\\omega) + \\lambda || \\omega ||_2^2 \\quad\n\n\\text{where} \\quad \\mathcal{L}_{S}^{SAM}(\\omega) \\stackrel{\\triangle}{=} \\text{max}_{|| \\epsilon ||_p \\leq \\rho} \\mathcal{L}_{S}(\\omega + \\epsilon)\n$$\n{% endraw %}\n\n就是一个最大最小化问题，详细推导见原文。\n\n> Because SAM's performance is amplified by not syncing the perturbations, data parallelism is highly recommended to leverage SAM's full potential (see Section 4 for more details).就是数据并行，效果更好。\n\n### 11. [Adaptive Hierarchy-Branch Fusion for Online Knowledge Distillation](https://ojs.aaai.org/index.php/AAAI/article/view/25937)\n\n\n### 13. [Class Incremental Learning for Task-Oriented Dialogue System with Contrastive Distillation on Internal Representations (Student Abstract)](https://ojs.aaai.org/index.php/AAAI/article/view/27044)\n\n本文通过对比、蒸馏等技术来实现增量学习，用于对话系统。\n\n通过以下几种方式来保证增量学习的效果：\n- 仅更新部分相关新任务的参数\n- **对比学习：新任务中的数据作为 anchors，原数据作为负样本。上一阶段模型和新阶段模型对于新任务数据的输出作为正样本对。简而言之，学习新任务的时候，不仅仅学习新任务的知识，还要学习新任务和原任务的区别。**\n- 复杂的损失函数：包括对比损失、交叉熵损失、蒸馏损失等。**相互协调，妄想达到最好的效果。**\n- 动量更新：**保证模型的稳定性。**\n\n> 作者并未提供代码，也无邮件回复。一言以蔽之，将各种东西混合在一起构成一套灌水垃圾。\n\n----------------------------------------\n\n### 14. [Improving Training and Inference of Face Recognition Models via Random Temperature Scaling](https://ojs.aaai.org/index.php/AAAI/article/view/26760)\n\n本文针对人脸识别，介绍了**不确定**的问题。\n\n模型对于无效的输入，仍然会以高置信度做出预测，这是不合理的。对于人脸识别，同样的人但是不同的照片，应该被映射到同一个 latent space，但这很难做到。\n\n作者提出了 RTS（Random Temperature Scaling），将温度与不确定性相关联，通过随机温度缩放来影响模型的不确定性。\n\n上述皆为论文中内容，**实际上，如文中 Eqn.4 和 Eqn.5 以及 Fig.2 所示，作者提出了一种新的损失函数（类似softmax）,并引入了 Gumbel 分布**。详见原文。\n\n> 无代码，垃圾文章。\n\n------------------------------------\n\n### 15. [De-biased Teacher: Rethinking IoU Matching for Semi-supervised Object Detection](https://ojs.aaai.org/index.php/AAAI/article/view/25355)\n\n[假code](https://github.com/wkfdb/De-biased-Teracher)\n\n![20240311001350](https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20240311001350.png)\n\n- 从 $D_{labeled}$ 和 $D_{unlabeled}$ 中采样 input。\n  - labeled images 直接通过 weakly augmented 来训练 student model。\n  - unlabeled images，Teacher 通过 weakly augmented 来生成 pseudo labels，之后通过 strong augmented 来训练 student model。**作者称之为 一致性正则化。**\n\n- student model 通过 loss 进行训练更新，teacher model 通过自身和 student model 进行动量更新，详见 Eqn.1。\n\n也就是说，本文三个贡献：\n1. 一致性正则，和蒸馏的区别在于，teacher 和 student 都动。\n2. teacher 通过 student 来进行动量更新。\n3. 截断 softmax 的尾部，阈值为 0.05。（推测没有使用温度系数T）\n\n![20231225202053](https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20231225202053.png)\n\n> 什么时候阶段？如何阶段？TODO\n\n------------------------\n\n### 16. [Grouped Knowledge Distillation for Deep Face Recognition](https://ojs.aaai.org/index.php/AAAI/article/view/25472)\n\n无 code. **已发邮件，未回。**\n\n$$L = \\mathcal{L}_{cls} + \\mathcal{L}_{kd}$$\n\n其中 $\\mathcal{L}_{cls}$ 是一个专门针对于人脸识别的损失函数。\n\n\n一言以蔽之，作者将 logit 按照阈值进行分组。分别是 Primary-KD, Secondary-KD, and Binary-KD。**Primary-KD 用于学习主要的知识，Secondary-KD 用于学习次要的知识，Binary-KD 用于确保教师和学生之间的知识分布的一致性。**作者表示，Primary-KD 和 Binary-KD 是重要的，Secondary-KD 是累赘。\n\n![20231225210830](https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20231225210830.png)\n\n> Binary-KD 参见原文公式 6，实际上就是一个二分类问题，用于确定分类是 Primary-KD 还是 Secondary-KD。\n\n**注意 Fig.2 中的文字描述，作者指出根据 student 的输出进行 rank，之后开始累加，直到累加的值达到了 阈值，这部分就是 Primary-KD。teacher也排序。**此处有两个问题：\n\n1. 这样排序，岂不是会出现类别不匹配的问题？\n2. 根据 student 进行 rank 有什么用？不是应该根据 teacher？\n\n**作者还在 Method 文字的上面指出 feature distillation 优于 logit distillation。不敢苟同。**\n\n作者测试最好的阈值为 0.93，但作者的理论是错误的，所以也并无太多参考价值。\n\n**作者 Equ.3 的绝对值加的很好，值得借鉴，根据 teacher 进行排序的话，应该确实是可行的，可以做到自适应调整 Primary-KD 和 Secondary-KD 的比例，但要想做到类型匹配，需要存原来的索引，这样会造成计算成本的增加。**\n\n**作者最后做了一个 masked face recognition 的实验，这手操作值得学习。**\n\n<table><tr><td bgcolor=#FF00FF>作者已回邮件，rank 时对 index 重新组织，并且代码中是根据 teacher 进行 rank. 但匪夷所思的是，作者说最后通过 student 进行 rank 反而会取得更好的结果。</td></tr></table>\n","source":"_posts/paper.md","raw":"---\ntitle: paper\ndate: 2023-05-14 20:32:31\ntags:\n  - 科研\ndeclare: true\ntop : 1\n---\n## 目录\n1. [Attention Is All You Need](https://arxiv.org/pdf/1706.03762.pdf) : Transformer\n2. [End-to-End Object Detection with Transformers](https://arxiv.org/abs/2005.12872): DETR\n3. [AN IMAGE IS WORTH 16X16 WORDS: TRANSFORMERS FOR IMAGE RECOGNITION AT SCALE](https://arxiv.org/pdf/2010.11929.pdf): Vision Transformer\n4. [Incremental-DETR: Incremental Few-Shot Object Detection via Self-Supervised Learning](https://arxiv.org/abs/2205.04042)\n5. [Lightweight Transformer for Multi-Modal Object Detection (Student Abstract)](https://ojs.aaai.org/index.php/AAAI/article/view/26946)\n6. [Self-supervised Label Augmentation via Input Transformations](https://arxiv.org/abs/1910.05872)\n7. [Learn More for Food Recognition via Progressive Self-Distillation](https://arxiv.org/abs/2303.05073)\n8. [Solving Math Word Problems concerning Systems of Equations with GPT-3](https://ojs.aaai.org/index.php/AAAI/article/view/26896)\n9. [Curriculum Temperature for Knowledge Distillation](https://arxiv.org/abs/2211.16231)\n10. [SHARPNESS-AWARE MINIMIZATION FOR EFFICIENTLYIMPROVING GENERALIZATION](https://arxiv.org/abs/2010.01412)\n11. [Adaptive Hierarchy-Branch Fusion for Online Knowledge Distillation](https://ojs.aaai.org/index.php/AAAI/article/view/25937)\n12. [Peeling the Onion: Hierarchical Reduction of Data Redundancy for Efficient Vision Transformer Training](https://ojs.aaai.org/index.php/AAAI/article/view/26008)\n13. [Class Incremental Learning for Task-Oriented Dialogue System with Contrastive Distillation on Internal Representations (Student Abstract)](https://ojs.aaai.org/index.php/AAAI/article/view/27044)\n14. [Improving Training and Inference of Face Recognition Models via Random Temperature Scaling](https://ojs.aaai.org/index.php/AAAI/article/view/26760)\n15. [De-biased Teacher: Rethinking IoU Matching for Semi-supervised Object Detection](https://ojs.aaai.org/index.php/AAAI/article/view/25355)\n16. [Grouped Knowledge Distillation for Deep Face Recognition](https://ojs.aaai.org/index.php/AAAI/article/view/25472)<!--more-->\n\n-----------------------------------\n## 泛读文章\n\n\n3. [Can Bad Teaching Induce Forgetting? Unlearning in Deep Networks Using an Incompetent Teacher](https://ojs.aaai.org/index.php/AAAI/article/view/25879)\n\n本文角度清奇，利用知识蒸馏使得模型变弱，有意忘记某些知识。比如某些公司的授权到期，需要忘记相关知识，两种方法，其一是重新训练，其二就是本文（知识蒸馏）。\n\n-----------------------------------\n\n4. [SKDBERT: Compressing BERT via Stochastic Knowledge Distillation](https://ojs.aaai.org/index.php/AAAI/article/view/25902)\n\n- 正如题目所言，本文采用了一种随机知识蒸馏的方法，具体来说，每次迭代中从很多老师中挑选一个老师，然后进行知识蒸馏。（老师们具有不同的容量层级）在能力基本没有损失的情况下，模型的大小减少了 40%。\n\n![20231226095033](https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20231226095033.png)\n\n<table><tr><td bgcolor=#FF00FF>本文提到了很多知识蒸馏的方法，可以参考。</td></tr></table>\n\n--------------------------------------\n\n5. [Boosting Graph Neural Networks via Adaptive Knowledge Distillation](https://ojs.aaai.org/index.php/AAAI/article/view/25944)\n\n- 这篇论文是关于如何利用多个图神经网络（GNNs）的互补知识来提高一个学生GNN的性能。它提出了一个自适应的知识蒸馏（KD）框架，叫做BGNN，它可以顺序地将不同GNNs的知识转移到学生GNN中。**它还引入了一个自适应温度模块和一个权重提升模块**，来指导学生GNN有效地学习。这篇论文在节点分类和图分类任务上都取得了很好的效果，相比于原始的GNNs，分别提升了3.05%和6.35%。\n\n作者认为，对于同一个GNN，采用不同的聚合方式，会学到不同的知识，现在希望互补的掌握这些知识，怎么办呢？**采用知识蒸馏最好。**\n但这会有如下难点：\n1. 传统的 KD teacher 要比 student 大，而本次任务中，两者相同容量\n2. GNN 一般都比较浅\n\n作者的创新在于，提出了这种构想，并引入了 **自适应温度模块和权重提升模块**\n- 自适应温度模块，根据 teacher model 对于节点的 logits 分布，进行设计。**具体依据是针对不同节点的梯度值。**\n- 权重提升模块，哪个节点对应的分类错误率高，就给哪个节点的权重提升。\n\n![20240110124950](https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20240110124950.png)\n\n\n## 正文\n### 1. [Attention Is All You Need](https://arxiv.org/pdf/1706.03762.pdf) : Transformer\n#### 先修知识\n##### BLUE（Bilingual Evaluation Understudy）\n\n**机器翻译中的BLEU是一种用于评估机器翻译质量的指标，它通过计算机器翻译的句子和人工翻译的参考句子之间的n-gram匹配程度，来衡量机器翻译的精确度**。n-gram是指连续的n个词，例如，unigram是一个词，bigram是两个词，trigram是三个词，依此类推。**BLEU的取值范围是0到1，越接近1表示机器翻译越好，越接近0表示机器翻译越差**。BLEU的计算公式如下：\n\n$$\nBLEU = BP \\cdot exp(\\sum_{n=1}^N w_n \\log p_n)\n$$\n\n其中，BP是简短惩罚因子，用于惩罚过短的机器翻译，防止机器翻译只输出少数几个词就获得高分。BP的计算公式如下：\n\n$$\nBP = \\begin{cases}\n1, & \\text{if } c > r \\\\\ne^{(1-r/c)}, & \\text{if } c \\leq r\n\\end{cases}\n$$\n\n其中，c是机器翻译的总长度，r是参考翻译的最佳匹配长度，即与机器翻译最接近的参考翻译的长度。\n\n$p_n$是基于n-gram的改进精确度，用于计算机器翻译中的n-gram和参考翻译中的n-gram的匹配比例。$p_n$的计算公式如下：\n\n{% raw %}\n$$\np_n = \\frac{\\sum_{\\text{n-gram} \\in C} \\text{Count}_{\\text{clip} }(\\text{n-gram})}{\\sum_{\\text{n-gram} \\in C} \\text{Count}(\\text{n-gram})}\n$$\n{% endraw %}\n\n其中，C是机器翻译的句子，$\\text{Count}(\\text{n-gram})$是机器翻译中n-gram的出现次数，$\\text{Count}_{\\text{clip} }(\\text{n-gram})$是机器翻译中n-gram的截断计数，即机器翻译中n-gram的出现次数与参考翻译中n-gram的最大出现次数的较小值。\n\n$w_n$是n-gram的权重，一般取均匀权重，即$w_n = 1/N$，其中N是n-gram的最大阶数，通常取4。\n\n\n#### 简介\n本文发表于 2017 年，提出了一种新的网络结构 Transformer，该结构完全基于 attention 机制，不再使用 CNN 和 RNN，因此可以并行计算，加快训练速度。Transformer 在机器翻译任务上取得了很好的效果，其后被广泛应用于其他任务中。\n\n- 数据集：\n  - WMT 2014 English-German： 包含了约 4.5 万对英德语句子，其中训练集包含 3.7 万对句子，开发集包含 0.5 万对句子，测试集包含 0.3 万对句子。句子来源于新闻、学术论文、书籍和网站等。\n\n  - WMT 2014 English-French： 包含了约 35 万对英法语句子，其中训练集包含 29 万对句子，开发集包含 3 万对句子，测试集包含 3 万对句子。句子来源于新闻、学术论文、书籍和网站等。\n\n- [code](https://github.com/tensorflow/tensor2tensor)\n\n#### 摘要\n- 前人做的 sequence transduction 都是基于 RNN 或者 CNN\n- 都用到了 encoder-decoder 结构\n- 本文仍然基于 encoder-decoder 结构，但是不再使用 RNN 和 CNN，而是使用 attention 机制，这可以更好的并行。\n- 所用指标为 BLUE，效果最好。\n\n#### 引言\n- RNN 需要顺序的计算，无法并行。\n- 已经有人使用了 attention 机制，但大都是和 RNN 或者 CNN 结合使用的。\n- 在 8 个 P100 上训练了 12 个小时。\n\n#### 背景\n- 前人的方法还是没有解决长距离知识学习的问题，距离越长，所需要的计算越多。\n- 在 Transformer 中，我们会通过 embedding 来固定维度，这会带来不好的影响，但所幸有 multi-head attention 来抵消。\n- self-attention\n- 前人已证，基于 recurrent attention mechanism 的效果更好，但还没有人仅用 attention 机制来做。\n\n#### 模型架构\n- 沿用 Encoder-Decoder 结构，**注意这里的 Decoder 是自回归的。（就是当前输入依赖于前面的输出）**\n- *The Transformer - model architecture.*\n\n![20231123172121](https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20231123172121.png)\n\n- Encoder\n  - N = 6\n  - 两层 sub-layer，分别是 multi-head self-attention 和 position-wise fully connected feed-forward network\n  - 每层都有 residual connection，然后接 layer normalization\n  - 为满足 residual connection，embedding 和 encoder 的输出维度都是 d_model = 512\n\n- Decoder\n  - N = 6\n  - 三层 sub-layer，分别是 masked multi-head self-attention，multi-head self-attention 和 position-wise fully connected feed-forward network\n  - 每层都有 residual connection，然后接 layer normalization\n  - 对于编码器的输出执行多头注意力，K（键）和V（值）来自编码器的输出，而Q（查询）来自解码器的输出。这确保了解码器中的每个位置都可以访问编码器输出中的所有位置。\n  - masked multi-head self-attention 用于防止解码器中的位置访问后续位置。这是通过将查询掩码为负无穷来实现的。\n\n- Attention\n  - Scaled Dot-Product Attention\n\n![20231123180055](https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20231123180055.png)\n\n其中 queries 和 keys 的维度是 $d_k$，values 的维度是 $d_v$。\n事实上， 这里是可以并行的，**参见原文3.2.1**\n\n> 作者在这里指出，**点积 要比 加性 效率高，具体谁更好，参见原文。**\n\n> 除以 $\\sqrt{d_k}$ 是为了**消除方差的影响，参见原文第四页页脚**\n\n  - Multi-Head Attention\n\n![20231123180142](https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20231123180142.png)\n\n作者认为，直接将 queries，keys 和 values 映射到 $d_{model}$ 维度的空间中，可能会导致信息损失，因此，作者将 queries，keys 和 values 分别映射到 $d_k$，$d_k$ 和 $d_v$ 维度的空间中，然后进行 Scaled Dot-Product Attention，最后将多个结果拼接起来，再次映射到 $d_{model}$ 维度的空间中。\n\n具体而言，文中设定 h = 8，即将 queries，keys 和 values 分别映射到 $d_k$ = $d_v$ = $d_{model}$/h = 64 维度的空间中，然后进行 Scaled Dot-Product Attention，最后将多个结果拼接起来，再次映射到 $d_{model}$ 维度的空间中。**参见原文3.2.2**\n\n--------------------\n\n- Applications of Attention in our Model\n  - quiries 来自前一个 decoder layer，keys 和 values 来自 encoder 的输出\n  - encoder 包含 self-attention\n  - 通过 mask 来防止 decoder 中的位置访问后续位置，**具体而言，就是将 values 的后续位置 mask 为负无穷，这样过 softmax 之后，就会变成 0，即不会影响结果。**\n\n- Position-wise Feed-Forward Networks\n\n$$\\mathcal{FFN} (x) = \\mathbb{max} (0, x W_1 + b_1)W_2 + b_2$$\n\n其中输入和输出的维度都是 $d_{model}$ = 512，而中间层的维度是 $d_{ff}$ = 2048。\n\n- embedding\n作者将 input embedding 和 output embedding 共享参数，都是通过一个 **线性层再加上一个softmax** 来实现的。\n\n> 在 embedding 的时候，所有的权重乘以 $\\sqrt{d_{model} }$，**这样可以使得 embedding 的结果的方差为 1**，具体原因参考[这篇帖子](https://zhuanlan.zhihu.com/p/442509602)。\n\n![20231123195753](https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20231123195753.png)\n\n- Positional Encoding\n  - attention 机制没有考虑到序列中词的位置信息。因此，作者在 embedding 后加入了位置编码，用于表示词的位置信息。\n  - 维度为 $d_{model}$ = 512，位置编码的维度也是 512。**便于求和**\n\n{% raw %}\n$$\\begin{aligned}\n\\text{PE}_{(pos, 2i)} &= \\sin(pos / 10000^{2i/d_{model} }) \\\\\n\\text{PE}_{(pos, 2i+1)} &= \\cos(pos / 10000^{2i/d_{model} })\n\\end{aligned}$$\n{% endraw %}\n\n其中，pos 是词在句子中的位置，i 是位置编码的维度。\n\n#### Why Self-Attention?\n- 可并行\n- 距离远的词也可以相互影响\n- **作者还提出了 局部注意力**\n\n#### Training\n\n#### Results\n其中大模型用 8 个 P100 GPU 训练了 3.5 天\n\n![20231123222009](https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20231123222009.png)\n\n#### Conclusion\n- 本文提出了一种新的网络结构 Transformer，该结构完全基于 attention 机制，不再使用 CNN 和 RNN，因此可以并行计算，加快训练速度。\n- Transformer 在机器翻译任务上取得了很好的效果，其后被广泛应用于其他任务中。\n- 可以考虑 局部注意力\n- 可以试试在 图像或音频 上应用 Transformer\n\n### 2. [End-to-End Object Detection with Transformers](https://arxiv.org/abs/2005.12872): DETR\n#### 先修知识\n1. [Hungarian algorithm](https://en.wikipedia.org/wiki/Hungarian_algorithm) : 匈牙利算法，用于解决指派问题\n#### 摘要\n- 将目标检测视为 set prediction 问题，使用 Transformer 来解决。去除了 NMS、anchor、poposals 等。**直接输出目标的位置和类别，真正的实现了端到端。**\n- 性能对标 Faster R-CNN，但速度更快。\n- 数据集：COCO\n- [code](https://github.com/facebookresearch/detr)\n\n#### 引言\n- 现在都不是端对端，都是先生成一些 proposals，然后再分类，最后再回归。**这样的结果受限于中间的这些操作。**\n- 虽然用到了 Transformer，**但是却是并行出结果，不需要自回归。**\n\n![20231126215613](https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20231126215613.png)\n\n- 用到了 bipartite matching loss\n- 在大物体上效果好，小物体上效果稍差\n- 消融实验做的很好\n- 很容易扩展到全景分割\n\n#### 相关工作\n- 之前都是需要一些知识给模型，也就是先验知识，比如 anchor，NMS，proposals 等。\n- 也有人通过 bipartite matching 来解决目标检测问题，但是是基于 RNN 的。\n\n#### 模型架构\n\n![20231126230443](https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20231126230443.png)\n\n![20231127012221](https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20231127012221.png)\n\n- object queries 是一个固定的向量，用于表示目标的个数，这里是 100 个（也就是 100 个框，根据数据集设定就好）。\n- **Matching cost 同时考虑了 class 和 box 的信息**\n- 仅对类别为 **非空** 的进行计算损失。\n- 类别预测的损失，去除了 log，详见原文 3.1\n- 边界框预测的损失，详见原文 3.1，使用了广义 IoU\n\n----------------\n**loss 的计算分为如下几个部分：**\n\n**首先通过 $\\mathcal{L}_{match}$ 一对一的找到框，之后算损失：box loss + class loss**\n\n{% raw %}\n$$\n\\hat{\\sigma} = \\text{arg} \\quad \\text{min}_{\\sigma \\in \\mathcal{\\sigma}_N} \\sum_{i=1}^N \\mathcal{L}_{\\text{match} }(y_i, \\hat{y}_{\\sigma(i)})\n$$\n{% endraw %}\n\n- $y_i = (c_i, b_i)$ 是 ground truth\n- $c_i$ 是 class label，可以是 $\\emptyset$\n- $b_i$ 是 bounding box，(center x, center y, height, and width relative to the image size).\n- $\\hat{y}_i$ 是预测的结果，可以 padded with $\\emptyset$ (no object) when N > the number of objects.\n- $\\hat{c_i}$ 是预测的类别\n- $\\hat{b_i}$ 是预测的 bounding box\n- $\\mathcal{\\sigma(i)}$ is an index within a particular permutation of N elements.\n\n\n{% raw %}\n$$\n\\mathcal{L}_{\\text{match} }(y_i, \\hat{y}_{\\sigma(i)}) = - \\mathbb{1}_{\\{c_i \\neq \\emptyset\\} } \\hat{p}_{\\sigma(i)}(c_i) + \\mathbb{1}_{\\{c_i = \\emptyset\\} } \\mathcal{L}_{\\text{box} }(b_i, \\hat{b}_{\\sigma(i)})\n$$\n\n- $\\mathbb{1}_{\\{c_i \\neq \\emptyset\\} }$ 是指当 $c_i \\neq \\emptyset$ 时，取 1，否则取 0\n- $\\hat{p}_{\\sigma(i)}(c_i)$ 是指预测的类别为 $c_i$ 的概率\n- $\\mathcal{L}_{\\text{box} }(b_i, \\hat{b}_{\\sigma(i)})$ 是指预测的 bounding box 与 ground truth 的损失\n\n$$\n\\mathcal{L}_{\\text{box} }(b_i, \\hat{b}_{\\sigma(i)}) = \\lambda_{iou} \\mathcal{L}_{iou} (b_i, \\hat{b}_{\\sigma(i)}) + \\lambda_{L_1} ||b_i - \\hat{b}_{\\sigma(i)}||_1\n$$\n{% endraw %}\n\n> $L_1$ 损失较常用，但是对于小框和大框的损失处理有问题，因此作者加入了 $IoU$ 损失，详见原文\n\n{% raw %}\n$$\n\\mathcal{L}_{\\text{Hungarian} }(y, \\hat{y}) = \\sum_{i=1}^N [- \\log \\hat{p}_{\\hat \\sigma(i)}(c_i) + \\mathbb{1}_{\\{c_i \\neq \\emptyset\\} } \\mathcal{L}_{\\text{box} }(b_i, \\hat{b}_{\\hat \\sigma(i)})]\n$$\n{% endraw %}\n\n> **事实上，作者还加了超参系数做平衡。这里使用了对数，而上文没有，是因为二者考虑的问题不一样，一个是考虑数值相对平衡，一个是考虑梯度相对平衡。**\n\n--------------------\n\n- **positional encoding 也好，object queries 也好，都加入到了每一层 attention layer 的计算**，\n- 作者还加入了 Auxiliary decoding losses，也就是每一层的输出都会计算损失（但是所有的 FFN 共享参数），详见原文 3.2\n\n![paper 中 Fig.10](https://kikaben.com/detr-object-detection-with-transformers-2020/images/fig-10.png)\n\n#### 实验\n- 详细探究了每个组件的作用\n- 全景分割的实验\n\n#### 结论\n- 本文提出了一种新的目标检测方法 DETR，该方法使用 Transformer 来解决目标检测问题，去除了 NMS、anchor、poposals 等，直接输出目标的位置和类别，真正的实现了端到端。\n\n#### 附录代码\n```python\nimport torch\nfrom torch import nn\nfrom torchvision.models import resnet50\n\nclass DETR(nn.Module):\n\n    def __init__(self, num_classes, hidden_dim, nheads, num_encoder_layer, num_decoder_layers):\n        super().__init__()\n\n        # Backbone: ResNet-50 without the last two layers (fully connected and pooling)\n        self.backbone = nn.Sequential(*list(resnet50(pretrained=True).children())[:-2])\n\n        # 1x1 Convolution to reduce channels from 2048 to hidden_dim\n        self.conv = nn.Conv2d(2048, hidden_dim, 1)\n\n        # Transformer layers\n        self.transformer = nn.Transformer(hidden_dim, nheads, num_encoder_layer, num_decoder_layers)\n\n        # Output layers\n        self.linear_class = nn.Linear(hidden_dim, num_classes + 1)  # Class prediction (plus background)\n        self.linear_bbox = nn.Linear(hidden_dim, 4)  # Bounding box prediction (4 coordinates)\n        \n        # Learnable positional embeddings\n        self.query_pos = nn.Parameter(torch.rand(100, hidden_dim))  # Query positional embedding\n        self.row_embed = nn.Parameter(torch.rand(50, hidden_dim // 2))  # Row positional embedding\n        self.col_embed = nn.Parameter(torch.rand(50, hidden_dim // 2))  # Column positional embedding\n\n    def forward(self, inputs):\n        # Backbone feature extraction\n        x = self.backbone(inputs)\n        # 1x1 Convolution\n        h = self.conv(x)\n        \n        # Get height (H) and width (W) of the feature map\n        H, W = h.shape[-2:]\n        \n        # Positional embeddings\n        pos = torch.cat([\n            self.col_embed[:W].unsqueeze(0).repeat(H, 1, 1),\n            self.row_embed[:H].unsqueeze(1).repeat(1, W, 1)\n        ], dim=-1).flatten(0, 1).unsqueeze(1)\n        \n        # Flatten and permute for transformer input\n        h = self.transformer(pos + h.flatten(2).permute(2, 0, 1), self.query_pos.unsqueeze(1))\n        \n        # Output predictions\n        return self.linear_class(h), self.linear_bbox(h).sigmoid()\n\n# Instantiate the model\ndetr = DETR(num_classes=91, hidden_dim=256, nheads=8, num_encoder_layer=6, num_decoder_layers=6)\n\n# Set the model to evaluation mode\ndetr.eval()\n\n# Generate random input tensor\ninputs = torch.rand(1, 3, 800, 1200)\n\n# Forward pass through the model\nlogits, bboxes = detr(inputs)\n```\n\n### 3. [AN IMAGE IS WORTH 16X16 WORDS: TRANSFORMERS FOR IMAGE RECOGNITION AT SCALE](https://arxiv.org/pdf/2010.11929.pdf): Vision Transformer\n作者是 Google Research 的人\n- [code](https://github.com/google-research/vision_transformer)\n\n将一个不修改的 transformer 应用于图像分类，是有一定困难的。因为 transformer 的输入是一个序列，而图像是一个二维的矩阵，我们可以将图像转换为序列，但是这样会导致序列过长，计算量过大。\n\n因此，作者提出了一种新的 transformer，叫做 Vision Transformer（ViT），该 transformer 仍然是基于 attention 机制的，但是在输入的时候，作者将图像分为了一个个 patch，然后将每个 patch 作为一个 token，这样就可以将图像转换为序列，而且序列的长度不会太长。**这样的 transformer 也可以用于目标检测和语义分割。**\n\n**架构图如下：**\n\n![20231209141514](https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20231209141514.png)\n\n将图像分为了 $N$ 个 patch，每个 patch 的维度是 $P$，这样就可以将图像转换为一个序列，序列的长度是 $N$，维度是 $P$。需要单独再加一个 class token，用于表示图像的类别。\n\n### 4. [Incremental-DETR: Incremental Few-Shot Object Detection via Self-Supervised Learning](https://arxiv.org/abs/2205.04042)\n\n作者是新加坡国立大学和哈尔滨工业大学的学生\n\n#### 摘要\n- Incremental 旨在学习新类别的目标检测，而不会影响到已有类别的目标检测。\n- novel class 数据量少\n- 通过在 DETR 上进行 fine-tune 和 self-supervised learning 来实现。\n- 用到了 selective search algorithm\n- 用到了 knowledge distillation\n- [code](https://github.com/dongnana777/Incremental-DETR)\n\n#### 引言\n- 增量学习一直都是一个难题，很容易出现 catastrophic forgetting。\n- **前人通过同时训练 base class 和 novel class 来解决**，但是如果我们**没有 base class 的数据**，方法就会受限。\n- 前人在 Faster R-CNN 做过类似的事情，第一阶段在 base class 上训练，第二阶段冻结**类无关提取器和 RPN**，只对预测头进行 fine-tune。**作者深受启发。**\n- **作者解冻不同的DETR层进行微调，并根据经验确定投影层和分类头是特定于类的，DETR的CNN主干、变压器和回归头与类无关**\n- **假定在进行 incremental 的时候，base class 的数据是不可用的。**\n- 第一阶段：base model 预训练，之后进行 self-supervised fine-tune。第二阶段：在 novel class 上进行 incremental fine-tune。\n- 第一阶段用到了 slecetive search algorithm\n- **提出了 classification distillation loss 和 masked feature distillation loss**\n- dataset：COCO、PASCAL VOC\n\n#### 相关工作\n- Object Detection\n- Few-Shot Object Detection\n- Incrementa Few-Shot Object Detection\n\n#### 问题定义\n- $D_{novel}$ 用的时候 $D_{base}$ 不可用\n- **新类和旧类没有重叠**\n- **新类仅有少量样本**\n\n#### 方法\n##### Base Model Training\n\n![20231127021733](https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20231127021733.png)\n\n1. 在 stage 1 的第一部分，采用正常的 DETR 训练策略在 $D_{base}$ 上进行训练。\n2. 在 stage 1 的第二部分，进来一张图片，通过 selective search algorithm 生成一些 proposals，之后选择 top O 个 proposals，**要求这些 proposals 与 base class 的 ground truth bounding box 不重叠**。之后将这些 proposals 作为 pseudo ground truth，采用 DETR 的方式进行训练。也就是图中的 $b^`$，对应的类别是 $c^`$。\n\n- 找框：\n\n{% raw %}\n$$\n\\hat{\\sigma} = \\text{arg} \\quad \\text{min}_{\\sigma \\in \\mathcal{\\sigma}_N} \\sum_{i=1}^N \\mathcal{L}_{\\text{match} }(y_i, \\hat{y}_{\\sigma(i)})\n$$\n\n$$\n\\mathcal{L}_{\\text{match} }(y_i, \\hat{y}_{\\sigma(i)}) = - \\mathbb{1}_{\\{c_i \\neq \\emptyset\\} } \\hat{p}_{\\sigma(i)}(c_i) + \\mathbb{1}_{\\{c_i = \\emptyset\\} } \\mathcal{L}_{\\text{box} }(b_i, \\hat{b}_{\\sigma(i)})\n$$\n{% endraw %}\n\n\n- Hungarian loss：\n\n{% raw %}\n$$\nL_{hg}(y, \\hat{y}) = \\sum_{i=1}^N [- \\log \\hat{p}_{\\hat \\sigma(i)}(c_i) + \\mathbb{1}_{\\{c_i \\neq \\emptyset\\} } \\mathcal{L}_{\\text{box} }(b_i, \\hat{b}_{\\hat \\sigma(i)})]\n$$\n{% endraw %}\n\n- 在 stage 1 中的第二部分，损失为：\n\n{% raw %}\n$$\n\\mathcal{L}^{base}_{total} = \\mathcal{L}_{hg}(y, \\hat{y}) + \\lambda^` \\mathcal{L}_{hg}(y^`, \\hat{y}^`)\n$$\n{% endraw %}\n\n##### Incremental Few-Shot Fine-Tuning\n\n![20231127192105](https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20231127192105.png)\n\n- 仅白色部分进行 fine-tune\n- 直接 fine-tune，会导致 catastrophic forgetting，因此作者提出了 knowledge distillation。直接 knowledge distillation 会和 novel class 的学习产生冲突，所以这里引入了 $\\mathcal{mask}^{novel}$，（如果是 novel class ground truth boxes，则为 1，否则为 0）。具体而言：\n\n{% raw %}\n$$\n\\mathcal{L}^{kd}_{feat} = \\frac{1}{2 N^{novel}} \\sum_{i=1}^{w} \\sum_{j=1}^{h} \\sum_{k=1}^{c} (1 - \\mathcal{mask}^{novel}_{ij}) ||f_{ijk}^{novel} - f_{ijk}^{base}||^2\n$$\n\n其中，$N^{novel} = \\sum_{i=1}^{w} \\sum_{j=1}^{h} (1 - \\mathcal{mask}^{novel}_{ij})$，$f^{base}$ 和 $f^{novel}$ 分别是 base model 和 novel model 的 feature map。$w$，$h$，$c$ 分别是 feature map 的宽、高和通道数。\n{% endraw %}\n\n> 直观理解，对于每一个像素点，对于它的所有通道，去看它是否是 novel class bounding box 的一部分，如果是，则不需要进行 knowledge distillation，否则，则需要进行 knowledge distillation。\n\n同样，对于分类器头，直接做 knowledge distillation 也不合适，为解决这个问题，如下：\n\n{% raw %}\n$$\n\\mathcal{L}^{kd}_{cls} = \\mathcal{L}_{kl\\_div}(\\log(q^{novel}), q^{base})\n$$\n{% endraw %}\n\n> 进来一张 novel image，通过 base model 进行预测，如果 class probability 大于 0.5，且 bounding box 与 novel class ground truth boxes 不重叠，则认为需要蒸馏，算 KL 散度。\n\n- stage 2 的损失为：\n\n{% raw %}\n$$\n\\mathcal{L}^{novel}_{total} = \\mathcal{L}_{hg}(y, \\hat{y}) + \\lambda_{feat} \\mathcal{L}^{kd}_{feat} + \\lambda_{cls} \\mathcal{L}^{kd}_{cls}\n$$\n{% endraw %}\n\n#### 实验\n#### 结论\n- 通过蒸馏学习，做到了在学习新知识的同时不遗忘旧知识。\n- 提前通过 self-supervised 生成一些 新类标签，进行fine-tune，使得模型更容易接受新知识。\n- 断定模型中的部分可以分为 class-specific 和 class-agnostic 两部分。\n\n### 5. [Lightweight Transformer for Multi-Modal Object Detection (Student Abstract)](https://ojs.aaai.org/index.php/AAAI/article/view/26946)\n\n![20231210112104](https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20231210112104.png)\n\n模型训练时，可以从多个角度进行训练，角度越多越准确，但却更慢。\n\n比如**自动驾驶**，仅有一个传感器肯定没有多个传感器的结果准确，但是多个传感器的结果又太慢。\n\n那么能不能又快又准呢？那就要从模态融合入手。**作者提出了一种新的融合操作符，叫做 Poolformer-based fusion operator。**\n\n> 本质上来讲，本文更换了权重分配的方式，用 pooling 来进行替代，这样可以减少参数量，提高速度，但效果却不差。文章没有提供代码，但是作者[回复邮件推荐了一份代码](https://github.com/autonomousvision/transfuser)\n\n\n### 6. [Self-supervised Label Augmentation via Input Transformations](https://arxiv.org/abs/1910.05872)\n\n一言以蔽之，通过**数据增强**的方式来增强原始标签，**不仅仅对于无监督、半监督学习有效，对于全监督学习也能带来效果的提升。将共享底层特征改成了 unified task**\n\n**共享底层特征**：先前的工作通常为原始任务和自监督任务维护两个独立的分类器（但共享公共特征表示），并同时优化它们的目标。**也就是，不论你图像怎么变（增强），特征表示不能变**。\n\n- [code](https://github.com/hankook/SLA)\n\n> **有效地利用基于 transformation 的自我监督进行全监督的分类任务。对于 few-shot and imbalanced classification scenarios 也有效果**\n\n***Difference with previous approaches:***\n\n![20231210143836](https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20231210143836.png)\n\n- 单纯的 Data Augmentation，只是对输入进行了变换，但却强行使得标签不变的一种方案，这种方案有一定弊端，比如：6 和 9，详见原文\n\n{% raw %}\n$$\n\\mathcal{L}_{DA}(x,y;\\theta,\\mu) = \\frac{1}{M} \\sum_{j=1}^M \\mathcal{L}_{CE}(\\theta(\\hat{z_j}; \\mu), y)\n$$\n{% endraw %}\n\n- Multi-task Learning 同时学习两个任务，同时优化它们。**但是，当数据集是全标签时，这种方法通常不会带来效果的提升。**\n\n{% raw %}\n$$\n\\mathcal{L}_{MT}(x,y;\\theta,u,v) = \\frac{1}{M} \\sum_{j=1}^{M} \\mathcal{L}_{CE}(\\theta(\\hat{z_j};\\mu), y) + \\mathcal{L}_{CE}(\\theta(\\hat{z_j};v),j)\n$$\n{% endraw %}\n\n- 本文所提出的SLA(Self-supervised Label Augmentation)方法直接学习**联合概率分布**。效果最好，也最通用。\n\n{% raw %}\n$$\n\\mathcal{L}_{SLA}(x,y;\\theta,\\omega) = \\frac{1}{M} \\sum_{j=1}^{M} \\mathcal{L}_{CE}(p(\\hat{z_j};\\omega), (y,j))\n$$\n{% endraw %}\n\n> 此处损失详见原文。\n\n**对比效果如下：**\n\n![20231210144438](https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20231210144438.png)\n\n-----------------------\n\n> SLA 仅增加了标签的数量，对于模型的参数基本上没有影响。\n> SLA 可以弱化为 Data Augmentation，也可以弱化为 Multi-task Learning。但是 Multi-task Learning 约束太强（强制 label 不变），难以优化。\n\n------------------------------\n\n![20231210173513](https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20231210173513.png)\n\n由于预测的结果变为了以前的 M 倍，所以先做 Aggregation，也就是把对应的 M 个条件概率加起来，然后再进行 softmax。之后和原来的标签进行交叉熵计算蒸馏损失。\n\n{% raw %}\n$$\n\\mathcal{L}_{SLA}(x,y;\\theta,\\omega,\\mu) = \\mathcal{L}_{SLA}(x,y; \\theta, \\omega) + \\mathcal{D}_{KL}(P_{aggregated}(·|x)|| \\sigma(z;\\mu)) + \\beta \\mathcal{L}_{CE}(\\sigma(z;\\mu), y)\n$$\n{% endraw %}\n\n### 7. [Learn More for Food Recognition via Progressive Self-Distillation](https://arxiv.org/abs/2303.05073)\n\n- 面临的问题：\n\n食品识别一直是一个比较困难的任务，因为这是一个比较细粒度的任务。例如对于鸟的识别，找到鸟头、爪子就好了，但是食品可能是各种水果、蔬菜堆叠在一起构成沙拉，这比较困难。传统的方法是先用弱监督的方式做很多位置的定位，之后聚合并抽取特征，最后分类。**但这样一来，性能就会被位置定位所限制。我们很难把每一部分区域都学好。**\n\n- 解决方案：\n\n作者提出了 PSD（Progressive Self-Distillation），用于去挖掘图像中更有用的区域。teacher model 和 student model 共享相同的 embeding。最后 inference 阶段，仅保留 teacher model。仍然属于 self-supervised 的范畴。\n\n**embedding 可以用 CNN，也可以用 transformer(e.g.,Swin Transformer)。**\n\n- dataset：ETHZ Food-101、Vireo Food-172、ISIA Food-500\n- code: 无\n\n![20231210235852](https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20231210235852.png)\n\nstudent model 和 teacher model 共享同一个 Embeding Network，但是有不同的分类器。输入**原始图片**给 teacher model，经过一个 ViT 得到一个 T x D 的 tokens，reshape 成 H x W x D 的 feature map，之后经过全局平均池化，得到一个 D 维的向量，之后经过一个全连接层，得到一个 C 维的向量，之后送入 Class Response Module。根据 Threshold，得到一个 mask，之后将 mask 与原始图片相乘，得到一个新的图片，送入 student model。如法炮制，进得到了很多的 student model。蒸馏阶段，使用 teacher model 的输出作为 ground truth，student model 的输出作为预测值，计算 KL 散度。\n\n损失如下：\n\n{% raw %}\n$$\n\\mathcal{L} = \\mathcal{L}_{g}(x,y) + \\sum_{i=1}^{m}(\\omega_l \\mathcal{L}_{l}(\\hat{x}_{i-1}, y) + \\omega_d \\mathcal{L}_{d}(x, \\hat{x}_{i}))\n$$\n\n其中 $\\mathcal{L}_{g}(x,y)$ 是原始的分类损失，$\\mathcal{L}_{l}$ 是 locating loss，$\\mathcal{L}_{d}$ 是 distillation loss。\n\n$$\n\\mathcal{L}_{g}(x,y) = \\mathcal{L}_{CE}(h(f(x;\\theta); \\phi_t), y)\n$$\n\n$$\nL_{l}(x,y) = \\mathcal{L}_{ce}(GAP(f(x;\\theta); \\Theta), y)\n$$\n\n$$\n\\mathcal{L}_d(x, \\hat{x}) = \\mathcal{D}_{KL}(h(f(x;\\theta); \\phi_t), h(f(\\hat{x};\\theta); \\phi_s))\n$$\n\n{% endraw %}\n\n所谓渐进，是依靠$\\omega_l$ 和 $\\omega_d$ 来控制的。\n\n{% raw %}\n$$\n\\omega_d = \n\\begin{cases}\n    \\alpha \\cdot \\exp(-5(1 - \\frac{e}{\\beta})^2), & e < \\beta \\\\\n    \\alpha, & e \\geq \\beta\n\\end{cases}\n$$\n{% endraw %}\n\n> 垃圾文章，没有代码，作者邮件不回。$L_l$也没有讲清楚。Class Response Module 出来之后怎么进行 Threshold？怎么得到 mask？这些都没有讲清楚。**或许需要一些食物识别的先验知识。**\n\n### 8. [Solving Math Word Problems concerning Systems of Equations with GPT-3](https://ojs.aaai.org/index.php/AAAI/article/view/26896)\n\n#### 摘要\n本文解决了一个专业领域的问题，就是**数学方程式的提取和求解问题**。作者将其归到了 NLP 的范畴，使用了 GPT-3 来解决这个问题。\n问题分三步：\n1. 对问题进行 **分类**，是几元方程式。这个问题目前 GPT-3 能够达到 80%-100% 的准确率。\n2. 提取方程式，这个问题的精度随着给定模型的例子数量的增加而增加。one-shot 的精度为 31%，3-shot 的精度为 69%。之后再进一步进行 fine-tune，精度可以达到 80%。\n3. 生成新的问题，GPT-3 的精度在 33%-93%，具体取决于问题类型。\n\n#### 引言\n本文聚焦的问题是 **二元一次线性方程组，也就是两个变量，两个方程式**。如上所述，解决问题如下：\n- Q1: How good  is GPT-3 at classifying problems into different themes?\n- Q2: How good is GPT-3 at extracting a system of linear equations directly from problem descriptions?\n- Q3: How good is GPT-3 at creatively generating valid problems?\n\n- [dataset](https://github.com/anrgusc/MWP2L)\n\n**如下为 Q1**. Table1: Instance problem from each category\n| 类别 | 问题 |\n| --- | --- |\n| **Sum and Difference (S&D)** | *The sum of half of a number, x, and another number, y, is -28. The difference of x and y is 7. Find x and y.* |\n| **Item and Property (I&P)** | *Three apples and four bananas cost $4.85. Three apples and ten bananas cost $8.75. Find the cost of an apple.* |\n| **Perimeter of Rectangle (PoR)** | *The length of a rectangle is 3 cm less than double the width, and the perimeter is 53 cm. Find its dimensions.* |\n| **Motion (MO)** | *Joey and Natasha start from the same point and walk in opposite directions. Joey walks 4 km/h faster than Natasha. After 2 hours, they are 31 kilometers apart. How fast did each walk?* |\n| **Mixture (MI)** | *Twelve gallons of a 31% acid mixture is obtained by mixing a 23% solution with a 48% solution. How much of each must be used?* |\n\n**生成表达式的时候，前缀、中缀和后缀的进度不同。**\n\n已经有人通过 Transformer 来解决这个问题，但是作者说泛化性不好。详见文章的 *Prior Applications of Transformers to MWP*。**还有人通过 BERT 来解决这个问题。**\n\n目前关注的问题是以下五个，作者仅考虑了其中的三个：\n- identify the type of problem\n- output step-by-step instructions\n- extract the correct system of linear equations\n- successfully solve the equations\n- generate similar problems for users to practice.\n\nTable 2: Extraction task example.\n\n| Problem | How many gallons of a 20% antifreeze solution and a 10% antifreeze solution must be mixed to obtain 40 gallons of a 16% antifreeze solution? |\n| :---: | :---: |\n| Valid Response | 0.2*x+0.1*y=0.16*(x+y);x+y=40 |\n| Invalid Response | 20x+10y=16*40 (only one equation is derived) |\n| Invalid Response | 20x+10(40-x)=16(40) (failed to use required variable y) |\n| Invalid Response | 2*x+1*y=40;0.2*x+0.1*y=0.16 (incorrect interpretation) |\n\nTable 3: Problem generation.\n| problem given in prompt | The larger of two numbers is 10 more than twice the smaller. If the smaller is subtracted from the larger, the result is 26. Find the numbers. |\n| :---: | :---: |\n| within-topic generation outcome | The larger of two numbers is 15 more than twice the smaller. If the smaller is subtracted from the larger, the result is 33. Find the numbers. |\n| cross-topic generation outcome | The larger of two angles is 10 more than twice the smaller. If the smaller is subtracted from the larger, the result is 26. Find the angles. |\n\n-----------------------------------\n### 9. [Curriculum Temperature for Knowledge Distillation](https://arxiv.org/abs/2211.16231)\n- [code](https://github.com/zhengli97/CTKD?tab=readme-ov-file)\n- [Project Page](https://zhengli97.github.io/CTKD/)\n- [中文解读](https://zhengli97.github.io/CTKD/chinese_interpertation.html)\n\n- 引言中指出：MKD (Liu et al. 2022) 比较重视 **数据增强**。\n- 相关工作中指出：\n  - *This training strategy has been widely applied in various domains, such as computer vision (Wu et al. 2018; Sinha, Garg, and Larochelle 2020) and natural language processing (Platanios et al. 2019; Tay et al. 2019).*\n  - Curriculum Dropout (Morerio et al. 2017)\n\n---------------------------------\n\n### 10. [Sharpness-Aware Minimization for Efficiently Improving Generalization](https://arxiv.org/abs/2010.01412)\n\n- [code](https://github.com/google-research/sam)\n- [Third-party library](https://github.com/davda54/sam)\n\ncifar100 的结果：Percentage correct 96.08，最强结果。\n\n作者认为：现在模型的参数都特别多，单单靠 loss function 去做优化，不足以支撑起整个任务，这会导致太多不同的解。因此，作者提出了 SAM（Sharpness-Aware Minimization），通过优化 sharpness 来提高泛化性能，**也就是优化曲率**。\n\n一言以蔽之：不仅仅要优化模型的 loss，还要优化 loss 最小值附近的 平滑度。**可以将其视为一种学习算法，经测试，相当多的模型和任务，套用上这个算法，效果都会有所提升。**\n\n![20231218094309](https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20231218094309.png)\n\n**Theorem (stated informally) 1.** For any $\\rho$ > 0, with high probability over training set $S$ generated from distribution $\\mathcal{D}$,\n\n{% raw %}\n$$\n\\mathcal{D}(\\omega) \\leq \\text{max}_{|| \\epsilon ||_2 \\leq \\rho} \\mathcal{L}_{S}(\\omega + \\epsilon) + \\mathcal{h}(|| \\omega ||_2^2 / \\rho^2)\n$$\n{% endraw %}\n\nwhere $h : R_+ → R_+$ is a strictly increasing function (under some technical conditions on $L_D (w)$).\n\n事实上，上述公式的右侧可以写为：\n\n{% raw %}\n$$\n[\\text{max}_{|| \\epsilon ||_2 \\leq \\rho} \\mathcal{L}_{S}(\\omega + \\epsilon) - \\mathcal{L}_{S}(\\omega)] + \\mathcal{L}_{S}(\\omega) + \\mathcal{h}(|| \\omega ||_2^2 / \\rho^2)\n$$\n{% endraw %}\n\n其中最后一项可以看成是一个正则项，可以用$\\lambda || \\omega ||_2^2$来代替。[]内的代表锐度，也就是 sharpness。中间那一项是 loss。\n\n故而，SAM 的损失函数为：\n\n{% raw %}\n$$\n\\text{min}_{\\omega} \\mathcal{L}_{S}^{SAM}(\\omega) + \\lambda || \\omega ||_2^2 \\quad\n\n\\text{where} \\quad \\mathcal{L}_{S}^{SAM}(\\omega) \\stackrel{\\triangle}{=} \\text{max}_{|| \\epsilon ||_p \\leq \\rho} \\mathcal{L}_{S}(\\omega + \\epsilon)\n$$\n{% endraw %}\n\n就是一个最大最小化问题，详细推导见原文。\n\n> Because SAM's performance is amplified by not syncing the perturbations, data parallelism is highly recommended to leverage SAM's full potential (see Section 4 for more details).就是数据并行，效果更好。\n\n### 11. [Adaptive Hierarchy-Branch Fusion for Online Knowledge Distillation](https://ojs.aaai.org/index.php/AAAI/article/view/25937)\n\n\n### 13. [Class Incremental Learning for Task-Oriented Dialogue System with Contrastive Distillation on Internal Representations (Student Abstract)](https://ojs.aaai.org/index.php/AAAI/article/view/27044)\n\n本文通过对比、蒸馏等技术来实现增量学习，用于对话系统。\n\n通过以下几种方式来保证增量学习的效果：\n- 仅更新部分相关新任务的参数\n- **对比学习：新任务中的数据作为 anchors，原数据作为负样本。上一阶段模型和新阶段模型对于新任务数据的输出作为正样本对。简而言之，学习新任务的时候，不仅仅学习新任务的知识，还要学习新任务和原任务的区别。**\n- 复杂的损失函数：包括对比损失、交叉熵损失、蒸馏损失等。**相互协调，妄想达到最好的效果。**\n- 动量更新：**保证模型的稳定性。**\n\n> 作者并未提供代码，也无邮件回复。一言以蔽之，将各种东西混合在一起构成一套灌水垃圾。\n\n----------------------------------------\n\n### 14. [Improving Training and Inference of Face Recognition Models via Random Temperature Scaling](https://ojs.aaai.org/index.php/AAAI/article/view/26760)\n\n本文针对人脸识别，介绍了**不确定**的问题。\n\n模型对于无效的输入，仍然会以高置信度做出预测，这是不合理的。对于人脸识别，同样的人但是不同的照片，应该被映射到同一个 latent space，但这很难做到。\n\n作者提出了 RTS（Random Temperature Scaling），将温度与不确定性相关联，通过随机温度缩放来影响模型的不确定性。\n\n上述皆为论文中内容，**实际上，如文中 Eqn.4 和 Eqn.5 以及 Fig.2 所示，作者提出了一种新的损失函数（类似softmax）,并引入了 Gumbel 分布**。详见原文。\n\n> 无代码，垃圾文章。\n\n------------------------------------\n\n### 15. [De-biased Teacher: Rethinking IoU Matching for Semi-supervised Object Detection](https://ojs.aaai.org/index.php/AAAI/article/view/25355)\n\n[假code](https://github.com/wkfdb/De-biased-Teracher)\n\n![20240311001350](https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20240311001350.png)\n\n- 从 $D_{labeled}$ 和 $D_{unlabeled}$ 中采样 input。\n  - labeled images 直接通过 weakly augmented 来训练 student model。\n  - unlabeled images，Teacher 通过 weakly augmented 来生成 pseudo labels，之后通过 strong augmented 来训练 student model。**作者称之为 一致性正则化。**\n\n- student model 通过 loss 进行训练更新，teacher model 通过自身和 student model 进行动量更新，详见 Eqn.1。\n\n也就是说，本文三个贡献：\n1. 一致性正则，和蒸馏的区别在于，teacher 和 student 都动。\n2. teacher 通过 student 来进行动量更新。\n3. 截断 softmax 的尾部，阈值为 0.05。（推测没有使用温度系数T）\n\n![20231225202053](https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20231225202053.png)\n\n> 什么时候阶段？如何阶段？TODO\n\n------------------------\n\n### 16. [Grouped Knowledge Distillation for Deep Face Recognition](https://ojs.aaai.org/index.php/AAAI/article/view/25472)\n\n无 code. **已发邮件，未回。**\n\n$$L = \\mathcal{L}_{cls} + \\mathcal{L}_{kd}$$\n\n其中 $\\mathcal{L}_{cls}$ 是一个专门针对于人脸识别的损失函数。\n\n\n一言以蔽之，作者将 logit 按照阈值进行分组。分别是 Primary-KD, Secondary-KD, and Binary-KD。**Primary-KD 用于学习主要的知识，Secondary-KD 用于学习次要的知识，Binary-KD 用于确保教师和学生之间的知识分布的一致性。**作者表示，Primary-KD 和 Binary-KD 是重要的，Secondary-KD 是累赘。\n\n![20231225210830](https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20231225210830.png)\n\n> Binary-KD 参见原文公式 6，实际上就是一个二分类问题，用于确定分类是 Primary-KD 还是 Secondary-KD。\n\n**注意 Fig.2 中的文字描述，作者指出根据 student 的输出进行 rank，之后开始累加，直到累加的值达到了 阈值，这部分就是 Primary-KD。teacher也排序。**此处有两个问题：\n\n1. 这样排序，岂不是会出现类别不匹配的问题？\n2. 根据 student 进行 rank 有什么用？不是应该根据 teacher？\n\n**作者还在 Method 文字的上面指出 feature distillation 优于 logit distillation。不敢苟同。**\n\n作者测试最好的阈值为 0.93，但作者的理论是错误的，所以也并无太多参考价值。\n\n**作者 Equ.3 的绝对值加的很好，值得借鉴，根据 teacher 进行排序的话，应该确实是可行的，可以做到自适应调整 Primary-KD 和 Secondary-KD 的比例，但要想做到类型匹配，需要存原来的索引，这样会造成计算成本的增加。**\n\n**作者最后做了一个 masked face recognition 的实验，这手操作值得学习。**\n\n<table><tr><td bgcolor=#FF00FF>作者已回邮件，rank 时对 index 重新组织，并且代码中是根据 teacher 进行 rank. 但匪夷所思的是，作者说最后通过 student 进行 rank 反而会取得更好的结果。</td></tr></table>\n","slug":"paper","published":1,"updated":"2024-04-25T17:26:48.013Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvjbaqma00b40vn1bdi4de3t","content":"<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><ol>\n<li><a href=\"https://arxiv.org/pdf/1706.03762.pdf\">Attention Is All You Need</a> : Transformer</li>\n<li><a href=\"https://arxiv.org/abs/2005.12872\">End-to-End Object Detection with Transformers</a>: DETR</li>\n<li><a href=\"https://arxiv.org/pdf/2010.11929.pdf\">AN IMAGE IS WORTH 16X16 WORDS: TRANSFORMERS FOR IMAGE RECOGNITION AT SCALE</a>: Vision Transformer</li>\n<li><a href=\"https://arxiv.org/abs/2205.04042\">Incremental-DETR: Incremental Few-Shot Object Detection via Self-Supervised Learning</a></li>\n<li><a href=\"https://ojs.aaai.org/index.php/AAAI/article/view/26946\">Lightweight Transformer for Multi-Modal Object Detection (Student Abstract)</a></li>\n<li><a href=\"https://arxiv.org/abs/1910.05872\">Self-supervised Label Augmentation via Input Transformations</a></li>\n<li><a href=\"https://arxiv.org/abs/2303.05073\">Learn More for Food Recognition via Progressive Self-Distillation</a></li>\n<li><a href=\"https://ojs.aaai.org/index.php/AAAI/article/view/26896\">Solving Math Word Problems concerning Systems of Equations with GPT-3</a></li>\n<li><a href=\"https://arxiv.org/abs/2211.16231\">Curriculum Temperature for Knowledge Distillation</a></li>\n<li><a href=\"https://arxiv.org/abs/2010.01412\">SHARPNESS-AWARE MINIMIZATION FOR EFFICIENTLYIMPROVING GENERALIZATION</a></li>\n<li><a href=\"https://ojs.aaai.org/index.php/AAAI/article/view/25937\">Adaptive Hierarchy-Branch Fusion for Online Knowledge Distillation</a></li>\n<li><a href=\"https://ojs.aaai.org/index.php/AAAI/article/view/26008\">Peeling the Onion: Hierarchical Reduction of Data Redundancy for Efficient Vision Transformer Training</a></li>\n<li><a href=\"https://ojs.aaai.org/index.php/AAAI/article/view/27044\">Class Incremental Learning for Task-Oriented Dialogue System with Contrastive Distillation on Internal Representations (Student Abstract)</a></li>\n<li><a href=\"https://ojs.aaai.org/index.php/AAAI/article/view/26760\">Improving Training and Inference of Face Recognition Models via Random Temperature Scaling</a></li>\n<li><a href=\"https://ojs.aaai.org/index.php/AAAI/article/view/25355\">De-biased Teacher: Rethinking IoU Matching for Semi-supervised Object Detection</a></li>\n<li><a href=\"https://ojs.aaai.org/index.php/AAAI/article/view/25472\">Grouped Knowledge Distillation for Deep Face Recognition</a><span id=\"more\"></span></li>\n</ol>\n<hr>\n<h2 id=\"泛读文章\"><a href=\"#泛读文章\" class=\"headerlink\" title=\"泛读文章\"></a>泛读文章</h2><ol start=\"3\">\n<li><a href=\"https://ojs.aaai.org/index.php/AAAI/article/view/25879\">Can Bad Teaching Induce Forgetting? Unlearning in Deep Networks Using an Incompetent Teacher</a></li>\n</ol>\n<p>本文角度清奇，利用知识蒸馏使得模型变弱，有意忘记某些知识。比如某些公司的授权到期，需要忘记相关知识，两种方法，其一是重新训练，其二就是本文（知识蒸馏）。</p>\n<hr>\n<ol start=\"4\">\n<li><a href=\"https://ojs.aaai.org/index.php/AAAI/article/view/25902\">SKDBERT: Compressing BERT via Stochastic Knowledge Distillation</a></li>\n</ol>\n<ul>\n<li>正如题目所言，本文采用了一种随机知识蒸馏的方法，具体来说，每次迭代中从很多老师中挑选一个老师，然后进行知识蒸馏。（老师们具有不同的容量层级）在能力基本没有损失的情况下，模型的大小减少了 40%。</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20231226095033.png\" alt=\"20231226095033\"></p>\n<table><tr><td bgcolor=\"#FF00FF\">本文提到了很多知识蒸馏的方法，可以参考。</td></tr></table>\n\n<hr>\n<ol start=\"5\">\n<li><a href=\"https://ojs.aaai.org/index.php/AAAI/article/view/25944\">Boosting Graph Neural Networks via Adaptive Knowledge Distillation</a></li>\n</ol>\n<ul>\n<li>这篇论文是关于如何利用多个图神经网络（GNNs）的互补知识来提高一个学生GNN的性能。它提出了一个自适应的知识蒸馏（KD）框架，叫做BGNN，它可以顺序地将不同GNNs的知识转移到学生GNN中。<strong>它还引入了一个自适应温度模块和一个权重提升模块</strong>，来指导学生GNN有效地学习。这篇论文在节点分类和图分类任务上都取得了很好的效果，相比于原始的GNNs，分别提升了3.05%和6.35%。</li>\n</ul>\n<p>作者认为，对于同一个GNN，采用不同的聚合方式，会学到不同的知识，现在希望互补的掌握这些知识，怎么办呢？<strong>采用知识蒸馏最好。</strong><br>但这会有如下难点：</p>\n<ol>\n<li>传统的 KD teacher 要比 student 大，而本次任务中，两者相同容量</li>\n<li>GNN 一般都比较浅</li>\n</ol>\n<p>作者的创新在于，提出了这种构想，并引入了 <strong>自适应温度模块和权重提升模块</strong></p>\n<ul>\n<li>自适应温度模块，根据 teacher model 对于节点的 logits 分布，进行设计。<strong>具体依据是针对不同节点的梯度值。</strong></li>\n<li>权重提升模块，哪个节点对应的分类错误率高，就给哪个节点的权重提升。</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20240110124950.png\" alt=\"20240110124950\"></p>\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><h3 id=\"1-Attention-Is-All-You-Need-Transformer\"><a href=\"#1-Attention-Is-All-You-Need-Transformer\" class=\"headerlink\" title=\"1. Attention Is All You Need : Transformer\"></a>1. <a href=\"https://arxiv.org/pdf/1706.03762.pdf\">Attention Is All You Need</a> : Transformer</h3><h4 id=\"先修知识\"><a href=\"#先修知识\" class=\"headerlink\" title=\"先修知识\"></a>先修知识</h4><h5 id=\"BLUE（Bilingual-Evaluation-Understudy）\"><a href=\"#BLUE（Bilingual-Evaluation-Understudy）\" class=\"headerlink\" title=\"BLUE（Bilingual Evaluation Understudy）\"></a>BLUE（Bilingual Evaluation Understudy）</h5><p><strong>机器翻译中的BLEU是一种用于评估机器翻译质量的指标，它通过计算机器翻译的句子和人工翻译的参考句子之间的n-gram匹配程度，来衡量机器翻译的精确度</strong>。n-gram是指连续的n个词，例如，unigram是一个词，bigram是两个词，trigram是三个词，依此类推。<strong>BLEU的取值范围是0到1，越接近1表示机器翻译越好，越接近0表示机器翻译越差</strong>。BLEU的计算公式如下：</p>\n<p>$$<br>BLEU &#x3D; BP \\cdot exp(\\sum_{n&#x3D;1}^N w_n \\log p_n)<br>$$</p>\n<p>其中，BP是简短惩罚因子，用于惩罚过短的机器翻译，防止机器翻译只输出少数几个词就获得高分。BP的计算公式如下：</p>\n<p>$$<br>BP &#x3D; \\begin{cases}<br>1, &amp; \\text{if } c &gt; r \\<br>e^{(1-r&#x2F;c)}, &amp; \\text{if } c \\leq r<br>\\end{cases}<br>$$</p>\n<p>其中，c是机器翻译的总长度，r是参考翻译的最佳匹配长度，即与机器翻译最接近的参考翻译的长度。</p>\n<p>$p_n$是基于n-gram的改进精确度，用于计算机器翻译中的n-gram和参考翻译中的n-gram的匹配比例。$p_n$的计算公式如下：</p>\n\n$$\np_n = \\frac{\\sum_{\\text{n-gram} \\in C} \\text{Count}_{\\text{clip} }(\\text{n-gram})}{\\sum_{\\text{n-gram} \\in C} \\text{Count}(\\text{n-gram})}\n$$\n\n\n<p>其中，C是机器翻译的句子，$\\text{Count}(\\text{n-gram})$是机器翻译中n-gram的出现次数，$\\text{Count}_{\\text{clip} }(\\text{n-gram})$是机器翻译中n-gram的截断计数，即机器翻译中n-gram的出现次数与参考翻译中n-gram的最大出现次数的较小值。</p>\n<p>$w_n$是n-gram的权重，一般取均匀权重，即$w_n &#x3D; 1&#x2F;N$，其中N是n-gram的最大阶数，通常取4。</p>\n<h4 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h4><p>本文发表于 2017 年，提出了一种新的网络结构 Transformer，该结构完全基于 attention 机制，不再使用 CNN 和 RNN，因此可以并行计算，加快训练速度。Transformer 在机器翻译任务上取得了很好的效果，其后被广泛应用于其他任务中。</p>\n<ul>\n<li><p>数据集：</p>\n<ul>\n<li><p>WMT 2014 English-German： 包含了约 4.5 万对英德语句子，其中训练集包含 3.7 万对句子，开发集包含 0.5 万对句子，测试集包含 0.3 万对句子。句子来源于新闻、学术论文、书籍和网站等。</p>\n</li>\n<li><p>WMT 2014 English-French： 包含了约 35 万对英法语句子，其中训练集包含 29 万对句子，开发集包含 3 万对句子，测试集包含 3 万对句子。句子来源于新闻、学术论文、书籍和网站等。</p>\n</li>\n</ul>\n</li>\n<li><p><a href=\"https://github.com/tensorflow/tensor2tensor\">code</a></p>\n</li>\n</ul>\n<h4 id=\"摘要\"><a href=\"#摘要\" class=\"headerlink\" title=\"摘要\"></a>摘要</h4><ul>\n<li>前人做的 sequence transduction 都是基于 RNN 或者 CNN</li>\n<li>都用到了 encoder-decoder 结构</li>\n<li>本文仍然基于 encoder-decoder 结构，但是不再使用 RNN 和 CNN，而是使用 attention 机制，这可以更好的并行。</li>\n<li>所用指标为 BLUE，效果最好。</li>\n</ul>\n<h4 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h4><ul>\n<li>RNN 需要顺序的计算，无法并行。</li>\n<li>已经有人使用了 attention 机制，但大都是和 RNN 或者 CNN 结合使用的。</li>\n<li>在 8 个 P100 上训练了 12 个小时。</li>\n</ul>\n<h4 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h4><ul>\n<li>前人的方法还是没有解决长距离知识学习的问题，距离越长，所需要的计算越多。</li>\n<li>在 Transformer 中，我们会通过 embedding 来固定维度，这会带来不好的影响，但所幸有 multi-head attention 来抵消。</li>\n<li>self-attention</li>\n<li>前人已证，基于 recurrent attention mechanism 的效果更好，但还没有人仅用 attention 机制来做。</li>\n</ul>\n<h4 id=\"模型架构\"><a href=\"#模型架构\" class=\"headerlink\" title=\"模型架构\"></a>模型架构</h4><ul>\n<li>沿用 Encoder-Decoder 结构，<strong>注意这里的 Decoder 是自回归的。（就是当前输入依赖于前面的输出）</strong></li>\n<li><em>The Transformer - model architecture.</em></li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20231123172121.png\" alt=\"20231123172121\"></p>\n<ul>\n<li><p>Encoder</p>\n<ul>\n<li>N &#x3D; 6</li>\n<li>两层 sub-layer，分别是 multi-head self-attention 和 position-wise fully connected feed-forward network</li>\n<li>每层都有 residual connection，然后接 layer normalization</li>\n<li>为满足 residual connection，embedding 和 encoder 的输出维度都是 d_model &#x3D; 512</li>\n</ul>\n</li>\n<li><p>Decoder</p>\n<ul>\n<li>N &#x3D; 6</li>\n<li>三层 sub-layer，分别是 masked multi-head self-attention，multi-head self-attention 和 position-wise fully connected feed-forward network</li>\n<li>每层都有 residual connection，然后接 layer normalization</li>\n<li>对于编码器的输出执行多头注意力，K（键）和V（值）来自编码器的输出，而Q（查询）来自解码器的输出。这确保了解码器中的每个位置都可以访问编码器输出中的所有位置。</li>\n<li>masked multi-head self-attention 用于防止解码器中的位置访问后续位置。这是通过将查询掩码为负无穷来实现的。</li>\n</ul>\n</li>\n<li><p>Attention</p>\n<ul>\n<li>Scaled Dot-Product Attention</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20231123180055.png\" alt=\"20231123180055\"></p>\n<p>其中 queries 和 keys 的维度是 $d_k$，values 的维度是 $d_v$。<br>事实上， 这里是可以并行的，<strong>参见原文3.2.1</strong></p>\n<blockquote>\n<p>作者在这里指出，<strong>点积 要比 加性 效率高，具体谁更好，参见原文。</strong></p>\n</blockquote>\n<blockquote>\n<p>除以 $\\sqrt{d_k}$ 是为了<strong>消除方差的影响，参见原文第四页页脚</strong></p>\n</blockquote>\n<ul>\n<li>Multi-Head Attention</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20231123180142.png\" alt=\"20231123180142\"></p>\n<p>作者认为，直接将 queries，keys 和 values 映射到 $d_{model}$ 维度的空间中，可能会导致信息损失，因此，作者将 queries，keys 和 values 分别映射到 $d_k$，$d_k$ 和 $d_v$ 维度的空间中，然后进行 Scaled Dot-Product Attention，最后将多个结果拼接起来，再次映射到 $d_{model}$ 维度的空间中。</p>\n<p>具体而言，文中设定 h &#x3D; 8，即将 queries，keys 和 values 分别映射到 $d_k$ &#x3D; $d_v$ &#x3D; $d_{model}$&#x2F;h &#x3D; 64 维度的空间中，然后进行 Scaled Dot-Product Attention，最后将多个结果拼接起来，再次映射到 $d_{model}$ 维度的空间中。<strong>参见原文3.2.2</strong></p>\n<hr>\n<ul>\n<li><p>Applications of Attention in our Model</p>\n<ul>\n<li>quiries 来自前一个 decoder layer，keys 和 values 来自 encoder 的输出</li>\n<li>encoder 包含 self-attention</li>\n<li>通过 mask 来防止 decoder 中的位置访问后续位置，<strong>具体而言，就是将 values 的后续位置 mask 为负无穷，这样过 softmax 之后，就会变成 0，即不会影响结果。</strong></li>\n</ul>\n</li>\n<li><p>Position-wise Feed-Forward Networks</p>\n</li>\n</ul>\n<p>$$\\mathcal{FFN} (x) &#x3D; \\mathbb{max} (0, x W_1 + b_1)W_2 + b_2$$</p>\n<p>其中输入和输出的维度都是 $d_{model}$ &#x3D; 512，而中间层的维度是 $d_{ff}$ &#x3D; 2048。</p>\n<ul>\n<li>embedding<br>作者将 input embedding 和 output embedding 共享参数，都是通过一个 <strong>线性层再加上一个softmax</strong> 来实现的。</li>\n</ul>\n<blockquote>\n<p>在 embedding 的时候，所有的权重乘以 $\\sqrt{d_{model} }$，<strong>这样可以使得 embedding 的结果的方差为 1</strong>，具体原因参考<a href=\"https://zhuanlan.zhihu.com/p/442509602\">这篇帖子</a>。</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20231123195753.png\" alt=\"20231123195753\"></p>\n<ul>\n<li>Positional Encoding<ul>\n<li>attention 机制没有考虑到序列中词的位置信息。因此，作者在 embedding 后加入了位置编码，用于表示词的位置信息。</li>\n<li>维度为 $d_{model}$ &#x3D; 512，位置编码的维度也是 512。<strong>便于求和</strong></li>\n</ul>\n</li>\n</ul>\n\n$$\\begin{aligned}\n\\text{PE}_{(pos, 2i)} &= \\sin(pos / 10000^{2i/d_{model} }) \\\\\n\\text{PE}_{(pos, 2i+1)} &= \\cos(pos / 10000^{2i/d_{model} })\n\\end{aligned}$$\n\n\n<p>其中，pos 是词在句子中的位置，i 是位置编码的维度。</p>\n<h4 id=\"Why-Self-Attention\"><a href=\"#Why-Self-Attention\" class=\"headerlink\" title=\"Why Self-Attention?\"></a>Why Self-Attention?</h4><ul>\n<li>可并行</li>\n<li>距离远的词也可以相互影响</li>\n<li><strong>作者还提出了 局部注意力</strong></li>\n</ul>\n<h4 id=\"Training\"><a href=\"#Training\" class=\"headerlink\" title=\"Training\"></a>Training</h4><h4 id=\"Results\"><a href=\"#Results\" class=\"headerlink\" title=\"Results\"></a>Results</h4><p>其中大模型用 8 个 P100 GPU 训练了 3.5 天</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20231123222009.png\" alt=\"20231123222009\"></p>\n<h4 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h4><ul>\n<li>本文提出了一种新的网络结构 Transformer，该结构完全基于 attention 机制，不再使用 CNN 和 RNN，因此可以并行计算，加快训练速度。</li>\n<li>Transformer 在机器翻译任务上取得了很好的效果，其后被广泛应用于其他任务中。</li>\n<li>可以考虑 局部注意力</li>\n<li>可以试试在 图像或音频 上应用 Transformer</li>\n</ul>\n<h3 id=\"2-End-to-End-Object-Detection-with-Transformers-DETR\"><a href=\"#2-End-to-End-Object-Detection-with-Transformers-DETR\" class=\"headerlink\" title=\"2. End-to-End Object Detection with Transformers: DETR\"></a>2. <a href=\"https://arxiv.org/abs/2005.12872\">End-to-End Object Detection with Transformers</a>: DETR</h3><h4 id=\"先修知识-1\"><a href=\"#先修知识-1\" class=\"headerlink\" title=\"先修知识\"></a>先修知识</h4><ol>\n<li><a href=\"https://en.wikipedia.org/wiki/Hungarian_algorithm\">Hungarian algorithm</a> : 匈牙利算法，用于解决指派问题</li>\n</ol>\n<h4 id=\"摘要-1\"><a href=\"#摘要-1\" class=\"headerlink\" title=\"摘要\"></a>摘要</h4><ul>\n<li>将目标检测视为 set prediction 问题，使用 Transformer 来解决。去除了 NMS、anchor、poposals 等。<strong>直接输出目标的位置和类别，真正的实现了端到端。</strong></li>\n<li>性能对标 Faster R-CNN，但速度更快。</li>\n<li>数据集：COCO</li>\n<li><a href=\"https://github.com/facebookresearch/detr\">code</a></li>\n</ul>\n<h4 id=\"引言-1\"><a href=\"#引言-1\" class=\"headerlink\" title=\"引言\"></a>引言</h4><ul>\n<li>现在都不是端对端，都是先生成一些 proposals，然后再分类，最后再回归。<strong>这样的结果受限于中间的这些操作。</strong></li>\n<li>虽然用到了 Transformer，<strong>但是却是并行出结果，不需要自回归。</strong></li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20231126215613.png\" alt=\"20231126215613\"></p>\n<ul>\n<li>用到了 bipartite matching loss</li>\n<li>在大物体上效果好，小物体上效果稍差</li>\n<li>消融实验做的很好</li>\n<li>很容易扩展到全景分割</li>\n</ul>\n<h4 id=\"相关工作\"><a href=\"#相关工作\" class=\"headerlink\" title=\"相关工作\"></a>相关工作</h4><ul>\n<li>之前都是需要一些知识给模型，也就是先验知识，比如 anchor，NMS，proposals 等。</li>\n<li>也有人通过 bipartite matching 来解决目标检测问题，但是是基于 RNN 的。</li>\n</ul>\n<h4 id=\"模型架构-1\"><a href=\"#模型架构-1\" class=\"headerlink\" title=\"模型架构\"></a>模型架构</h4><p><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20231126230443.png\" alt=\"20231126230443\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20231127012221.png\" alt=\"20231127012221\"></p>\n<ul>\n<li>object queries 是一个固定的向量，用于表示目标的个数，这里是 100 个（也就是 100 个框，根据数据集设定就好）。</li>\n<li><strong>Matching cost 同时考虑了 class 和 box 的信息</strong></li>\n<li>仅对类别为 <strong>非空</strong> 的进行计算损失。</li>\n<li>类别预测的损失，去除了 log，详见原文 3.1</li>\n<li>边界框预测的损失，详见原文 3.1，使用了广义 IoU</li>\n</ul>\n<hr>\n<p><strong>loss 的计算分为如下几个部分：</strong></p>\n<p><strong>首先通过 $\\mathcal{L}_{match}$ 一对一的找到框，之后算损失：box loss + class loss</strong></p>\n\n$$\n\\hat{\\sigma} = \\text{arg} \\quad \\text{min}_{\\sigma \\in \\mathcal{\\sigma}_N} \\sum_{i=1}^N \\mathcal{L}_{\\text{match} }(y_i, \\hat{y}_{\\sigma(i)})\n$$\n\n\n<ul>\n<li>$y_i &#x3D; (c_i, b_i)$ 是 ground truth</li>\n<li>$c_i$ 是 class label，可以是 $\\emptyset$</li>\n<li>$b_i$ 是 bounding box，(center x, center y, height, and width relative to the image size).</li>\n<li>$\\hat{y}_i$ 是预测的结果，可以 padded with $\\emptyset$ (no object) when N &gt; the number of objects.</li>\n<li>$\\hat{c_i}$ 是预测的类别</li>\n<li>$\\hat{b_i}$ 是预测的 bounding box</li>\n<li>$\\mathcal{\\sigma(i)}$ is an index within a particular permutation of N elements.</li>\n</ul>\n\n$$\n\\mathcal{L}_{\\text{match} }(y_i, \\hat{y}_{\\sigma(i)}) = - \\mathbb{1}_{\\{c_i \\neq \\emptyset\\} } \\hat{p}_{\\sigma(i)}(c_i) + \\mathbb{1}_{\\{c_i = \\emptyset\\} } \\mathcal{L}_{\\text{box} }(b_i, \\hat{b}_{\\sigma(i)})\n$$\n\n- $\\mathbb{1}_{\\{c_i \\neq \\emptyset\\} }$ 是指当 $c_i \\neq \\emptyset$ 时，取 1，否则取 0\n- $\\hat{p}_{\\sigma(i)}(c_i)$ 是指预测的类别为 $c_i$ 的概率\n- $\\mathcal{L}_{\\text{box} }(b_i, \\hat{b}_{\\sigma(i)})$ 是指预测的 bounding box 与 ground truth 的损失\n\n$$\n\\mathcal{L}_{\\text{box} }(b_i, \\hat{b}_{\\sigma(i)}) = \\lambda_{iou} \\mathcal{L}_{iou} (b_i, \\hat{b}_{\\sigma(i)}) + \\lambda_{L_1} ||b_i - \\hat{b}_{\\sigma(i)}||_1\n$$\n\n\n<blockquote>\n<p>$L_1$ 损失较常用，但是对于小框和大框的损失处理有问题，因此作者加入了 $IoU$ 损失，详见原文</p>\n</blockquote>\n\n$$\n\\mathcal{L}_{\\text{Hungarian} }(y, \\hat{y}) = \\sum_{i=1}^N [- \\log \\hat{p}_{\\hat \\sigma(i)}(c_i) + \\mathbb{1}_{\\{c_i \\neq \\emptyset\\} } \\mathcal{L}_{\\text{box} }(b_i, \\hat{b}_{\\hat \\sigma(i)})]\n$$\n\n\n<blockquote>\n<p><strong>事实上，作者还加了超参系数做平衡。这里使用了对数，而上文没有，是因为二者考虑的问题不一样，一个是考虑数值相对平衡，一个是考虑梯度相对平衡。</strong></p>\n</blockquote>\n<hr>\n<ul>\n<li><strong>positional encoding 也好，object queries 也好，都加入到了每一层 attention layer 的计算</strong>，</li>\n<li>作者还加入了 Auxiliary decoding losses，也就是每一层的输出都会计算损失（但是所有的 FFN 共享参数），详见原文 3.2</li>\n</ul>\n<p><img src=\"https://kikaben.com/detr-object-detection-with-transformers-2020/images/fig-10.png\" alt=\"paper 中 Fig.10\"></p>\n<h4 id=\"实验\"><a href=\"#实验\" class=\"headerlink\" title=\"实验\"></a>实验</h4><ul>\n<li>详细探究了每个组件的作用</li>\n<li>全景分割的实验</li>\n</ul>\n<h4 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h4><ul>\n<li>本文提出了一种新的目标检测方法 DETR，该方法使用 Transformer 来解决目标检测问题，去除了 NMS、anchor、poposals 等，直接输出目标的位置和类别，真正的实现了端到端。</li>\n</ul>\n<h4 id=\"附录代码\"><a href=\"#附录代码\" class=\"headerlink\" title=\"附录代码\"></a>附录代码</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> torch</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch <span class=\"keyword\">import</span> nn</span><br><span class=\"line\"><span class=\"keyword\">from</span> torchvision.models <span class=\"keyword\">import</span> resnet50</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DETR</span>(nn.Module):</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, num_classes, hidden_dim, nheads, num_encoder_layer, num_decoder_layers</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Backbone: ResNet-50 without the last two layers (fully connected and pooling)</span></span><br><span class=\"line\">        self.backbone = nn.Sequential(*<span class=\"built_in\">list</span>(resnet50(pretrained=<span class=\"literal\">True</span>).children())[:-<span class=\"number\">2</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 1x1 Convolution to reduce channels from 2048 to hidden_dim</span></span><br><span class=\"line\">        self.conv = nn.Conv2d(<span class=\"number\">2048</span>, hidden_dim, <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Transformer layers</span></span><br><span class=\"line\">        self.transformer = nn.Transformer(hidden_dim, nheads, num_encoder_layer, num_decoder_layers)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Output layers</span></span><br><span class=\"line\">        self.linear_class = nn.Linear(hidden_dim, num_classes + <span class=\"number\">1</span>)  <span class=\"comment\"># Class prediction (plus background)</span></span><br><span class=\"line\">        self.linear_bbox = nn.Linear(hidden_dim, <span class=\"number\">4</span>)  <span class=\"comment\"># Bounding box prediction (4 coordinates)</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\"># Learnable positional embeddings</span></span><br><span class=\"line\">        self.query_pos = nn.Parameter(torch.rand(<span class=\"number\">100</span>, hidden_dim))  <span class=\"comment\"># Query positional embedding</span></span><br><span class=\"line\">        self.row_embed = nn.Parameter(torch.rand(<span class=\"number\">50</span>, hidden_dim // <span class=\"number\">2</span>))  <span class=\"comment\"># Row positional embedding</span></span><br><span class=\"line\">        self.col_embed = nn.Parameter(torch.rand(<span class=\"number\">50</span>, hidden_dim // <span class=\"number\">2</span>))  <span class=\"comment\"># Column positional embedding</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">forward</span>(<span class=\"params\">self, inputs</span>):</span><br><span class=\"line\">        <span class=\"comment\"># Backbone feature extraction</span></span><br><span class=\"line\">        x = self.backbone(inputs)</span><br><span class=\"line\">        <span class=\"comment\"># 1x1 Convolution</span></span><br><span class=\"line\">        h = self.conv(x)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\"># Get height (H) and width (W) of the feature map</span></span><br><span class=\"line\">        H, W = h.shape[-<span class=\"number\">2</span>:]</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\"># Positional embeddings</span></span><br><span class=\"line\">        pos = torch.cat([</span><br><span class=\"line\">            self.col_embed[:W].unsqueeze(<span class=\"number\">0</span>).repeat(H, <span class=\"number\">1</span>, <span class=\"number\">1</span>),</span><br><span class=\"line\">            self.row_embed[:H].unsqueeze(<span class=\"number\">1</span>).repeat(<span class=\"number\">1</span>, W, <span class=\"number\">1</span>)</span><br><span class=\"line\">        ], dim=-<span class=\"number\">1</span>).flatten(<span class=\"number\">0</span>, <span class=\"number\">1</span>).unsqueeze(<span class=\"number\">1</span>)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\"># Flatten and permute for transformer input</span></span><br><span class=\"line\">        h = self.transformer(pos + h.flatten(<span class=\"number\">2</span>).permute(<span class=\"number\">2</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>), self.query_pos.unsqueeze(<span class=\"number\">1</span>))</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\"># Output predictions</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.linear_class(h), self.linear_bbox(h).sigmoid()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Instantiate the model</span></span><br><span class=\"line\">detr = DETR(num_classes=<span class=\"number\">91</span>, hidden_dim=<span class=\"number\">256</span>, nheads=<span class=\"number\">8</span>, num_encoder_layer=<span class=\"number\">6</span>, num_decoder_layers=<span class=\"number\">6</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Set the model to evaluation mode</span></span><br><span class=\"line\">detr.<span class=\"built_in\">eval</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Generate random input tensor</span></span><br><span class=\"line\">inputs = torch.rand(<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">800</span>, <span class=\"number\">1200</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Forward pass through the model</span></span><br><span class=\"line\">logits, bboxes = detr(inputs)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-AN-IMAGE-IS-WORTH-16X16-WORDS-TRANSFORMERS-FOR-IMAGE-RECOGNITION-AT-SCALE-Vision-Transformer\"><a href=\"#3-AN-IMAGE-IS-WORTH-16X16-WORDS-TRANSFORMERS-FOR-IMAGE-RECOGNITION-AT-SCALE-Vision-Transformer\" class=\"headerlink\" title=\"3. AN IMAGE IS WORTH 16X16 WORDS: TRANSFORMERS FOR IMAGE RECOGNITION AT SCALE: Vision Transformer\"></a>3. <a href=\"https://arxiv.org/pdf/2010.11929.pdf\">AN IMAGE IS WORTH 16X16 WORDS: TRANSFORMERS FOR IMAGE RECOGNITION AT SCALE</a>: Vision Transformer</h3><p>作者是 Google Research 的人</p>\n<ul>\n<li><a href=\"https://github.com/google-research/vision_transformer\">code</a></li>\n</ul>\n<p>将一个不修改的 transformer 应用于图像分类，是有一定困难的。因为 transformer 的输入是一个序列，而图像是一个二维的矩阵，我们可以将图像转换为序列，但是这样会导致序列过长，计算量过大。</p>\n<p>因此，作者提出了一种新的 transformer，叫做 Vision Transformer（ViT），该 transformer 仍然是基于 attention 机制的，但是在输入的时候，作者将图像分为了一个个 patch，然后将每个 patch 作为一个 token，这样就可以将图像转换为序列，而且序列的长度不会太长。<strong>这样的 transformer 也可以用于目标检测和语义分割。</strong></p>\n<p><strong>架构图如下：</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20231209141514.png\" alt=\"20231209141514\"></p>\n<p>将图像分为了 $N$ 个 patch，每个 patch 的维度是 $P$，这样就可以将图像转换为一个序列，序列的长度是 $N$，维度是 $P$。需要单独再加一个 class token，用于表示图像的类别。</p>\n<h3 id=\"4-Incremental-DETR-Incremental-Few-Shot-Object-Detection-via-Self-Supervised-Learning\"><a href=\"#4-Incremental-DETR-Incremental-Few-Shot-Object-Detection-via-Self-Supervised-Learning\" class=\"headerlink\" title=\"4. Incremental-DETR: Incremental Few-Shot Object Detection via Self-Supervised Learning\"></a>4. <a href=\"https://arxiv.org/abs/2205.04042\">Incremental-DETR: Incremental Few-Shot Object Detection via Self-Supervised Learning</a></h3><p>作者是新加坡国立大学和哈尔滨工业大学的学生</p>\n<h4 id=\"摘要-2\"><a href=\"#摘要-2\" class=\"headerlink\" title=\"摘要\"></a>摘要</h4><ul>\n<li>Incremental 旨在学习新类别的目标检测，而不会影响到已有类别的目标检测。</li>\n<li>novel class 数据量少</li>\n<li>通过在 DETR 上进行 fine-tune 和 self-supervised learning 来实现。</li>\n<li>用到了 selective search algorithm</li>\n<li>用到了 knowledge distillation</li>\n<li><a href=\"https://github.com/dongnana777/Incremental-DETR\">code</a></li>\n</ul>\n<h4 id=\"引言-2\"><a href=\"#引言-2\" class=\"headerlink\" title=\"引言\"></a>引言</h4><ul>\n<li>增量学习一直都是一个难题，很容易出现 catastrophic forgetting。</li>\n<li><strong>前人通过同时训练 base class 和 novel class 来解决</strong>，但是如果我们<strong>没有 base class 的数据</strong>，方法就会受限。</li>\n<li>前人在 Faster R-CNN 做过类似的事情，第一阶段在 base class 上训练，第二阶段冻结<strong>类无关提取器和 RPN</strong>，只对预测头进行 fine-tune。<strong>作者深受启发。</strong></li>\n<li><strong>作者解冻不同的DETR层进行微调，并根据经验确定投影层和分类头是特定于类的，DETR的CNN主干、变压器和回归头与类无关</strong></li>\n<li><strong>假定在进行 incremental 的时候，base class 的数据是不可用的。</strong></li>\n<li>第一阶段：base model 预训练，之后进行 self-supervised fine-tune。第二阶段：在 novel class 上进行 incremental fine-tune。</li>\n<li>第一阶段用到了 slecetive search algorithm</li>\n<li><strong>提出了 classification distillation loss 和 masked feature distillation loss</strong></li>\n<li>dataset：COCO、PASCAL VOC</li>\n</ul>\n<h4 id=\"相关工作-1\"><a href=\"#相关工作-1\" class=\"headerlink\" title=\"相关工作\"></a>相关工作</h4><ul>\n<li>Object Detection</li>\n<li>Few-Shot Object Detection</li>\n<li>Incrementa Few-Shot Object Detection</li>\n</ul>\n<h4 id=\"问题定义\"><a href=\"#问题定义\" class=\"headerlink\" title=\"问题定义\"></a>问题定义</h4><ul>\n<li>$D_{novel}$ 用的时候 $D_{base}$ 不可用</li>\n<li><strong>新类和旧类没有重叠</strong></li>\n<li><strong>新类仅有少量样本</strong></li>\n</ul>\n<h4 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h4><h5 id=\"Base-Model-Training\"><a href=\"#Base-Model-Training\" class=\"headerlink\" title=\"Base Model Training\"></a>Base Model Training</h5><p><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20231127021733.png\" alt=\"20231127021733\"></p>\n<ol>\n<li>在 stage 1 的第一部分，采用正常的 DETR 训练策略在 $D_{base}$ 上进行训练。</li>\n<li>在 stage 1 的第二部分，进来一张图片，通过 selective search algorithm 生成一些 proposals，之后选择 top O 个 proposals，<strong>要求这些 proposals 与 base class 的 ground truth bounding box 不重叠</strong>。之后将这些 proposals 作为 pseudo ground truth，采用 DETR 的方式进行训练。也就是图中的 $b^<code>$，对应的类别是 $c^</code>$。</li>\n</ol>\n<ul>\n<li>找框：</li>\n</ul>\n\n$$\n\\hat{\\sigma} = \\text{arg} \\quad \\text{min}_{\\sigma \\in \\mathcal{\\sigma}_N} \\sum_{i=1}^N \\mathcal{L}_{\\text{match} }(y_i, \\hat{y}_{\\sigma(i)})\n$$\n\n$$\n\\mathcal{L}_{\\text{match} }(y_i, \\hat{y}_{\\sigma(i)}) = - \\mathbb{1}_{\\{c_i \\neq \\emptyset\\} } \\hat{p}_{\\sigma(i)}(c_i) + \\mathbb{1}_{\\{c_i = \\emptyset\\} } \\mathcal{L}_{\\text{box} }(b_i, \\hat{b}_{\\sigma(i)})\n$$\n\n\n\n<ul>\n<li>Hungarian loss：</li>\n</ul>\n\n$$\nL_{hg}(y, \\hat{y}) = \\sum_{i=1}^N [- \\log \\hat{p}_{\\hat \\sigma(i)}(c_i) + \\mathbb{1}_{\\{c_i \\neq \\emptyset\\} } \\mathcal{L}_{\\text{box} }(b_i, \\hat{b}_{\\hat \\sigma(i)})]\n$$\n\n\n<ul>\n<li>在 stage 1 中的第二部分，损失为：</li>\n</ul>\n\n$$\n\\mathcal{L}^{base}_{total} = \\mathcal{L}_{hg}(y, \\hat{y}) + \\lambda^` \\mathcal{L}_{hg}(y^`, \\hat{y}^`)\n$$\n\n\n<h5 id=\"Incremental-Few-Shot-Fine-Tuning\"><a href=\"#Incremental-Few-Shot-Fine-Tuning\" class=\"headerlink\" title=\"Incremental Few-Shot Fine-Tuning\"></a>Incremental Few-Shot Fine-Tuning</h5><p><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20231127192105.png\" alt=\"20231127192105\"></p>\n<ul>\n<li>仅白色部分进行 fine-tune</li>\n<li>直接 fine-tune，会导致 catastrophic forgetting，因此作者提出了 knowledge distillation。直接 knowledge distillation 会和 novel class 的学习产生冲突，所以这里引入了 $\\mathcal{mask}^{novel}$，（如果是 novel class ground truth boxes，则为 1，否则为 0）。具体而言：</li>\n</ul>\n\n$$\n\\mathcal{L}^{kd}_{feat} = \\frac{1}{2 N^{novel}} \\sum_{i=1}^{w} \\sum_{j=1}^{h} \\sum_{k=1}^{c} (1 - \\mathcal{mask}^{novel}_{ij}) ||f_{ijk}^{novel} - f_{ijk}^{base}||^2\n$$\n\n其中，$N^{novel} = \\sum_{i=1}^{w} \\sum_{j=1}^{h} (1 - \\mathcal{mask}^{novel}_{ij})$，$f^{base}$ 和 $f^{novel}$ 分别是 base model 和 novel model 的 feature map。$w$，$h$，$c$ 分别是 feature map 的宽、高和通道数。\n\n\n<blockquote>\n<p>直观理解，对于每一个像素点，对于它的所有通道，去看它是否是 novel class bounding box 的一部分，如果是，则不需要进行 knowledge distillation，否则，则需要进行 knowledge distillation。</p>\n</blockquote>\n<p>同样，对于分类器头，直接做 knowledge distillation 也不合适，为解决这个问题，如下：</p>\n\n$$\n\\mathcal{L}^{kd}_{cls} = \\mathcal{L}_{kl\\_div}(\\log(q^{novel}), q^{base})\n$$\n\n\n<blockquote>\n<p>进来一张 novel image，通过 base model 进行预测，如果 class probability 大于 0.5，且 bounding box 与 novel class ground truth boxes 不重叠，则认为需要蒸馏，算 KL 散度。</p>\n</blockquote>\n<ul>\n<li>stage 2 的损失为：</li>\n</ul>\n\n$$\n\\mathcal{L}^{novel}_{total} = \\mathcal{L}_{hg}(y, \\hat{y}) + \\lambda_{feat} \\mathcal{L}^{kd}_{feat} + \\lambda_{cls} \\mathcal{L}^{kd}_{cls}\n$$\n\n\n<h4 id=\"实验-1\"><a href=\"#实验-1\" class=\"headerlink\" title=\"实验\"></a>实验</h4><h4 id=\"结论-1\"><a href=\"#结论-1\" class=\"headerlink\" title=\"结论\"></a>结论</h4><ul>\n<li>通过蒸馏学习，做到了在学习新知识的同时不遗忘旧知识。</li>\n<li>提前通过 self-supervised 生成一些 新类标签，进行fine-tune，使得模型更容易接受新知识。</li>\n<li>断定模型中的部分可以分为 class-specific 和 class-agnostic 两部分。</li>\n</ul>\n<h3 id=\"5-Lightweight-Transformer-for-Multi-Modal-Object-Detection-Student-Abstract\"><a href=\"#5-Lightweight-Transformer-for-Multi-Modal-Object-Detection-Student-Abstract\" class=\"headerlink\" title=\"5. Lightweight Transformer for Multi-Modal Object Detection (Student Abstract)\"></a>5. <a href=\"https://ojs.aaai.org/index.php/AAAI/article/view/26946\">Lightweight Transformer for Multi-Modal Object Detection (Student Abstract)</a></h3><p><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20231210112104.png\" alt=\"20231210112104\"></p>\n<p>模型训练时，可以从多个角度进行训练，角度越多越准确，但却更慢。</p>\n<p>比如<strong>自动驾驶</strong>，仅有一个传感器肯定没有多个传感器的结果准确，但是多个传感器的结果又太慢。</p>\n<p>那么能不能又快又准呢？那就要从模态融合入手。<strong>作者提出了一种新的融合操作符，叫做 Poolformer-based fusion operator。</strong></p>\n<blockquote>\n<p>本质上来讲，本文更换了权重分配的方式，用 pooling 来进行替代，这样可以减少参数量，提高速度，但效果却不差。文章没有提供代码，但是作者<a href=\"https://github.com/autonomousvision/transfuser\">回复邮件推荐了一份代码</a></p>\n</blockquote>\n<h3 id=\"6-Self-supervised-Label-Augmentation-via-Input-Transformations\"><a href=\"#6-Self-supervised-Label-Augmentation-via-Input-Transformations\" class=\"headerlink\" title=\"6. Self-supervised Label Augmentation via Input Transformations\"></a>6. <a href=\"https://arxiv.org/abs/1910.05872\">Self-supervised Label Augmentation via Input Transformations</a></h3><p>一言以蔽之，通过<strong>数据增强</strong>的方式来增强原始标签，<strong>不仅仅对于无监督、半监督学习有效，对于全监督学习也能带来效果的提升。将共享底层特征改成了 unified task</strong></p>\n<p><strong>共享底层特征</strong>：先前的工作通常为原始任务和自监督任务维护两个独立的分类器（但共享公共特征表示），并同时优化它们的目标。<strong>也就是，不论你图像怎么变（增强），特征表示不能变</strong>。</p>\n<ul>\n<li><a href=\"https://github.com/hankook/SLA\">code</a></li>\n</ul>\n<blockquote>\n<p><strong>有效地利用基于 transformation 的自我监督进行全监督的分类任务。对于 few-shot and imbalanced classification scenarios 也有效果</strong></p>\n</blockquote>\n<p><em><strong>Difference with previous approaches:</strong></em></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20231210143836.png\" alt=\"20231210143836\"></p>\n<ul>\n<li>单纯的 Data Augmentation，只是对输入进行了变换，但却强行使得标签不变的一种方案，这种方案有一定弊端，比如：6 和 9，详见原文</li>\n</ul>\n\n$$\n\\mathcal{L}_{DA}(x,y;\\theta,\\mu) = \\frac{1}{M} \\sum_{j=1}^M \\mathcal{L}_{CE}(\\theta(\\hat{z_j}; \\mu), y)\n$$\n\n\n<ul>\n<li>Multi-task Learning 同时学习两个任务，同时优化它们。<strong>但是，当数据集是全标签时，这种方法通常不会带来效果的提升。</strong></li>\n</ul>\n\n$$\n\\mathcal{L}_{MT}(x,y;\\theta,u,v) = \\frac{1}{M} \\sum_{j=1}^{M} \\mathcal{L}_{CE}(\\theta(\\hat{z_j};\\mu), y) + \\mathcal{L}_{CE}(\\theta(\\hat{z_j};v),j)\n$$\n\n\n<ul>\n<li>本文所提出的SLA(Self-supervised Label Augmentation)方法直接学习<strong>联合概率分布</strong>。效果最好，也最通用。</li>\n</ul>\n\n$$\n\\mathcal{L}_{SLA}(x,y;\\theta,\\omega) = \\frac{1}{M} \\sum_{j=1}^{M} \\mathcal{L}_{CE}(p(\\hat{z_j};\\omega), (y,j))\n$$\n\n\n<blockquote>\n<p>此处损失详见原文。</p>\n</blockquote>\n<p><strong>对比效果如下：</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20231210144438.png\" alt=\"20231210144438\"></p>\n<hr>\n<blockquote>\n<p>SLA 仅增加了标签的数量，对于模型的参数基本上没有影响。<br>SLA 可以弱化为 Data Augmentation，也可以弱化为 Multi-task Learning。但是 Multi-task Learning 约束太强（强制 label 不变），难以优化。</p>\n</blockquote>\n<hr>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20231210173513.png\" alt=\"20231210173513\"></p>\n<p>由于预测的结果变为了以前的 M 倍，所以先做 Aggregation，也就是把对应的 M 个条件概率加起来，然后再进行 softmax。之后和原来的标签进行交叉熵计算蒸馏损失。</p>\n\n$$\n\\mathcal{L}_{SLA}(x,y;\\theta,\\omega,\\mu) = \\mathcal{L}_{SLA}(x,y; \\theta, \\omega) + \\mathcal{D}_{KL}(P_{aggregated}(·|x)|| \\sigma(z;\\mu)) + \\beta \\mathcal{L}_{CE}(\\sigma(z;\\mu), y)\n$$\n\n\n<h3 id=\"7-Learn-More-for-Food-Recognition-via-Progressive-Self-Distillation\"><a href=\"#7-Learn-More-for-Food-Recognition-via-Progressive-Self-Distillation\" class=\"headerlink\" title=\"7. Learn More for Food Recognition via Progressive Self-Distillation\"></a>7. <a href=\"https://arxiv.org/abs/2303.05073\">Learn More for Food Recognition via Progressive Self-Distillation</a></h3><ul>\n<li>面临的问题：</li>\n</ul>\n<p>食品识别一直是一个比较困难的任务，因为这是一个比较细粒度的任务。例如对于鸟的识别，找到鸟头、爪子就好了，但是食品可能是各种水果、蔬菜堆叠在一起构成沙拉，这比较困难。传统的方法是先用弱监督的方式做很多位置的定位，之后聚合并抽取特征，最后分类。<strong>但这样一来，性能就会被位置定位所限制。我们很难把每一部分区域都学好。</strong></p>\n<ul>\n<li>解决方案：</li>\n</ul>\n<p>作者提出了 PSD（Progressive Self-Distillation），用于去挖掘图像中更有用的区域。teacher model 和 student model 共享相同的 embeding。最后 inference 阶段，仅保留 teacher model。仍然属于 self-supervised 的范畴。</p>\n<p><strong>embedding 可以用 CNN，也可以用 transformer(e.g.,Swin Transformer)。</strong></p>\n<ul>\n<li>dataset：ETHZ Food-101、Vireo Food-172、ISIA Food-500</li>\n<li>code: 无</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20231210235852.png\" alt=\"20231210235852\"></p>\n<p>student model 和 teacher model 共享同一个 Embeding Network，但是有不同的分类器。输入<strong>原始图片</strong>给 teacher model，经过一个 ViT 得到一个 T x D 的 tokens，reshape 成 H x W x D 的 feature map，之后经过全局平均池化，得到一个 D 维的向量，之后经过一个全连接层，得到一个 C 维的向量，之后送入 Class Response Module。根据 Threshold，得到一个 mask，之后将 mask 与原始图片相乘，得到一个新的图片，送入 student model。如法炮制，进得到了很多的 student model。蒸馏阶段，使用 teacher model 的输出作为 ground truth，student model 的输出作为预测值，计算 KL 散度。</p>\n<p>损失如下：</p>\n\n$$\n\\mathcal{L} = \\mathcal{L}_{g}(x,y) + \\sum_{i=1}^{m}(\\omega_l \\mathcal{L}_{l}(\\hat{x}_{i-1}, y) + \\omega_d \\mathcal{L}_{d}(x, \\hat{x}_{i}))\n$$\n\n其中 $\\mathcal{L}_{g}(x,y)$ 是原始的分类损失，$\\mathcal{L}_{l}$ 是 locating loss，$\\mathcal{L}_{d}$ 是 distillation loss。\n\n$$\n\\mathcal{L}_{g}(x,y) = \\mathcal{L}_{CE}(h(f(x;\\theta); \\phi_t), y)\n$$\n\n$$\nL_{l}(x,y) = \\mathcal{L}_{ce}(GAP(f(x;\\theta); \\Theta), y)\n$$\n\n$$\n\\mathcal{L}_d(x, \\hat{x}) = \\mathcal{D}_{KL}(h(f(x;\\theta); \\phi_t), h(f(\\hat{x};\\theta); \\phi_s))\n$$\n\n\n\n<p>所谓渐进，是依靠$\\omega_l$ 和 $\\omega_d$ 来控制的。</p>\n\n$$\n\\omega_d = \n\\begin{cases}\n    \\alpha \\cdot \\exp(-5(1 - \\frac{e}{\\beta})^2), & e < \\beta \\\\\n    \\alpha, & e \\geq \\beta\n\\end{cases}\n$$\n\n\n<blockquote>\n<p>垃圾文章，没有代码，作者邮件不回。$L_l$也没有讲清楚。Class Response Module 出来之后怎么进行 Threshold？怎么得到 mask？这些都没有讲清楚。<strong>或许需要一些食物识别的先验知识。</strong></p>\n</blockquote>\n<h3 id=\"8-Solving-Math-Word-Problems-concerning-Systems-of-Equations-with-GPT-3\"><a href=\"#8-Solving-Math-Word-Problems-concerning-Systems-of-Equations-with-GPT-3\" class=\"headerlink\" title=\"8. Solving Math Word Problems concerning Systems of Equations with GPT-3\"></a>8. <a href=\"https://ojs.aaai.org/index.php/AAAI/article/view/26896\">Solving Math Word Problems concerning Systems of Equations with GPT-3</a></h3><h4 id=\"摘要-3\"><a href=\"#摘要-3\" class=\"headerlink\" title=\"摘要\"></a>摘要</h4><p>本文解决了一个专业领域的问题，就是<strong>数学方程式的提取和求解问题</strong>。作者将其归到了 NLP 的范畴，使用了 GPT-3 来解决这个问题。<br>问题分三步：</p>\n<ol>\n<li>对问题进行 <strong>分类</strong>，是几元方程式。这个问题目前 GPT-3 能够达到 80%-100% 的准确率。</li>\n<li>提取方程式，这个问题的精度随着给定模型的例子数量的增加而增加。one-shot 的精度为 31%，3-shot 的精度为 69%。之后再进一步进行 fine-tune，精度可以达到 80%。</li>\n<li>生成新的问题，GPT-3 的精度在 33%-93%，具体取决于问题类型。</li>\n</ol>\n<h4 id=\"引言-3\"><a href=\"#引言-3\" class=\"headerlink\" title=\"引言\"></a>引言</h4><p>本文聚焦的问题是 <strong>二元一次线性方程组，也就是两个变量，两个方程式</strong>。如上所述，解决问题如下：</p>\n<ul>\n<li><p>Q1: How good  is GPT-3 at classifying problems into different themes?</p>\n</li>\n<li><p>Q2: How good is GPT-3 at extracting a system of linear equations directly from problem descriptions?</p>\n</li>\n<li><p>Q3: How good is GPT-3 at creatively generating valid problems?</p>\n</li>\n<li><p><a href=\"https://github.com/anrgusc/MWP2L\">dataset</a></p>\n</li>\n</ul>\n<p><strong>如下为 Q1</strong>. Table1: Instance problem from each category</p>\n<table>\n<thead>\n<tr>\n<th>类别</th>\n<th>问题</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>Sum and Difference (S&amp;D)</strong></td>\n<td><em>The sum of half of a number, x, and another number, y, is -28. The difference of x and y is 7. Find x and y.</em></td>\n</tr>\n<tr>\n<td><strong>Item and Property (I&amp;P)</strong></td>\n<td><em>Three apples and four bananas cost $4.85. Three apples and ten bananas cost $8.75. Find the cost of an apple.</em></td>\n</tr>\n<tr>\n<td><strong>Perimeter of Rectangle (PoR)</strong></td>\n<td><em>The length of a rectangle is 3 cm less than double the width, and the perimeter is 53 cm. Find its dimensions.</em></td>\n</tr>\n<tr>\n<td><strong>Motion (MO)</strong></td>\n<td><em>Joey and Natasha start from the same point and walk in opposite directions. Joey walks 4 km&#x2F;h faster than Natasha. After 2 hours, they are 31 kilometers apart. How fast did each walk?</em></td>\n</tr>\n<tr>\n<td><strong>Mixture (MI)</strong></td>\n<td><em>Twelve gallons of a 31% acid mixture is obtained by mixing a 23% solution with a 48% solution. How much of each must be used?</em></td>\n</tr>\n</tbody></table>\n<p><strong>生成表达式的时候，前缀、中缀和后缀的进度不同。</strong></p>\n<p>已经有人通过 Transformer 来解决这个问题，但是作者说泛化性不好。详见文章的 <em>Prior Applications of Transformers to MWP</em>。<strong>还有人通过 BERT 来解决这个问题。</strong></p>\n<p>目前关注的问题是以下五个，作者仅考虑了其中的三个：</p>\n<ul>\n<li>identify the type of problem</li>\n<li>output step-by-step instructions</li>\n<li>extract the correct system of linear equations</li>\n<li>successfully solve the equations</li>\n<li>generate similar problems for users to practice.</li>\n</ul>\n<p>Table 2: Extraction task example.</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">Problem</th>\n<th align=\"center\">How many gallons of a 20% antifreeze solution and a 10% antifreeze solution must be mixed to obtain 40 gallons of a 16% antifreeze solution?</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">Valid Response</td>\n<td align=\"center\">0.2<em>x+0.1</em>y&#x3D;0.16*(x+y);x+y&#x3D;40</td>\n</tr>\n<tr>\n<td align=\"center\">Invalid Response</td>\n<td align=\"center\">20x+10y&#x3D;16*40 (only one equation is derived)</td>\n</tr>\n<tr>\n<td align=\"center\">Invalid Response</td>\n<td align=\"center\">20x+10(40-x)&#x3D;16(40) (failed to use required variable y)</td>\n</tr>\n<tr>\n<td align=\"center\">Invalid Response</td>\n<td align=\"center\">2<em>x+1</em>y&#x3D;40;0.2<em>x+0.1</em>y&#x3D;0.16 (incorrect interpretation)</td>\n</tr>\n</tbody></table>\n<p>Table 3: Problem generation.</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">problem given in prompt</th>\n<th align=\"center\">The larger of two numbers is 10 more than twice the smaller. If the smaller is subtracted from the larger, the result is 26. Find the numbers.</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">within-topic generation outcome</td>\n<td align=\"center\">The larger of two numbers is 15 more than twice the smaller. If the smaller is subtracted from the larger, the result is 33. Find the numbers.</td>\n</tr>\n<tr>\n<td align=\"center\">cross-topic generation outcome</td>\n<td align=\"center\">The larger of two angles is 10 more than twice the smaller. If the smaller is subtracted from the larger, the result is 26. Find the angles.</td>\n</tr>\n</tbody></table>\n<hr>\n<h3 id=\"9-Curriculum-Temperature-for-Knowledge-Distillation\"><a href=\"#9-Curriculum-Temperature-for-Knowledge-Distillation\" class=\"headerlink\" title=\"9. Curriculum Temperature for Knowledge Distillation\"></a>9. <a href=\"https://arxiv.org/abs/2211.16231\">Curriculum Temperature for Knowledge Distillation</a></h3><ul>\n<li><p><a href=\"https://github.com/zhengli97/CTKD?tab=readme-ov-file\">code</a></p>\n</li>\n<li><p><a href=\"https://zhengli97.github.io/CTKD/\">Project Page</a></p>\n</li>\n<li><p><a href=\"https://zhengli97.github.io/CTKD/chinese_interpertation.html\">中文解读</a></p>\n</li>\n<li><p>引言中指出：MKD (Liu et al. 2022) 比较重视 <strong>数据增强</strong>。</p>\n</li>\n<li><p>相关工作中指出：</p>\n<ul>\n<li><em>This training strategy has been widely applied in various domains, such as computer vision (Wu et al. 2018; Sinha, Garg, and Larochelle 2020) and natural language processing (Platanios et al. 2019; Tay et al. 2019).</em></li>\n<li>Curriculum Dropout (Morerio et al. 2017)</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"10-Sharpness-Aware-Minimization-for-Efficiently-Improving-Generalization\"><a href=\"#10-Sharpness-Aware-Minimization-for-Efficiently-Improving-Generalization\" class=\"headerlink\" title=\"10. Sharpness-Aware Minimization for Efficiently Improving Generalization\"></a>10. <a href=\"https://arxiv.org/abs/2010.01412\">Sharpness-Aware Minimization for Efficiently Improving Generalization</a></h3><ul>\n<li><a href=\"https://github.com/google-research/sam\">code</a></li>\n<li><a href=\"https://github.com/davda54/sam\">Third-party library</a></li>\n</ul>\n<p>cifar100 的结果：Percentage correct 96.08，最强结果。</p>\n<p>作者认为：现在模型的参数都特别多，单单靠 loss function 去做优化，不足以支撑起整个任务，这会导致太多不同的解。因此，作者提出了 SAM（Sharpness-Aware Minimization），通过优化 sharpness 来提高泛化性能，<strong>也就是优化曲率</strong>。</p>\n<p>一言以蔽之：不仅仅要优化模型的 loss，还要优化 loss 最小值附近的 平滑度。<strong>可以将其视为一种学习算法，经测试，相当多的模型和任务，套用上这个算法，效果都会有所提升。</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20231218094309.png\" alt=\"20231218094309\"></p>\n<p><strong>Theorem (stated informally) 1.</strong> For any $\\rho$ &gt; 0, with high probability over training set $S$ generated from distribution $\\mathcal{D}$,</p>\n\n$$\n\\mathcal{D}(\\omega) \\leq \\text{max}_{|| \\epsilon ||_2 \\leq \\rho} \\mathcal{L}_{S}(\\omega + \\epsilon) + \\mathcal{h}(|| \\omega ||_2^2 / \\rho^2)\n$$\n\n\n<p>where $h : R_+ → R_+$ is a strictly increasing function (under some technical conditions on $L_D (w)$).</p>\n<p>事实上，上述公式的右侧可以写为：</p>\n\n$$\n[\\text{max}_{|| \\epsilon ||_2 \\leq \\rho} \\mathcal{L}_{S}(\\omega + \\epsilon) - \\mathcal{L}_{S}(\\omega)] + \\mathcal{L}_{S}(\\omega) + \\mathcal{h}(|| \\omega ||_2^2 / \\rho^2)\n$$\n\n\n<p>其中最后一项可以看成是一个正则项，可以用$\\lambda || \\omega ||_2^2$来代替。[]内的代表锐度，也就是 sharpness。中间那一项是 loss。</p>\n<p>故而，SAM 的损失函数为：</p>\n\n$$\n\\text{min}_{\\omega} \\mathcal{L}_{S}^{SAM}(\\omega) + \\lambda || \\omega ||_2^2 \\quad\n\n\\text{where} \\quad \\mathcal{L}_{S}^{SAM}(\\omega) \\stackrel{\\triangle}{=} \\text{max}_{|| \\epsilon ||_p \\leq \\rho} \\mathcal{L}_{S}(\\omega + \\epsilon)\n$$\n\n\n<p>就是一个最大最小化问题，详细推导见原文。</p>\n<blockquote>\n<p>Because SAM’s performance is amplified by not syncing the perturbations, data parallelism is highly recommended to leverage SAM’s full potential (see Section 4 for more details).就是数据并行，效果更好。</p>\n</blockquote>\n<h3 id=\"11-Adaptive-Hierarchy-Branch-Fusion-for-Online-Knowledge-Distillation\"><a href=\"#11-Adaptive-Hierarchy-Branch-Fusion-for-Online-Knowledge-Distillation\" class=\"headerlink\" title=\"11. Adaptive Hierarchy-Branch Fusion for Online Knowledge Distillation\"></a>11. <a href=\"https://ojs.aaai.org/index.php/AAAI/article/view/25937\">Adaptive Hierarchy-Branch Fusion for Online Knowledge Distillation</a></h3><h3 id=\"13-Class-Incremental-Learning-for-Task-Oriented-Dialogue-System-with-Contrastive-Distillation-on-Internal-Representations-Student-Abstract\"><a href=\"#13-Class-Incremental-Learning-for-Task-Oriented-Dialogue-System-with-Contrastive-Distillation-on-Internal-Representations-Student-Abstract\" class=\"headerlink\" title=\"13. Class Incremental Learning for Task-Oriented Dialogue System with Contrastive Distillation on Internal Representations (Student Abstract)\"></a>13. <a href=\"https://ojs.aaai.org/index.php/AAAI/article/view/27044\">Class Incremental Learning for Task-Oriented Dialogue System with Contrastive Distillation on Internal Representations (Student Abstract)</a></h3><p>本文通过对比、蒸馏等技术来实现增量学习，用于对话系统。</p>\n<p>通过以下几种方式来保证增量学习的效果：</p>\n<ul>\n<li>仅更新部分相关新任务的参数</li>\n<li><strong>对比学习：新任务中的数据作为 anchors，原数据作为负样本。上一阶段模型和新阶段模型对于新任务数据的输出作为正样本对。简而言之，学习新任务的时候，不仅仅学习新任务的知识，还要学习新任务和原任务的区别。</strong></li>\n<li>复杂的损失函数：包括对比损失、交叉熵损失、蒸馏损失等。<strong>相互协调，妄想达到最好的效果。</strong></li>\n<li>动量更新：<strong>保证模型的稳定性。</strong></li>\n</ul>\n<blockquote>\n<p>作者并未提供代码，也无邮件回复。一言以蔽之，将各种东西混合在一起构成一套灌水垃圾。</p>\n</blockquote>\n<hr>\n<h3 id=\"14-Improving-Training-and-Inference-of-Face-Recognition-Models-via-Random-Temperature-Scaling\"><a href=\"#14-Improving-Training-and-Inference-of-Face-Recognition-Models-via-Random-Temperature-Scaling\" class=\"headerlink\" title=\"14. Improving Training and Inference of Face Recognition Models via Random Temperature Scaling\"></a>14. <a href=\"https://ojs.aaai.org/index.php/AAAI/article/view/26760\">Improving Training and Inference of Face Recognition Models via Random Temperature Scaling</a></h3><p>本文针对人脸识别，介绍了<strong>不确定</strong>的问题。</p>\n<p>模型对于无效的输入，仍然会以高置信度做出预测，这是不合理的。对于人脸识别，同样的人但是不同的照片，应该被映射到同一个 latent space，但这很难做到。</p>\n<p>作者提出了 RTS（Random Temperature Scaling），将温度与不确定性相关联，通过随机温度缩放来影响模型的不确定性。</p>\n<p>上述皆为论文中内容，<strong>实际上，如文中 Eqn.4 和 Eqn.5 以及 Fig.2 所示，作者提出了一种新的损失函数（类似softmax）,并引入了 Gumbel 分布</strong>。详见原文。</p>\n<blockquote>\n<p>无代码，垃圾文章。</p>\n</blockquote>\n<hr>\n<h3 id=\"15-De-biased-Teacher-Rethinking-IoU-Matching-for-Semi-supervised-Object-Detection\"><a href=\"#15-De-biased-Teacher-Rethinking-IoU-Matching-for-Semi-supervised-Object-Detection\" class=\"headerlink\" title=\"15. De-biased Teacher: Rethinking IoU Matching for Semi-supervised Object Detection\"></a>15. <a href=\"https://ojs.aaai.org/index.php/AAAI/article/view/25355\">De-biased Teacher: Rethinking IoU Matching for Semi-supervised Object Detection</a></h3><p><a href=\"https://github.com/wkfdb/De-biased-Teracher\">假code</a></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20240311001350.png\" alt=\"20240311001350\"></p>\n<ul>\n<li><p>从 $D_{labeled}$ 和 $D_{unlabeled}$ 中采样 input。</p>\n<ul>\n<li>labeled images 直接通过 weakly augmented 来训练 student model。</li>\n<li>unlabeled images，Teacher 通过 weakly augmented 来生成 pseudo labels，之后通过 strong augmented 来训练 student model。<strong>作者称之为 一致性正则化。</strong></li>\n</ul>\n</li>\n<li><p>student model 通过 loss 进行训练更新，teacher model 通过自身和 student model 进行动量更新，详见 Eqn.1。</p>\n</li>\n</ul>\n<p>也就是说，本文三个贡献：</p>\n<ol>\n<li>一致性正则，和蒸馏的区别在于，teacher 和 student 都动。</li>\n<li>teacher 通过 student 来进行动量更新。</li>\n<li>截断 softmax 的尾部，阈值为 0.05。（推测没有使用温度系数T）</li>\n</ol>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20231225202053.png\" alt=\"20231225202053\"></p>\n<blockquote>\n<p>什么时候阶段？如何阶段？TODO</p>\n</blockquote>\n<hr>\n<h3 id=\"16-Grouped-Knowledge-Distillation-for-Deep-Face-Recognition\"><a href=\"#16-Grouped-Knowledge-Distillation-for-Deep-Face-Recognition\" class=\"headerlink\" title=\"16. Grouped Knowledge Distillation for Deep Face Recognition\"></a>16. <a href=\"https://ojs.aaai.org/index.php/AAAI/article/view/25472\">Grouped Knowledge Distillation for Deep Face Recognition</a></h3><p>无 code. <strong>已发邮件，未回。</strong></p>\n<p>$$L &#x3D; \\mathcal{L}<em>{cls} + \\mathcal{L}</em>{kd}$$</p>\n<p>其中 $\\mathcal{L}_{cls}$ 是一个专门针对于人脸识别的损失函数。</p>\n<p>一言以蔽之，作者将 logit 按照阈值进行分组。分别是 Primary-KD, Secondary-KD, and Binary-KD。<strong>Primary-KD 用于学习主要的知识，Secondary-KD 用于学习次要的知识，Binary-KD 用于确保教师和学生之间的知识分布的一致性。</strong>作者表示，Primary-KD 和 Binary-KD 是重要的，Secondary-KD 是累赘。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20231225210830.png\" alt=\"20231225210830\"></p>\n<blockquote>\n<p>Binary-KD 参见原文公式 6，实际上就是一个二分类问题，用于确定分类是 Primary-KD 还是 Secondary-KD。</p>\n</blockquote>\n<p><strong>注意 Fig.2 中的文字描述，作者指出根据 student 的输出进行 rank，之后开始累加，直到累加的值达到了 阈值，这部分就是 Primary-KD。teacher也排序。</strong>此处有两个问题：</p>\n<ol>\n<li>这样排序，岂不是会出现类别不匹配的问题？</li>\n<li>根据 student 进行 rank 有什么用？不是应该根据 teacher？</li>\n</ol>\n<p><strong>作者还在 Method 文字的上面指出 feature distillation 优于 logit distillation。不敢苟同。</strong></p>\n<p>作者测试最好的阈值为 0.93，但作者的理论是错误的，所以也并无太多参考价值。</p>\n<p><strong>作者 Equ.3 的绝对值加的很好，值得借鉴，根据 teacher 进行排序的话，应该确实是可行的，可以做到自适应调整 Primary-KD 和 Secondary-KD 的比例，但要想做到类型匹配，需要存原来的索引，这样会造成计算成本的增加。</strong></p>\n<p><strong>作者最后做了一个 masked face recognition 的实验，这手操作值得学习。</strong></p>\n<table><tr><td bgcolor=\"#FF00FF\">作者已回邮件，rank 时对 index 重新组织，并且代码中是根据 teacher 进行 rank. 但匪夷所思的是，作者说最后通过 student 进行 rank 反而会取得更好的结果。</td></tr></table>\n","site":{"data":{}},"excerpt":"<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><ol>\n<li><a href=\"https://arxiv.org/pdf/1706.03762.pdf\">Attention Is All You Need</a> : Transformer</li>\n<li><a href=\"https://arxiv.org/abs/2005.12872\">End-to-End Object Detection with Transformers</a>: DETR</li>\n<li><a href=\"https://arxiv.org/pdf/2010.11929.pdf\">AN IMAGE IS WORTH 16X16 WORDS: TRANSFORMERS FOR IMAGE RECOGNITION AT SCALE</a>: Vision Transformer</li>\n<li><a href=\"https://arxiv.org/abs/2205.04042\">Incremental-DETR: Incremental Few-Shot Object Detection via Self-Supervised Learning</a></li>\n<li><a href=\"https://ojs.aaai.org/index.php/AAAI/article/view/26946\">Lightweight Transformer for Multi-Modal Object Detection (Student Abstract)</a></li>\n<li><a href=\"https://arxiv.org/abs/1910.05872\">Self-supervised Label Augmentation via Input Transformations</a></li>\n<li><a href=\"https://arxiv.org/abs/2303.05073\">Learn More for Food Recognition via Progressive Self-Distillation</a></li>\n<li><a href=\"https://ojs.aaai.org/index.php/AAAI/article/view/26896\">Solving Math Word Problems concerning Systems of Equations with GPT-3</a></li>\n<li><a href=\"https://arxiv.org/abs/2211.16231\">Curriculum Temperature for Knowledge Distillation</a></li>\n<li><a href=\"https://arxiv.org/abs/2010.01412\">SHARPNESS-AWARE MINIMIZATION FOR EFFICIENTLYIMPROVING GENERALIZATION</a></li>\n<li><a href=\"https://ojs.aaai.org/index.php/AAAI/article/view/25937\">Adaptive Hierarchy-Branch Fusion for Online Knowledge Distillation</a></li>\n<li><a href=\"https://ojs.aaai.org/index.php/AAAI/article/view/26008\">Peeling the Onion: Hierarchical Reduction of Data Redundancy for Efficient Vision Transformer Training</a></li>\n<li><a href=\"https://ojs.aaai.org/index.php/AAAI/article/view/27044\">Class Incremental Learning for Task-Oriented Dialogue System with Contrastive Distillation on Internal Representations (Student Abstract)</a></li>\n<li><a href=\"https://ojs.aaai.org/index.php/AAAI/article/view/26760\">Improving Training and Inference of Face Recognition Models via Random Temperature Scaling</a></li>\n<li><a href=\"https://ojs.aaai.org/index.php/AAAI/article/view/25355\">De-biased Teacher: Rethinking IoU Matching for Semi-supervised Object Detection</a></li>\n<li><a href=\"https://ojs.aaai.org/index.php/AAAI/article/view/25472\">Grouped Knowledge Distillation for Deep Face Recognition</a></li></ol>","more":"\n\n<hr>\n<h2 id=\"泛读文章\"><a href=\"#泛读文章\" class=\"headerlink\" title=\"泛读文章\"></a>泛读文章</h2><ol start=\"3\">\n<li><a href=\"https://ojs.aaai.org/index.php/AAAI/article/view/25879\">Can Bad Teaching Induce Forgetting? Unlearning in Deep Networks Using an Incompetent Teacher</a></li>\n</ol>\n<p>本文角度清奇，利用知识蒸馏使得模型变弱，有意忘记某些知识。比如某些公司的授权到期，需要忘记相关知识，两种方法，其一是重新训练，其二就是本文（知识蒸馏）。</p>\n<hr>\n<ol start=\"4\">\n<li><a href=\"https://ojs.aaai.org/index.php/AAAI/article/view/25902\">SKDBERT: Compressing BERT via Stochastic Knowledge Distillation</a></li>\n</ol>\n<ul>\n<li>正如题目所言，本文采用了一种随机知识蒸馏的方法，具体来说，每次迭代中从很多老师中挑选一个老师，然后进行知识蒸馏。（老师们具有不同的容量层级）在能力基本没有损失的情况下，模型的大小减少了 40%。</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20231226095033.png\" alt=\"20231226095033\"></p>\n<table><tr><td bgcolor=\"#FF00FF\">本文提到了很多知识蒸馏的方法，可以参考。</td></tr></table>\n\n<hr>\n<ol start=\"5\">\n<li><a href=\"https://ojs.aaai.org/index.php/AAAI/article/view/25944\">Boosting Graph Neural Networks via Adaptive Knowledge Distillation</a></li>\n</ol>\n<ul>\n<li>这篇论文是关于如何利用多个图神经网络（GNNs）的互补知识来提高一个学生GNN的性能。它提出了一个自适应的知识蒸馏（KD）框架，叫做BGNN，它可以顺序地将不同GNNs的知识转移到学生GNN中。<strong>它还引入了一个自适应温度模块和一个权重提升模块</strong>，来指导学生GNN有效地学习。这篇论文在节点分类和图分类任务上都取得了很好的效果，相比于原始的GNNs，分别提升了3.05%和6.35%。</li>\n</ul>\n<p>作者认为，对于同一个GNN，采用不同的聚合方式，会学到不同的知识，现在希望互补的掌握这些知识，怎么办呢？<strong>采用知识蒸馏最好。</strong><br>但这会有如下难点：</p>\n<ol>\n<li>传统的 KD teacher 要比 student 大，而本次任务中，两者相同容量</li>\n<li>GNN 一般都比较浅</li>\n</ol>\n<p>作者的创新在于，提出了这种构想，并引入了 <strong>自适应温度模块和权重提升模块</strong></p>\n<ul>\n<li>自适应温度模块，根据 teacher model 对于节点的 logits 分布，进行设计。<strong>具体依据是针对不同节点的梯度值。</strong></li>\n<li>权重提升模块，哪个节点对应的分类错误率高，就给哪个节点的权重提升。</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20240110124950.png\" alt=\"20240110124950\"></p>\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><h3 id=\"1-Attention-Is-All-You-Need-Transformer\"><a href=\"#1-Attention-Is-All-You-Need-Transformer\" class=\"headerlink\" title=\"1. Attention Is All You Need : Transformer\"></a>1. <a href=\"https://arxiv.org/pdf/1706.03762.pdf\">Attention Is All You Need</a> : Transformer</h3><h4 id=\"先修知识\"><a href=\"#先修知识\" class=\"headerlink\" title=\"先修知识\"></a>先修知识</h4><h5 id=\"BLUE（Bilingual-Evaluation-Understudy）\"><a href=\"#BLUE（Bilingual-Evaluation-Understudy）\" class=\"headerlink\" title=\"BLUE（Bilingual Evaluation Understudy）\"></a>BLUE（Bilingual Evaluation Understudy）</h5><p><strong>机器翻译中的BLEU是一种用于评估机器翻译质量的指标，它通过计算机器翻译的句子和人工翻译的参考句子之间的n-gram匹配程度，来衡量机器翻译的精确度</strong>。n-gram是指连续的n个词，例如，unigram是一个词，bigram是两个词，trigram是三个词，依此类推。<strong>BLEU的取值范围是0到1，越接近1表示机器翻译越好，越接近0表示机器翻译越差</strong>。BLEU的计算公式如下：</p>\n<p>$$<br>BLEU &#x3D; BP \\cdot exp(\\sum_{n&#x3D;1}^N w_n \\log p_n)<br>$$</p>\n<p>其中，BP是简短惩罚因子，用于惩罚过短的机器翻译，防止机器翻译只输出少数几个词就获得高分。BP的计算公式如下：</p>\n<p>$$<br>BP &#x3D; \\begin{cases}<br>1, &amp; \\text{if } c &gt; r \\<br>e^{(1-r&#x2F;c)}, &amp; \\text{if } c \\leq r<br>\\end{cases}<br>$$</p>\n<p>其中，c是机器翻译的总长度，r是参考翻译的最佳匹配长度，即与机器翻译最接近的参考翻译的长度。</p>\n<p>$p_n$是基于n-gram的改进精确度，用于计算机器翻译中的n-gram和参考翻译中的n-gram的匹配比例。$p_n$的计算公式如下：</p>\n\n$$\np_n = \\frac{\\sum_{\\text{n-gram} \\in C} \\text{Count}_{\\text{clip} }(\\text{n-gram})}{\\sum_{\\text{n-gram} \\in C} \\text{Count}(\\text{n-gram})}\n$$\n\n\n<p>其中，C是机器翻译的句子，$\\text{Count}(\\text{n-gram})$是机器翻译中n-gram的出现次数，$\\text{Count}_{\\text{clip} }(\\text{n-gram})$是机器翻译中n-gram的截断计数，即机器翻译中n-gram的出现次数与参考翻译中n-gram的最大出现次数的较小值。</p>\n<p>$w_n$是n-gram的权重，一般取均匀权重，即$w_n &#x3D; 1&#x2F;N$，其中N是n-gram的最大阶数，通常取4。</p>\n<h4 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h4><p>本文发表于 2017 年，提出了一种新的网络结构 Transformer，该结构完全基于 attention 机制，不再使用 CNN 和 RNN，因此可以并行计算，加快训练速度。Transformer 在机器翻译任务上取得了很好的效果，其后被广泛应用于其他任务中。</p>\n<ul>\n<li><p>数据集：</p>\n<ul>\n<li><p>WMT 2014 English-German： 包含了约 4.5 万对英德语句子，其中训练集包含 3.7 万对句子，开发集包含 0.5 万对句子，测试集包含 0.3 万对句子。句子来源于新闻、学术论文、书籍和网站等。</p>\n</li>\n<li><p>WMT 2014 English-French： 包含了约 35 万对英法语句子，其中训练集包含 29 万对句子，开发集包含 3 万对句子，测试集包含 3 万对句子。句子来源于新闻、学术论文、书籍和网站等。</p>\n</li>\n</ul>\n</li>\n<li><p><a href=\"https://github.com/tensorflow/tensor2tensor\">code</a></p>\n</li>\n</ul>\n<h4 id=\"摘要\"><a href=\"#摘要\" class=\"headerlink\" title=\"摘要\"></a>摘要</h4><ul>\n<li>前人做的 sequence transduction 都是基于 RNN 或者 CNN</li>\n<li>都用到了 encoder-decoder 结构</li>\n<li>本文仍然基于 encoder-decoder 结构，但是不再使用 RNN 和 CNN，而是使用 attention 机制，这可以更好的并行。</li>\n<li>所用指标为 BLUE，效果最好。</li>\n</ul>\n<h4 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h4><ul>\n<li>RNN 需要顺序的计算，无法并行。</li>\n<li>已经有人使用了 attention 机制，但大都是和 RNN 或者 CNN 结合使用的。</li>\n<li>在 8 个 P100 上训练了 12 个小时。</li>\n</ul>\n<h4 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h4><ul>\n<li>前人的方法还是没有解决长距离知识学习的问题，距离越长，所需要的计算越多。</li>\n<li>在 Transformer 中，我们会通过 embedding 来固定维度，这会带来不好的影响，但所幸有 multi-head attention 来抵消。</li>\n<li>self-attention</li>\n<li>前人已证，基于 recurrent attention mechanism 的效果更好，但还没有人仅用 attention 机制来做。</li>\n</ul>\n<h4 id=\"模型架构\"><a href=\"#模型架构\" class=\"headerlink\" title=\"模型架构\"></a>模型架构</h4><ul>\n<li>沿用 Encoder-Decoder 结构，<strong>注意这里的 Decoder 是自回归的。（就是当前输入依赖于前面的输出）</strong></li>\n<li><em>The Transformer - model architecture.</em></li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20231123172121.png\" alt=\"20231123172121\"></p>\n<ul>\n<li><p>Encoder</p>\n<ul>\n<li>N &#x3D; 6</li>\n<li>两层 sub-layer，分别是 multi-head self-attention 和 position-wise fully connected feed-forward network</li>\n<li>每层都有 residual connection，然后接 layer normalization</li>\n<li>为满足 residual connection，embedding 和 encoder 的输出维度都是 d_model &#x3D; 512</li>\n</ul>\n</li>\n<li><p>Decoder</p>\n<ul>\n<li>N &#x3D; 6</li>\n<li>三层 sub-layer，分别是 masked multi-head self-attention，multi-head self-attention 和 position-wise fully connected feed-forward network</li>\n<li>每层都有 residual connection，然后接 layer normalization</li>\n<li>对于编码器的输出执行多头注意力，K（键）和V（值）来自编码器的输出，而Q（查询）来自解码器的输出。这确保了解码器中的每个位置都可以访问编码器输出中的所有位置。</li>\n<li>masked multi-head self-attention 用于防止解码器中的位置访问后续位置。这是通过将查询掩码为负无穷来实现的。</li>\n</ul>\n</li>\n<li><p>Attention</p>\n<ul>\n<li>Scaled Dot-Product Attention</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20231123180055.png\" alt=\"20231123180055\"></p>\n<p>其中 queries 和 keys 的维度是 $d_k$，values 的维度是 $d_v$。<br>事实上， 这里是可以并行的，<strong>参见原文3.2.1</strong></p>\n<blockquote>\n<p>作者在这里指出，<strong>点积 要比 加性 效率高，具体谁更好，参见原文。</strong></p>\n</blockquote>\n<blockquote>\n<p>除以 $\\sqrt{d_k}$ 是为了<strong>消除方差的影响，参见原文第四页页脚</strong></p>\n</blockquote>\n<ul>\n<li>Multi-Head Attention</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20231123180142.png\" alt=\"20231123180142\"></p>\n<p>作者认为，直接将 queries，keys 和 values 映射到 $d_{model}$ 维度的空间中，可能会导致信息损失，因此，作者将 queries，keys 和 values 分别映射到 $d_k$，$d_k$ 和 $d_v$ 维度的空间中，然后进行 Scaled Dot-Product Attention，最后将多个结果拼接起来，再次映射到 $d_{model}$ 维度的空间中。</p>\n<p>具体而言，文中设定 h &#x3D; 8，即将 queries，keys 和 values 分别映射到 $d_k$ &#x3D; $d_v$ &#x3D; $d_{model}$&#x2F;h &#x3D; 64 维度的空间中，然后进行 Scaled Dot-Product Attention，最后将多个结果拼接起来，再次映射到 $d_{model}$ 维度的空间中。<strong>参见原文3.2.2</strong></p>\n<hr>\n<ul>\n<li><p>Applications of Attention in our Model</p>\n<ul>\n<li>quiries 来自前一个 decoder layer，keys 和 values 来自 encoder 的输出</li>\n<li>encoder 包含 self-attention</li>\n<li>通过 mask 来防止 decoder 中的位置访问后续位置，<strong>具体而言，就是将 values 的后续位置 mask 为负无穷，这样过 softmax 之后，就会变成 0，即不会影响结果。</strong></li>\n</ul>\n</li>\n<li><p>Position-wise Feed-Forward Networks</p>\n</li>\n</ul>\n<p>$$\\mathcal{FFN} (x) &#x3D; \\mathbb{max} (0, x W_1 + b_1)W_2 + b_2$$</p>\n<p>其中输入和输出的维度都是 $d_{model}$ &#x3D; 512，而中间层的维度是 $d_{ff}$ &#x3D; 2048。</p>\n<ul>\n<li>embedding<br>作者将 input embedding 和 output embedding 共享参数，都是通过一个 <strong>线性层再加上一个softmax</strong> 来实现的。</li>\n</ul>\n<blockquote>\n<p>在 embedding 的时候，所有的权重乘以 $\\sqrt{d_{model} }$，<strong>这样可以使得 embedding 的结果的方差为 1</strong>，具体原因参考<a href=\"https://zhuanlan.zhihu.com/p/442509602\">这篇帖子</a>。</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20231123195753.png\" alt=\"20231123195753\"></p>\n<ul>\n<li>Positional Encoding<ul>\n<li>attention 机制没有考虑到序列中词的位置信息。因此，作者在 embedding 后加入了位置编码，用于表示词的位置信息。</li>\n<li>维度为 $d_{model}$ &#x3D; 512，位置编码的维度也是 512。<strong>便于求和</strong></li>\n</ul>\n</li>\n</ul>\n\n$$\\begin{aligned}\n\\text{PE}_{(pos, 2i)} &= \\sin(pos / 10000^{2i/d_{model} }) \\\\\n\\text{PE}_{(pos, 2i+1)} &= \\cos(pos / 10000^{2i/d_{model} })\n\\end{aligned}$$\n\n\n<p>其中，pos 是词在句子中的位置，i 是位置编码的维度。</p>\n<h4 id=\"Why-Self-Attention\"><a href=\"#Why-Self-Attention\" class=\"headerlink\" title=\"Why Self-Attention?\"></a>Why Self-Attention?</h4><ul>\n<li>可并行</li>\n<li>距离远的词也可以相互影响</li>\n<li><strong>作者还提出了 局部注意力</strong></li>\n</ul>\n<h4 id=\"Training\"><a href=\"#Training\" class=\"headerlink\" title=\"Training\"></a>Training</h4><h4 id=\"Results\"><a href=\"#Results\" class=\"headerlink\" title=\"Results\"></a>Results</h4><p>其中大模型用 8 个 P100 GPU 训练了 3.5 天</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20231123222009.png\" alt=\"20231123222009\"></p>\n<h4 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h4><ul>\n<li>本文提出了一种新的网络结构 Transformer，该结构完全基于 attention 机制，不再使用 CNN 和 RNN，因此可以并行计算，加快训练速度。</li>\n<li>Transformer 在机器翻译任务上取得了很好的效果，其后被广泛应用于其他任务中。</li>\n<li>可以考虑 局部注意力</li>\n<li>可以试试在 图像或音频 上应用 Transformer</li>\n</ul>\n<h3 id=\"2-End-to-End-Object-Detection-with-Transformers-DETR\"><a href=\"#2-End-to-End-Object-Detection-with-Transformers-DETR\" class=\"headerlink\" title=\"2. End-to-End Object Detection with Transformers: DETR\"></a>2. <a href=\"https://arxiv.org/abs/2005.12872\">End-to-End Object Detection with Transformers</a>: DETR</h3><h4 id=\"先修知识-1\"><a href=\"#先修知识-1\" class=\"headerlink\" title=\"先修知识\"></a>先修知识</h4><ol>\n<li><a href=\"https://en.wikipedia.org/wiki/Hungarian_algorithm\">Hungarian algorithm</a> : 匈牙利算法，用于解决指派问题</li>\n</ol>\n<h4 id=\"摘要-1\"><a href=\"#摘要-1\" class=\"headerlink\" title=\"摘要\"></a>摘要</h4><ul>\n<li>将目标检测视为 set prediction 问题，使用 Transformer 来解决。去除了 NMS、anchor、poposals 等。<strong>直接输出目标的位置和类别，真正的实现了端到端。</strong></li>\n<li>性能对标 Faster R-CNN，但速度更快。</li>\n<li>数据集：COCO</li>\n<li><a href=\"https://github.com/facebookresearch/detr\">code</a></li>\n</ul>\n<h4 id=\"引言-1\"><a href=\"#引言-1\" class=\"headerlink\" title=\"引言\"></a>引言</h4><ul>\n<li>现在都不是端对端，都是先生成一些 proposals，然后再分类，最后再回归。<strong>这样的结果受限于中间的这些操作。</strong></li>\n<li>虽然用到了 Transformer，<strong>但是却是并行出结果，不需要自回归。</strong></li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20231126215613.png\" alt=\"20231126215613\"></p>\n<ul>\n<li>用到了 bipartite matching loss</li>\n<li>在大物体上效果好，小物体上效果稍差</li>\n<li>消融实验做的很好</li>\n<li>很容易扩展到全景分割</li>\n</ul>\n<h4 id=\"相关工作\"><a href=\"#相关工作\" class=\"headerlink\" title=\"相关工作\"></a>相关工作</h4><ul>\n<li>之前都是需要一些知识给模型，也就是先验知识，比如 anchor，NMS，proposals 等。</li>\n<li>也有人通过 bipartite matching 来解决目标检测问题，但是是基于 RNN 的。</li>\n</ul>\n<h4 id=\"模型架构-1\"><a href=\"#模型架构-1\" class=\"headerlink\" title=\"模型架构\"></a>模型架构</h4><p><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20231126230443.png\" alt=\"20231126230443\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20231127012221.png\" alt=\"20231127012221\"></p>\n<ul>\n<li>object queries 是一个固定的向量，用于表示目标的个数，这里是 100 个（也就是 100 个框，根据数据集设定就好）。</li>\n<li><strong>Matching cost 同时考虑了 class 和 box 的信息</strong></li>\n<li>仅对类别为 <strong>非空</strong> 的进行计算损失。</li>\n<li>类别预测的损失，去除了 log，详见原文 3.1</li>\n<li>边界框预测的损失，详见原文 3.1，使用了广义 IoU</li>\n</ul>\n<hr>\n<p><strong>loss 的计算分为如下几个部分：</strong></p>\n<p><strong>首先通过 $\\mathcal{L}_{match}$ 一对一的找到框，之后算损失：box loss + class loss</strong></p>\n\n$$\n\\hat{\\sigma} = \\text{arg} \\quad \\text{min}_{\\sigma \\in \\mathcal{\\sigma}_N} \\sum_{i=1}^N \\mathcal{L}_{\\text{match} }(y_i, \\hat{y}_{\\sigma(i)})\n$$\n\n\n<ul>\n<li>$y_i &#x3D; (c_i, b_i)$ 是 ground truth</li>\n<li>$c_i$ 是 class label，可以是 $\\emptyset$</li>\n<li>$b_i$ 是 bounding box，(center x, center y, height, and width relative to the image size).</li>\n<li>$\\hat{y}_i$ 是预测的结果，可以 padded with $\\emptyset$ (no object) when N &gt; the number of objects.</li>\n<li>$\\hat{c_i}$ 是预测的类别</li>\n<li>$\\hat{b_i}$ 是预测的 bounding box</li>\n<li>$\\mathcal{\\sigma(i)}$ is an index within a particular permutation of N elements.</li>\n</ul>\n\n$$\n\\mathcal{L}_{\\text{match} }(y_i, \\hat{y}_{\\sigma(i)}) = - \\mathbb{1}_{\\{c_i \\neq \\emptyset\\} } \\hat{p}_{\\sigma(i)}(c_i) + \\mathbb{1}_{\\{c_i = \\emptyset\\} } \\mathcal{L}_{\\text{box} }(b_i, \\hat{b}_{\\sigma(i)})\n$$\n\n- $\\mathbb{1}_{\\{c_i \\neq \\emptyset\\} }$ 是指当 $c_i \\neq \\emptyset$ 时，取 1，否则取 0\n- $\\hat{p}_{\\sigma(i)}(c_i)$ 是指预测的类别为 $c_i$ 的概率\n- $\\mathcal{L}_{\\text{box} }(b_i, \\hat{b}_{\\sigma(i)})$ 是指预测的 bounding box 与 ground truth 的损失\n\n$$\n\\mathcal{L}_{\\text{box} }(b_i, \\hat{b}_{\\sigma(i)}) = \\lambda_{iou} \\mathcal{L}_{iou} (b_i, \\hat{b}_{\\sigma(i)}) + \\lambda_{L_1} ||b_i - \\hat{b}_{\\sigma(i)}||_1\n$$\n\n\n<blockquote>\n<p>$L_1$ 损失较常用，但是对于小框和大框的损失处理有问题，因此作者加入了 $IoU$ 损失，详见原文</p>\n</blockquote>\n\n$$\n\\mathcal{L}_{\\text{Hungarian} }(y, \\hat{y}) = \\sum_{i=1}^N [- \\log \\hat{p}_{\\hat \\sigma(i)}(c_i) + \\mathbb{1}_{\\{c_i \\neq \\emptyset\\} } \\mathcal{L}_{\\text{box} }(b_i, \\hat{b}_{\\hat \\sigma(i)})]\n$$\n\n\n<blockquote>\n<p><strong>事实上，作者还加了超参系数做平衡。这里使用了对数，而上文没有，是因为二者考虑的问题不一样，一个是考虑数值相对平衡，一个是考虑梯度相对平衡。</strong></p>\n</blockquote>\n<hr>\n<ul>\n<li><strong>positional encoding 也好，object queries 也好，都加入到了每一层 attention layer 的计算</strong>，</li>\n<li>作者还加入了 Auxiliary decoding losses，也就是每一层的输出都会计算损失（但是所有的 FFN 共享参数），详见原文 3.2</li>\n</ul>\n<p><img src=\"https://kikaben.com/detr-object-detection-with-transformers-2020/images/fig-10.png\" alt=\"paper 中 Fig.10\"></p>\n<h4 id=\"实验\"><a href=\"#实验\" class=\"headerlink\" title=\"实验\"></a>实验</h4><ul>\n<li>详细探究了每个组件的作用</li>\n<li>全景分割的实验</li>\n</ul>\n<h4 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h4><ul>\n<li>本文提出了一种新的目标检测方法 DETR，该方法使用 Transformer 来解决目标检测问题，去除了 NMS、anchor、poposals 等，直接输出目标的位置和类别，真正的实现了端到端。</li>\n</ul>\n<h4 id=\"附录代码\"><a href=\"#附录代码\" class=\"headerlink\" title=\"附录代码\"></a>附录代码</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> torch</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch <span class=\"keyword\">import</span> nn</span><br><span class=\"line\"><span class=\"keyword\">from</span> torchvision.models <span class=\"keyword\">import</span> resnet50</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DETR</span>(nn.Module):</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, num_classes, hidden_dim, nheads, num_encoder_layer, num_decoder_layers</span>):</span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Backbone: ResNet-50 without the last two layers (fully connected and pooling)</span></span><br><span class=\"line\">        self.backbone = nn.Sequential(*<span class=\"built_in\">list</span>(resnet50(pretrained=<span class=\"literal\">True</span>).children())[:-<span class=\"number\">2</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 1x1 Convolution to reduce channels from 2048 to hidden_dim</span></span><br><span class=\"line\">        self.conv = nn.Conv2d(<span class=\"number\">2048</span>, hidden_dim, <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Transformer layers</span></span><br><span class=\"line\">        self.transformer = nn.Transformer(hidden_dim, nheads, num_encoder_layer, num_decoder_layers)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Output layers</span></span><br><span class=\"line\">        self.linear_class = nn.Linear(hidden_dim, num_classes + <span class=\"number\">1</span>)  <span class=\"comment\"># Class prediction (plus background)</span></span><br><span class=\"line\">        self.linear_bbox = nn.Linear(hidden_dim, <span class=\"number\">4</span>)  <span class=\"comment\"># Bounding box prediction (4 coordinates)</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\"># Learnable positional embeddings</span></span><br><span class=\"line\">        self.query_pos = nn.Parameter(torch.rand(<span class=\"number\">100</span>, hidden_dim))  <span class=\"comment\"># Query positional embedding</span></span><br><span class=\"line\">        self.row_embed = nn.Parameter(torch.rand(<span class=\"number\">50</span>, hidden_dim // <span class=\"number\">2</span>))  <span class=\"comment\"># Row positional embedding</span></span><br><span class=\"line\">        self.col_embed = nn.Parameter(torch.rand(<span class=\"number\">50</span>, hidden_dim // <span class=\"number\">2</span>))  <span class=\"comment\"># Column positional embedding</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">forward</span>(<span class=\"params\">self, inputs</span>):</span><br><span class=\"line\">        <span class=\"comment\"># Backbone feature extraction</span></span><br><span class=\"line\">        x = self.backbone(inputs)</span><br><span class=\"line\">        <span class=\"comment\"># 1x1 Convolution</span></span><br><span class=\"line\">        h = self.conv(x)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\"># Get height (H) and width (W) of the feature map</span></span><br><span class=\"line\">        H, W = h.shape[-<span class=\"number\">2</span>:]</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\"># Positional embeddings</span></span><br><span class=\"line\">        pos = torch.cat([</span><br><span class=\"line\">            self.col_embed[:W].unsqueeze(<span class=\"number\">0</span>).repeat(H, <span class=\"number\">1</span>, <span class=\"number\">1</span>),</span><br><span class=\"line\">            self.row_embed[:H].unsqueeze(<span class=\"number\">1</span>).repeat(<span class=\"number\">1</span>, W, <span class=\"number\">1</span>)</span><br><span class=\"line\">        ], dim=-<span class=\"number\">1</span>).flatten(<span class=\"number\">0</span>, <span class=\"number\">1</span>).unsqueeze(<span class=\"number\">1</span>)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\"># Flatten and permute for transformer input</span></span><br><span class=\"line\">        h = self.transformer(pos + h.flatten(<span class=\"number\">2</span>).permute(<span class=\"number\">2</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>), self.query_pos.unsqueeze(<span class=\"number\">1</span>))</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\"># Output predictions</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.linear_class(h), self.linear_bbox(h).sigmoid()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Instantiate the model</span></span><br><span class=\"line\">detr = DETR(num_classes=<span class=\"number\">91</span>, hidden_dim=<span class=\"number\">256</span>, nheads=<span class=\"number\">8</span>, num_encoder_layer=<span class=\"number\">6</span>, num_decoder_layers=<span class=\"number\">6</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Set the model to evaluation mode</span></span><br><span class=\"line\">detr.<span class=\"built_in\">eval</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Generate random input tensor</span></span><br><span class=\"line\">inputs = torch.rand(<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">800</span>, <span class=\"number\">1200</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Forward pass through the model</span></span><br><span class=\"line\">logits, bboxes = detr(inputs)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-AN-IMAGE-IS-WORTH-16X16-WORDS-TRANSFORMERS-FOR-IMAGE-RECOGNITION-AT-SCALE-Vision-Transformer\"><a href=\"#3-AN-IMAGE-IS-WORTH-16X16-WORDS-TRANSFORMERS-FOR-IMAGE-RECOGNITION-AT-SCALE-Vision-Transformer\" class=\"headerlink\" title=\"3. AN IMAGE IS WORTH 16X16 WORDS: TRANSFORMERS FOR IMAGE RECOGNITION AT SCALE: Vision Transformer\"></a>3. <a href=\"https://arxiv.org/pdf/2010.11929.pdf\">AN IMAGE IS WORTH 16X16 WORDS: TRANSFORMERS FOR IMAGE RECOGNITION AT SCALE</a>: Vision Transformer</h3><p>作者是 Google Research 的人</p>\n<ul>\n<li><a href=\"https://github.com/google-research/vision_transformer\">code</a></li>\n</ul>\n<p>将一个不修改的 transformer 应用于图像分类，是有一定困难的。因为 transformer 的输入是一个序列，而图像是一个二维的矩阵，我们可以将图像转换为序列，但是这样会导致序列过长，计算量过大。</p>\n<p>因此，作者提出了一种新的 transformer，叫做 Vision Transformer（ViT），该 transformer 仍然是基于 attention 机制的，但是在输入的时候，作者将图像分为了一个个 patch，然后将每个 patch 作为一个 token，这样就可以将图像转换为序列，而且序列的长度不会太长。<strong>这样的 transformer 也可以用于目标检测和语义分割。</strong></p>\n<p><strong>架构图如下：</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20231209141514.png\" alt=\"20231209141514\"></p>\n<p>将图像分为了 $N$ 个 patch，每个 patch 的维度是 $P$，这样就可以将图像转换为一个序列，序列的长度是 $N$，维度是 $P$。需要单独再加一个 class token，用于表示图像的类别。</p>\n<h3 id=\"4-Incremental-DETR-Incremental-Few-Shot-Object-Detection-via-Self-Supervised-Learning\"><a href=\"#4-Incremental-DETR-Incremental-Few-Shot-Object-Detection-via-Self-Supervised-Learning\" class=\"headerlink\" title=\"4. Incremental-DETR: Incremental Few-Shot Object Detection via Self-Supervised Learning\"></a>4. <a href=\"https://arxiv.org/abs/2205.04042\">Incremental-DETR: Incremental Few-Shot Object Detection via Self-Supervised Learning</a></h3><p>作者是新加坡国立大学和哈尔滨工业大学的学生</p>\n<h4 id=\"摘要-2\"><a href=\"#摘要-2\" class=\"headerlink\" title=\"摘要\"></a>摘要</h4><ul>\n<li>Incremental 旨在学习新类别的目标检测，而不会影响到已有类别的目标检测。</li>\n<li>novel class 数据量少</li>\n<li>通过在 DETR 上进行 fine-tune 和 self-supervised learning 来实现。</li>\n<li>用到了 selective search algorithm</li>\n<li>用到了 knowledge distillation</li>\n<li><a href=\"https://github.com/dongnana777/Incremental-DETR\">code</a></li>\n</ul>\n<h4 id=\"引言-2\"><a href=\"#引言-2\" class=\"headerlink\" title=\"引言\"></a>引言</h4><ul>\n<li>增量学习一直都是一个难题，很容易出现 catastrophic forgetting。</li>\n<li><strong>前人通过同时训练 base class 和 novel class 来解决</strong>，但是如果我们<strong>没有 base class 的数据</strong>，方法就会受限。</li>\n<li>前人在 Faster R-CNN 做过类似的事情，第一阶段在 base class 上训练，第二阶段冻结<strong>类无关提取器和 RPN</strong>，只对预测头进行 fine-tune。<strong>作者深受启发。</strong></li>\n<li><strong>作者解冻不同的DETR层进行微调，并根据经验确定投影层和分类头是特定于类的，DETR的CNN主干、变压器和回归头与类无关</strong></li>\n<li><strong>假定在进行 incremental 的时候，base class 的数据是不可用的。</strong></li>\n<li>第一阶段：base model 预训练，之后进行 self-supervised fine-tune。第二阶段：在 novel class 上进行 incremental fine-tune。</li>\n<li>第一阶段用到了 slecetive search algorithm</li>\n<li><strong>提出了 classification distillation loss 和 masked feature distillation loss</strong></li>\n<li>dataset：COCO、PASCAL VOC</li>\n</ul>\n<h4 id=\"相关工作-1\"><a href=\"#相关工作-1\" class=\"headerlink\" title=\"相关工作\"></a>相关工作</h4><ul>\n<li>Object Detection</li>\n<li>Few-Shot Object Detection</li>\n<li>Incrementa Few-Shot Object Detection</li>\n</ul>\n<h4 id=\"问题定义\"><a href=\"#问题定义\" class=\"headerlink\" title=\"问题定义\"></a>问题定义</h4><ul>\n<li>$D_{novel}$ 用的时候 $D_{base}$ 不可用</li>\n<li><strong>新类和旧类没有重叠</strong></li>\n<li><strong>新类仅有少量样本</strong></li>\n</ul>\n<h4 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h4><h5 id=\"Base-Model-Training\"><a href=\"#Base-Model-Training\" class=\"headerlink\" title=\"Base Model Training\"></a>Base Model Training</h5><p><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20231127021733.png\" alt=\"20231127021733\"></p>\n<ol>\n<li>在 stage 1 的第一部分，采用正常的 DETR 训练策略在 $D_{base}$ 上进行训练。</li>\n<li>在 stage 1 的第二部分，进来一张图片，通过 selective search algorithm 生成一些 proposals，之后选择 top O 个 proposals，<strong>要求这些 proposals 与 base class 的 ground truth bounding box 不重叠</strong>。之后将这些 proposals 作为 pseudo ground truth，采用 DETR 的方式进行训练。也就是图中的 $b^<code>$，对应的类别是 $c^</code>$。</li>\n</ol>\n<ul>\n<li>找框：</li>\n</ul>\n\n$$\n\\hat{\\sigma} = \\text{arg} \\quad \\text{min}_{\\sigma \\in \\mathcal{\\sigma}_N} \\sum_{i=1}^N \\mathcal{L}_{\\text{match} }(y_i, \\hat{y}_{\\sigma(i)})\n$$\n\n$$\n\\mathcal{L}_{\\text{match} }(y_i, \\hat{y}_{\\sigma(i)}) = - \\mathbb{1}_{\\{c_i \\neq \\emptyset\\} } \\hat{p}_{\\sigma(i)}(c_i) + \\mathbb{1}_{\\{c_i = \\emptyset\\} } \\mathcal{L}_{\\text{box} }(b_i, \\hat{b}_{\\sigma(i)})\n$$\n\n\n\n<ul>\n<li>Hungarian loss：</li>\n</ul>\n\n$$\nL_{hg}(y, \\hat{y}) = \\sum_{i=1}^N [- \\log \\hat{p}_{\\hat \\sigma(i)}(c_i) + \\mathbb{1}_{\\{c_i \\neq \\emptyset\\} } \\mathcal{L}_{\\text{box} }(b_i, \\hat{b}_{\\hat \\sigma(i)})]\n$$\n\n\n<ul>\n<li>在 stage 1 中的第二部分，损失为：</li>\n</ul>\n\n$$\n\\mathcal{L}^{base}_{total} = \\mathcal{L}_{hg}(y, \\hat{y}) + \\lambda^` \\mathcal{L}_{hg}(y^`, \\hat{y}^`)\n$$\n\n\n<h5 id=\"Incremental-Few-Shot-Fine-Tuning\"><a href=\"#Incremental-Few-Shot-Fine-Tuning\" class=\"headerlink\" title=\"Incremental Few-Shot Fine-Tuning\"></a>Incremental Few-Shot Fine-Tuning</h5><p><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20231127192105.png\" alt=\"20231127192105\"></p>\n<ul>\n<li>仅白色部分进行 fine-tune</li>\n<li>直接 fine-tune，会导致 catastrophic forgetting，因此作者提出了 knowledge distillation。直接 knowledge distillation 会和 novel class 的学习产生冲突，所以这里引入了 $\\mathcal{mask}^{novel}$，（如果是 novel class ground truth boxes，则为 1，否则为 0）。具体而言：</li>\n</ul>\n\n$$\n\\mathcal{L}^{kd}_{feat} = \\frac{1}{2 N^{novel}} \\sum_{i=1}^{w} \\sum_{j=1}^{h} \\sum_{k=1}^{c} (1 - \\mathcal{mask}^{novel}_{ij}) ||f_{ijk}^{novel} - f_{ijk}^{base}||^2\n$$\n\n其中，$N^{novel} = \\sum_{i=1}^{w} \\sum_{j=1}^{h} (1 - \\mathcal{mask}^{novel}_{ij})$，$f^{base}$ 和 $f^{novel}$ 分别是 base model 和 novel model 的 feature map。$w$，$h$，$c$ 分别是 feature map 的宽、高和通道数。\n\n\n<blockquote>\n<p>直观理解，对于每一个像素点，对于它的所有通道，去看它是否是 novel class bounding box 的一部分，如果是，则不需要进行 knowledge distillation，否则，则需要进行 knowledge distillation。</p>\n</blockquote>\n<p>同样，对于分类器头，直接做 knowledge distillation 也不合适，为解决这个问题，如下：</p>\n\n$$\n\\mathcal{L}^{kd}_{cls} = \\mathcal{L}_{kl\\_div}(\\log(q^{novel}), q^{base})\n$$\n\n\n<blockquote>\n<p>进来一张 novel image，通过 base model 进行预测，如果 class probability 大于 0.5，且 bounding box 与 novel class ground truth boxes 不重叠，则认为需要蒸馏，算 KL 散度。</p>\n</blockquote>\n<ul>\n<li>stage 2 的损失为：</li>\n</ul>\n\n$$\n\\mathcal{L}^{novel}_{total} = \\mathcal{L}_{hg}(y, \\hat{y}) + \\lambda_{feat} \\mathcal{L}^{kd}_{feat} + \\lambda_{cls} \\mathcal{L}^{kd}_{cls}\n$$\n\n\n<h4 id=\"实验-1\"><a href=\"#实验-1\" class=\"headerlink\" title=\"实验\"></a>实验</h4><h4 id=\"结论-1\"><a href=\"#结论-1\" class=\"headerlink\" title=\"结论\"></a>结论</h4><ul>\n<li>通过蒸馏学习，做到了在学习新知识的同时不遗忘旧知识。</li>\n<li>提前通过 self-supervised 生成一些 新类标签，进行fine-tune，使得模型更容易接受新知识。</li>\n<li>断定模型中的部分可以分为 class-specific 和 class-agnostic 两部分。</li>\n</ul>\n<h3 id=\"5-Lightweight-Transformer-for-Multi-Modal-Object-Detection-Student-Abstract\"><a href=\"#5-Lightweight-Transformer-for-Multi-Modal-Object-Detection-Student-Abstract\" class=\"headerlink\" title=\"5. Lightweight Transformer for Multi-Modal Object Detection (Student Abstract)\"></a>5. <a href=\"https://ojs.aaai.org/index.php/AAAI/article/view/26946\">Lightweight Transformer for Multi-Modal Object Detection (Student Abstract)</a></h3><p><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20231210112104.png\" alt=\"20231210112104\"></p>\n<p>模型训练时，可以从多个角度进行训练，角度越多越准确，但却更慢。</p>\n<p>比如<strong>自动驾驶</strong>，仅有一个传感器肯定没有多个传感器的结果准确，但是多个传感器的结果又太慢。</p>\n<p>那么能不能又快又准呢？那就要从模态融合入手。<strong>作者提出了一种新的融合操作符，叫做 Poolformer-based fusion operator。</strong></p>\n<blockquote>\n<p>本质上来讲，本文更换了权重分配的方式，用 pooling 来进行替代，这样可以减少参数量，提高速度，但效果却不差。文章没有提供代码，但是作者<a href=\"https://github.com/autonomousvision/transfuser\">回复邮件推荐了一份代码</a></p>\n</blockquote>\n<h3 id=\"6-Self-supervised-Label-Augmentation-via-Input-Transformations\"><a href=\"#6-Self-supervised-Label-Augmentation-via-Input-Transformations\" class=\"headerlink\" title=\"6. Self-supervised Label Augmentation via Input Transformations\"></a>6. <a href=\"https://arxiv.org/abs/1910.05872\">Self-supervised Label Augmentation via Input Transformations</a></h3><p>一言以蔽之，通过<strong>数据增强</strong>的方式来增强原始标签，<strong>不仅仅对于无监督、半监督学习有效，对于全监督学习也能带来效果的提升。将共享底层特征改成了 unified task</strong></p>\n<p><strong>共享底层特征</strong>：先前的工作通常为原始任务和自监督任务维护两个独立的分类器（但共享公共特征表示），并同时优化它们的目标。<strong>也就是，不论你图像怎么变（增强），特征表示不能变</strong>。</p>\n<ul>\n<li><a href=\"https://github.com/hankook/SLA\">code</a></li>\n</ul>\n<blockquote>\n<p><strong>有效地利用基于 transformation 的自我监督进行全监督的分类任务。对于 few-shot and imbalanced classification scenarios 也有效果</strong></p>\n</blockquote>\n<p><em><strong>Difference with previous approaches:</strong></em></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20231210143836.png\" alt=\"20231210143836\"></p>\n<ul>\n<li>单纯的 Data Augmentation，只是对输入进行了变换，但却强行使得标签不变的一种方案，这种方案有一定弊端，比如：6 和 9，详见原文</li>\n</ul>\n\n$$\n\\mathcal{L}_{DA}(x,y;\\theta,\\mu) = \\frac{1}{M} \\sum_{j=1}^M \\mathcal{L}_{CE}(\\theta(\\hat{z_j}; \\mu), y)\n$$\n\n\n<ul>\n<li>Multi-task Learning 同时学习两个任务，同时优化它们。<strong>但是，当数据集是全标签时，这种方法通常不会带来效果的提升。</strong></li>\n</ul>\n\n$$\n\\mathcal{L}_{MT}(x,y;\\theta,u,v) = \\frac{1}{M} \\sum_{j=1}^{M} \\mathcal{L}_{CE}(\\theta(\\hat{z_j};\\mu), y) + \\mathcal{L}_{CE}(\\theta(\\hat{z_j};v),j)\n$$\n\n\n<ul>\n<li>本文所提出的SLA(Self-supervised Label Augmentation)方法直接学习<strong>联合概率分布</strong>。效果最好，也最通用。</li>\n</ul>\n\n$$\n\\mathcal{L}_{SLA}(x,y;\\theta,\\omega) = \\frac{1}{M} \\sum_{j=1}^{M} \\mathcal{L}_{CE}(p(\\hat{z_j};\\omega), (y,j))\n$$\n\n\n<blockquote>\n<p>此处损失详见原文。</p>\n</blockquote>\n<p><strong>对比效果如下：</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20231210144438.png\" alt=\"20231210144438\"></p>\n<hr>\n<blockquote>\n<p>SLA 仅增加了标签的数量，对于模型的参数基本上没有影响。<br>SLA 可以弱化为 Data Augmentation，也可以弱化为 Multi-task Learning。但是 Multi-task Learning 约束太强（强制 label 不变），难以优化。</p>\n</blockquote>\n<hr>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20231210173513.png\" alt=\"20231210173513\"></p>\n<p>由于预测的结果变为了以前的 M 倍，所以先做 Aggregation，也就是把对应的 M 个条件概率加起来，然后再进行 softmax。之后和原来的标签进行交叉熵计算蒸馏损失。</p>\n\n$$\n\\mathcal{L}_{SLA}(x,y;\\theta,\\omega,\\mu) = \\mathcal{L}_{SLA}(x,y; \\theta, \\omega) + \\mathcal{D}_{KL}(P_{aggregated}(·|x)|| \\sigma(z;\\mu)) + \\beta \\mathcal{L}_{CE}(\\sigma(z;\\mu), y)\n$$\n\n\n<h3 id=\"7-Learn-More-for-Food-Recognition-via-Progressive-Self-Distillation\"><a href=\"#7-Learn-More-for-Food-Recognition-via-Progressive-Self-Distillation\" class=\"headerlink\" title=\"7. Learn More for Food Recognition via Progressive Self-Distillation\"></a>7. <a href=\"https://arxiv.org/abs/2303.05073\">Learn More for Food Recognition via Progressive Self-Distillation</a></h3><ul>\n<li>面临的问题：</li>\n</ul>\n<p>食品识别一直是一个比较困难的任务，因为这是一个比较细粒度的任务。例如对于鸟的识别，找到鸟头、爪子就好了，但是食品可能是各种水果、蔬菜堆叠在一起构成沙拉，这比较困难。传统的方法是先用弱监督的方式做很多位置的定位，之后聚合并抽取特征，最后分类。<strong>但这样一来，性能就会被位置定位所限制。我们很难把每一部分区域都学好。</strong></p>\n<ul>\n<li>解决方案：</li>\n</ul>\n<p>作者提出了 PSD（Progressive Self-Distillation），用于去挖掘图像中更有用的区域。teacher model 和 student model 共享相同的 embeding。最后 inference 阶段，仅保留 teacher model。仍然属于 self-supervised 的范畴。</p>\n<p><strong>embedding 可以用 CNN，也可以用 transformer(e.g.,Swin Transformer)。</strong></p>\n<ul>\n<li>dataset：ETHZ Food-101、Vireo Food-172、ISIA Food-500</li>\n<li>code: 无</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20231210235852.png\" alt=\"20231210235852\"></p>\n<p>student model 和 teacher model 共享同一个 Embeding Network，但是有不同的分类器。输入<strong>原始图片</strong>给 teacher model，经过一个 ViT 得到一个 T x D 的 tokens，reshape 成 H x W x D 的 feature map，之后经过全局平均池化，得到一个 D 维的向量，之后经过一个全连接层，得到一个 C 维的向量，之后送入 Class Response Module。根据 Threshold，得到一个 mask，之后将 mask 与原始图片相乘，得到一个新的图片，送入 student model。如法炮制，进得到了很多的 student model。蒸馏阶段，使用 teacher model 的输出作为 ground truth，student model 的输出作为预测值，计算 KL 散度。</p>\n<p>损失如下：</p>\n\n$$\n\\mathcal{L} = \\mathcal{L}_{g}(x,y) + \\sum_{i=1}^{m}(\\omega_l \\mathcal{L}_{l}(\\hat{x}_{i-1}, y) + \\omega_d \\mathcal{L}_{d}(x, \\hat{x}_{i}))\n$$\n\n其中 $\\mathcal{L}_{g}(x,y)$ 是原始的分类损失，$\\mathcal{L}_{l}$ 是 locating loss，$\\mathcal{L}_{d}$ 是 distillation loss。\n\n$$\n\\mathcal{L}_{g}(x,y) = \\mathcal{L}_{CE}(h(f(x;\\theta); \\phi_t), y)\n$$\n\n$$\nL_{l}(x,y) = \\mathcal{L}_{ce}(GAP(f(x;\\theta); \\Theta), y)\n$$\n\n$$\n\\mathcal{L}_d(x, \\hat{x}) = \\mathcal{D}_{KL}(h(f(x;\\theta); \\phi_t), h(f(\\hat{x};\\theta); \\phi_s))\n$$\n\n\n\n<p>所谓渐进，是依靠$\\omega_l$ 和 $\\omega_d$ 来控制的。</p>\n\n$$\n\\omega_d = \n\\begin{cases}\n    \\alpha \\cdot \\exp(-5(1 - \\frac{e}{\\beta})^2), & e < \\beta \\\\\n    \\alpha, & e \\geq \\beta\n\\end{cases}\n$$\n\n\n<blockquote>\n<p>垃圾文章，没有代码，作者邮件不回。$L_l$也没有讲清楚。Class Response Module 出来之后怎么进行 Threshold？怎么得到 mask？这些都没有讲清楚。<strong>或许需要一些食物识别的先验知识。</strong></p>\n</blockquote>\n<h3 id=\"8-Solving-Math-Word-Problems-concerning-Systems-of-Equations-with-GPT-3\"><a href=\"#8-Solving-Math-Word-Problems-concerning-Systems-of-Equations-with-GPT-3\" class=\"headerlink\" title=\"8. Solving Math Word Problems concerning Systems of Equations with GPT-3\"></a>8. <a href=\"https://ojs.aaai.org/index.php/AAAI/article/view/26896\">Solving Math Word Problems concerning Systems of Equations with GPT-3</a></h3><h4 id=\"摘要-3\"><a href=\"#摘要-3\" class=\"headerlink\" title=\"摘要\"></a>摘要</h4><p>本文解决了一个专业领域的问题，就是<strong>数学方程式的提取和求解问题</strong>。作者将其归到了 NLP 的范畴，使用了 GPT-3 来解决这个问题。<br>问题分三步：</p>\n<ol>\n<li>对问题进行 <strong>分类</strong>，是几元方程式。这个问题目前 GPT-3 能够达到 80%-100% 的准确率。</li>\n<li>提取方程式，这个问题的精度随着给定模型的例子数量的增加而增加。one-shot 的精度为 31%，3-shot 的精度为 69%。之后再进一步进行 fine-tune，精度可以达到 80%。</li>\n<li>生成新的问题，GPT-3 的精度在 33%-93%，具体取决于问题类型。</li>\n</ol>\n<h4 id=\"引言-3\"><a href=\"#引言-3\" class=\"headerlink\" title=\"引言\"></a>引言</h4><p>本文聚焦的问题是 <strong>二元一次线性方程组，也就是两个变量，两个方程式</strong>。如上所述，解决问题如下：</p>\n<ul>\n<li><p>Q1: How good  is GPT-3 at classifying problems into different themes?</p>\n</li>\n<li><p>Q2: How good is GPT-3 at extracting a system of linear equations directly from problem descriptions?</p>\n</li>\n<li><p>Q3: How good is GPT-3 at creatively generating valid problems?</p>\n</li>\n<li><p><a href=\"https://github.com/anrgusc/MWP2L\">dataset</a></p>\n</li>\n</ul>\n<p><strong>如下为 Q1</strong>. Table1: Instance problem from each category</p>\n<table>\n<thead>\n<tr>\n<th>类别</th>\n<th>问题</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>Sum and Difference (S&amp;D)</strong></td>\n<td><em>The sum of half of a number, x, and another number, y, is -28. The difference of x and y is 7. Find x and y.</em></td>\n</tr>\n<tr>\n<td><strong>Item and Property (I&amp;P)</strong></td>\n<td><em>Three apples and four bananas cost $4.85. Three apples and ten bananas cost $8.75. Find the cost of an apple.</em></td>\n</tr>\n<tr>\n<td><strong>Perimeter of Rectangle (PoR)</strong></td>\n<td><em>The length of a rectangle is 3 cm less than double the width, and the perimeter is 53 cm. Find its dimensions.</em></td>\n</tr>\n<tr>\n<td><strong>Motion (MO)</strong></td>\n<td><em>Joey and Natasha start from the same point and walk in opposite directions. Joey walks 4 km&#x2F;h faster than Natasha. After 2 hours, they are 31 kilometers apart. How fast did each walk?</em></td>\n</tr>\n<tr>\n<td><strong>Mixture (MI)</strong></td>\n<td><em>Twelve gallons of a 31% acid mixture is obtained by mixing a 23% solution with a 48% solution. How much of each must be used?</em></td>\n</tr>\n</tbody></table>\n<p><strong>生成表达式的时候，前缀、中缀和后缀的进度不同。</strong></p>\n<p>已经有人通过 Transformer 来解决这个问题，但是作者说泛化性不好。详见文章的 <em>Prior Applications of Transformers to MWP</em>。<strong>还有人通过 BERT 来解决这个问题。</strong></p>\n<p>目前关注的问题是以下五个，作者仅考虑了其中的三个：</p>\n<ul>\n<li>identify the type of problem</li>\n<li>output step-by-step instructions</li>\n<li>extract the correct system of linear equations</li>\n<li>successfully solve the equations</li>\n<li>generate similar problems for users to practice.</li>\n</ul>\n<p>Table 2: Extraction task example.</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">Problem</th>\n<th align=\"center\">How many gallons of a 20% antifreeze solution and a 10% antifreeze solution must be mixed to obtain 40 gallons of a 16% antifreeze solution?</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">Valid Response</td>\n<td align=\"center\">0.2<em>x+0.1</em>y&#x3D;0.16*(x+y);x+y&#x3D;40</td>\n</tr>\n<tr>\n<td align=\"center\">Invalid Response</td>\n<td align=\"center\">20x+10y&#x3D;16*40 (only one equation is derived)</td>\n</tr>\n<tr>\n<td align=\"center\">Invalid Response</td>\n<td align=\"center\">20x+10(40-x)&#x3D;16(40) (failed to use required variable y)</td>\n</tr>\n<tr>\n<td align=\"center\">Invalid Response</td>\n<td align=\"center\">2<em>x+1</em>y&#x3D;40;0.2<em>x+0.1</em>y&#x3D;0.16 (incorrect interpretation)</td>\n</tr>\n</tbody></table>\n<p>Table 3: Problem generation.</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">problem given in prompt</th>\n<th align=\"center\">The larger of two numbers is 10 more than twice the smaller. If the smaller is subtracted from the larger, the result is 26. Find the numbers.</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">within-topic generation outcome</td>\n<td align=\"center\">The larger of two numbers is 15 more than twice the smaller. If the smaller is subtracted from the larger, the result is 33. Find the numbers.</td>\n</tr>\n<tr>\n<td align=\"center\">cross-topic generation outcome</td>\n<td align=\"center\">The larger of two angles is 10 more than twice the smaller. If the smaller is subtracted from the larger, the result is 26. Find the angles.</td>\n</tr>\n</tbody></table>\n<hr>\n<h3 id=\"9-Curriculum-Temperature-for-Knowledge-Distillation\"><a href=\"#9-Curriculum-Temperature-for-Knowledge-Distillation\" class=\"headerlink\" title=\"9. Curriculum Temperature for Knowledge Distillation\"></a>9. <a href=\"https://arxiv.org/abs/2211.16231\">Curriculum Temperature for Knowledge Distillation</a></h3><ul>\n<li><p><a href=\"https://github.com/zhengli97/CTKD?tab=readme-ov-file\">code</a></p>\n</li>\n<li><p><a href=\"https://zhengli97.github.io/CTKD/\">Project Page</a></p>\n</li>\n<li><p><a href=\"https://zhengli97.github.io/CTKD/chinese_interpertation.html\">中文解读</a></p>\n</li>\n<li><p>引言中指出：MKD (Liu et al. 2022) 比较重视 <strong>数据增强</strong>。</p>\n</li>\n<li><p>相关工作中指出：</p>\n<ul>\n<li><em>This training strategy has been widely applied in various domains, such as computer vision (Wu et al. 2018; Sinha, Garg, and Larochelle 2020) and natural language processing (Platanios et al. 2019; Tay et al. 2019).</em></li>\n<li>Curriculum Dropout (Morerio et al. 2017)</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"10-Sharpness-Aware-Minimization-for-Efficiently-Improving-Generalization\"><a href=\"#10-Sharpness-Aware-Minimization-for-Efficiently-Improving-Generalization\" class=\"headerlink\" title=\"10. Sharpness-Aware Minimization for Efficiently Improving Generalization\"></a>10. <a href=\"https://arxiv.org/abs/2010.01412\">Sharpness-Aware Minimization for Efficiently Improving Generalization</a></h3><ul>\n<li><a href=\"https://github.com/google-research/sam\">code</a></li>\n<li><a href=\"https://github.com/davda54/sam\">Third-party library</a></li>\n</ul>\n<p>cifar100 的结果：Percentage correct 96.08，最强结果。</p>\n<p>作者认为：现在模型的参数都特别多，单单靠 loss function 去做优化，不足以支撑起整个任务，这会导致太多不同的解。因此，作者提出了 SAM（Sharpness-Aware Minimization），通过优化 sharpness 来提高泛化性能，<strong>也就是优化曲率</strong>。</p>\n<p>一言以蔽之：不仅仅要优化模型的 loss，还要优化 loss 最小值附近的 平滑度。<strong>可以将其视为一种学习算法，经测试，相当多的模型和任务，套用上这个算法，效果都会有所提升。</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20231218094309.png\" alt=\"20231218094309\"></p>\n<p><strong>Theorem (stated informally) 1.</strong> For any $\\rho$ &gt; 0, with high probability over training set $S$ generated from distribution $\\mathcal{D}$,</p>\n\n$$\n\\mathcal{D}(\\omega) \\leq \\text{max}_{|| \\epsilon ||_2 \\leq \\rho} \\mathcal{L}_{S}(\\omega + \\epsilon) + \\mathcal{h}(|| \\omega ||_2^2 / \\rho^2)\n$$\n\n\n<p>where $h : R_+ → R_+$ is a strictly increasing function (under some technical conditions on $L_D (w)$).</p>\n<p>事实上，上述公式的右侧可以写为：</p>\n\n$$\n[\\text{max}_{|| \\epsilon ||_2 \\leq \\rho} \\mathcal{L}_{S}(\\omega + \\epsilon) - \\mathcal{L}_{S}(\\omega)] + \\mathcal{L}_{S}(\\omega) + \\mathcal{h}(|| \\omega ||_2^2 / \\rho^2)\n$$\n\n\n<p>其中最后一项可以看成是一个正则项，可以用$\\lambda || \\omega ||_2^2$来代替。[]内的代表锐度，也就是 sharpness。中间那一项是 loss。</p>\n<p>故而，SAM 的损失函数为：</p>\n\n$$\n\\text{min}_{\\omega} \\mathcal{L}_{S}^{SAM}(\\omega) + \\lambda || \\omega ||_2^2 \\quad\n\n\\text{where} \\quad \\mathcal{L}_{S}^{SAM}(\\omega) \\stackrel{\\triangle}{=} \\text{max}_{|| \\epsilon ||_p \\leq \\rho} \\mathcal{L}_{S}(\\omega + \\epsilon)\n$$\n\n\n<p>就是一个最大最小化问题，详细推导见原文。</p>\n<blockquote>\n<p>Because SAM’s performance is amplified by not syncing the perturbations, data parallelism is highly recommended to leverage SAM’s full potential (see Section 4 for more details).就是数据并行，效果更好。</p>\n</blockquote>\n<h3 id=\"11-Adaptive-Hierarchy-Branch-Fusion-for-Online-Knowledge-Distillation\"><a href=\"#11-Adaptive-Hierarchy-Branch-Fusion-for-Online-Knowledge-Distillation\" class=\"headerlink\" title=\"11. Adaptive Hierarchy-Branch Fusion for Online Knowledge Distillation\"></a>11. <a href=\"https://ojs.aaai.org/index.php/AAAI/article/view/25937\">Adaptive Hierarchy-Branch Fusion for Online Knowledge Distillation</a></h3><h3 id=\"13-Class-Incremental-Learning-for-Task-Oriented-Dialogue-System-with-Contrastive-Distillation-on-Internal-Representations-Student-Abstract\"><a href=\"#13-Class-Incremental-Learning-for-Task-Oriented-Dialogue-System-with-Contrastive-Distillation-on-Internal-Representations-Student-Abstract\" class=\"headerlink\" title=\"13. Class Incremental Learning for Task-Oriented Dialogue System with Contrastive Distillation on Internal Representations (Student Abstract)\"></a>13. <a href=\"https://ojs.aaai.org/index.php/AAAI/article/view/27044\">Class Incremental Learning for Task-Oriented Dialogue System with Contrastive Distillation on Internal Representations (Student Abstract)</a></h3><p>本文通过对比、蒸馏等技术来实现增量学习，用于对话系统。</p>\n<p>通过以下几种方式来保证增量学习的效果：</p>\n<ul>\n<li>仅更新部分相关新任务的参数</li>\n<li><strong>对比学习：新任务中的数据作为 anchors，原数据作为负样本。上一阶段模型和新阶段模型对于新任务数据的输出作为正样本对。简而言之，学习新任务的时候，不仅仅学习新任务的知识，还要学习新任务和原任务的区别。</strong></li>\n<li>复杂的损失函数：包括对比损失、交叉熵损失、蒸馏损失等。<strong>相互协调，妄想达到最好的效果。</strong></li>\n<li>动量更新：<strong>保证模型的稳定性。</strong></li>\n</ul>\n<blockquote>\n<p>作者并未提供代码，也无邮件回复。一言以蔽之，将各种东西混合在一起构成一套灌水垃圾。</p>\n</blockquote>\n<hr>\n<h3 id=\"14-Improving-Training-and-Inference-of-Face-Recognition-Models-via-Random-Temperature-Scaling\"><a href=\"#14-Improving-Training-and-Inference-of-Face-Recognition-Models-via-Random-Temperature-Scaling\" class=\"headerlink\" title=\"14. Improving Training and Inference of Face Recognition Models via Random Temperature Scaling\"></a>14. <a href=\"https://ojs.aaai.org/index.php/AAAI/article/view/26760\">Improving Training and Inference of Face Recognition Models via Random Temperature Scaling</a></h3><p>本文针对人脸识别，介绍了<strong>不确定</strong>的问题。</p>\n<p>模型对于无效的输入，仍然会以高置信度做出预测，这是不合理的。对于人脸识别，同样的人但是不同的照片，应该被映射到同一个 latent space，但这很难做到。</p>\n<p>作者提出了 RTS（Random Temperature Scaling），将温度与不确定性相关联，通过随机温度缩放来影响模型的不确定性。</p>\n<p>上述皆为论文中内容，<strong>实际上，如文中 Eqn.4 和 Eqn.5 以及 Fig.2 所示，作者提出了一种新的损失函数（类似softmax）,并引入了 Gumbel 分布</strong>。详见原文。</p>\n<blockquote>\n<p>无代码，垃圾文章。</p>\n</blockquote>\n<hr>\n<h3 id=\"15-De-biased-Teacher-Rethinking-IoU-Matching-for-Semi-supervised-Object-Detection\"><a href=\"#15-De-biased-Teacher-Rethinking-IoU-Matching-for-Semi-supervised-Object-Detection\" class=\"headerlink\" title=\"15. De-biased Teacher: Rethinking IoU Matching for Semi-supervised Object Detection\"></a>15. <a href=\"https://ojs.aaai.org/index.php/AAAI/article/view/25355\">De-biased Teacher: Rethinking IoU Matching for Semi-supervised Object Detection</a></h3><p><a href=\"https://github.com/wkfdb/De-biased-Teracher\">假code</a></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20240311001350.png\" alt=\"20240311001350\"></p>\n<ul>\n<li><p>从 $D_{labeled}$ 和 $D_{unlabeled}$ 中采样 input。</p>\n<ul>\n<li>labeled images 直接通过 weakly augmented 来训练 student model。</li>\n<li>unlabeled images，Teacher 通过 weakly augmented 来生成 pseudo labels，之后通过 strong augmented 来训练 student model。<strong>作者称之为 一致性正则化。</strong></li>\n</ul>\n</li>\n<li><p>student model 通过 loss 进行训练更新，teacher model 通过自身和 student model 进行动量更新，详见 Eqn.1。</p>\n</li>\n</ul>\n<p>也就是说，本文三个贡献：</p>\n<ol>\n<li>一致性正则，和蒸馏的区别在于，teacher 和 student 都动。</li>\n<li>teacher 通过 student 来进行动量更新。</li>\n<li>截断 softmax 的尾部，阈值为 0.05。（推测没有使用温度系数T）</li>\n</ol>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20231225202053.png\" alt=\"20231225202053\"></p>\n<blockquote>\n<p>什么时候阶段？如何阶段？TODO</p>\n</blockquote>\n<hr>\n<h3 id=\"16-Grouped-Knowledge-Distillation-for-Deep-Face-Recognition\"><a href=\"#16-Grouped-Knowledge-Distillation-for-Deep-Face-Recognition\" class=\"headerlink\" title=\"16. Grouped Knowledge Distillation for Deep Face Recognition\"></a>16. <a href=\"https://ojs.aaai.org/index.php/AAAI/article/view/25472\">Grouped Knowledge Distillation for Deep Face Recognition</a></h3><p>无 code. <strong>已发邮件，未回。</strong></p>\n<p>$$L &#x3D; \\mathcal{L}<em>{cls} + \\mathcal{L}</em>{kd}$$</p>\n<p>其中 $\\mathcal{L}_{cls}$ 是一个专门针对于人脸识别的损失函数。</p>\n<p>一言以蔽之，作者将 logit 按照阈值进行分组。分别是 Primary-KD, Secondary-KD, and Binary-KD。<strong>Primary-KD 用于学习主要的知识，Secondary-KD 用于学习次要的知识，Binary-KD 用于确保教师和学生之间的知识分布的一致性。</strong>作者表示，Primary-KD 和 Binary-KD 是重要的，Secondary-KD 是累赘。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Corner430/Picture1/images/20231225210830.png\" alt=\"20231225210830\"></p>\n<blockquote>\n<p>Binary-KD 参见原文公式 6，实际上就是一个二分类问题，用于确定分类是 Primary-KD 还是 Secondary-KD。</p>\n</blockquote>\n<p><strong>注意 Fig.2 中的文字描述，作者指出根据 student 的输出进行 rank，之后开始累加，直到累加的值达到了 阈值，这部分就是 Primary-KD。teacher也排序。</strong>此处有两个问题：</p>\n<ol>\n<li>这样排序，岂不是会出现类别不匹配的问题？</li>\n<li>根据 student 进行 rank 有什么用？不是应该根据 teacher？</li>\n</ol>\n<p><strong>作者还在 Method 文字的上面指出 feature distillation 优于 logit distillation。不敢苟同。</strong></p>\n<p>作者测试最好的阈值为 0.93，但作者的理论是错误的，所以也并无太多参考价值。</p>\n<p><strong>作者 Equ.3 的绝对值加的很好，值得借鉴，根据 teacher 进行排序的话，应该确实是可行的，可以做到自适应调整 Primary-KD 和 Secondary-KD 的比例，但要想做到类型匹配，需要存原来的索引，这样会造成计算成本的增加。</strong></p>\n<p><strong>作者最后做了一个 masked face recognition 的实验，这手操作值得学习。</strong></p>\n<table><tr><td bgcolor=\"#FF00FF\">作者已回邮件，rank 时对 index 重新组织，并且代码中是根据 teacher 进行 rank. 但匪夷所思的是，作者说最后通过 student 进行 rank 反而会取得更好的结果。</td></tr></table>"},{"title":"网络是怎样连接的","date":"2023-06-22T22:35:21.000Z","declare":true,"_content":"1. 已经有了IP地址了，为什么还需要MAC地址呢？<!--more-->\n- IP地址和MAC地址在计算机网络中扮演着不同的角色，它们各自具有不同的功能和用途。\n- IP地址（Internet Protocol address）是用于在互联网上标识和寻址设备的数字地址。它是逻辑地址，用于在网络层（如Internet协议）上进行路由和通信。IP地址是由网络管理员配置的，并且可以根据需要进行更改。IP地址允许网络中的设备相互识别和进行通信。\n- 而MAC地址（Media Access Control address）是一个唯一的硬件地址，用于在**局域网（LAN）**中标识网络设备。MAC地址是由设备的制造商固定在网络接口卡上的，因此在设备出厂时即被分配。它是物理地址，用于在数据链路层上进行数据帧的传输。MAC地址是全球唯一的，每个网络设备都有一个独特的MAC地址。\n- 那么为什么需要MAC地址呢？\n  1. **局域网通信**：在局域网中，设备之间的通信是基于MAC地址进行的。当设备在同一局域网中进行通信时，它们使用MAC地址来识别彼此并交换数据。路由器根据目标MAC地址将数据包转发到正确的设备。\n  2. 广播通信：当设备需要向整个局域网发送广播消息时，它使用广播MAC地址（全为1的地址）。这种广播通信对于局域网中的设备发现、地址解析协议等功能非常重要。\n  3. ARP协议：地址解析协议（ARP）用于将IP地址映射到相应的MAC地址。当设备知道目标IP地址时，它使用ARP查询来获取对应的MAC地址，以便将数据包正确地发送到目标设备。\n\n> 总结起来，尽管IP地址在网络层上具有重要作用，但MAC地址在数据链路层上同样至关重要。**IP地址用于路由和全球范围的通信，而MAC地址用于局域网内的设备识别和通信**。两者在不同层次上发挥作用，相互补充，共同构建了计算机网络的功能。\n\n2. 路由表是用于路由器和网络设备的重要组成部分，它用于决定网络数据包的转发路径。路由表中存储了网络的可达目的地以及相应的下一跳信息。下面是关于路由表的基本解释：\n  1. 目的地网络（Destination Network）：这是指数据包要传输到的目标网络的网络地址。**它可以用IP地址表示，通常是网络的网络号和子网掩码的组合**。\n  2. 子网掩码（Subnet Mask）：子网掩码与IP地址结合使用，**用于确定目的地网络的范围。子网掩码中的1位表示网络号，0位表示主机号**。\n  3. 下一跳（Next Hop）：下一跳是指将数据包从当前设备转发到目标网络所使用的下一个路由器或网络设备的地址。它可以是直接连接的邻居路由器的IP地址，也可以是下一个中转节点的IP地址。\n  4. 接口（Interface）：接口是指路由器或网络设备与相应网络之间的物理或逻辑连接。接口可以是网卡、以太网端口、无线接口等。\n在路由表中，每个条目通常包含以上信息。当路由器接收到一个数据包时，它会检查目标IP地址，并使用路由表来确定下一步的操作：\n  1. 匹配目的地网络：路由器会检查目的地IP地址和路由表中的目的地网络条目进行匹配。\n  2. 最长前缀匹配：如果存在多个匹配的目的地网络，路由器将选择具有最长前缀匹配（即子网掩码最长）的路由表条目。这确保了更精确的匹配。\n  3. 下一跳确定：路由器根据匹配的路由表条目找到相应的下一跳地址。\n  4. 数据包转发：路由器将数据包发送到相应的下一跳地址，或通过适当的接口将数据包转发到目标网络。\n路由表的内容可以通过手动配置静态路由，也可以通过动态路由协议（如OSPF、BGP等）自动学习和更新。动态路由协议允许路由器在网络发生变化时自动更新路由表，以确保有效的数据包转发。\n通过有效管理和更新路由表，路由器能够根据目标网络选择最佳路径来转发数据包，实现网络中的数据传输和通信。\n\n3. **TTL 是 \"Time to Live\"（生存时间）的缩写**，它是一个在计算机网络中使用的术语。**TTL 值用于确定数据包在网络中可以存活的时间长度**。当一个数据包被发送到网络上时，它会被赋予一个初始的 TTL 值。每当数据包经过一个路由器或网络设备时，TTL 值就会减少。**当 TTL 值减至零时，数据包将被丢弃并不再继续传输**。\n**TTL 值的目的是防止数据包在网络中无限循环**。如果一个数据包在网络中被路由器无限转发，它将消耗网络资源并导致网络拥堵。通过限制数据包的生存时间，TTL 值确保数据包能够在合理的时间内到达目的地或被丢弃。\n在实际应用中，TTL 值通常以**秒**为单位表示，常见的初始 TTL 值为 64 或 128。不同的操作系统或网络设备可能对 TTL 值的处理方式有所差异，但一般情况下，每个路由器或网络设备在转发数据包时会将 TTL 值**减少一定的数量，通常是 1 或更多**。\n> 总结来说，TTL 是一个用于确定数据包在网络中存活时间的字段，它对网络的稳定运行和防止数据包无限循环起着重要作用。\n\n4. **MTU 是 \"Maximum Transmission Unit\"（最大传输单元）的缩写。它指的是在计算机网络中可以通过单个数据包传输的最大数据量**。\n\n最大传输单元 (MTU) 是网络通信中一个重要的参数，它定义了网络中可以传输的数据包的最大大小。MTU 的大小是由网络设备或协议规范决定的，通常以字节为单位表示。\n\n当数据需要通过网络传输时，它会被分割成更小的数据包以适应网络的 MTU。这样做的目的是确保数据包能够在网络中正确地传输，因为某些网络设备或链路可能有传输数据包大小的限制。如果数据包的大小超过某个设备或链路的 MTU，它将被分割成更小的片段进行传输，并在目标节点上重新组装。\n\n不同类型的网络（如以太网、Wi-Fi、以及各种广域网连接等）通常具有不同的 MTU 值。常见的以太网 MTU 值是 1500 字节，而在某些特殊情况下，如在 VPN 或某些广域网连接中，MTU 可能会被调整为更小的值，例如 1400 字节或更低。\n\n准确设置正确的 MTU 值对于网络性能和数据传输的可靠性至关重要。如果 MTU 值设置得过大，可能会导致数据包被丢弃或需要进行片段重组，从而增加网络延迟和传输错误的可能性。如果 MTU 值设置得过小，数据传输的效率可能会受到影响，因为需要发送更多的数据包来传输相同的数据量。\n\n> 总结来说，MTU 是指在计算机网络中单个数据包可以传输的最大数据量。通过分割数据以适应网络的 MTU，确保数据能够在网络中正确传输，并在目标节点上重新组装。正确设置合适的 MTU 值对于网络性能和数据传输的可靠性非常重要。\n\n5. **MSS 是 \"Maximum Segment Size\"（最大报文段长度）的缩写**，它是在 TCP/IP 网络通信中使用的一个参数。\n\n在 TCP/IP 协议中，数据被分割成称为报文段（Segment）的小块进行传输。**MSS 指的是在 TCP 报文段中可以承载的最大有效载荷数据的大小，不包括 TCP 报文段的首部信息**。\n\nMSS 的大小是由网络设备或操作系统配置决定的，通常以字节为单位表示。它表示在 TCP 连接中发送的数据报文段的最大大小，因为 TCP 报文段除了有效载荷数据外还包含一些必要的控制信息，如首部、校验和、序列号等。\n\n当建立 TCP 连接时，通信双方会通过握手过程协商一个适当的 MSS 值。这个值会根据网络设备和连接双方的能力而确定，以确保数据的可靠传输和最大效率。较小的 MSS 值可以减少分段和重组的需求，从而提高传输效率。**然而，MSS 值不能超过网络链路中任何一方的 MTU 值，以确保数据包不会被分段**。\n\nMSS 的值通常与网络的 MTU 值相关。实际上，MSS 一般会设为 MTU 值减去 TCP/IP 报文段首部的长度（通常为 40 字节）再减去可能的 IP 选项的长度。\n\n> 总结来说，MSS（最大报文段长度）是在 TCP/IP 网络通信中用于确定 TCP 报文段中有效载荷数据的最大大小的参数。MSS 的值由网络设备或操作系统配置决定，并通过握手过程协商确定。它与网络的 MTU 值相关，用于确保数据的可靠传输和最大效率。\n\n6. TCP（Transmission Control Protocol）和 UDP（User Datagram Protocol）是两种常见的传输层协议，用于在计算机网络上提供可靠的数据传输。\n\n**TCP 是一种面向连接的协议**，它提供了可靠的数据传输和错误检测机制。它通过建立一个连接，在发送和接收数据之间创建一个可靠的通信通道。TCP 使用序列号和确认机制来确保数据的有序传输和可靠接收。它还提供了拥塞控制和流量控制机制，以适应网络拥塞和保证通信的质量。**TCP 的特点是稳定可靠**，适用于对数据传输的完整性和顺序性要求较高的应用，如网页浏览、文件传输、电子邮件等。\n\n**UDP 是一种无连接的协议**，它提供了一种简单的数据传输机制，**不具备可靠性保证**。UDP 通过将数据打包成数据报文并发送，但不进行连接的建立和维护。它没有序列号、确认、重传等机制，因此传输过程中可能会发生丢包或乱序。**UDP 的优点是传输速度快，延迟低，并且没有拥塞控制等复杂的机制**。UDP 适用于对实时性要求较高的应用，如音频、视频流媒体、在线游戏等，因为它更注重传输速度而不是数据的可靠性。\n\n> 总结来说，TCP 是一种面向连接的、可靠的传输协议，适用于对数据传输的完整性和顺序性要求较高的应用；而 UDP 是一种无连接的、不可靠的传输协议，适用于对实时性要求较高的应用。选择使用 TCP 还是 UDP 取决于具体应用的需求，如数据传输的可靠性、延迟要求以及对网络资源的消耗等因素。\n\n> 但这样并不会引发什么问题，因此出错时就收不到来自对方的回复，应用程序会注意到这个问题，并重新发送一遍数据。怎样的操作本身并不复杂，也并不会增加应用程序的负担。\n> 在无需重发数据，或者是重发了也没什么意义的情况下，使用UDP发送数据的效率会更高。\n\n7. 双绞线的设计是为了抑制噪声的影响\n8. 交换机的设计是将网络包原样转发到目的地\n9. 交换机的每一个网线接口后面都是一块网卡。网线接口和后面的电路部分加在一起称为一个端口，也就是说交换机的一个端口就相当于计算机上的一块网卡。换句话说，如果计算机上安装多块网卡，并开启“混杂模式”让网卡接收所有的网络包，然后再安装一个和交换机具备同样功能的网络包转发软件，那么这台计算机就变成了一台交换机。\n10. 交换机端口的MAC模块不具有MAC地址\n11. 交换机根据MAC地址表查找MAC地址，然后将信号发送到相应的端口\n12. 如果接收方MAC地址是一个**广播地址**，那么交换机会将包发送到除源端口之外的所有端口。\n13. 广播地址（broadcast address）是一种特殊的地址，将广播地址设为接收方地址时，包会发送到网络中所有的设备。MAC地址中的FF:FF:FF:FF:FF:FF和IP地址中的255.255.255.255都是广播地址\n14. 交换机的全双工模式可以同时发送和接收信号\n15. 交换机可以同时转发多个包\n16. 路由器是基于IP设计的，而交换机是基于以太网设计的\n17. 路由器的各个端口都具有MAC地址和IP地址\n18. 路由器根据“IP地址”判断转发目标。路由器会忽略主机号，只匹配网络号\n19. 路由器的子网掩码列只表示在匹配网络包目标地址时需要对比的比特数量，**匹配的比特数越长优先级越高（最长匹配原则）**\n20. 路由器的端口都具有MAC地址，只接收与自身地址匹配的包，遇到不匹配的包则直接丢弃\n21. 子网掩码0.0.0.0的意思是网络包接收方IP地址和路由表目标地址的匹配中需要匹配的比特数为0，换句话说，就是根本不需要匹配。只要将子网掩码设置为0.0.0.0，那么无论任何地址都能匹配到这一条记录。也就是说**路由表中子网掩码为0.0.0.0的记录表示“默认路由”，这一行配置的网关地址被称为默认网关**\n22. 路由器判断下一个转发目标的方法如下：\n  - 如果路由表的网关列内容为IP地址，则该地址就是下一个转发目标\n  - 如果路由表的**网关列内容为空**，则IP头部中的接收方IP地址就是下一个转发目标\n23. IP（路由器）负责将包送达通信对象这一整体过程，而其中将包传输到下一个路由器的过程则是由以太网（交换机）来负责的\n24. 在内网中可用作私有地址的范围仅限一下这些：\n```bash\n10.0.0.0 ~ 10.255.255.255\n172.16.0.0 ~ 172.31.255.255\n192.168.0.0 ~ 192.168.255.255\n```\n> 在制作私有地址规则时，这些地址属于公有地址中还没有被分配的范围\n25. 地址转换的基本原理是在转发网络包时对IP头部中的**IP地址和端口号**进行改写，这里的端口号指的是TCP和UDP的端口号，不是路由器和集线器连接网线的那个端口。在对外只能使用一个共有地址的情况下，可以用不同的端口号来区别内网中的不同终端\n26. 具备地址转换功能的设备不仅有路由器，有些防火墙也有地址转换功能，它的工作方式和路由器是相同的。\n27. 早期的地址转换机制是只改写地址，不改写端口号\n28. 对于从公司内网访问互联网的包，即便其发送方私有地址和端口号没有保存在对应表中**也是可以正常转发的**；然而，对于从互联网访问公司内网的包，如果在对应表中没有记录就**无法正常转发**。也就是说，除非公司主动允许，否则是无法从互联网向公司内网发送网络包的。这种机制具有**防止非法入侵**的效果。\n29. **包过滤**也是路由器的一个重要附加功能。包过滤就是在对包进行转发时，根据MAC头部、IP头部、TCP头部的内容，按照事先设置好的规则决定是转发这个包，还是丢弃这个包。我们通常说的**防火墙设备或软件**，大多数都是利用这一机制来防止非法入侵的。\n30. hub: central part of a wheel from which the spokes radiate 轮毂。集线器（repeater hub）、交换机（switching hub）\n31. ADSL（Asymmetric Digital Subscriber Line，非对称数字用户线路）是一种用于传输数据的通信技术。它是一种通过普通电话线提供高速互联网接入的技术。\n  - ADSL是\"非对称\"的，意味着它在上传和下载数据时的速度不对称。一般情况下，ADSL提供的下载速度比上传速度要快。这种设计是为了适应大多数用户在互联网使用过程中更多地下载数据（如浏览网页、观看视频等）而上传较少数据（如发送电子邮件、上传文件等）的需求。\n  - ADSL利用了普通电话线的传输能力，通过将数据转换成数字信号进行传输。它利用了电话线中未使用的频率范围，将低频范围用于传输电话信号，高频范围用于传输数据信号。这样就可以同时进行电话通话和上网，而且不会相互干扰。\n  - ADSL的传输速度依赖于多个因素，包括电话线的质量、距离和网络供应商的服务等。通常，ADSL的下载速度可以达到几兆比特每秒（Mbps），而上传速度通常较慢，一般在数百千位每秒（Kbps）到几兆位每秒（Mbps）之间。\n  - **总而言之，ADSL是一种通过普通电话线提供高速互联网接入的通信技术，它提供的下载速度比上传速度更快，适用于多数用户更多地下载数据而上传较少数据的需求。**\n32. **电信号和光信号传播的速度大体上相同，之所以电缆不如光纤通信速率高，是因为电信号再提升通信速率的同时，其衰减率也会提高（信号在传播过程中减弱），导致信号无法传到目的地**。相对地，光信号本来的衰减率就很低，提高通信速率也并不会提高衰减率。此外，光纤还不受电磁噪声的影响， 因此光纤能够进行高速通信。\n33. **接入网（Access Network）是指将终端用户连接到互联网或其他公共通信网络的部分网络**。它是整个通信网络中的最后一段，提供用户与网络之间的物理和逻辑接口。\n  - 接入网的主要功能是将用户设备（如计算机、手机、智能电视等）与核心网络进行连接，使用户能够访问互联网和其他网络服务。它扮演着桥梁的角色，将用户的数据传输到全球范围的网络中。\n  - 接入网可以采用各种不同的技术和架构，具体取决于网络运营商和地理条件。以下是几种常见的接入网技术：\n    - 数字用户线路（Digital Subscriber Line，DSL）：利用普通电话线传输数据，常见的形式包括ADSL和VDSL。\n    - 光纤接入网（Fiber to the x，FTTx）：使用光纤传输数据到用户的位置。其中，FTTH（Fiber to the Home）将光纤延伸到用户住宅，而FTTC（Fiber to the Curb）和FTTB（Fiber to the Building）将光纤延伸到街边或建筑物。\n    - 有线电视网络：利用有线电视网络传输数据，用户可以通过电缆调制解调器（Cable Modem）访问互联网。\n    - 无线接入网：使用无线技术（如Wi-Fi、4G、5G等）将用户设备连接到网络。\n  - 接入网的设计和性能对于用户的上网体验和网络服务的可用性至关重要。它需要考虑带宽、延迟、可靠性和安全性等因素，以满足用户对高速、稳定和安全的互联网连接的需求。\n34. 双绞线的极限距离是100米，但光纤的连接距离可以长达几公里。**距离的不同和路由的维护方式**，就是互联网与家庭、公司网络之间最主要的两个不同点\n35. 互联网接入路由器会在网络包前面加上MAC头部、PPPoE头部、PPP头部总共3种头部，然后发送给ADSL Modem（PPPoE方式下）\n36. **BAS: Broadband Access Server，宽带接入服务器**。它也是一种路由器\n  - BAS（Broadband Access Server）是一种网络设备，**用于提供宽带接入服务**。它是一种位于网络服务提供商（ISP）或通信运营商网络中的关键设备，用于管理和控制用户的宽带接入。\n  - BAS的主要功能是对接入网络的用户进行认证、授权和计费，以确保用户能够安全地接入和使用网络服务。它充当用户和网络服务提供商之间的接口，负责处理用户的接入请求、分配IP地址、设置访问权限以及监控用户的网络连接。\n  - BAS通常支持多种接入技术，如数字用户线路（DSL）、光纤、电缆、无线等，以适应不同用户的接入需求。它可以与不同类型的接入设备（如调制解调器、光猫等）进行交互，以建立用户与网络之间的连接。\n  - 除了用户管理和连接控制功能，**BAS还可以提供其他服务，如网络地址转换（NAT）、虚拟专用网络（VPN）等**。它还能够收集用户的接入统计数据，生成报告和日志，用于网络管理和故障排除。\n  - 需要注意的是，BAS在不同的网络环境和服务提供商之间可能有不同的名称和实现方式。例如，有些地方将BAS称为宽带接入服务器（Broadband Access Server），或称之为宽带终端接入设备（Broadband Termination Equipment，BTE）。\n  - **总而言之，BAS是一种用于管理和控制宽带接入服务的网络设备，它负责对用户进行认证、授权和计费，并提供用户接入管理和连接控制功能。它在网络服务提供商和通信运营商的基础设施中发挥着重要作用**。\n37. **PPP: Point-to-Point Protocol，点到点协议**。它是电话线、ISDN等通信线路所使用的一种协议，集成了用户认证、配置下发、数据压缩、加密等各种功能。\n38. **ATM: Asynchronous Transfer Mode，异步传输**。它是在以电话线为载体的传统电话技术基础上扩展出来的一种通信方式。它的数据传输是以“信元”为单位来进行的，这和以包为单位传输数据的TCP/IP很像，但这种方式并不适用于计算机通信。\n39. **调制（Modulation）是指在通信中将要传输的信息信号转换成适合在传输介质中传播的信号形式的过程**。它是通过改变载波信号的某些特性，如振幅、频率或相位来实现的。\n  - 在调制过程中，原始的信息信号称为**基带信号（Baseband Signal），而要传输的信号称为调制信号（Modulated Signal）**。调制的主要目的是将基带信号转换为适合在传输介质（如电缆、光纤、空气等）中传播的信号。\n  - 调制技术的选择取决于传输介质的特性以及通信系统的要求。以下是几种常见的调制技术：\n    - 振幅调制（Amplitude Modulation，AM）：在振幅调制中，基带信号的振幅被调制到一个高频载波信号上。调制后的信号的振幅随着基带信号的变化而变化。\n    - 频率调制（Frequency Modulation，FM）：在频率调制中，基带信号的频率被调制到一个高频载波信号上。调制后的信号的频率随着基带信号的变化而变化。\n    - 相位调制（Phase Modulation，PM）：在相位调制中，基带信号的相位被调制到一个高频载波信号上。调制后的信号的相位随着基带信号的变化而变化。\n  - 此外，还有许多其他的调制技术和变种，如正交频分多路复用（Orthogonal Frequency Division Multiplexing，OFDM）、相干调制（Coherent Modulation）等，它们在不同的通信系统和应用中发挥着重要的作用。\n  - 调制技术的选择和优化需要考虑传输介质的特性、噪声环境、带宽效率、功耗以及接收端的解调能力等因素，以实现高效、可靠的数据传输和通信。\n40. 光纤分为单模和多模两种，根据其物理特性，各有利弊\n41. 上下行的光信号在光纤中混合在一起，信号会变得无法识别，因此我们需要对他们进行区分，**办法是上行和下行信号采用不同波长的光**。波长不同的光混合后可通过**棱镜原理**进行分离，因此光纤中的上行和下行信号即便混合起来也可以识别。像这样在一条光纤中使用不同的波长传输多个光信号的方式叫做**波分复用**\n42. ONU: Optical Network Unit，光网络单元。它和光纤收发器一样，可以将电信号转换成光信号，除此之外还具有和电话局的OLT（Optical Line Terminal，光线路终端）相互配合避免信号碰撞的功能。这个设备有时也被叫做终端盒，因此终端盒这个词本身是对光纤收发器和ONU等光纤终端设备的统称\n43. PPPoE: Point-to-Point Protocol over Ethernet，以太网的点对点协议\n44. 在使用电话线或者ISDN**拨号上网时，PPP是这样工作的**。首先，用户向运营商的接入点拨打电话，电话接通后输入用户名和密码进行登录操作。用户名和密码通过RADIUS协议从RAS发送到认证服务器，认证服务器校验这些信息是否正确。当确认无误后，认证服务器会返回IP地址等配置信息，并将这些信息下发给用户。用户的计算机根据这些配置IP地址等参数，完成TCP/IP收发网络包的准备工作，接下来就可以发送TCP/IP包了\n45. **PPPoE是将PPP消息装入以太网包进行传输的方式**\n46. 所谓**隧道，就是能将包原封不动搬运到另一端**\n47. 一对一连接的端口可以不分配IP地址，这种方式称为无编号\n48. PPPoA: Point-to-Point Protocol over ATM. PPPoA方式不添加MAC头部和PPPoE头部，而是直接将包装入信元中\n49. **POP（Point of Presence）和NOC（Network Operations Center）**是与网络和通信基础设施相关的术语。\n  1. POP（Point of Presence，中文一般叫做“接入点”）：\n    - **POP指的是在网络服务提供商（ISP）或通信运营商网络中的一个点，通常是物理位置或网络节点**。它是用户与ISP网络连接的地点，提供网络接入、路由和交换等服务。POP通常位于地理上的关键位置，以便为用户提供更好的网络接入服务和更低的延迟。\n    - 在一个ISP网络中，可能会有多个POP分布在不同的地理位置，每个POP通常包含路由器、交换机、服务器等网络设备，用于连接用户和核心网络。通过建立多个POP，ISP可以提供更广泛的覆盖范围，并提高网络的可靠性和性能。\n  2. NOC（Network Operations Center）：\n    - **NOC是一个专门的中心或部门，负责监控、管理和维护一个网络的运行**。NOC通常由一组网络工程师和技术人员组成，他们负责确保网络的正常运行，并快速响应和解决任何网络问题或故障。\n    - NOC的主要职责包括实时监控网络设备和链路的状态、处理网络事件和故障、进行网络配置和优化、执行维护计划、协调与其他运营商的互联等。NOC通常使用监控系统、网络管理工具和报警系统等来帮助监控和管理网络。\n    - NOC还负责与其他相关部门或合作伙伴进行沟通和协调，如与运营商、互联网服务提供商、数据中心等。通过及时响应和解决网络问题，NOC确保网络的稳定性、可靠性和性能，以提供良好的网络服务体验。\n> 总结起来，POP是网络服务提供商或通信运营商网络中用户连接的点，提供网络接入和服务，而NOC是负责监控、管理和维护网络运行的中心或部门。它们在网络基础设施中扮演着重要的角色，保证了网络的可用性和性能。可以简单地认为，NOC就是规模扩大后的POP\n50. **专线是固定连接线路**，不需要进行身份认证，参数是根据传真、书面等方式下发后进行手动配置的，因此也不需要PPP、DHCP等机制。其实，这就是最古老的互联网接入方式。\n51. BGP: Border Gateway Protocol, 边界网关协议.互联网内部使用BGP机制在运营商之间交换路由信息\n52. IX: Internet eXchange, 中文一般叫做“互联网交换中心”。设置一个中心设备，通过连接到中心设备的方式来减少线路数量，这个中心设备就称为IX。\n53. **防火墙不会检查通信数据的具体内容，因此无法抵御隐藏在通信数据内容中的攻击。**\n54. **防火墙：一种抵御外部网络攻击的机制，也是最早出现的一种防御机制**。现在已经出现了很多可以绕过防火墙的攻击方法，因此防火墙一般需要和反病毒、非法入侵检测、访问隔离等机制并用。\n55. 包过滤方式的防火墙不仅可以允许或者阻止网络包的通过，还具备地址转换功能，因此还需要进行相关的设置。\n56. 包过滤方式的防火墙可根据接收方IP地址、发送方IP地址、接收方端口号、发送方端口号、控制位等信息来判断是否允许某个包通过\n57. 防火墙无法抵御的攻击：防火墙可以根据包的起点和终点来判断是否允许其通过，但仅凭起点和终点并不能筛选出所有风险的包。比如，假设Web服务器在收到含有特定数据的包时会引起宕机。但是防火墙只关心包的起点和终点，因此即便包中含有特定数据，防火墙也无法发现，于是包就被放行了。然后，当包到达Web服务器时，就会引发服务器宕机。通过这个例子可以看出，**只有检查包的内容才能识别这种风险，因此防火墙对这种情况无能为力**\n58. **DNS服务器可以为一个域名填写多个IP地址，并通过轮询（Round Robin）方式实现负载均衡和故障容错**。下面是一种常见的做法：\n  1. 在DNS服务器上为域名配置多个A记录：A记录是用来指定域名对应的IP地址的记录类型。在DNS服务器上为域名配置多个A记录，每个A记录对应一个IP地址。例如：\n```css\nexample.com. IN A 192.168.1.100\nexample.com. IN A 192.168.1.101\nexample.com. IN A 192.168.1.102\n```\n  2. DNS服务器返回多个IP地址：**当DNS服务器接收到客户端的查询请求时，它会从配置的多个A记录中选择一个IP地址返回给客户端**。可以采用简单的轮询方式，每次返回下一个IP地址。例如，第一次返回192.168.1.100，第二次返回192.168.1.101，以此类推。\n  3. 客户端使用返回的IP地址：客户端收到DNS服务器返回的IP地址后，可以使用该IP地址与目标服务器建立连接。通过轮询方式，不同的客户端可能会获得不同的IP地址，从而分散负载到多个服务器上。\n**这种配置方式可以实现简单的负载均衡效果，将流量分散到多个服务器上，减轻单个服务器的负载压力。同时，如果其中一个服务器不可用，DNS服务器将不再返回该服务器的IP地址，从而实现故障容错。**\n需要注意的是，这种简单的轮询方式并不能完全保证负载均衡，因为DNS服务器无法感知服务器的实际负载情况。在实际应用中，可能需要结合其他负载均衡技术和算法，如权重设置、健康检查等，以达到更精确的负载均衡效果。\n59. 使用负载均衡器时，**要用负载均衡器的IP地址代替Web服务器的实际地址注册到DNS服务器上**\n60. 对HTTP规格进行扩展，**在HTTP头部字段中加上用来判断相关性的信息，这种信息俗称Cookie**。这样，负载均衡器就可以通过这些信息来作出判断，将一系列相关的请求发送到同一台Web服务器，对于不相关的请求则发送到负载较低的服务器了。\n61. **代理：一种介于客户端和Web服务器之间，对访问操作进行中转的机制**。代理（Proxy）本来的意思并不是“转发”消息。而是先把消息收下来，然后“伪装”成原始客户端向Web服务器发出访问请求。\n62. 缓存服务器是一台通过代理机制对数据进行缓存的服务器。\n63. **缓存服务器和负载均衡器一样，需要代替Web服务器被注册到DNS服务器中**。\n64. **将缓存服务器的代理机制放在客户端一侧，就是代理的原型，也就是现在所说的正向代理（forward proxy）**.正向代理除了缓存这一作用，还有一个作用就是用来实现防火墙。**代理在转发过程中可以查看请求的内容，所以可以根据内容判断是否允许访问**。\n65. **为解决正向代理的种种弊端，产生了正向代理的改良版---反向代理（reverse proxy）。服务器端的缓存服务器采用的正是这种方式，这种方式称为反向代理。**\n66. 缓存服务器判断转发目标的方法还有一种，俺就是查看请求消息的包头部。因为包的IP头部中包含接收方IP地址，只要知道了这个地址，就知道用户要访问哪台服务器了。这种方法称为**透明代理（transparent proxy）**.透明代理集合了正向代理和反向代理的优点。使用透明代理时，**用户不会察觉到代理的存在，也不会注意到HTTP消息是如何被转发的，因此大家更倾向于将透明代理说成是缓存**.最近有很多场合中已经将透明代理直接叫做“缓存”而不是“代理”了。\n67. 缓存服务器部署在服务器端还是客户端，其效果是又差别的。\n  - 当缓存服务器放在服务器端时，可以减轻Web服务器的负载，但无法减少互联网中的流量。\n  - 当缓存服务器部署在客户端时，可以减少流量， 但是Web服务器运营商无法管理缓存服务器。\n> 因此，这两种部署缓存服务器的方式各有利弊，但也有一种方式能够集合两者的有点。那就是Web服务器运营者和网络运营商签约，将可以自己控制的缓存服务器放在客户端的运营商处\n68. 即便减少了数量，作为一个Web服务器运营者，如果自己和这些运营商签约并部署缓存服务器，无论是费用还是精力都是吃不消的。为了解决这个问题，一些专门从事相关服务的厂商出现了，他们来部署缓存服务器，并租借给Web服务器运营者。这种服务称为**内容分发服务**\n69. 内容分发服务也叫CDS（Content Delivery Service）。（现在更常用的名称叫CDN（Content Delivery Network 或 Content Distribution Network））\n  内容分发服务（Content Delivery Service，CDS），也称为内容分发网络（Content Delivery Network，CDN），是一种用于提供高效、可靠的内容分发和传输的网络架构。\n  CDN的主要目标是将内容（如网页、图片、视频、文件等）快速、可靠地传送给用户，以提供更好的用户体验和性能优化。**它通过在全球分布的边缘服务器上缓存和分发内容，使用户可以从离其较近的服务器获取内容**，从而减少了传输延迟和网络拥塞问题。\n  下面是CDN的工作原理：\n    1. 内容缓存和分发：CDN在全球各地设置了多个边缘服务器节点，这些节点分布在不同的地理位置，覆盖范围广。原始内容提供商（如网站、媒体服务提供商等）将内容上传到CDN的服务器上，这些服务器上的存储称为缓存。\n    2. 请求路由：当用户请求访问特定内容时，请求将被路由到距离用户最近的CDN节点，而不是原始服务器。这个选择过程通常基于网络拓扑、地理位置、负载情况等因素。\n    3. 缓存命中：如果请求的内容已经存在于CDN节点的缓存中，CDN节点将立即响应请求并将内容传输给用户。这样可以大大减少从原始服务器获取内容的时间和网络延迟。\n    4. 内容更新和失效：CDN节点定期从原始服务器获取最新的内容更新。当内容发生更改或失效时，CDN节点将刷新缓存，并在下一次请求时从原始服务器获取更新后的内容。\n    5. 负载均衡和故障容错：CDN通过在多个节点上分发请求，实现负载均衡，使得流量能够均匀分布到不同的服务器上。如果某个节点发生故障或不可用，其他节点可以接管请求，保证服务的连续性。\n  通过使用CDN，内容提供商可以提供更快速、可靠的内容访问体验，减少网络拥塞和延迟，并减轻源服务器的负载压力。同时，CDN还提供了许多其他功能，如安全性增强、缓存控制、带宽优化、动态内容加速等。\n  需要注意的是，尽管现在更常用的术语是CDN（Content Delivery Network），但CDS（Content Delivery Service）也可以用来指代相同的概念和技术。\n70. **缓存内容的更新方法会影响缓存服务器的效率**，要改善这一点，有一种方法是**让Web服务器在原始数据发生更新时，立即通知缓存服务器**，使得缓存服务器上的数据一直保持最新状态\n71. 多任务：操作系统提供的一种功能，可以让多个任务（程序）同时运行。实际上，一个处理器在某一个瞬间只能运行一个任务，但通过短时间内在不同的任务间切换，看起来就好像是同时运行多个任务一样。有些操作系统称之为“多进程”\n72. **多任务和多线程的区别在于任务和线程的区别**。在操作系统内部，任务是作为单独的程序来对待的，而线程则是一个程序中的一部分。\n73. 协议栈的IP模块会检查IP头部\n  - 判断是不是发给自己的\n  - 判断网络包是否经过分片\n  - 将包转交给TCP模块或UDP模块\n","source":"_posts/网络是怎样连接的.md","raw":"---\ntitle: 网络是怎样连接的\ndate: 2023-06-22 22:35:21\ntags:\n  - 笔记\n  - 网络\ndeclare: true\n---\n1. 已经有了IP地址了，为什么还需要MAC地址呢？<!--more-->\n- IP地址和MAC地址在计算机网络中扮演着不同的角色，它们各自具有不同的功能和用途。\n- IP地址（Internet Protocol address）是用于在互联网上标识和寻址设备的数字地址。它是逻辑地址，用于在网络层（如Internet协议）上进行路由和通信。IP地址是由网络管理员配置的，并且可以根据需要进行更改。IP地址允许网络中的设备相互识别和进行通信。\n- 而MAC地址（Media Access Control address）是一个唯一的硬件地址，用于在**局域网（LAN）**中标识网络设备。MAC地址是由设备的制造商固定在网络接口卡上的，因此在设备出厂时即被分配。它是物理地址，用于在数据链路层上进行数据帧的传输。MAC地址是全球唯一的，每个网络设备都有一个独特的MAC地址。\n- 那么为什么需要MAC地址呢？\n  1. **局域网通信**：在局域网中，设备之间的通信是基于MAC地址进行的。当设备在同一局域网中进行通信时，它们使用MAC地址来识别彼此并交换数据。路由器根据目标MAC地址将数据包转发到正确的设备。\n  2. 广播通信：当设备需要向整个局域网发送广播消息时，它使用广播MAC地址（全为1的地址）。这种广播通信对于局域网中的设备发现、地址解析协议等功能非常重要。\n  3. ARP协议：地址解析协议（ARP）用于将IP地址映射到相应的MAC地址。当设备知道目标IP地址时，它使用ARP查询来获取对应的MAC地址，以便将数据包正确地发送到目标设备。\n\n> 总结起来，尽管IP地址在网络层上具有重要作用，但MAC地址在数据链路层上同样至关重要。**IP地址用于路由和全球范围的通信，而MAC地址用于局域网内的设备识别和通信**。两者在不同层次上发挥作用，相互补充，共同构建了计算机网络的功能。\n\n2. 路由表是用于路由器和网络设备的重要组成部分，它用于决定网络数据包的转发路径。路由表中存储了网络的可达目的地以及相应的下一跳信息。下面是关于路由表的基本解释：\n  1. 目的地网络（Destination Network）：这是指数据包要传输到的目标网络的网络地址。**它可以用IP地址表示，通常是网络的网络号和子网掩码的组合**。\n  2. 子网掩码（Subnet Mask）：子网掩码与IP地址结合使用，**用于确定目的地网络的范围。子网掩码中的1位表示网络号，0位表示主机号**。\n  3. 下一跳（Next Hop）：下一跳是指将数据包从当前设备转发到目标网络所使用的下一个路由器或网络设备的地址。它可以是直接连接的邻居路由器的IP地址，也可以是下一个中转节点的IP地址。\n  4. 接口（Interface）：接口是指路由器或网络设备与相应网络之间的物理或逻辑连接。接口可以是网卡、以太网端口、无线接口等。\n在路由表中，每个条目通常包含以上信息。当路由器接收到一个数据包时，它会检查目标IP地址，并使用路由表来确定下一步的操作：\n  1. 匹配目的地网络：路由器会检查目的地IP地址和路由表中的目的地网络条目进行匹配。\n  2. 最长前缀匹配：如果存在多个匹配的目的地网络，路由器将选择具有最长前缀匹配（即子网掩码最长）的路由表条目。这确保了更精确的匹配。\n  3. 下一跳确定：路由器根据匹配的路由表条目找到相应的下一跳地址。\n  4. 数据包转发：路由器将数据包发送到相应的下一跳地址，或通过适当的接口将数据包转发到目标网络。\n路由表的内容可以通过手动配置静态路由，也可以通过动态路由协议（如OSPF、BGP等）自动学习和更新。动态路由协议允许路由器在网络发生变化时自动更新路由表，以确保有效的数据包转发。\n通过有效管理和更新路由表，路由器能够根据目标网络选择最佳路径来转发数据包，实现网络中的数据传输和通信。\n\n3. **TTL 是 \"Time to Live\"（生存时间）的缩写**，它是一个在计算机网络中使用的术语。**TTL 值用于确定数据包在网络中可以存活的时间长度**。当一个数据包被发送到网络上时，它会被赋予一个初始的 TTL 值。每当数据包经过一个路由器或网络设备时，TTL 值就会减少。**当 TTL 值减至零时，数据包将被丢弃并不再继续传输**。\n**TTL 值的目的是防止数据包在网络中无限循环**。如果一个数据包在网络中被路由器无限转发，它将消耗网络资源并导致网络拥堵。通过限制数据包的生存时间，TTL 值确保数据包能够在合理的时间内到达目的地或被丢弃。\n在实际应用中，TTL 值通常以**秒**为单位表示，常见的初始 TTL 值为 64 或 128。不同的操作系统或网络设备可能对 TTL 值的处理方式有所差异，但一般情况下，每个路由器或网络设备在转发数据包时会将 TTL 值**减少一定的数量，通常是 1 或更多**。\n> 总结来说，TTL 是一个用于确定数据包在网络中存活时间的字段，它对网络的稳定运行和防止数据包无限循环起着重要作用。\n\n4. **MTU 是 \"Maximum Transmission Unit\"（最大传输单元）的缩写。它指的是在计算机网络中可以通过单个数据包传输的最大数据量**。\n\n最大传输单元 (MTU) 是网络通信中一个重要的参数，它定义了网络中可以传输的数据包的最大大小。MTU 的大小是由网络设备或协议规范决定的，通常以字节为单位表示。\n\n当数据需要通过网络传输时，它会被分割成更小的数据包以适应网络的 MTU。这样做的目的是确保数据包能够在网络中正确地传输，因为某些网络设备或链路可能有传输数据包大小的限制。如果数据包的大小超过某个设备或链路的 MTU，它将被分割成更小的片段进行传输，并在目标节点上重新组装。\n\n不同类型的网络（如以太网、Wi-Fi、以及各种广域网连接等）通常具有不同的 MTU 值。常见的以太网 MTU 值是 1500 字节，而在某些特殊情况下，如在 VPN 或某些广域网连接中，MTU 可能会被调整为更小的值，例如 1400 字节或更低。\n\n准确设置正确的 MTU 值对于网络性能和数据传输的可靠性至关重要。如果 MTU 值设置得过大，可能会导致数据包被丢弃或需要进行片段重组，从而增加网络延迟和传输错误的可能性。如果 MTU 值设置得过小，数据传输的效率可能会受到影响，因为需要发送更多的数据包来传输相同的数据量。\n\n> 总结来说，MTU 是指在计算机网络中单个数据包可以传输的最大数据量。通过分割数据以适应网络的 MTU，确保数据能够在网络中正确传输，并在目标节点上重新组装。正确设置合适的 MTU 值对于网络性能和数据传输的可靠性非常重要。\n\n5. **MSS 是 \"Maximum Segment Size\"（最大报文段长度）的缩写**，它是在 TCP/IP 网络通信中使用的一个参数。\n\n在 TCP/IP 协议中，数据被分割成称为报文段（Segment）的小块进行传输。**MSS 指的是在 TCP 报文段中可以承载的最大有效载荷数据的大小，不包括 TCP 报文段的首部信息**。\n\nMSS 的大小是由网络设备或操作系统配置决定的，通常以字节为单位表示。它表示在 TCP 连接中发送的数据报文段的最大大小，因为 TCP 报文段除了有效载荷数据外还包含一些必要的控制信息，如首部、校验和、序列号等。\n\n当建立 TCP 连接时，通信双方会通过握手过程协商一个适当的 MSS 值。这个值会根据网络设备和连接双方的能力而确定，以确保数据的可靠传输和最大效率。较小的 MSS 值可以减少分段和重组的需求，从而提高传输效率。**然而，MSS 值不能超过网络链路中任何一方的 MTU 值，以确保数据包不会被分段**。\n\nMSS 的值通常与网络的 MTU 值相关。实际上，MSS 一般会设为 MTU 值减去 TCP/IP 报文段首部的长度（通常为 40 字节）再减去可能的 IP 选项的长度。\n\n> 总结来说，MSS（最大报文段长度）是在 TCP/IP 网络通信中用于确定 TCP 报文段中有效载荷数据的最大大小的参数。MSS 的值由网络设备或操作系统配置决定，并通过握手过程协商确定。它与网络的 MTU 值相关，用于确保数据的可靠传输和最大效率。\n\n6. TCP（Transmission Control Protocol）和 UDP（User Datagram Protocol）是两种常见的传输层协议，用于在计算机网络上提供可靠的数据传输。\n\n**TCP 是一种面向连接的协议**，它提供了可靠的数据传输和错误检测机制。它通过建立一个连接，在发送和接收数据之间创建一个可靠的通信通道。TCP 使用序列号和确认机制来确保数据的有序传输和可靠接收。它还提供了拥塞控制和流量控制机制，以适应网络拥塞和保证通信的质量。**TCP 的特点是稳定可靠**，适用于对数据传输的完整性和顺序性要求较高的应用，如网页浏览、文件传输、电子邮件等。\n\n**UDP 是一种无连接的协议**，它提供了一种简单的数据传输机制，**不具备可靠性保证**。UDP 通过将数据打包成数据报文并发送，但不进行连接的建立和维护。它没有序列号、确认、重传等机制，因此传输过程中可能会发生丢包或乱序。**UDP 的优点是传输速度快，延迟低，并且没有拥塞控制等复杂的机制**。UDP 适用于对实时性要求较高的应用，如音频、视频流媒体、在线游戏等，因为它更注重传输速度而不是数据的可靠性。\n\n> 总结来说，TCP 是一种面向连接的、可靠的传输协议，适用于对数据传输的完整性和顺序性要求较高的应用；而 UDP 是一种无连接的、不可靠的传输协议，适用于对实时性要求较高的应用。选择使用 TCP 还是 UDP 取决于具体应用的需求，如数据传输的可靠性、延迟要求以及对网络资源的消耗等因素。\n\n> 但这样并不会引发什么问题，因此出错时就收不到来自对方的回复，应用程序会注意到这个问题，并重新发送一遍数据。怎样的操作本身并不复杂，也并不会增加应用程序的负担。\n> 在无需重发数据，或者是重发了也没什么意义的情况下，使用UDP发送数据的效率会更高。\n\n7. 双绞线的设计是为了抑制噪声的影响\n8. 交换机的设计是将网络包原样转发到目的地\n9. 交换机的每一个网线接口后面都是一块网卡。网线接口和后面的电路部分加在一起称为一个端口，也就是说交换机的一个端口就相当于计算机上的一块网卡。换句话说，如果计算机上安装多块网卡，并开启“混杂模式”让网卡接收所有的网络包，然后再安装一个和交换机具备同样功能的网络包转发软件，那么这台计算机就变成了一台交换机。\n10. 交换机端口的MAC模块不具有MAC地址\n11. 交换机根据MAC地址表查找MAC地址，然后将信号发送到相应的端口\n12. 如果接收方MAC地址是一个**广播地址**，那么交换机会将包发送到除源端口之外的所有端口。\n13. 广播地址（broadcast address）是一种特殊的地址，将广播地址设为接收方地址时，包会发送到网络中所有的设备。MAC地址中的FF:FF:FF:FF:FF:FF和IP地址中的255.255.255.255都是广播地址\n14. 交换机的全双工模式可以同时发送和接收信号\n15. 交换机可以同时转发多个包\n16. 路由器是基于IP设计的，而交换机是基于以太网设计的\n17. 路由器的各个端口都具有MAC地址和IP地址\n18. 路由器根据“IP地址”判断转发目标。路由器会忽略主机号，只匹配网络号\n19. 路由器的子网掩码列只表示在匹配网络包目标地址时需要对比的比特数量，**匹配的比特数越长优先级越高（最长匹配原则）**\n20. 路由器的端口都具有MAC地址，只接收与自身地址匹配的包，遇到不匹配的包则直接丢弃\n21. 子网掩码0.0.0.0的意思是网络包接收方IP地址和路由表目标地址的匹配中需要匹配的比特数为0，换句话说，就是根本不需要匹配。只要将子网掩码设置为0.0.0.0，那么无论任何地址都能匹配到这一条记录。也就是说**路由表中子网掩码为0.0.0.0的记录表示“默认路由”，这一行配置的网关地址被称为默认网关**\n22. 路由器判断下一个转发目标的方法如下：\n  - 如果路由表的网关列内容为IP地址，则该地址就是下一个转发目标\n  - 如果路由表的**网关列内容为空**，则IP头部中的接收方IP地址就是下一个转发目标\n23. IP（路由器）负责将包送达通信对象这一整体过程，而其中将包传输到下一个路由器的过程则是由以太网（交换机）来负责的\n24. 在内网中可用作私有地址的范围仅限一下这些：\n```bash\n10.0.0.0 ~ 10.255.255.255\n172.16.0.0 ~ 172.31.255.255\n192.168.0.0 ~ 192.168.255.255\n```\n> 在制作私有地址规则时，这些地址属于公有地址中还没有被分配的范围\n25. 地址转换的基本原理是在转发网络包时对IP头部中的**IP地址和端口号**进行改写，这里的端口号指的是TCP和UDP的端口号，不是路由器和集线器连接网线的那个端口。在对外只能使用一个共有地址的情况下，可以用不同的端口号来区别内网中的不同终端\n26. 具备地址转换功能的设备不仅有路由器，有些防火墙也有地址转换功能，它的工作方式和路由器是相同的。\n27. 早期的地址转换机制是只改写地址，不改写端口号\n28. 对于从公司内网访问互联网的包，即便其发送方私有地址和端口号没有保存在对应表中**也是可以正常转发的**；然而，对于从互联网访问公司内网的包，如果在对应表中没有记录就**无法正常转发**。也就是说，除非公司主动允许，否则是无法从互联网向公司内网发送网络包的。这种机制具有**防止非法入侵**的效果。\n29. **包过滤**也是路由器的一个重要附加功能。包过滤就是在对包进行转发时，根据MAC头部、IP头部、TCP头部的内容，按照事先设置好的规则决定是转发这个包，还是丢弃这个包。我们通常说的**防火墙设备或软件**，大多数都是利用这一机制来防止非法入侵的。\n30. hub: central part of a wheel from which the spokes radiate 轮毂。集线器（repeater hub）、交换机（switching hub）\n31. ADSL（Asymmetric Digital Subscriber Line，非对称数字用户线路）是一种用于传输数据的通信技术。它是一种通过普通电话线提供高速互联网接入的技术。\n  - ADSL是\"非对称\"的，意味着它在上传和下载数据时的速度不对称。一般情况下，ADSL提供的下载速度比上传速度要快。这种设计是为了适应大多数用户在互联网使用过程中更多地下载数据（如浏览网页、观看视频等）而上传较少数据（如发送电子邮件、上传文件等）的需求。\n  - ADSL利用了普通电话线的传输能力，通过将数据转换成数字信号进行传输。它利用了电话线中未使用的频率范围，将低频范围用于传输电话信号，高频范围用于传输数据信号。这样就可以同时进行电话通话和上网，而且不会相互干扰。\n  - ADSL的传输速度依赖于多个因素，包括电话线的质量、距离和网络供应商的服务等。通常，ADSL的下载速度可以达到几兆比特每秒（Mbps），而上传速度通常较慢，一般在数百千位每秒（Kbps）到几兆位每秒（Mbps）之间。\n  - **总而言之，ADSL是一种通过普通电话线提供高速互联网接入的通信技术，它提供的下载速度比上传速度更快，适用于多数用户更多地下载数据而上传较少数据的需求。**\n32. **电信号和光信号传播的速度大体上相同，之所以电缆不如光纤通信速率高，是因为电信号再提升通信速率的同时，其衰减率也会提高（信号在传播过程中减弱），导致信号无法传到目的地**。相对地，光信号本来的衰减率就很低，提高通信速率也并不会提高衰减率。此外，光纤还不受电磁噪声的影响， 因此光纤能够进行高速通信。\n33. **接入网（Access Network）是指将终端用户连接到互联网或其他公共通信网络的部分网络**。它是整个通信网络中的最后一段，提供用户与网络之间的物理和逻辑接口。\n  - 接入网的主要功能是将用户设备（如计算机、手机、智能电视等）与核心网络进行连接，使用户能够访问互联网和其他网络服务。它扮演着桥梁的角色，将用户的数据传输到全球范围的网络中。\n  - 接入网可以采用各种不同的技术和架构，具体取决于网络运营商和地理条件。以下是几种常见的接入网技术：\n    - 数字用户线路（Digital Subscriber Line，DSL）：利用普通电话线传输数据，常见的形式包括ADSL和VDSL。\n    - 光纤接入网（Fiber to the x，FTTx）：使用光纤传输数据到用户的位置。其中，FTTH（Fiber to the Home）将光纤延伸到用户住宅，而FTTC（Fiber to the Curb）和FTTB（Fiber to the Building）将光纤延伸到街边或建筑物。\n    - 有线电视网络：利用有线电视网络传输数据，用户可以通过电缆调制解调器（Cable Modem）访问互联网。\n    - 无线接入网：使用无线技术（如Wi-Fi、4G、5G等）将用户设备连接到网络。\n  - 接入网的设计和性能对于用户的上网体验和网络服务的可用性至关重要。它需要考虑带宽、延迟、可靠性和安全性等因素，以满足用户对高速、稳定和安全的互联网连接的需求。\n34. 双绞线的极限距离是100米，但光纤的连接距离可以长达几公里。**距离的不同和路由的维护方式**，就是互联网与家庭、公司网络之间最主要的两个不同点\n35. 互联网接入路由器会在网络包前面加上MAC头部、PPPoE头部、PPP头部总共3种头部，然后发送给ADSL Modem（PPPoE方式下）\n36. **BAS: Broadband Access Server，宽带接入服务器**。它也是一种路由器\n  - BAS（Broadband Access Server）是一种网络设备，**用于提供宽带接入服务**。它是一种位于网络服务提供商（ISP）或通信运营商网络中的关键设备，用于管理和控制用户的宽带接入。\n  - BAS的主要功能是对接入网络的用户进行认证、授权和计费，以确保用户能够安全地接入和使用网络服务。它充当用户和网络服务提供商之间的接口，负责处理用户的接入请求、分配IP地址、设置访问权限以及监控用户的网络连接。\n  - BAS通常支持多种接入技术，如数字用户线路（DSL）、光纤、电缆、无线等，以适应不同用户的接入需求。它可以与不同类型的接入设备（如调制解调器、光猫等）进行交互，以建立用户与网络之间的连接。\n  - 除了用户管理和连接控制功能，**BAS还可以提供其他服务，如网络地址转换（NAT）、虚拟专用网络（VPN）等**。它还能够收集用户的接入统计数据，生成报告和日志，用于网络管理和故障排除。\n  - 需要注意的是，BAS在不同的网络环境和服务提供商之间可能有不同的名称和实现方式。例如，有些地方将BAS称为宽带接入服务器（Broadband Access Server），或称之为宽带终端接入设备（Broadband Termination Equipment，BTE）。\n  - **总而言之，BAS是一种用于管理和控制宽带接入服务的网络设备，它负责对用户进行认证、授权和计费，并提供用户接入管理和连接控制功能。它在网络服务提供商和通信运营商的基础设施中发挥着重要作用**。\n37. **PPP: Point-to-Point Protocol，点到点协议**。它是电话线、ISDN等通信线路所使用的一种协议，集成了用户认证、配置下发、数据压缩、加密等各种功能。\n38. **ATM: Asynchronous Transfer Mode，异步传输**。它是在以电话线为载体的传统电话技术基础上扩展出来的一种通信方式。它的数据传输是以“信元”为单位来进行的，这和以包为单位传输数据的TCP/IP很像，但这种方式并不适用于计算机通信。\n39. **调制（Modulation）是指在通信中将要传输的信息信号转换成适合在传输介质中传播的信号形式的过程**。它是通过改变载波信号的某些特性，如振幅、频率或相位来实现的。\n  - 在调制过程中，原始的信息信号称为**基带信号（Baseband Signal），而要传输的信号称为调制信号（Modulated Signal）**。调制的主要目的是将基带信号转换为适合在传输介质（如电缆、光纤、空气等）中传播的信号。\n  - 调制技术的选择取决于传输介质的特性以及通信系统的要求。以下是几种常见的调制技术：\n    - 振幅调制（Amplitude Modulation，AM）：在振幅调制中，基带信号的振幅被调制到一个高频载波信号上。调制后的信号的振幅随着基带信号的变化而变化。\n    - 频率调制（Frequency Modulation，FM）：在频率调制中，基带信号的频率被调制到一个高频载波信号上。调制后的信号的频率随着基带信号的变化而变化。\n    - 相位调制（Phase Modulation，PM）：在相位调制中，基带信号的相位被调制到一个高频载波信号上。调制后的信号的相位随着基带信号的变化而变化。\n  - 此外，还有许多其他的调制技术和变种，如正交频分多路复用（Orthogonal Frequency Division Multiplexing，OFDM）、相干调制（Coherent Modulation）等，它们在不同的通信系统和应用中发挥着重要的作用。\n  - 调制技术的选择和优化需要考虑传输介质的特性、噪声环境、带宽效率、功耗以及接收端的解调能力等因素，以实现高效、可靠的数据传输和通信。\n40. 光纤分为单模和多模两种，根据其物理特性，各有利弊\n41. 上下行的光信号在光纤中混合在一起，信号会变得无法识别，因此我们需要对他们进行区分，**办法是上行和下行信号采用不同波长的光**。波长不同的光混合后可通过**棱镜原理**进行分离，因此光纤中的上行和下行信号即便混合起来也可以识别。像这样在一条光纤中使用不同的波长传输多个光信号的方式叫做**波分复用**\n42. ONU: Optical Network Unit，光网络单元。它和光纤收发器一样，可以将电信号转换成光信号，除此之外还具有和电话局的OLT（Optical Line Terminal，光线路终端）相互配合避免信号碰撞的功能。这个设备有时也被叫做终端盒，因此终端盒这个词本身是对光纤收发器和ONU等光纤终端设备的统称\n43. PPPoE: Point-to-Point Protocol over Ethernet，以太网的点对点协议\n44. 在使用电话线或者ISDN**拨号上网时，PPP是这样工作的**。首先，用户向运营商的接入点拨打电话，电话接通后输入用户名和密码进行登录操作。用户名和密码通过RADIUS协议从RAS发送到认证服务器，认证服务器校验这些信息是否正确。当确认无误后，认证服务器会返回IP地址等配置信息，并将这些信息下发给用户。用户的计算机根据这些配置IP地址等参数，完成TCP/IP收发网络包的准备工作，接下来就可以发送TCP/IP包了\n45. **PPPoE是将PPP消息装入以太网包进行传输的方式**\n46. 所谓**隧道，就是能将包原封不动搬运到另一端**\n47. 一对一连接的端口可以不分配IP地址，这种方式称为无编号\n48. PPPoA: Point-to-Point Protocol over ATM. PPPoA方式不添加MAC头部和PPPoE头部，而是直接将包装入信元中\n49. **POP（Point of Presence）和NOC（Network Operations Center）**是与网络和通信基础设施相关的术语。\n  1. POP（Point of Presence，中文一般叫做“接入点”）：\n    - **POP指的是在网络服务提供商（ISP）或通信运营商网络中的一个点，通常是物理位置或网络节点**。它是用户与ISP网络连接的地点，提供网络接入、路由和交换等服务。POP通常位于地理上的关键位置，以便为用户提供更好的网络接入服务和更低的延迟。\n    - 在一个ISP网络中，可能会有多个POP分布在不同的地理位置，每个POP通常包含路由器、交换机、服务器等网络设备，用于连接用户和核心网络。通过建立多个POP，ISP可以提供更广泛的覆盖范围，并提高网络的可靠性和性能。\n  2. NOC（Network Operations Center）：\n    - **NOC是一个专门的中心或部门，负责监控、管理和维护一个网络的运行**。NOC通常由一组网络工程师和技术人员组成，他们负责确保网络的正常运行，并快速响应和解决任何网络问题或故障。\n    - NOC的主要职责包括实时监控网络设备和链路的状态、处理网络事件和故障、进行网络配置和优化、执行维护计划、协调与其他运营商的互联等。NOC通常使用监控系统、网络管理工具和报警系统等来帮助监控和管理网络。\n    - NOC还负责与其他相关部门或合作伙伴进行沟通和协调，如与运营商、互联网服务提供商、数据中心等。通过及时响应和解决网络问题，NOC确保网络的稳定性、可靠性和性能，以提供良好的网络服务体验。\n> 总结起来，POP是网络服务提供商或通信运营商网络中用户连接的点，提供网络接入和服务，而NOC是负责监控、管理和维护网络运行的中心或部门。它们在网络基础设施中扮演着重要的角色，保证了网络的可用性和性能。可以简单地认为，NOC就是规模扩大后的POP\n50. **专线是固定连接线路**，不需要进行身份认证，参数是根据传真、书面等方式下发后进行手动配置的，因此也不需要PPP、DHCP等机制。其实，这就是最古老的互联网接入方式。\n51. BGP: Border Gateway Protocol, 边界网关协议.互联网内部使用BGP机制在运营商之间交换路由信息\n52. IX: Internet eXchange, 中文一般叫做“互联网交换中心”。设置一个中心设备，通过连接到中心设备的方式来减少线路数量，这个中心设备就称为IX。\n53. **防火墙不会检查通信数据的具体内容，因此无法抵御隐藏在通信数据内容中的攻击。**\n54. **防火墙：一种抵御外部网络攻击的机制，也是最早出现的一种防御机制**。现在已经出现了很多可以绕过防火墙的攻击方法，因此防火墙一般需要和反病毒、非法入侵检测、访问隔离等机制并用。\n55. 包过滤方式的防火墙不仅可以允许或者阻止网络包的通过，还具备地址转换功能，因此还需要进行相关的设置。\n56. 包过滤方式的防火墙可根据接收方IP地址、发送方IP地址、接收方端口号、发送方端口号、控制位等信息来判断是否允许某个包通过\n57. 防火墙无法抵御的攻击：防火墙可以根据包的起点和终点来判断是否允许其通过，但仅凭起点和终点并不能筛选出所有风险的包。比如，假设Web服务器在收到含有特定数据的包时会引起宕机。但是防火墙只关心包的起点和终点，因此即便包中含有特定数据，防火墙也无法发现，于是包就被放行了。然后，当包到达Web服务器时，就会引发服务器宕机。通过这个例子可以看出，**只有检查包的内容才能识别这种风险，因此防火墙对这种情况无能为力**\n58. **DNS服务器可以为一个域名填写多个IP地址，并通过轮询（Round Robin）方式实现负载均衡和故障容错**。下面是一种常见的做法：\n  1. 在DNS服务器上为域名配置多个A记录：A记录是用来指定域名对应的IP地址的记录类型。在DNS服务器上为域名配置多个A记录，每个A记录对应一个IP地址。例如：\n```css\nexample.com. IN A 192.168.1.100\nexample.com. IN A 192.168.1.101\nexample.com. IN A 192.168.1.102\n```\n  2. DNS服务器返回多个IP地址：**当DNS服务器接收到客户端的查询请求时，它会从配置的多个A记录中选择一个IP地址返回给客户端**。可以采用简单的轮询方式，每次返回下一个IP地址。例如，第一次返回192.168.1.100，第二次返回192.168.1.101，以此类推。\n  3. 客户端使用返回的IP地址：客户端收到DNS服务器返回的IP地址后，可以使用该IP地址与目标服务器建立连接。通过轮询方式，不同的客户端可能会获得不同的IP地址，从而分散负载到多个服务器上。\n**这种配置方式可以实现简单的负载均衡效果，将流量分散到多个服务器上，减轻单个服务器的负载压力。同时，如果其中一个服务器不可用，DNS服务器将不再返回该服务器的IP地址，从而实现故障容错。**\n需要注意的是，这种简单的轮询方式并不能完全保证负载均衡，因为DNS服务器无法感知服务器的实际负载情况。在实际应用中，可能需要结合其他负载均衡技术和算法，如权重设置、健康检查等，以达到更精确的负载均衡效果。\n59. 使用负载均衡器时，**要用负载均衡器的IP地址代替Web服务器的实际地址注册到DNS服务器上**\n60. 对HTTP规格进行扩展，**在HTTP头部字段中加上用来判断相关性的信息，这种信息俗称Cookie**。这样，负载均衡器就可以通过这些信息来作出判断，将一系列相关的请求发送到同一台Web服务器，对于不相关的请求则发送到负载较低的服务器了。\n61. **代理：一种介于客户端和Web服务器之间，对访问操作进行中转的机制**。代理（Proxy）本来的意思并不是“转发”消息。而是先把消息收下来，然后“伪装”成原始客户端向Web服务器发出访问请求。\n62. 缓存服务器是一台通过代理机制对数据进行缓存的服务器。\n63. **缓存服务器和负载均衡器一样，需要代替Web服务器被注册到DNS服务器中**。\n64. **将缓存服务器的代理机制放在客户端一侧，就是代理的原型，也就是现在所说的正向代理（forward proxy）**.正向代理除了缓存这一作用，还有一个作用就是用来实现防火墙。**代理在转发过程中可以查看请求的内容，所以可以根据内容判断是否允许访问**。\n65. **为解决正向代理的种种弊端，产生了正向代理的改良版---反向代理（reverse proxy）。服务器端的缓存服务器采用的正是这种方式，这种方式称为反向代理。**\n66. 缓存服务器判断转发目标的方法还有一种，俺就是查看请求消息的包头部。因为包的IP头部中包含接收方IP地址，只要知道了这个地址，就知道用户要访问哪台服务器了。这种方法称为**透明代理（transparent proxy）**.透明代理集合了正向代理和反向代理的优点。使用透明代理时，**用户不会察觉到代理的存在，也不会注意到HTTP消息是如何被转发的，因此大家更倾向于将透明代理说成是缓存**.最近有很多场合中已经将透明代理直接叫做“缓存”而不是“代理”了。\n67. 缓存服务器部署在服务器端还是客户端，其效果是又差别的。\n  - 当缓存服务器放在服务器端时，可以减轻Web服务器的负载，但无法减少互联网中的流量。\n  - 当缓存服务器部署在客户端时，可以减少流量， 但是Web服务器运营商无法管理缓存服务器。\n> 因此，这两种部署缓存服务器的方式各有利弊，但也有一种方式能够集合两者的有点。那就是Web服务器运营者和网络运营商签约，将可以自己控制的缓存服务器放在客户端的运营商处\n68. 即便减少了数量，作为一个Web服务器运营者，如果自己和这些运营商签约并部署缓存服务器，无论是费用还是精力都是吃不消的。为了解决这个问题，一些专门从事相关服务的厂商出现了，他们来部署缓存服务器，并租借给Web服务器运营者。这种服务称为**内容分发服务**\n69. 内容分发服务也叫CDS（Content Delivery Service）。（现在更常用的名称叫CDN（Content Delivery Network 或 Content Distribution Network））\n  内容分发服务（Content Delivery Service，CDS），也称为内容分发网络（Content Delivery Network，CDN），是一种用于提供高效、可靠的内容分发和传输的网络架构。\n  CDN的主要目标是将内容（如网页、图片、视频、文件等）快速、可靠地传送给用户，以提供更好的用户体验和性能优化。**它通过在全球分布的边缘服务器上缓存和分发内容，使用户可以从离其较近的服务器获取内容**，从而减少了传输延迟和网络拥塞问题。\n  下面是CDN的工作原理：\n    1. 内容缓存和分发：CDN在全球各地设置了多个边缘服务器节点，这些节点分布在不同的地理位置，覆盖范围广。原始内容提供商（如网站、媒体服务提供商等）将内容上传到CDN的服务器上，这些服务器上的存储称为缓存。\n    2. 请求路由：当用户请求访问特定内容时，请求将被路由到距离用户最近的CDN节点，而不是原始服务器。这个选择过程通常基于网络拓扑、地理位置、负载情况等因素。\n    3. 缓存命中：如果请求的内容已经存在于CDN节点的缓存中，CDN节点将立即响应请求并将内容传输给用户。这样可以大大减少从原始服务器获取内容的时间和网络延迟。\n    4. 内容更新和失效：CDN节点定期从原始服务器获取最新的内容更新。当内容发生更改或失效时，CDN节点将刷新缓存，并在下一次请求时从原始服务器获取更新后的内容。\n    5. 负载均衡和故障容错：CDN通过在多个节点上分发请求，实现负载均衡，使得流量能够均匀分布到不同的服务器上。如果某个节点发生故障或不可用，其他节点可以接管请求，保证服务的连续性。\n  通过使用CDN，内容提供商可以提供更快速、可靠的内容访问体验，减少网络拥塞和延迟，并减轻源服务器的负载压力。同时，CDN还提供了许多其他功能，如安全性增强、缓存控制、带宽优化、动态内容加速等。\n  需要注意的是，尽管现在更常用的术语是CDN（Content Delivery Network），但CDS（Content Delivery Service）也可以用来指代相同的概念和技术。\n70. **缓存内容的更新方法会影响缓存服务器的效率**，要改善这一点，有一种方法是**让Web服务器在原始数据发生更新时，立即通知缓存服务器**，使得缓存服务器上的数据一直保持最新状态\n71. 多任务：操作系统提供的一种功能，可以让多个任务（程序）同时运行。实际上，一个处理器在某一个瞬间只能运行一个任务，但通过短时间内在不同的任务间切换，看起来就好像是同时运行多个任务一样。有些操作系统称之为“多进程”\n72. **多任务和多线程的区别在于任务和线程的区别**。在操作系统内部，任务是作为单独的程序来对待的，而线程则是一个程序中的一部分。\n73. 协议栈的IP模块会检查IP头部\n  - 判断是不是发给自己的\n  - 判断网络包是否经过分片\n  - 将包转交给TCP模块或UDP模块\n","slug":"网络是怎样连接的","published":1,"updated":"2024-04-25T17:26:48.203Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvjbaqmb00b50vn19xwkdjz6","content":"<ol>\n<li>已经有了IP地址了，为什么还需要MAC地址呢？<span id=\"more\"></span></li>\n</ol>\n<ul>\n<li>IP地址和MAC地址在计算机网络中扮演着不同的角色，它们各自具有不同的功能和用途。</li>\n<li>IP地址（Internet Protocol address）是用于在互联网上标识和寻址设备的数字地址。它是逻辑地址，用于在网络层（如Internet协议）上进行路由和通信。IP地址是由网络管理员配置的，并且可以根据需要进行更改。IP地址允许网络中的设备相互识别和进行通信。</li>\n<li>而MAC地址（Media Access Control address）是一个唯一的硬件地址，用于在<strong>局域网（LAN）</strong>中标识网络设备。MAC地址是由设备的制造商固定在网络接口卡上的，因此在设备出厂时即被分配。它是物理地址，用于在数据链路层上进行数据帧的传输。MAC地址是全球唯一的，每个网络设备都有一个独特的MAC地址。</li>\n<li>那么为什么需要MAC地址呢？<ol>\n<li><strong>局域网通信</strong>：在局域网中，设备之间的通信是基于MAC地址进行的。当设备在同一局域网中进行通信时，它们使用MAC地址来识别彼此并交换数据。路由器根据目标MAC地址将数据包转发到正确的设备。</li>\n<li>广播通信：当设备需要向整个局域网发送广播消息时，它使用广播MAC地址（全为1的地址）。这种广播通信对于局域网中的设备发现、地址解析协议等功能非常重要。</li>\n<li>ARP协议：地址解析协议（ARP）用于将IP地址映射到相应的MAC地址。当设备知道目标IP地址时，它使用ARP查询来获取对应的MAC地址，以便将数据包正确地发送到目标设备。</li>\n</ol>\n</li>\n</ul>\n<blockquote>\n<p>总结起来，尽管IP地址在网络层上具有重要作用，但MAC地址在数据链路层上同样至关重要。<strong>IP地址用于路由和全球范围的通信，而MAC地址用于局域网内的设备识别和通信</strong>。两者在不同层次上发挥作用，相互补充，共同构建了计算机网络的功能。</p>\n</blockquote>\n<ol start=\"2\">\n<li><p>路由表是用于路由器和网络设备的重要组成部分，它用于决定网络数据包的转发路径。路由表中存储了网络的可达目的地以及相应的下一跳信息。下面是关于路由表的基本解释：</p>\n</li>\n<li><p>目的地网络（Destination Network）：这是指数据包要传输到的目标网络的网络地址。<strong>它可以用IP地址表示，通常是网络的网络号和子网掩码的组合</strong>。</p>\n</li>\n<li><p>子网掩码（Subnet Mask）：子网掩码与IP地址结合使用，<strong>用于确定目的地网络的范围。子网掩码中的1位表示网络号，0位表示主机号</strong>。</p>\n</li>\n<li><p>下一跳（Next Hop）：下一跳是指将数据包从当前设备转发到目标网络所使用的下一个路由器或网络设备的地址。它可以是直接连接的邻居路由器的IP地址，也可以是下一个中转节点的IP地址。</p>\n</li>\n<li><p>接口（Interface）：接口是指路由器或网络设备与相应网络之间的物理或逻辑连接。接口可以是网卡、以太网端口、无线接口等。<br>在路由表中，每个条目通常包含以上信息。当路由器接收到一个数据包时，它会检查目标IP地址，并使用路由表来确定下一步的操作：</p>\n</li>\n<li><p>匹配目的地网络：路由器会检查目的地IP地址和路由表中的目的地网络条目进行匹配。</p>\n</li>\n<li><p>最长前缀匹配：如果存在多个匹配的目的地网络，路由器将选择具有最长前缀匹配（即子网掩码最长）的路由表条目。这确保了更精确的匹配。</p>\n</li>\n<li><p>下一跳确定：路由器根据匹配的路由表条目找到相应的下一跳地址。</p>\n</li>\n<li><p>数据包转发：路由器将数据包发送到相应的下一跳地址，或通过适当的接口将数据包转发到目标网络。<br>路由表的内容可以通过手动配置静态路由，也可以通过动态路由协议（如OSPF、BGP等）自动学习和更新。动态路由协议允许路由器在网络发生变化时自动更新路由表，以确保有效的数据包转发。<br>通过有效管理和更新路由表，路由器能够根据目标网络选择最佳路径来转发数据包，实现网络中的数据传输和通信。</p>\n</li>\n<li><p><strong>TTL 是 “Time to Live”（生存时间）的缩写</strong>，它是一个在计算机网络中使用的术语。<strong>TTL 值用于确定数据包在网络中可以存活的时间长度</strong>。当一个数据包被发送到网络上时，它会被赋予一个初始的 TTL 值。每当数据包经过一个路由器或网络设备时，TTL 值就会减少。<strong>当 TTL 值减至零时，数据包将被丢弃并不再继续传输</strong>。<br><strong>TTL 值的目的是防止数据包在网络中无限循环</strong>。如果一个数据包在网络中被路由器无限转发，它将消耗网络资源并导致网络拥堵。通过限制数据包的生存时间，TTL 值确保数据包能够在合理的时间内到达目的地或被丢弃。<br>在实际应用中，TTL 值通常以<strong>秒</strong>为单位表示，常见的初始 TTL 值为 64 或 128。不同的操作系统或网络设备可能对 TTL 值的处理方式有所差异，但一般情况下，每个路由器或网络设备在转发数据包时会将 TTL 值<strong>减少一定的数量，通常是 1 或更多</strong>。</p>\n<blockquote>\n<p>总结来说，TTL 是一个用于确定数据包在网络中存活时间的字段，它对网络的稳定运行和防止数据包无限循环起着重要作用。</p>\n</blockquote>\n</li>\n<li><p><strong>MTU 是 “Maximum Transmission Unit”（最大传输单元）的缩写。它指的是在计算机网络中可以通过单个数据包传输的最大数据量</strong>。</p>\n</li>\n</ol>\n<p>最大传输单元 (MTU) 是网络通信中一个重要的参数，它定义了网络中可以传输的数据包的最大大小。MTU 的大小是由网络设备或协议规范决定的，通常以字节为单位表示。</p>\n<p>当数据需要通过网络传输时，它会被分割成更小的数据包以适应网络的 MTU。这样做的目的是确保数据包能够在网络中正确地传输，因为某些网络设备或链路可能有传输数据包大小的限制。如果数据包的大小超过某个设备或链路的 MTU，它将被分割成更小的片段进行传输，并在目标节点上重新组装。</p>\n<p>不同类型的网络（如以太网、Wi-Fi、以及各种广域网连接等）通常具有不同的 MTU 值。常见的以太网 MTU 值是 1500 字节，而在某些特殊情况下，如在 VPN 或某些广域网连接中，MTU 可能会被调整为更小的值，例如 1400 字节或更低。</p>\n<p>准确设置正确的 MTU 值对于网络性能和数据传输的可靠性至关重要。如果 MTU 值设置得过大，可能会导致数据包被丢弃或需要进行片段重组，从而增加网络延迟和传输错误的可能性。如果 MTU 值设置得过小，数据传输的效率可能会受到影响，因为需要发送更多的数据包来传输相同的数据量。</p>\n<blockquote>\n<p>总结来说，MTU 是指在计算机网络中单个数据包可以传输的最大数据量。通过分割数据以适应网络的 MTU，确保数据能够在网络中正确传输，并在目标节点上重新组装。正确设置合适的 MTU 值对于网络性能和数据传输的可靠性非常重要。</p>\n</blockquote>\n<ol start=\"5\">\n<li><strong>MSS 是 “Maximum Segment Size”（最大报文段长度）的缩写</strong>，它是在 TCP&#x2F;IP 网络通信中使用的一个参数。</li>\n</ol>\n<p>在 TCP&#x2F;IP 协议中，数据被分割成称为报文段（Segment）的小块进行传输。<strong>MSS 指的是在 TCP 报文段中可以承载的最大有效载荷数据的大小，不包括 TCP 报文段的首部信息</strong>。</p>\n<p>MSS 的大小是由网络设备或操作系统配置决定的，通常以字节为单位表示。它表示在 TCP 连接中发送的数据报文段的最大大小，因为 TCP 报文段除了有效载荷数据外还包含一些必要的控制信息，如首部、校验和、序列号等。</p>\n<p>当建立 TCP 连接时，通信双方会通过握手过程协商一个适当的 MSS 值。这个值会根据网络设备和连接双方的能力而确定，以确保数据的可靠传输和最大效率。较小的 MSS 值可以减少分段和重组的需求，从而提高传输效率。<strong>然而，MSS 值不能超过网络链路中任何一方的 MTU 值，以确保数据包不会被分段</strong>。</p>\n<p>MSS 的值通常与网络的 MTU 值相关。实际上，MSS 一般会设为 MTU 值减去 TCP&#x2F;IP 报文段首部的长度（通常为 40 字节）再减去可能的 IP 选项的长度。</p>\n<blockquote>\n<p>总结来说，MSS（最大报文段长度）是在 TCP&#x2F;IP 网络通信中用于确定 TCP 报文段中有效载荷数据的最大大小的参数。MSS 的值由网络设备或操作系统配置决定，并通过握手过程协商确定。它与网络的 MTU 值相关，用于确保数据的可靠传输和最大效率。</p>\n</blockquote>\n<ol start=\"6\">\n<li>TCP（Transmission Control Protocol）和 UDP（User Datagram Protocol）是两种常见的传输层协议，用于在计算机网络上提供可靠的数据传输。</li>\n</ol>\n<p><strong>TCP 是一种面向连接的协议</strong>，它提供了可靠的数据传输和错误检测机制。它通过建立一个连接，在发送和接收数据之间创建一个可靠的通信通道。TCP 使用序列号和确认机制来确保数据的有序传输和可靠接收。它还提供了拥塞控制和流量控制机制，以适应网络拥塞和保证通信的质量。<strong>TCP 的特点是稳定可靠</strong>，适用于对数据传输的完整性和顺序性要求较高的应用，如网页浏览、文件传输、电子邮件等。</p>\n<p><strong>UDP 是一种无连接的协议</strong>，它提供了一种简单的数据传输机制，<strong>不具备可靠性保证</strong>。UDP 通过将数据打包成数据报文并发送，但不进行连接的建立和维护。它没有序列号、确认、重传等机制，因此传输过程中可能会发生丢包或乱序。<strong>UDP 的优点是传输速度快，延迟低，并且没有拥塞控制等复杂的机制</strong>。UDP 适用于对实时性要求较高的应用，如音频、视频流媒体、在线游戏等，因为它更注重传输速度而不是数据的可靠性。</p>\n<blockquote>\n<p>总结来说，TCP 是一种面向连接的、可靠的传输协议，适用于对数据传输的完整性和顺序性要求较高的应用；而 UDP 是一种无连接的、不可靠的传输协议，适用于对实时性要求较高的应用。选择使用 TCP 还是 UDP 取决于具体应用的需求，如数据传输的可靠性、延迟要求以及对网络资源的消耗等因素。</p>\n</blockquote>\n<blockquote>\n<p>但这样并不会引发什么问题，因此出错时就收不到来自对方的回复，应用程序会注意到这个问题，并重新发送一遍数据。怎样的操作本身并不复杂，也并不会增加应用程序的负担。<br>在无需重发数据，或者是重发了也没什么意义的情况下，使用UDP发送数据的效率会更高。</p>\n</blockquote>\n<ol start=\"7\">\n<li>双绞线的设计是为了抑制噪声的影响</li>\n<li>交换机的设计是将网络包原样转发到目的地</li>\n<li>交换机的每一个网线接口后面都是一块网卡。网线接口和后面的电路部分加在一起称为一个端口，也就是说交换机的一个端口就相当于计算机上的一块网卡。换句话说，如果计算机上安装多块网卡，并开启“混杂模式”让网卡接收所有的网络包，然后再安装一个和交换机具备同样功能的网络包转发软件，那么这台计算机就变成了一台交换机。</li>\n<li>交换机端口的MAC模块不具有MAC地址</li>\n<li>交换机根据MAC地址表查找MAC地址，然后将信号发送到相应的端口</li>\n<li>如果接收方MAC地址是一个<strong>广播地址</strong>，那么交换机会将包发送到除源端口之外的所有端口。</li>\n<li>广播地址（broadcast address）是一种特殊的地址，将广播地址设为接收方地址时，包会发送到网络中所有的设备。MAC地址中的FF:FF:FF:FF:FF:FF和IP地址中的255.255.255.255都是广播地址</li>\n<li>交换机的全双工模式可以同时发送和接收信号</li>\n<li>交换机可以同时转发多个包</li>\n<li>路由器是基于IP设计的，而交换机是基于以太网设计的</li>\n<li>路由器的各个端口都具有MAC地址和IP地址</li>\n<li>路由器根据“IP地址”判断转发目标。路由器会忽略主机号，只匹配网络号</li>\n<li>路由器的子网掩码列只表示在匹配网络包目标地址时需要对比的比特数量，<strong>匹配的比特数越长优先级越高（最长匹配原则）</strong></li>\n<li>路由器的端口都具有MAC地址，只接收与自身地址匹配的包，遇到不匹配的包则直接丢弃</li>\n<li>子网掩码0.0.0.0的意思是网络包接收方IP地址和路由表目标地址的匹配中需要匹配的比特数为0，换句话说，就是根本不需要匹配。只要将子网掩码设置为0.0.0.0，那么无论任何地址都能匹配到这一条记录。也就是说<strong>路由表中子网掩码为0.0.0.0的记录表示“默认路由”，这一行配置的网关地址被称为默认网关</strong></li>\n<li>路由器判断下一个转发目标的方法如下：</li>\n</ol>\n<ul>\n<li>如果路由表的网关列内容为IP地址，则该地址就是下一个转发目标</li>\n<li>如果路由表的<strong>网关列内容为空</strong>，则IP头部中的接收方IP地址就是下一个转发目标</li>\n</ul>\n<ol start=\"23\">\n<li>IP（路由器）负责将包送达通信对象这一整体过程，而其中将包传输到下一个路由器的过程则是由以太网（交换机）来负责的</li>\n<li>在内网中可用作私有地址的范围仅限一下这些：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">10.0.0.0 ~ 10.255.255.255</span><br><span class=\"line\">172.16.0.0 ~ 172.31.255.255</span><br><span class=\"line\">192.168.0.0 ~ 192.168.255.255</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>在制作私有地址规则时，这些地址属于公有地址中还没有被分配的范围</p>\n</blockquote>\n</li>\n<li>地址转换的基本原理是在转发网络包时对IP头部中的<strong>IP地址和端口号</strong>进行改写，这里的端口号指的是TCP和UDP的端口号，不是路由器和集线器连接网线的那个端口。在对外只能使用一个共有地址的情况下，可以用不同的端口号来区别内网中的不同终端</li>\n<li>具备地址转换功能的设备不仅有路由器，有些防火墙也有地址转换功能，它的工作方式和路由器是相同的。</li>\n<li>早期的地址转换机制是只改写地址，不改写端口号</li>\n<li>对于从公司内网访问互联网的包，即便其发送方私有地址和端口号没有保存在对应表中<strong>也是可以正常转发的</strong>；然而，对于从互联网访问公司内网的包，如果在对应表中没有记录就<strong>无法正常转发</strong>。也就是说，除非公司主动允许，否则是无法从互联网向公司内网发送网络包的。这种机制具有<strong>防止非法入侵</strong>的效果。</li>\n<li><strong>包过滤</strong>也是路由器的一个重要附加功能。包过滤就是在对包进行转发时，根据MAC头部、IP头部、TCP头部的内容，按照事先设置好的规则决定是转发这个包，还是丢弃这个包。我们通常说的<strong>防火墙设备或软件</strong>，大多数都是利用这一机制来防止非法入侵的。</li>\n<li>hub: central part of a wheel from which the spokes radiate 轮毂。集线器（repeater hub）、交换机（switching hub）</li>\n<li>ADSL（Asymmetric Digital Subscriber Line，非对称数字用户线路）是一种用于传输数据的通信技术。它是一种通过普通电话线提供高速互联网接入的技术。</li>\n</ol>\n<ul>\n<li>ADSL是”非对称”的，意味着它在上传和下载数据时的速度不对称。一般情况下，ADSL提供的下载速度比上传速度要快。这种设计是为了适应大多数用户在互联网使用过程中更多地下载数据（如浏览网页、观看视频等）而上传较少数据（如发送电子邮件、上传文件等）的需求。</li>\n<li>ADSL利用了普通电话线的传输能力，通过将数据转换成数字信号进行传输。它利用了电话线中未使用的频率范围，将低频范围用于传输电话信号，高频范围用于传输数据信号。这样就可以同时进行电话通话和上网，而且不会相互干扰。</li>\n<li>ADSL的传输速度依赖于多个因素，包括电话线的质量、距离和网络供应商的服务等。通常，ADSL的下载速度可以达到几兆比特每秒（Mbps），而上传速度通常较慢，一般在数百千位每秒（Kbps）到几兆位每秒（Mbps）之间。</li>\n<li><strong>总而言之，ADSL是一种通过普通电话线提供高速互联网接入的通信技术，它提供的下载速度比上传速度更快，适用于多数用户更多地下载数据而上传较少数据的需求。</strong></li>\n</ul>\n<ol start=\"32\">\n<li><strong>电信号和光信号传播的速度大体上相同，之所以电缆不如光纤通信速率高，是因为电信号再提升通信速率的同时，其衰减率也会提高（信号在传播过程中减弱），导致信号无法传到目的地</strong>。相对地，光信号本来的衰减率就很低，提高通信速率也并不会提高衰减率。此外，光纤还不受电磁噪声的影响， 因此光纤能够进行高速通信。</li>\n<li><strong>接入网（Access Network）是指将终端用户连接到互联网或其他公共通信网络的部分网络</strong>。它是整个通信网络中的最后一段，提供用户与网络之间的物理和逻辑接口。</li>\n</ol>\n<ul>\n<li>接入网的主要功能是将用户设备（如计算机、手机、智能电视等）与核心网络进行连接，使用户能够访问互联网和其他网络服务。它扮演着桥梁的角色，将用户的数据传输到全球范围的网络中。</li>\n<li>接入网可以采用各种不同的技术和架构，具体取决于网络运营商和地理条件。以下是几种常见的接入网技术：<ul>\n<li>数字用户线路（Digital Subscriber Line，DSL）：利用普通电话线传输数据，常见的形式包括ADSL和VDSL。</li>\n<li>光纤接入网（Fiber to the x，FTTx）：使用光纤传输数据到用户的位置。其中，FTTH（Fiber to the Home）将光纤延伸到用户住宅，而FTTC（Fiber to the Curb）和FTTB（Fiber to the Building）将光纤延伸到街边或建筑物。</li>\n<li>有线电视网络：利用有线电视网络传输数据，用户可以通过电缆调制解调器（Cable Modem）访问互联网。</li>\n<li>无线接入网：使用无线技术（如Wi-Fi、4G、5G等）将用户设备连接到网络。</li>\n</ul>\n</li>\n<li>接入网的设计和性能对于用户的上网体验和网络服务的可用性至关重要。它需要考虑带宽、延迟、可靠性和安全性等因素，以满足用户对高速、稳定和安全的互联网连接的需求。</li>\n</ul>\n<ol start=\"34\">\n<li>双绞线的极限距离是100米，但光纤的连接距离可以长达几公里。<strong>距离的不同和路由的维护方式</strong>，就是互联网与家庭、公司网络之间最主要的两个不同点</li>\n<li>互联网接入路由器会在网络包前面加上MAC头部、PPPoE头部、PPP头部总共3种头部，然后发送给ADSL Modem（PPPoE方式下）</li>\n<li><strong>BAS: Broadband Access Server，宽带接入服务器</strong>。它也是一种路由器</li>\n</ol>\n<ul>\n<li>BAS（Broadband Access Server）是一种网络设备，<strong>用于提供宽带接入服务</strong>。它是一种位于网络服务提供商（ISP）或通信运营商网络中的关键设备，用于管理和控制用户的宽带接入。</li>\n<li>BAS的主要功能是对接入网络的用户进行认证、授权和计费，以确保用户能够安全地接入和使用网络服务。它充当用户和网络服务提供商之间的接口，负责处理用户的接入请求、分配IP地址、设置访问权限以及监控用户的网络连接。</li>\n<li>BAS通常支持多种接入技术，如数字用户线路（DSL）、光纤、电缆、无线等，以适应不同用户的接入需求。它可以与不同类型的接入设备（如调制解调器、光猫等）进行交互，以建立用户与网络之间的连接。</li>\n<li>除了用户管理和连接控制功能，<strong>BAS还可以提供其他服务，如网络地址转换（NAT）、虚拟专用网络（VPN）等</strong>。它还能够收集用户的接入统计数据，生成报告和日志，用于网络管理和故障排除。</li>\n<li>需要注意的是，BAS在不同的网络环境和服务提供商之间可能有不同的名称和实现方式。例如，有些地方将BAS称为宽带接入服务器（Broadband Access Server），或称之为宽带终端接入设备（Broadband Termination Equipment，BTE）。</li>\n<li><strong>总而言之，BAS是一种用于管理和控制宽带接入服务的网络设备，它负责对用户进行认证、授权和计费，并提供用户接入管理和连接控制功能。它在网络服务提供商和通信运营商的基础设施中发挥着重要作用</strong>。</li>\n</ul>\n<ol start=\"37\">\n<li><strong>PPP: Point-to-Point Protocol，点到点协议</strong>。它是电话线、ISDN等通信线路所使用的一种协议，集成了用户认证、配置下发、数据压缩、加密等各种功能。</li>\n<li><strong>ATM: Asynchronous Transfer Mode，异步传输</strong>。它是在以电话线为载体的传统电话技术基础上扩展出来的一种通信方式。它的数据传输是以“信元”为单位来进行的，这和以包为单位传输数据的TCP&#x2F;IP很像，但这种方式并不适用于计算机通信。</li>\n<li><strong>调制（Modulation）是指在通信中将要传输的信息信号转换成适合在传输介质中传播的信号形式的过程</strong>。它是通过改变载波信号的某些特性，如振幅、频率或相位来实现的。</li>\n</ol>\n<ul>\n<li>在调制过程中，原始的信息信号称为<strong>基带信号（Baseband Signal），而要传输的信号称为调制信号（Modulated Signal）</strong>。调制的主要目的是将基带信号转换为适合在传输介质（如电缆、光纤、空气等）中传播的信号。</li>\n<li>调制技术的选择取决于传输介质的特性以及通信系统的要求。以下是几种常见的调制技术：<ul>\n<li>振幅调制（Amplitude Modulation，AM）：在振幅调制中，基带信号的振幅被调制到一个高频载波信号上。调制后的信号的振幅随着基带信号的变化而变化。</li>\n<li>频率调制（Frequency Modulation，FM）：在频率调制中，基带信号的频率被调制到一个高频载波信号上。调制后的信号的频率随着基带信号的变化而变化。</li>\n<li>相位调制（Phase Modulation，PM）：在相位调制中，基带信号的相位被调制到一个高频载波信号上。调制后的信号的相位随着基带信号的变化而变化。</li>\n</ul>\n</li>\n<li>此外，还有许多其他的调制技术和变种，如正交频分多路复用（Orthogonal Frequency Division Multiplexing，OFDM）、相干调制（Coherent Modulation）等，它们在不同的通信系统和应用中发挥着重要的作用。</li>\n<li>调制技术的选择和优化需要考虑传输介质的特性、噪声环境、带宽效率、功耗以及接收端的解调能力等因素，以实现高效、可靠的数据传输和通信。</li>\n</ul>\n<ol start=\"40\">\n<li>光纤分为单模和多模两种，根据其物理特性，各有利弊</li>\n<li>上下行的光信号在光纤中混合在一起，信号会变得无法识别，因此我们需要对他们进行区分，<strong>办法是上行和下行信号采用不同波长的光</strong>。波长不同的光混合后可通过<strong>棱镜原理</strong>进行分离，因此光纤中的上行和下行信号即便混合起来也可以识别。像这样在一条光纤中使用不同的波长传输多个光信号的方式叫做<strong>波分复用</strong></li>\n<li>ONU: Optical Network Unit，光网络单元。它和光纤收发器一样，可以将电信号转换成光信号，除此之外还具有和电话局的OLT（Optical Line Terminal，光线路终端）相互配合避免信号碰撞的功能。这个设备有时也被叫做终端盒，因此终端盒这个词本身是对光纤收发器和ONU等光纤终端设备的统称</li>\n<li>PPPoE: Point-to-Point Protocol over Ethernet，以太网的点对点协议</li>\n<li>在使用电话线或者ISDN<strong>拨号上网时，PPP是这样工作的</strong>。首先，用户向运营商的接入点拨打电话，电话接通后输入用户名和密码进行登录操作。用户名和密码通过RADIUS协议从RAS发送到认证服务器，认证服务器校验这些信息是否正确。当确认无误后，认证服务器会返回IP地址等配置信息，并将这些信息下发给用户。用户的计算机根据这些配置IP地址等参数，完成TCP&#x2F;IP收发网络包的准备工作，接下来就可以发送TCP&#x2F;IP包了</li>\n<li><strong>PPPoE是将PPP消息装入以太网包进行传输的方式</strong></li>\n<li>所谓<strong>隧道，就是能将包原封不动搬运到另一端</strong></li>\n<li>一对一连接的端口可以不分配IP地址，这种方式称为无编号</li>\n<li>PPPoA: Point-to-Point Protocol over ATM. PPPoA方式不添加MAC头部和PPPoE头部，而是直接将包装入信元中</li>\n<li><strong>POP（Point of Presence）和NOC（Network Operations Center）</strong>是与网络和通信基础设施相关的术语。</li>\n<li>POP（Point of Presence，中文一般叫做“接入点”）：<br>- <strong>POP指的是在网络服务提供商（ISP）或通信运营商网络中的一个点，通常是物理位置或网络节点</strong>。它是用户与ISP网络连接的地点，提供网络接入、路由和交换等服务。POP通常位于地理上的关键位置，以便为用户提供更好的网络接入服务和更低的延迟。<br>- 在一个ISP网络中，可能会有多个POP分布在不同的地理位置，每个POP通常包含路由器、交换机、服务器等网络设备，用于连接用户和核心网络。通过建立多个POP，ISP可以提供更广泛的覆盖范围，并提高网络的可靠性和性能。</li>\n<li>NOC（Network Operations Center）：<br>- <strong>NOC是一个专门的中心或部门，负责监控、管理和维护一个网络的运行</strong>。NOC通常由一组网络工程师和技术人员组成，他们负责确保网络的正常运行，并快速响应和解决任何网络问题或故障。<br>- NOC的主要职责包括实时监控网络设备和链路的状态、处理网络事件和故障、进行网络配置和优化、执行维护计划、协调与其他运营商的互联等。NOC通常使用监控系统、网络管理工具和报警系统等来帮助监控和管理网络。<br>- NOC还负责与其他相关部门或合作伙伴进行沟通和协调，如与运营商、互联网服务提供商、数据中心等。通过及时响应和解决网络问题，NOC确保网络的稳定性、可靠性和性能，以提供良好的网络服务体验。<blockquote>\n<p>总结起来，POP是网络服务提供商或通信运营商网络中用户连接的点，提供网络接入和服务，而NOC是负责监控、管理和维护网络运行的中心或部门。它们在网络基础设施中扮演着重要的角色，保证了网络的可用性和性能。可以简单地认为，NOC就是规模扩大后的POP</p>\n</blockquote>\n</li>\n<li><strong>专线是固定连接线路</strong>，不需要进行身份认证，参数是根据传真、书面等方式下发后进行手动配置的，因此也不需要PPP、DHCP等机制。其实，这就是最古老的互联网接入方式。</li>\n<li>BGP: Border Gateway Protocol, 边界网关协议.互联网内部使用BGP机制在运营商之间交换路由信息</li>\n<li>IX: Internet eXchange, 中文一般叫做“互联网交换中心”。设置一个中心设备，通过连接到中心设备的方式来减少线路数量，这个中心设备就称为IX。</li>\n<li><strong>防火墙不会检查通信数据的具体内容，因此无法抵御隐藏在通信数据内容中的攻击。</strong></li>\n<li><strong>防火墙：一种抵御外部网络攻击的机制，也是最早出现的一种防御机制</strong>。现在已经出现了很多可以绕过防火墙的攻击方法，因此防火墙一般需要和反病毒、非法入侵检测、访问隔离等机制并用。</li>\n<li>包过滤方式的防火墙不仅可以允许或者阻止网络包的通过，还具备地址转换功能，因此还需要进行相关的设置。</li>\n<li>包过滤方式的防火墙可根据接收方IP地址、发送方IP地址、接收方端口号、发送方端口号、控制位等信息来判断是否允许某个包通过</li>\n<li>防火墙无法抵御的攻击：防火墙可以根据包的起点和终点来判断是否允许其通过，但仅凭起点和终点并不能筛选出所有风险的包。比如，假设Web服务器在收到含有特定数据的包时会引起宕机。但是防火墙只关心包的起点和终点，因此即便包中含有特定数据，防火墙也无法发现，于是包就被放行了。然后，当包到达Web服务器时，就会引发服务器宕机。通过这个例子可以看出，<strong>只有检查包的内容才能识别这种风险，因此防火墙对这种情况无能为力</strong></li>\n<li><strong>DNS服务器可以为一个域名填写多个IP地址，并通过轮询（Round Robin）方式实现负载均衡和故障容错</strong>。下面是一种常见的做法：</li>\n<li>在DNS服务器上为域名配置多个A记录：A记录是用来指定域名对应的IP地址的记录类型。在DNS服务器上为域名配置多个A记录，每个A记录对应一个IP地址。例如：<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">example<span class=\"selector-class\">.com</span>. IN <span class=\"selector-tag\">A</span> <span class=\"number\">192.168</span>.<span class=\"number\">1.100</span></span><br><span class=\"line\">example<span class=\"selector-class\">.com</span>. IN <span class=\"selector-tag\">A</span> <span class=\"number\">192.168</span>.<span class=\"number\">1.101</span></span><br><span class=\"line\">example<span class=\"selector-class\">.com</span>. IN <span class=\"selector-tag\">A</span> <span class=\"number\">192.168</span>.<span class=\"number\">1.102</span></span><br></pre></td></tr></table></figure></li>\n<li>DNS服务器返回多个IP地址：<strong>当DNS服务器接收到客户端的查询请求时，它会从配置的多个A记录中选择一个IP地址返回给客户端</strong>。可以采用简单的轮询方式，每次返回下一个IP地址。例如，第一次返回192.168.1.100，第二次返回192.168.1.101，以此类推。</li>\n<li>客户端使用返回的IP地址：客户端收到DNS服务器返回的IP地址后，可以使用该IP地址与目标服务器建立连接。通过轮询方式，不同的客户端可能会获得不同的IP地址，从而分散负载到多个服务器上。<br><strong>这种配置方式可以实现简单的负载均衡效果，将流量分散到多个服务器上，减轻单个服务器的负载压力。同时，如果其中一个服务器不可用，DNS服务器将不再返回该服务器的IP地址，从而实现故障容错。</strong><br>需要注意的是，这种简单的轮询方式并不能完全保证负载均衡，因为DNS服务器无法感知服务器的实际负载情况。在实际应用中，可能需要结合其他负载均衡技术和算法，如权重设置、健康检查等，以达到更精确的负载均衡效果。</li>\n<li>使用负载均衡器时，<strong>要用负载均衡器的IP地址代替Web服务器的实际地址注册到DNS服务器上</strong></li>\n<li>对HTTP规格进行扩展，<strong>在HTTP头部字段中加上用来判断相关性的信息，这种信息俗称Cookie</strong>。这样，负载均衡器就可以通过这些信息来作出判断，将一系列相关的请求发送到同一台Web服务器，对于不相关的请求则发送到负载较低的服务器了。</li>\n<li><strong>代理：一种介于客户端和Web服务器之间，对访问操作进行中转的机制</strong>。代理（Proxy）本来的意思并不是“转发”消息。而是先把消息收下来，然后“伪装”成原始客户端向Web服务器发出访问请求。</li>\n<li>缓存服务器是一台通过代理机制对数据进行缓存的服务器。</li>\n<li><strong>缓存服务器和负载均衡器一样，需要代替Web服务器被注册到DNS服务器中</strong>。</li>\n<li><strong>将缓存服务器的代理机制放在客户端一侧，就是代理的原型，也就是现在所说的正向代理（forward proxy）</strong>.正向代理除了缓存这一作用，还有一个作用就是用来实现防火墙。<strong>代理在转发过程中可以查看请求的内容，所以可以根据内容判断是否允许访问</strong>。</li>\n<li><strong>为解决正向代理的种种弊端，产生了正向代理的改良版—反向代理（reverse proxy）。服务器端的缓存服务器采用的正是这种方式，这种方式称为反向代理。</strong></li>\n<li>缓存服务器判断转发目标的方法还有一种，俺就是查看请求消息的包头部。因为包的IP头部中包含接收方IP地址，只要知道了这个地址，就知道用户要访问哪台服务器了。这种方法称为<strong>透明代理（transparent proxy）</strong>.透明代理集合了正向代理和反向代理的优点。使用透明代理时，<strong>用户不会察觉到代理的存在，也不会注意到HTTP消息是如何被转发的，因此大家更倾向于将透明代理说成是缓存</strong>.最近有很多场合中已经将透明代理直接叫做“缓存”而不是“代理”了。</li>\n<li>缓存服务器部署在服务器端还是客户端，其效果是又差别的。</li>\n</ol>\n<ul>\n<li>当缓存服务器放在服务器端时，可以减轻Web服务器的负载，但无法减少互联网中的流量。</li>\n<li>当缓存服务器部署在客户端时，可以减少流量， 但是Web服务器运营商无法管理缓存服务器。<blockquote>\n<p>因此，这两种部署缓存服务器的方式各有利弊，但也有一种方式能够集合两者的有点。那就是Web服务器运营者和网络运营商签约，将可以自己控制的缓存服务器放在客户端的运营商处</p>\n</blockquote>\n</li>\n</ul>\n<ol start=\"68\">\n<li>即便减少了数量，作为一个Web服务器运营者，如果自己和这些运营商签约并部署缓存服务器，无论是费用还是精力都是吃不消的。为了解决这个问题，一些专门从事相关服务的厂商出现了，他们来部署缓存服务器，并租借给Web服务器运营者。这种服务称为<strong>内容分发服务</strong></li>\n<li>内容分发服务也叫CDS（Content Delivery Service）。（现在更常用的名称叫CDN（Content Delivery Network 或 Content Distribution Network））<br>  内容分发服务（Content Delivery Service，CDS），也称为内容分发网络（Content Delivery Network，CDN），是一种用于提供高效、可靠的内容分发和传输的网络架构。<br>  CDN的主要目标是将内容（如网页、图片、视频、文件等）快速、可靠地传送给用户，以提供更好的用户体验和性能优化。<strong>它通过在全球分布的边缘服务器上缓存和分发内容，使用户可以从离其较近的服务器获取内容</strong>，从而减少了传输延迟和网络拥塞问题。<br>  下面是CDN的工作原理：<ol>\n<li>内容缓存和分发：CDN在全球各地设置了多个边缘服务器节点，这些节点分布在不同的地理位置，覆盖范围广。原始内容提供商（如网站、媒体服务提供商等）将内容上传到CDN的服务器上，这些服务器上的存储称为缓存。</li>\n<li>请求路由：当用户请求访问特定内容时，请求将被路由到距离用户最近的CDN节点，而不是原始服务器。这个选择过程通常基于网络拓扑、地理位置、负载情况等因素。</li>\n<li>缓存命中：如果请求的内容已经存在于CDN节点的缓存中，CDN节点将立即响应请求并将内容传输给用户。这样可以大大减少从原始服务器获取内容的时间和网络延迟。</li>\n<li>内容更新和失效：CDN节点定期从原始服务器获取最新的内容更新。当内容发生更改或失效时，CDN节点将刷新缓存，并在下一次请求时从原始服务器获取更新后的内容。</li>\n<li>负载均衡和故障容错：CDN通过在多个节点上分发请求，实现负载均衡，使得流量能够均匀分布到不同的服务器上。如果某个节点发生故障或不可用，其他节点可以接管请求，保证服务的连续性。<br>  通过使用CDN，内容提供商可以提供更快速、可靠的内容访问体验，减少网络拥塞和延迟，并减轻源服务器的负载压力。同时，CDN还提供了许多其他功能，如安全性增强、缓存控制、带宽优化、动态内容加速等。<br>  需要注意的是，尽管现在更常用的术语是CDN（Content Delivery Network），但CDS（Content Delivery Service）也可以用来指代相同的概念和技术。</li>\n</ol>\n</li>\n<li><strong>缓存内容的更新方法会影响缓存服务器的效率</strong>，要改善这一点，有一种方法是<strong>让Web服务器在原始数据发生更新时，立即通知缓存服务器</strong>，使得缓存服务器上的数据一直保持最新状态</li>\n<li>多任务：操作系统提供的一种功能，可以让多个任务（程序）同时运行。实际上，一个处理器在某一个瞬间只能运行一个任务，但通过短时间内在不同的任务间切换，看起来就好像是同时运行多个任务一样。有些操作系统称之为“多进程”</li>\n<li><strong>多任务和多线程的区别在于任务和线程的区别</strong>。在操作系统内部，任务是作为单独的程序来对待的，而线程则是一个程序中的一部分。</li>\n<li>协议栈的IP模块会检查IP头部</li>\n</ol>\n<ul>\n<li>判断是不是发给自己的</li>\n<li>判断网络包是否经过分片</li>\n<li>将包转交给TCP模块或UDP模块</li>\n</ul>\n","site":{"data":{}},"excerpt":"<ol>\n<li>已经有了IP地址了，为什么还需要MAC地址呢？</li></ol>","more":"\n\n<ul>\n<li>IP地址和MAC地址在计算机网络中扮演着不同的角色，它们各自具有不同的功能和用途。</li>\n<li>IP地址（Internet Protocol address）是用于在互联网上标识和寻址设备的数字地址。它是逻辑地址，用于在网络层（如Internet协议）上进行路由和通信。IP地址是由网络管理员配置的，并且可以根据需要进行更改。IP地址允许网络中的设备相互识别和进行通信。</li>\n<li>而MAC地址（Media Access Control address）是一个唯一的硬件地址，用于在<strong>局域网（LAN）</strong>中标识网络设备。MAC地址是由设备的制造商固定在网络接口卡上的，因此在设备出厂时即被分配。它是物理地址，用于在数据链路层上进行数据帧的传输。MAC地址是全球唯一的，每个网络设备都有一个独特的MAC地址。</li>\n<li>那么为什么需要MAC地址呢？<ol>\n<li><strong>局域网通信</strong>：在局域网中，设备之间的通信是基于MAC地址进行的。当设备在同一局域网中进行通信时，它们使用MAC地址来识别彼此并交换数据。路由器根据目标MAC地址将数据包转发到正确的设备。</li>\n<li>广播通信：当设备需要向整个局域网发送广播消息时，它使用广播MAC地址（全为1的地址）。这种广播通信对于局域网中的设备发现、地址解析协议等功能非常重要。</li>\n<li>ARP协议：地址解析协议（ARP）用于将IP地址映射到相应的MAC地址。当设备知道目标IP地址时，它使用ARP查询来获取对应的MAC地址，以便将数据包正确地发送到目标设备。</li>\n</ol>\n</li>\n</ul>\n<blockquote>\n<p>总结起来，尽管IP地址在网络层上具有重要作用，但MAC地址在数据链路层上同样至关重要。<strong>IP地址用于路由和全球范围的通信，而MAC地址用于局域网内的设备识别和通信</strong>。两者在不同层次上发挥作用，相互补充，共同构建了计算机网络的功能。</p>\n</blockquote>\n<ol start=\"2\">\n<li><p>路由表是用于路由器和网络设备的重要组成部分，它用于决定网络数据包的转发路径。路由表中存储了网络的可达目的地以及相应的下一跳信息。下面是关于路由表的基本解释：</p>\n</li>\n<li><p>目的地网络（Destination Network）：这是指数据包要传输到的目标网络的网络地址。<strong>它可以用IP地址表示，通常是网络的网络号和子网掩码的组合</strong>。</p>\n</li>\n<li><p>子网掩码（Subnet Mask）：子网掩码与IP地址结合使用，<strong>用于确定目的地网络的范围。子网掩码中的1位表示网络号，0位表示主机号</strong>。</p>\n</li>\n<li><p>下一跳（Next Hop）：下一跳是指将数据包从当前设备转发到目标网络所使用的下一个路由器或网络设备的地址。它可以是直接连接的邻居路由器的IP地址，也可以是下一个中转节点的IP地址。</p>\n</li>\n<li><p>接口（Interface）：接口是指路由器或网络设备与相应网络之间的物理或逻辑连接。接口可以是网卡、以太网端口、无线接口等。<br>在路由表中，每个条目通常包含以上信息。当路由器接收到一个数据包时，它会检查目标IP地址，并使用路由表来确定下一步的操作：</p>\n</li>\n<li><p>匹配目的地网络：路由器会检查目的地IP地址和路由表中的目的地网络条目进行匹配。</p>\n</li>\n<li><p>最长前缀匹配：如果存在多个匹配的目的地网络，路由器将选择具有最长前缀匹配（即子网掩码最长）的路由表条目。这确保了更精确的匹配。</p>\n</li>\n<li><p>下一跳确定：路由器根据匹配的路由表条目找到相应的下一跳地址。</p>\n</li>\n<li><p>数据包转发：路由器将数据包发送到相应的下一跳地址，或通过适当的接口将数据包转发到目标网络。<br>路由表的内容可以通过手动配置静态路由，也可以通过动态路由协议（如OSPF、BGP等）自动学习和更新。动态路由协议允许路由器在网络发生变化时自动更新路由表，以确保有效的数据包转发。<br>通过有效管理和更新路由表，路由器能够根据目标网络选择最佳路径来转发数据包，实现网络中的数据传输和通信。</p>\n</li>\n<li><p><strong>TTL 是 “Time to Live”（生存时间）的缩写</strong>，它是一个在计算机网络中使用的术语。<strong>TTL 值用于确定数据包在网络中可以存活的时间长度</strong>。当一个数据包被发送到网络上时，它会被赋予一个初始的 TTL 值。每当数据包经过一个路由器或网络设备时，TTL 值就会减少。<strong>当 TTL 值减至零时，数据包将被丢弃并不再继续传输</strong>。<br><strong>TTL 值的目的是防止数据包在网络中无限循环</strong>。如果一个数据包在网络中被路由器无限转发，它将消耗网络资源并导致网络拥堵。通过限制数据包的生存时间，TTL 值确保数据包能够在合理的时间内到达目的地或被丢弃。<br>在实际应用中，TTL 值通常以<strong>秒</strong>为单位表示，常见的初始 TTL 值为 64 或 128。不同的操作系统或网络设备可能对 TTL 值的处理方式有所差异，但一般情况下，每个路由器或网络设备在转发数据包时会将 TTL 值<strong>减少一定的数量，通常是 1 或更多</strong>。</p>\n<blockquote>\n<p>总结来说，TTL 是一个用于确定数据包在网络中存活时间的字段，它对网络的稳定运行和防止数据包无限循环起着重要作用。</p>\n</blockquote>\n</li>\n<li><p><strong>MTU 是 “Maximum Transmission Unit”（最大传输单元）的缩写。它指的是在计算机网络中可以通过单个数据包传输的最大数据量</strong>。</p>\n</li>\n</ol>\n<p>最大传输单元 (MTU) 是网络通信中一个重要的参数，它定义了网络中可以传输的数据包的最大大小。MTU 的大小是由网络设备或协议规范决定的，通常以字节为单位表示。</p>\n<p>当数据需要通过网络传输时，它会被分割成更小的数据包以适应网络的 MTU。这样做的目的是确保数据包能够在网络中正确地传输，因为某些网络设备或链路可能有传输数据包大小的限制。如果数据包的大小超过某个设备或链路的 MTU，它将被分割成更小的片段进行传输，并在目标节点上重新组装。</p>\n<p>不同类型的网络（如以太网、Wi-Fi、以及各种广域网连接等）通常具有不同的 MTU 值。常见的以太网 MTU 值是 1500 字节，而在某些特殊情况下，如在 VPN 或某些广域网连接中，MTU 可能会被调整为更小的值，例如 1400 字节或更低。</p>\n<p>准确设置正确的 MTU 值对于网络性能和数据传输的可靠性至关重要。如果 MTU 值设置得过大，可能会导致数据包被丢弃或需要进行片段重组，从而增加网络延迟和传输错误的可能性。如果 MTU 值设置得过小，数据传输的效率可能会受到影响，因为需要发送更多的数据包来传输相同的数据量。</p>\n<blockquote>\n<p>总结来说，MTU 是指在计算机网络中单个数据包可以传输的最大数据量。通过分割数据以适应网络的 MTU，确保数据能够在网络中正确传输，并在目标节点上重新组装。正确设置合适的 MTU 值对于网络性能和数据传输的可靠性非常重要。</p>\n</blockquote>\n<ol start=\"5\">\n<li><strong>MSS 是 “Maximum Segment Size”（最大报文段长度）的缩写</strong>，它是在 TCP&#x2F;IP 网络通信中使用的一个参数。</li>\n</ol>\n<p>在 TCP&#x2F;IP 协议中，数据被分割成称为报文段（Segment）的小块进行传输。<strong>MSS 指的是在 TCP 报文段中可以承载的最大有效载荷数据的大小，不包括 TCP 报文段的首部信息</strong>。</p>\n<p>MSS 的大小是由网络设备或操作系统配置决定的，通常以字节为单位表示。它表示在 TCP 连接中发送的数据报文段的最大大小，因为 TCP 报文段除了有效载荷数据外还包含一些必要的控制信息，如首部、校验和、序列号等。</p>\n<p>当建立 TCP 连接时，通信双方会通过握手过程协商一个适当的 MSS 值。这个值会根据网络设备和连接双方的能力而确定，以确保数据的可靠传输和最大效率。较小的 MSS 值可以减少分段和重组的需求，从而提高传输效率。<strong>然而，MSS 值不能超过网络链路中任何一方的 MTU 值，以确保数据包不会被分段</strong>。</p>\n<p>MSS 的值通常与网络的 MTU 值相关。实际上，MSS 一般会设为 MTU 值减去 TCP&#x2F;IP 报文段首部的长度（通常为 40 字节）再减去可能的 IP 选项的长度。</p>\n<blockquote>\n<p>总结来说，MSS（最大报文段长度）是在 TCP&#x2F;IP 网络通信中用于确定 TCP 报文段中有效载荷数据的最大大小的参数。MSS 的值由网络设备或操作系统配置决定，并通过握手过程协商确定。它与网络的 MTU 值相关，用于确保数据的可靠传输和最大效率。</p>\n</blockquote>\n<ol start=\"6\">\n<li>TCP（Transmission Control Protocol）和 UDP（User Datagram Protocol）是两种常见的传输层协议，用于在计算机网络上提供可靠的数据传输。</li>\n</ol>\n<p><strong>TCP 是一种面向连接的协议</strong>，它提供了可靠的数据传输和错误检测机制。它通过建立一个连接，在发送和接收数据之间创建一个可靠的通信通道。TCP 使用序列号和确认机制来确保数据的有序传输和可靠接收。它还提供了拥塞控制和流量控制机制，以适应网络拥塞和保证通信的质量。<strong>TCP 的特点是稳定可靠</strong>，适用于对数据传输的完整性和顺序性要求较高的应用，如网页浏览、文件传输、电子邮件等。</p>\n<p><strong>UDP 是一种无连接的协议</strong>，它提供了一种简单的数据传输机制，<strong>不具备可靠性保证</strong>。UDP 通过将数据打包成数据报文并发送，但不进行连接的建立和维护。它没有序列号、确认、重传等机制，因此传输过程中可能会发生丢包或乱序。<strong>UDP 的优点是传输速度快，延迟低，并且没有拥塞控制等复杂的机制</strong>。UDP 适用于对实时性要求较高的应用，如音频、视频流媒体、在线游戏等，因为它更注重传输速度而不是数据的可靠性。</p>\n<blockquote>\n<p>总结来说，TCP 是一种面向连接的、可靠的传输协议，适用于对数据传输的完整性和顺序性要求较高的应用；而 UDP 是一种无连接的、不可靠的传输协议，适用于对实时性要求较高的应用。选择使用 TCP 还是 UDP 取决于具体应用的需求，如数据传输的可靠性、延迟要求以及对网络资源的消耗等因素。</p>\n</blockquote>\n<blockquote>\n<p>但这样并不会引发什么问题，因此出错时就收不到来自对方的回复，应用程序会注意到这个问题，并重新发送一遍数据。怎样的操作本身并不复杂，也并不会增加应用程序的负担。<br>在无需重发数据，或者是重发了也没什么意义的情况下，使用UDP发送数据的效率会更高。</p>\n</blockquote>\n<ol start=\"7\">\n<li>双绞线的设计是为了抑制噪声的影响</li>\n<li>交换机的设计是将网络包原样转发到目的地</li>\n<li>交换机的每一个网线接口后面都是一块网卡。网线接口和后面的电路部分加在一起称为一个端口，也就是说交换机的一个端口就相当于计算机上的一块网卡。换句话说，如果计算机上安装多块网卡，并开启“混杂模式”让网卡接收所有的网络包，然后再安装一个和交换机具备同样功能的网络包转发软件，那么这台计算机就变成了一台交换机。</li>\n<li>交换机端口的MAC模块不具有MAC地址</li>\n<li>交换机根据MAC地址表查找MAC地址，然后将信号发送到相应的端口</li>\n<li>如果接收方MAC地址是一个<strong>广播地址</strong>，那么交换机会将包发送到除源端口之外的所有端口。</li>\n<li>广播地址（broadcast address）是一种特殊的地址，将广播地址设为接收方地址时，包会发送到网络中所有的设备。MAC地址中的FF:FF:FF:FF:FF:FF和IP地址中的255.255.255.255都是广播地址</li>\n<li>交换机的全双工模式可以同时发送和接收信号</li>\n<li>交换机可以同时转发多个包</li>\n<li>路由器是基于IP设计的，而交换机是基于以太网设计的</li>\n<li>路由器的各个端口都具有MAC地址和IP地址</li>\n<li>路由器根据“IP地址”判断转发目标。路由器会忽略主机号，只匹配网络号</li>\n<li>路由器的子网掩码列只表示在匹配网络包目标地址时需要对比的比特数量，<strong>匹配的比特数越长优先级越高（最长匹配原则）</strong></li>\n<li>路由器的端口都具有MAC地址，只接收与自身地址匹配的包，遇到不匹配的包则直接丢弃</li>\n<li>子网掩码0.0.0.0的意思是网络包接收方IP地址和路由表目标地址的匹配中需要匹配的比特数为0，换句话说，就是根本不需要匹配。只要将子网掩码设置为0.0.0.0，那么无论任何地址都能匹配到这一条记录。也就是说<strong>路由表中子网掩码为0.0.0.0的记录表示“默认路由”，这一行配置的网关地址被称为默认网关</strong></li>\n<li>路由器判断下一个转发目标的方法如下：</li>\n</ol>\n<ul>\n<li>如果路由表的网关列内容为IP地址，则该地址就是下一个转发目标</li>\n<li>如果路由表的<strong>网关列内容为空</strong>，则IP头部中的接收方IP地址就是下一个转发目标</li>\n</ul>\n<ol start=\"23\">\n<li>IP（路由器）负责将包送达通信对象这一整体过程，而其中将包传输到下一个路由器的过程则是由以太网（交换机）来负责的</li>\n<li>在内网中可用作私有地址的范围仅限一下这些：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">10.0.0.0 ~ 10.255.255.255</span><br><span class=\"line\">172.16.0.0 ~ 172.31.255.255</span><br><span class=\"line\">192.168.0.0 ~ 192.168.255.255</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>在制作私有地址规则时，这些地址属于公有地址中还没有被分配的范围</p>\n</blockquote>\n</li>\n<li>地址转换的基本原理是在转发网络包时对IP头部中的<strong>IP地址和端口号</strong>进行改写，这里的端口号指的是TCP和UDP的端口号，不是路由器和集线器连接网线的那个端口。在对外只能使用一个共有地址的情况下，可以用不同的端口号来区别内网中的不同终端</li>\n<li>具备地址转换功能的设备不仅有路由器，有些防火墙也有地址转换功能，它的工作方式和路由器是相同的。</li>\n<li>早期的地址转换机制是只改写地址，不改写端口号</li>\n<li>对于从公司内网访问互联网的包，即便其发送方私有地址和端口号没有保存在对应表中<strong>也是可以正常转发的</strong>；然而，对于从互联网访问公司内网的包，如果在对应表中没有记录就<strong>无法正常转发</strong>。也就是说，除非公司主动允许，否则是无法从互联网向公司内网发送网络包的。这种机制具有<strong>防止非法入侵</strong>的效果。</li>\n<li><strong>包过滤</strong>也是路由器的一个重要附加功能。包过滤就是在对包进行转发时，根据MAC头部、IP头部、TCP头部的内容，按照事先设置好的规则决定是转发这个包，还是丢弃这个包。我们通常说的<strong>防火墙设备或软件</strong>，大多数都是利用这一机制来防止非法入侵的。</li>\n<li>hub: central part of a wheel from which the spokes radiate 轮毂。集线器（repeater hub）、交换机（switching hub）</li>\n<li>ADSL（Asymmetric Digital Subscriber Line，非对称数字用户线路）是一种用于传输数据的通信技术。它是一种通过普通电话线提供高速互联网接入的技术。</li>\n</ol>\n<ul>\n<li>ADSL是”非对称”的，意味着它在上传和下载数据时的速度不对称。一般情况下，ADSL提供的下载速度比上传速度要快。这种设计是为了适应大多数用户在互联网使用过程中更多地下载数据（如浏览网页、观看视频等）而上传较少数据（如发送电子邮件、上传文件等）的需求。</li>\n<li>ADSL利用了普通电话线的传输能力，通过将数据转换成数字信号进行传输。它利用了电话线中未使用的频率范围，将低频范围用于传输电话信号，高频范围用于传输数据信号。这样就可以同时进行电话通话和上网，而且不会相互干扰。</li>\n<li>ADSL的传输速度依赖于多个因素，包括电话线的质量、距离和网络供应商的服务等。通常，ADSL的下载速度可以达到几兆比特每秒（Mbps），而上传速度通常较慢，一般在数百千位每秒（Kbps）到几兆位每秒（Mbps）之间。</li>\n<li><strong>总而言之，ADSL是一种通过普通电话线提供高速互联网接入的通信技术，它提供的下载速度比上传速度更快，适用于多数用户更多地下载数据而上传较少数据的需求。</strong></li>\n</ul>\n<ol start=\"32\">\n<li><strong>电信号和光信号传播的速度大体上相同，之所以电缆不如光纤通信速率高，是因为电信号再提升通信速率的同时，其衰减率也会提高（信号在传播过程中减弱），导致信号无法传到目的地</strong>。相对地，光信号本来的衰减率就很低，提高通信速率也并不会提高衰减率。此外，光纤还不受电磁噪声的影响， 因此光纤能够进行高速通信。</li>\n<li><strong>接入网（Access Network）是指将终端用户连接到互联网或其他公共通信网络的部分网络</strong>。它是整个通信网络中的最后一段，提供用户与网络之间的物理和逻辑接口。</li>\n</ol>\n<ul>\n<li>接入网的主要功能是将用户设备（如计算机、手机、智能电视等）与核心网络进行连接，使用户能够访问互联网和其他网络服务。它扮演着桥梁的角色，将用户的数据传输到全球范围的网络中。</li>\n<li>接入网可以采用各种不同的技术和架构，具体取决于网络运营商和地理条件。以下是几种常见的接入网技术：<ul>\n<li>数字用户线路（Digital Subscriber Line，DSL）：利用普通电话线传输数据，常见的形式包括ADSL和VDSL。</li>\n<li>光纤接入网（Fiber to the x，FTTx）：使用光纤传输数据到用户的位置。其中，FTTH（Fiber to the Home）将光纤延伸到用户住宅，而FTTC（Fiber to the Curb）和FTTB（Fiber to the Building）将光纤延伸到街边或建筑物。</li>\n<li>有线电视网络：利用有线电视网络传输数据，用户可以通过电缆调制解调器（Cable Modem）访问互联网。</li>\n<li>无线接入网：使用无线技术（如Wi-Fi、4G、5G等）将用户设备连接到网络。</li>\n</ul>\n</li>\n<li>接入网的设计和性能对于用户的上网体验和网络服务的可用性至关重要。它需要考虑带宽、延迟、可靠性和安全性等因素，以满足用户对高速、稳定和安全的互联网连接的需求。</li>\n</ul>\n<ol start=\"34\">\n<li>双绞线的极限距离是100米，但光纤的连接距离可以长达几公里。<strong>距离的不同和路由的维护方式</strong>，就是互联网与家庭、公司网络之间最主要的两个不同点</li>\n<li>互联网接入路由器会在网络包前面加上MAC头部、PPPoE头部、PPP头部总共3种头部，然后发送给ADSL Modem（PPPoE方式下）</li>\n<li><strong>BAS: Broadband Access Server，宽带接入服务器</strong>。它也是一种路由器</li>\n</ol>\n<ul>\n<li>BAS（Broadband Access Server）是一种网络设备，<strong>用于提供宽带接入服务</strong>。它是一种位于网络服务提供商（ISP）或通信运营商网络中的关键设备，用于管理和控制用户的宽带接入。</li>\n<li>BAS的主要功能是对接入网络的用户进行认证、授权和计费，以确保用户能够安全地接入和使用网络服务。它充当用户和网络服务提供商之间的接口，负责处理用户的接入请求、分配IP地址、设置访问权限以及监控用户的网络连接。</li>\n<li>BAS通常支持多种接入技术，如数字用户线路（DSL）、光纤、电缆、无线等，以适应不同用户的接入需求。它可以与不同类型的接入设备（如调制解调器、光猫等）进行交互，以建立用户与网络之间的连接。</li>\n<li>除了用户管理和连接控制功能，<strong>BAS还可以提供其他服务，如网络地址转换（NAT）、虚拟专用网络（VPN）等</strong>。它还能够收集用户的接入统计数据，生成报告和日志，用于网络管理和故障排除。</li>\n<li>需要注意的是，BAS在不同的网络环境和服务提供商之间可能有不同的名称和实现方式。例如，有些地方将BAS称为宽带接入服务器（Broadband Access Server），或称之为宽带终端接入设备（Broadband Termination Equipment，BTE）。</li>\n<li><strong>总而言之，BAS是一种用于管理和控制宽带接入服务的网络设备，它负责对用户进行认证、授权和计费，并提供用户接入管理和连接控制功能。它在网络服务提供商和通信运营商的基础设施中发挥着重要作用</strong>。</li>\n</ul>\n<ol start=\"37\">\n<li><strong>PPP: Point-to-Point Protocol，点到点协议</strong>。它是电话线、ISDN等通信线路所使用的一种协议，集成了用户认证、配置下发、数据压缩、加密等各种功能。</li>\n<li><strong>ATM: Asynchronous Transfer Mode，异步传输</strong>。它是在以电话线为载体的传统电话技术基础上扩展出来的一种通信方式。它的数据传输是以“信元”为单位来进行的，这和以包为单位传输数据的TCP&#x2F;IP很像，但这种方式并不适用于计算机通信。</li>\n<li><strong>调制（Modulation）是指在通信中将要传输的信息信号转换成适合在传输介质中传播的信号形式的过程</strong>。它是通过改变载波信号的某些特性，如振幅、频率或相位来实现的。</li>\n</ol>\n<ul>\n<li>在调制过程中，原始的信息信号称为<strong>基带信号（Baseband Signal），而要传输的信号称为调制信号（Modulated Signal）</strong>。调制的主要目的是将基带信号转换为适合在传输介质（如电缆、光纤、空气等）中传播的信号。</li>\n<li>调制技术的选择取决于传输介质的特性以及通信系统的要求。以下是几种常见的调制技术：<ul>\n<li>振幅调制（Amplitude Modulation，AM）：在振幅调制中，基带信号的振幅被调制到一个高频载波信号上。调制后的信号的振幅随着基带信号的变化而变化。</li>\n<li>频率调制（Frequency Modulation，FM）：在频率调制中，基带信号的频率被调制到一个高频载波信号上。调制后的信号的频率随着基带信号的变化而变化。</li>\n<li>相位调制（Phase Modulation，PM）：在相位调制中，基带信号的相位被调制到一个高频载波信号上。调制后的信号的相位随着基带信号的变化而变化。</li>\n</ul>\n</li>\n<li>此外，还有许多其他的调制技术和变种，如正交频分多路复用（Orthogonal Frequency Division Multiplexing，OFDM）、相干调制（Coherent Modulation）等，它们在不同的通信系统和应用中发挥着重要的作用。</li>\n<li>调制技术的选择和优化需要考虑传输介质的特性、噪声环境、带宽效率、功耗以及接收端的解调能力等因素，以实现高效、可靠的数据传输和通信。</li>\n</ul>\n<ol start=\"40\">\n<li>光纤分为单模和多模两种，根据其物理特性，各有利弊</li>\n<li>上下行的光信号在光纤中混合在一起，信号会变得无法识别，因此我们需要对他们进行区分，<strong>办法是上行和下行信号采用不同波长的光</strong>。波长不同的光混合后可通过<strong>棱镜原理</strong>进行分离，因此光纤中的上行和下行信号即便混合起来也可以识别。像这样在一条光纤中使用不同的波长传输多个光信号的方式叫做<strong>波分复用</strong></li>\n<li>ONU: Optical Network Unit，光网络单元。它和光纤收发器一样，可以将电信号转换成光信号，除此之外还具有和电话局的OLT（Optical Line Terminal，光线路终端）相互配合避免信号碰撞的功能。这个设备有时也被叫做终端盒，因此终端盒这个词本身是对光纤收发器和ONU等光纤终端设备的统称</li>\n<li>PPPoE: Point-to-Point Protocol over Ethernet，以太网的点对点协议</li>\n<li>在使用电话线或者ISDN<strong>拨号上网时，PPP是这样工作的</strong>。首先，用户向运营商的接入点拨打电话，电话接通后输入用户名和密码进行登录操作。用户名和密码通过RADIUS协议从RAS发送到认证服务器，认证服务器校验这些信息是否正确。当确认无误后，认证服务器会返回IP地址等配置信息，并将这些信息下发给用户。用户的计算机根据这些配置IP地址等参数，完成TCP&#x2F;IP收发网络包的准备工作，接下来就可以发送TCP&#x2F;IP包了</li>\n<li><strong>PPPoE是将PPP消息装入以太网包进行传输的方式</strong></li>\n<li>所谓<strong>隧道，就是能将包原封不动搬运到另一端</strong></li>\n<li>一对一连接的端口可以不分配IP地址，这种方式称为无编号</li>\n<li>PPPoA: Point-to-Point Protocol over ATM. PPPoA方式不添加MAC头部和PPPoE头部，而是直接将包装入信元中</li>\n<li><strong>POP（Point of Presence）和NOC（Network Operations Center）</strong>是与网络和通信基础设施相关的术语。</li>\n<li>POP（Point of Presence，中文一般叫做“接入点”）：<br>- <strong>POP指的是在网络服务提供商（ISP）或通信运营商网络中的一个点，通常是物理位置或网络节点</strong>。它是用户与ISP网络连接的地点，提供网络接入、路由和交换等服务。POP通常位于地理上的关键位置，以便为用户提供更好的网络接入服务和更低的延迟。<br>- 在一个ISP网络中，可能会有多个POP分布在不同的地理位置，每个POP通常包含路由器、交换机、服务器等网络设备，用于连接用户和核心网络。通过建立多个POP，ISP可以提供更广泛的覆盖范围，并提高网络的可靠性和性能。</li>\n<li>NOC（Network Operations Center）：<br>- <strong>NOC是一个专门的中心或部门，负责监控、管理和维护一个网络的运行</strong>。NOC通常由一组网络工程师和技术人员组成，他们负责确保网络的正常运行，并快速响应和解决任何网络问题或故障。<br>- NOC的主要职责包括实时监控网络设备和链路的状态、处理网络事件和故障、进行网络配置和优化、执行维护计划、协调与其他运营商的互联等。NOC通常使用监控系统、网络管理工具和报警系统等来帮助监控和管理网络。<br>- NOC还负责与其他相关部门或合作伙伴进行沟通和协调，如与运营商、互联网服务提供商、数据中心等。通过及时响应和解决网络问题，NOC确保网络的稳定性、可靠性和性能，以提供良好的网络服务体验。<blockquote>\n<p>总结起来，POP是网络服务提供商或通信运营商网络中用户连接的点，提供网络接入和服务，而NOC是负责监控、管理和维护网络运行的中心或部门。它们在网络基础设施中扮演着重要的角色，保证了网络的可用性和性能。可以简单地认为，NOC就是规模扩大后的POP</p>\n</blockquote>\n</li>\n<li><strong>专线是固定连接线路</strong>，不需要进行身份认证，参数是根据传真、书面等方式下发后进行手动配置的，因此也不需要PPP、DHCP等机制。其实，这就是最古老的互联网接入方式。</li>\n<li>BGP: Border Gateway Protocol, 边界网关协议.互联网内部使用BGP机制在运营商之间交换路由信息</li>\n<li>IX: Internet eXchange, 中文一般叫做“互联网交换中心”。设置一个中心设备，通过连接到中心设备的方式来减少线路数量，这个中心设备就称为IX。</li>\n<li><strong>防火墙不会检查通信数据的具体内容，因此无法抵御隐藏在通信数据内容中的攻击。</strong></li>\n<li><strong>防火墙：一种抵御外部网络攻击的机制，也是最早出现的一种防御机制</strong>。现在已经出现了很多可以绕过防火墙的攻击方法，因此防火墙一般需要和反病毒、非法入侵检测、访问隔离等机制并用。</li>\n<li>包过滤方式的防火墙不仅可以允许或者阻止网络包的通过，还具备地址转换功能，因此还需要进行相关的设置。</li>\n<li>包过滤方式的防火墙可根据接收方IP地址、发送方IP地址、接收方端口号、发送方端口号、控制位等信息来判断是否允许某个包通过</li>\n<li>防火墙无法抵御的攻击：防火墙可以根据包的起点和终点来判断是否允许其通过，但仅凭起点和终点并不能筛选出所有风险的包。比如，假设Web服务器在收到含有特定数据的包时会引起宕机。但是防火墙只关心包的起点和终点，因此即便包中含有特定数据，防火墙也无法发现，于是包就被放行了。然后，当包到达Web服务器时，就会引发服务器宕机。通过这个例子可以看出，<strong>只有检查包的内容才能识别这种风险，因此防火墙对这种情况无能为力</strong></li>\n<li><strong>DNS服务器可以为一个域名填写多个IP地址，并通过轮询（Round Robin）方式实现负载均衡和故障容错</strong>。下面是一种常见的做法：</li>\n<li>在DNS服务器上为域名配置多个A记录：A记录是用来指定域名对应的IP地址的记录类型。在DNS服务器上为域名配置多个A记录，每个A记录对应一个IP地址。例如：<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">example<span class=\"selector-class\">.com</span>. IN <span class=\"selector-tag\">A</span> <span class=\"number\">192.168</span>.<span class=\"number\">1.100</span></span><br><span class=\"line\">example<span class=\"selector-class\">.com</span>. IN <span class=\"selector-tag\">A</span> <span class=\"number\">192.168</span>.<span class=\"number\">1.101</span></span><br><span class=\"line\">example<span class=\"selector-class\">.com</span>. IN <span class=\"selector-tag\">A</span> <span class=\"number\">192.168</span>.<span class=\"number\">1.102</span></span><br></pre></td></tr></table></figure></li>\n<li>DNS服务器返回多个IP地址：<strong>当DNS服务器接收到客户端的查询请求时，它会从配置的多个A记录中选择一个IP地址返回给客户端</strong>。可以采用简单的轮询方式，每次返回下一个IP地址。例如，第一次返回192.168.1.100，第二次返回192.168.1.101，以此类推。</li>\n<li>客户端使用返回的IP地址：客户端收到DNS服务器返回的IP地址后，可以使用该IP地址与目标服务器建立连接。通过轮询方式，不同的客户端可能会获得不同的IP地址，从而分散负载到多个服务器上。<br><strong>这种配置方式可以实现简单的负载均衡效果，将流量分散到多个服务器上，减轻单个服务器的负载压力。同时，如果其中一个服务器不可用，DNS服务器将不再返回该服务器的IP地址，从而实现故障容错。</strong><br>需要注意的是，这种简单的轮询方式并不能完全保证负载均衡，因为DNS服务器无法感知服务器的实际负载情况。在实际应用中，可能需要结合其他负载均衡技术和算法，如权重设置、健康检查等，以达到更精确的负载均衡效果。</li>\n<li>使用负载均衡器时，<strong>要用负载均衡器的IP地址代替Web服务器的实际地址注册到DNS服务器上</strong></li>\n<li>对HTTP规格进行扩展，<strong>在HTTP头部字段中加上用来判断相关性的信息，这种信息俗称Cookie</strong>。这样，负载均衡器就可以通过这些信息来作出判断，将一系列相关的请求发送到同一台Web服务器，对于不相关的请求则发送到负载较低的服务器了。</li>\n<li><strong>代理：一种介于客户端和Web服务器之间，对访问操作进行中转的机制</strong>。代理（Proxy）本来的意思并不是“转发”消息。而是先把消息收下来，然后“伪装”成原始客户端向Web服务器发出访问请求。</li>\n<li>缓存服务器是一台通过代理机制对数据进行缓存的服务器。</li>\n<li><strong>缓存服务器和负载均衡器一样，需要代替Web服务器被注册到DNS服务器中</strong>。</li>\n<li><strong>将缓存服务器的代理机制放在客户端一侧，就是代理的原型，也就是现在所说的正向代理（forward proxy）</strong>.正向代理除了缓存这一作用，还有一个作用就是用来实现防火墙。<strong>代理在转发过程中可以查看请求的内容，所以可以根据内容判断是否允许访问</strong>。</li>\n<li><strong>为解决正向代理的种种弊端，产生了正向代理的改良版—反向代理（reverse proxy）。服务器端的缓存服务器采用的正是这种方式，这种方式称为反向代理。</strong></li>\n<li>缓存服务器判断转发目标的方法还有一种，俺就是查看请求消息的包头部。因为包的IP头部中包含接收方IP地址，只要知道了这个地址，就知道用户要访问哪台服务器了。这种方法称为<strong>透明代理（transparent proxy）</strong>.透明代理集合了正向代理和反向代理的优点。使用透明代理时，<strong>用户不会察觉到代理的存在，也不会注意到HTTP消息是如何被转发的，因此大家更倾向于将透明代理说成是缓存</strong>.最近有很多场合中已经将透明代理直接叫做“缓存”而不是“代理”了。</li>\n<li>缓存服务器部署在服务器端还是客户端，其效果是又差别的。</li>\n</ol>\n<ul>\n<li>当缓存服务器放在服务器端时，可以减轻Web服务器的负载，但无法减少互联网中的流量。</li>\n<li>当缓存服务器部署在客户端时，可以减少流量， 但是Web服务器运营商无法管理缓存服务器。<blockquote>\n<p>因此，这两种部署缓存服务器的方式各有利弊，但也有一种方式能够集合两者的有点。那就是Web服务器运营者和网络运营商签约，将可以自己控制的缓存服务器放在客户端的运营商处</p>\n</blockquote>\n</li>\n</ul>\n<ol start=\"68\">\n<li>即便减少了数量，作为一个Web服务器运营者，如果自己和这些运营商签约并部署缓存服务器，无论是费用还是精力都是吃不消的。为了解决这个问题，一些专门从事相关服务的厂商出现了，他们来部署缓存服务器，并租借给Web服务器运营者。这种服务称为<strong>内容分发服务</strong></li>\n<li>内容分发服务也叫CDS（Content Delivery Service）。（现在更常用的名称叫CDN（Content Delivery Network 或 Content Distribution Network））<br>  内容分发服务（Content Delivery Service，CDS），也称为内容分发网络（Content Delivery Network，CDN），是一种用于提供高效、可靠的内容分发和传输的网络架构。<br>  CDN的主要目标是将内容（如网页、图片、视频、文件等）快速、可靠地传送给用户，以提供更好的用户体验和性能优化。<strong>它通过在全球分布的边缘服务器上缓存和分发内容，使用户可以从离其较近的服务器获取内容</strong>，从而减少了传输延迟和网络拥塞问题。<br>  下面是CDN的工作原理：<ol>\n<li>内容缓存和分发：CDN在全球各地设置了多个边缘服务器节点，这些节点分布在不同的地理位置，覆盖范围广。原始内容提供商（如网站、媒体服务提供商等）将内容上传到CDN的服务器上，这些服务器上的存储称为缓存。</li>\n<li>请求路由：当用户请求访问特定内容时，请求将被路由到距离用户最近的CDN节点，而不是原始服务器。这个选择过程通常基于网络拓扑、地理位置、负载情况等因素。</li>\n<li>缓存命中：如果请求的内容已经存在于CDN节点的缓存中，CDN节点将立即响应请求并将内容传输给用户。这样可以大大减少从原始服务器获取内容的时间和网络延迟。</li>\n<li>内容更新和失效：CDN节点定期从原始服务器获取最新的内容更新。当内容发生更改或失效时，CDN节点将刷新缓存，并在下一次请求时从原始服务器获取更新后的内容。</li>\n<li>负载均衡和故障容错：CDN通过在多个节点上分发请求，实现负载均衡，使得流量能够均匀分布到不同的服务器上。如果某个节点发生故障或不可用，其他节点可以接管请求，保证服务的连续性。<br>  通过使用CDN，内容提供商可以提供更快速、可靠的内容访问体验，减少网络拥塞和延迟，并减轻源服务器的负载压力。同时，CDN还提供了许多其他功能，如安全性增强、缓存控制、带宽优化、动态内容加速等。<br>  需要注意的是，尽管现在更常用的术语是CDN（Content Delivery Network），但CDS（Content Delivery Service）也可以用来指代相同的概念和技术。</li>\n</ol>\n</li>\n<li><strong>缓存内容的更新方法会影响缓存服务器的效率</strong>，要改善这一点，有一种方法是<strong>让Web服务器在原始数据发生更新时，立即通知缓存服务器</strong>，使得缓存服务器上的数据一直保持最新状态</li>\n<li>多任务：操作系统提供的一种功能，可以让多个任务（程序）同时运行。实际上，一个处理器在某一个瞬间只能运行一个任务，但通过短时间内在不同的任务间切换，看起来就好像是同时运行多个任务一样。有些操作系统称之为“多进程”</li>\n<li><strong>多任务和多线程的区别在于任务和线程的区别</strong>。在操作系统内部，任务是作为单独的程序来对待的，而线程则是一个程序中的一部分。</li>\n<li>协议栈的IP模块会检查IP头部</li>\n</ol>\n<ul>\n<li>判断是不是发给自己的</li>\n<li>判断网络包是否经过分片</li>\n<li>将包转交给TCP模块或UDP模块</li>\n</ul>"},{"title":"哈工程复试笔记","date":"2022-03-15T22:27:10.000Z","declare":true,"toc":1,"_content":"### 1.规范化问题\n#### 1.1 求任意属性集的闭包<!--more-->\n- 题意: $(A->B,B->C,D->E)$\n解: $A^+= ABC$\n\n#### 1.2 求候选码\n- 题意: $U=${$A,B,C,D,E$} $F=${$A->D,E->D,D->B,BC->D,DC->A$}\n解: $L:CE$\n    $R:$\n    $N:$\n    $LR:ABD$\n分析:$R$中的肯定不能作为候选码，$L+N$一定属于候选码的子集，求${(L+R)}^+$看是否等于U，如果不等再慢慢的从LR中去添加。\n对于本题${(CE)}^+=CEDBA=U$,**所以本题中的候选码为$CE$**.\n\n---\n\n- 题意: $U=${$A,B,C,D,E,G$} $F=${$BE->G,BD->G,CD->A,CE->G,CDE->AB,BC->A,B->D$}\n解: $L:CE$\n    $R:AG$\n    $N:$\n    $LR:BD$\n分析:${(CE)}^+=CEG≠U$,所有CE不是候选码。${(CEB)}^+=CEBGAD=U$，**所以$BCE$是候选码，同理$CDE$也是。**\n**总结**：找出只在左侧，右侧，未出现，左右都出现的。其中只出现在右侧的绝不可能成为候选码，只出现在左侧的加未出现的一定是候选码的一部分，这时候通过求闭包找出候选码。注意候选码可能并不唯一。\n\n\n#### 1.3 判断规范化程度\n1NF ${\\Rightarrow}^{消除非主属性对码的部分依赖}$2NF ${\\Rightarrow}^{消除非主属性对码的传递依赖}$3NF ${\\Rightarrow}^{消除主属性对不包含它的码的部分传递依赖}$BCNF\n**如果都是主属性，至少是3NF**\n**如果一个关系模式的候选码是单属性，那么肯定不存在对码的部分依赖**\n方法：先求候选码得出主属性和非主属性，然后按照定义判断（部分依赖的定义背住）\n\n- 题意: $U=${$A,B,C,D,E,G$} $F=${$BE->G,BD->G,CD->A,CE->G,CDE->AB,BC->A,B->D$}\n解: 主码$BCE$和$CDE$，主属性BCDE,非主属性AG。存在非主属性G对主码BCE的部分函数依赖，所以属于1NF.\n\n---\n\n- 题意: $U=${$A,B,C,D,E$} $F=${$A->C,C->D,B->C,DE->C,CE->A$}\n解: 主码$BE$,存在非主属性C对主码BE的部分函数依赖，所以属于1NF.\n\n#### 1.4 求最小函数依赖集\n- 题意: $U=${$A,B,C,D,E,G$} $F=${$BE->G,BD->G,CD->A,CE->G,CDE->AB,BC->A,B->D$}\n解: 第一步：$F=${$BE->G,BD->G,CD->A,CE->G,CDE->A,CDE->B,BC->A,B->D$}\n第二步：去除冗余的依赖\n对于$BE->G$：${(BE)}^+=BEDG$，即$G\\in{(BE)}^+$，所哟$BE->G$是冗余函数依赖，去除。\n得到：$F=${$BD->G,CD->A,CE->G,CDE->B,B->D$}\n第三步：判断依赖得左部是否有冗余的属性（左部只有一个的就不用看了）\n最终得到：$F_{min}=${$B->G,CD->A,CE->G,CDE->B,B->D$}\n即最小函数依赖集：$F_{min}=${$BG,CDA,CEG,CDEB,BD$}\n\n---\n\n- 题意: $U=${$A,B,C,D$} $F=${$A->CD,B->CD,C->D,D->C$}\n解: 第一步：$F=${$A->C,A->D,B->C,B->D,C->D,D->C$}\n第二步：去除冗余的依赖\n得到：$F=${$A->D,B->D,C->D,D->C$}**(注意答案并不唯一)**\n**第三步：判断依赖得左部是否有冗余的属性（左部只有一个的就不用看了）**\n最终得到：$F_{min}=${$A->D,B->D,C->D,D->C$}\n即最小函数依赖集：$F_{min}=${$AD,BD,CD$}\n\n#### 1.5 保持函数依赖分解为3NF\n**步骤:**\n第一步：求出最小函数依赖集\n第二步：是否包含所有属性\n第三步：相同左部合并\n- 题意: $U=${$A,B,C,D$} $F=${$A->CD,B->CD,C->D,D->C$}\n解：最小函数依赖集：$F_{min}=${$A->D,B->D,C->D,D->C$}\n相同左部合并得到：$F_{min}=${$AD,BD,CD$}\n\n---\n\n#### 1.6 判断分解后的关系模式是否保持函数依赖\n**如果F上的每一个函数依赖都在其分解后的某一个关系上成立，则这个分解是保持依赖的（这是一个充分条件）**\n\n#### 1.7 保持函数依赖和无损连接性分解为3NF\n**步骤:**\n第一步：先分解为保持依赖的3NF\n第二步：查看是否包含候选码\n- 题意：$F=${$A->B,B->D,C->DE,D->CE$}\n解：$F=${$A->B,B->D,C->D,D->C,D->E$}\n候选码:A\n保持函数依赖的3NF：$F=${$AD,BD,CDE$}\n**包含候选码**\n    \n#### 1.8 保持无损连接分解为BCNF\n步骤:\n第一步：求出关系模式的候选码\n第二步：从依赖集中找出左部不是候选码的依赖进行分解\n- 题意：$F=${$CS->G,C->T,TH->R,HR->C,HS->R$},将其分解成BCNF并保持无损连接\n解：$U = {C,S,G,T,H,R}$\n$L:SH$\n$R:G$\n$N:$\n$LR:CTR$\n\n${SH}^+=SHRCGT=U$,**所以$SH$为候选码**\n分解：$R_1:CSG F_1:{CS->G}$那么$R_2:{CSTHR}$**(去掉F1中右部的那个)** $F_2:{C->T,TH->R,HR->C,HS->R}$\n显然此时$R_1$是BCNF;而$R_2$不是，所以对$R_2$继续分解\n\n---\n\n$R_{21}:CT$  $F_{21}:{C->T}$   那么$R_{22}:CSHR$  $F_{22}:{CH->R,HR->C,HS->R}$**(去掉$F_{21}$中右部的那个,对于左边的，看谁能推出它，就拿谁替换他)** \n显然此时$R_{21}$,$F_{21}$是BCNF;而$R_{22}$不是，所以对$R_{22}$继续分解\n\n---\n\n$R_{221}:CHR$  $F_{221}:{CH->R}$**(这个是BCNF)**\n$R_{222}:CSH$  $F_{222}:{HC->C,HS->C}$即$F_{222}:{HS->C}$\n**(HC->C属于平凡函数依赖,不用写.而HS->R->C)**\n最终分解为:$R_1,R_{21},R_{221},R_{222}$;即：$CSG,CT,CHR,CSH$\n\n#### 1.9 判断分解后的关系模式是否保持无损连接\n**$P_{197}$的11行:应当注意的是，若某个btli被更改，那么该表的li列中凡是btli的符号（不管它是否是开始找到的那些行）均应该做相应的修改**\n- 题意：$F=${$A->D,E->D,D->B,BC->D,DC->A$},$\\rho$={$AB,AE,EC,DBC,AC$}\n\n|    | A | B | C | D | E |\n| :---: | :---: |:---:|:---:|:---:|:---:|\n|  AB   |$a_1$  |$a_2$|$b_{13}$|$b_{14}$|$b_{15}$|\n|  AE   |$a_1$  |$b_{22}$|$b_{23}$|$b_{24}$|  $a_5$  |\n|  EC   |$b_{31}$  |$b_{32}$|$a_3$|$b_{34}$|$a_5$|\n|  DBC  |$b_{41}$  |$a_{2}$|$a_3$|$a_{4}$|$b_{45}$|\n|  AC   |$a_{1}$  |$b_{52}$|$a_3$|$b_{54}$|$b_{55}$|\n\n$\\Downarrow$\n\n|    | A | B | C | D | E |\n| :---: | :---: |:---:|:---:|:---:|:---:|\n|  AB   |$a_1$  |$a_2$|$b_{13}$|$a_{4}$|$b_{15}$|\n|  AE   |$a_1$  |$a_{2}$|$b_{23}$|$a_{4}$|  $a_5$  |\n|  EC   |$a_{1}$  |$a_{2}$|$a_3$|$a_{4}$|$a_5$|\n|  DBC  |$a_{1}$  |$a_{2}$|$a_3$|$a_{4}$|$b_{45}$|\n|  AC   |$a_{1}$  |$a_{2}$|$a_3$|$a_{4}$|$b_{55}$|\n\n**存在全a行，所以是保持无损连接。**\n\n### 2.查询优化树\n步骤:\n第一步：画出初始的查询优化树(自下而上)\n第二步：将选择操作“下沉”（选择先于连接或者笛卡尔积）\n\n### 3.E-R图和转化成关系模式\n对于实体型间的联系有以下不同的情况:\n(1)**一个1:1联系可以转换为一个独立的关系模式，也可以与任意一端对应的关系模式合并**。如果转换为一个独立的关系模式，则与该联系相连的各实体的码以及联系本身的属性均转换为关系的属性，每个实体的码均是该关系的候选码。<font color=\"#dd0000\">如果与某一端实体对应的关系模式合并,则需要在该关系模式的属性中加入另一个关系模式的码和联系本身的属性。</font><br /> \n(2）**一个1:n联系可以转换为一个独立的关系模式，也可以与n端对应的关系模式合并**。如果转换为一个独立的关系模式，则与该联系相连的各实体的码以及联系本身的属性均转换为关系的属性,<font color=\"#dd0000\">而关系的码为n端实体的码。</font><br /> \n(3）**一个m:n联系转换为一个关系模式**，与该联系相连的各实体的码以及联系本身的属性均转换为关系的属性，各实体的码组成关系的码或关系码的一部分。\n(4)**三个或三个以上实体间的一个多元联系可以转换为一个关系模式**。与该多元联系相连的各实体的码以及联系本身的属性均转换为关系的属性，各实体的码组成关系的码或关系码的一部分。\n(5）**具有相同码的关系模式可合并。**\n\n### 4.计算机网络\n#### 4.1计算机网络体系\n计算机网络**体系结构**分为3种：OSI体系结构（七层），TCP/IP体系结构（四层），五层体系结构。\n- **OSI体系结构**: 概念清楚，理论也比较完整，但是它既复杂又不实用。\n- **TCP/IP体系结构**:TCP/IP是一个四层体系结构，得到了广泛的运用。\n- **五层体系结构**:为了方便学习，**折中OSI体系结构和TCP/IP体系结构**，综合二者的优点，这样既简洁，又能将概念讲清楚。\n\n![计算机网络体系结构](计算机网络体系结构.png)\n\nTCP/IP与OSI最大的不同在于：OSI是一个理论上的网络通信模型，而TCP/IP则是实际运行的**网络协议**。\n\n#### 4.2五层网络体系结构概述\n- **应用层**：应用层是网络协议的最高层，主要任务**通过进程间的交互完成特定网络应用**。应用层协议定义的是**应用程序（进程）间通信和交互的规则**。\n\n\n对于不同的网络应用需要有不同的应用层协议，在互联网中的应用层协议很多，如域名系统DNS，支持万维网应用的HTTP协议，支持电子邮件的SMTP协议，等等。应用层交互的数据单元称为**报文**。\n\n- **运输层**：有时也译为传输层，它负责为两台主机中的进程提供通信服务。该层主要有以下两种协议：\n    - 传输控制协议 (Transmission Control Protocol，TCP)：提供面向连接的、可靠的数据传输服务，数据传输的基本单位是报文段（segment）；\n\n    - 用户数据报协议 (User Datagram Protocol，UDP)：提供无连接的、尽最大努力的数据传输服务，但不保证数据传输的可靠性，数据传输的基本单位是用户数据报。\n\n- **网络层**：网络层负责为分组网络中的不同主机提供通信服务，并通过选择合适的路由将数据传递到目标主机。在发送数据时，网络层把运输层产生的报文段或用户数据封装成**分组**或**包**进行传送。\n\n\n在TCP/IP体系中，由于网络层使用IP协议，因此分组也叫**IP数据报**。\n\n- **数据链路层**：数据链路层通常简称为链路层。数据链路层在两个相邻节点传输数据时，将网络层交下来的IP数据报**组装成帧**，在两个相邻节点之间的链路上传送**帧**。\n\n- **物理层**：保数据可以在各种物理媒介上进行传输，为数据的传输提供可靠的环境。\n\n以下是应用进程的数据在各层之间的传递过程中所经历的变化的简单示意图：\n![传递过程](传递过程.png)\n\n### 5.网络安全\n#### 5.1 传输层概述\n##### 5.1.1概述\nTCP隶属于传输层，所以要首先明白传输层的作用是什么，传输层能够实现**端到端**的连接。比如说我们用QQ与别人发信息，网络层能够将信息发送到对方的主机上，**主机上使用什么协议来接受这个信息就由传输层来完成**，所以传输层实现的是**进程到进程间的连接**。\n\n传输层提供的是应用程序间的逻辑通信，也就是说它向高层(应用层)屏蔽了下面网络层的细节，使应用程序看起来好像是在传输层之间沿着水平方向传输数据，但事实上两者之间并没有这样一条实际的物理连接。\n\n##### 5.1.2功能\n- 网络层提供了**点到点**的连接，而传输层提供了**端到端**的服务，也就是进程间的通信；\n- 网络层提供的是**不可靠**的连接，传输层能够实现**可靠**的传输；\n\n##### 5.1.3协议\n- TCP(Transmission Control Protocol) 传输控制协议\n- UDP(User Datagram Protocol) 用户数据报协议\n\n##### 5.1.4传输层和应用层的关系\n###### 5.1.4.1端口\nTCP/IP传输层用一个16位端口号(0~65535)来标识一个端口，但是注意，端口号只具有本地意义，不同计算机的相同端口号没有关联，0一般不用，所以允许有65535个不同的端口号。\n\n两个计算机的进程要实现通信，不仅必须知道对方的IP地址(为了找到对方的计算机)，而且还要知道对方的端口号(为了找到对方计算机中的应用程序)\n\n**问：怎么理解端口？**\n在网络技术中，端口(Port)大致有两种意思：\n1. 硬件端口，也就是设备间交互的接口，是物理意义上的端口，比如集线器，交换机等设备的接口；\n2. 软件端口，指的是应用层的的进程和运输层进行层间交互的一种地址，是逻辑意义上的端口，一般指的是TCP/IP协议中的端口。正是这种端口，所有传输层实现的是端到端的通信；\n\n在TCP/IP协议中，用\"源IP地址、目的IP地址、源端口号、目的端口号、协议号\"这五部分组成一个套接字，来标识一次通信；\n\n- 一个进程可以绑定多个端口号，因为一个进程可以有很多线程或者说是子进程等，这每一个都对应一个端口号，所以一个进程可以绑定多个端口号；\n- 但是一个端口号不可以被多个进程绑定，每一个端口号都与唯一的进程对应，if有多个了，那通信不就乱了套了吗；\n\n一个端口号一个进程，一个进程可以多个端口；\n\n###### 5.1.4.2端口号分类\n- 公认端口：0~1023，明确与某种服务绑定，比如各种协议；\n- 注册端口：1024~65535：松散的绑定一些服务，也就是有许多服务绑定这些端口。\nTCP/UDP加上特定的端口号就可以表示应用层的某个协议；\n**问：知道哪些常用的端口号**\n- TCP+20/21: ftp协议(文件传输协议)；\n- TCP+22: ssh协议(专门为远程登录提供的安全性协议)\n- TCP+25: SMTP协议(简单邮件传输协议)\n- TCP/UDP+53: DNS协议(域名解析协议)\n- TCP+80: Http协议(超文本传输协议)\n- TCP+443: Https协议(超文本传输安全协议)\n\n#### 5.2TCP协议\n一个TCP连接不仅需要端口，还需要IP地址来确定通信的主机。所以IP首部中的发送端IP地址加上发送端端口号就形成了连接的发送端；目标端IP地址再加上接收端端口号就确定了连接的接收端。这样就唯一地确定了一个TCP连接。\n\n在TCP/IP协议中，TCP协议是基于IP协议的。**IP协议是对应于网络层的协议，它是一个不可靠的协议**。TCP协议的可靠性保证给IP协议提供了可靠环境，从而使得IP协议可以不必考虑传输的可靠性，专注于网络层的功能。这也是协议分层的初衷。\n\n**IP协议解决了数据包的路由和传输，上层的TCP就可以不再关注路由和寻址；TCP协议解决了传输的可靠性和顺序问题，上层的应用层就可以直接使用TCP协议进行数据传输，不再需要关心数据段的丢失和重复**\n\n**http是要基于TCP连接基础上的，简单的说，TCP就是单纯的简历连接，不涉及任何我们需要请求的数据；http协议使用来收发数据，就是为实际应用而来的；**\n\nTCP被认为是一种流式传输层服务。它表示TCP发送端从应用程序接收到字符流，并从这个流中提取适当的长度创建数据段，然后将其发送到网络上。TCP接收端则接收数据段，从中提取数据，若没有按序号到达还要对其进行排序，并将其作为字符流交付给接收端应用程序。这样就完成了数据的传输。\n\n下图是一张典型的TCP面向流的传输\n![TCP面向流的传输](TCP面向流的传输.png)\n\n**问：TCP怎样实现可靠传输？**\nTCP采用了很多手段来保证可靠传输\n\n1. 连接管理机制：在传输数据前需要进行建立连接,也就是三次握手，在数据传送完后还需要释放连接，也就是四次挥手。\n2. 数据分段：TCP以报文段为单位进行发送，在建立TCP连接的时候，两端协商TCP报文段中的数据字段(也称为数据包)的最大长度(MSS);其长度加上首部长度就是整个TCP报文段的长度；\n3. 校验和：提供了一种简单的校验，如果收到段的校验和和原来的有差别，那接收方就会丢掉这个报文段；\n4. 序列号：TCP给发送的数据包的编号，如果接收端收到乱序后会进行重新排序，收到重复的也会进行丢弃；\n5. 确认应答：接收方收到报文后会回复确认(累计确认：对所有收到的按序的只确认最后，确认号之前的数据已经全部收到了)；\n6. 重发控制：TCP发出一个报文段后，就会启动一个定时器，等接收方确认这个报文段，如果不能及时收到确认，将重发这个报文段；\n7. 流量控制：通信的双方都有固定大小的缓冲区，TCP的接收端只允许发送端发送接收端缓冲区能接纳的数据。当接收方来不及处理发送方的数据，就把窗口缩小，并把窗口值告诉发送端（提示发送方降低发送的速率，防止包丢失）是利用滑动窗口来实现；\n8. 拥塞控制：当网络产生拥堵时，减少数据的发送；主要是通过拥塞窗口来实现；(慢开始和拥塞避免；快重传和快恢复)；\n\n#### 5.3网安概念注解\n- [特洛伊木马（Trojan Horse）](https://zh.wikipedia.org/wiki/%E7%89%B9%E6%B4%9B%E4%BC%8A%E6%9C%A8%E9%A9%AC_(%E7%94%B5%E8%84%91))简称木马，在计算机领域中指的是一种后门程序，是黑客用来盗取其他用户的个人消息，甚至是远程控制对方的电子设备而加密制作，然后通过传播或者骗取目标执行该程序，以达到盗取密码等各种数据资料等目的。**和病毒相似**，木马程序有很强的隐秘性，会随著操作系统启动而启动。\n- TCP握手协议相关概念\n    - 半连接\n    在三次握手过程中，服务器发送SYN-ACK之后，收到客户端的ACK之前的TCP连接称为半连接(half-open connect).此时服务器处于Syn_RECV状态.当收到ACK后，服务器转入ESTABLISHED状态.\n\n    - 半连接队列\n    在三次握手协议中，服务器维护一个半连接队列，存放半连接。该队列为每个客户端的SYN包（syn=j）开设一个条目，该条目表明服务器已收到SYN包，并向客户发出确认，正在等待客户的ACK确认包。这些条目所标识的连接在服务器处于Syn_RECV状态，当服务器收到客户的确认包时，删除该条目，服务器进入ESTABLISHED状态。\n\n    - Backlog参数\n    表示半连接队列的最大容纳数目。\n\n    - SYN-ACK 重传次数\n    服务器发送完SYN－ACK包，如果未收到客户确认包，服务器进行首次重传，等待一段时间仍未收到客户确认包，进行第二次重传，如果重传次数超过系统规定的最大重传次数，系统将该连接信息从半连接队列中删除。注意，每次重传等待的时间不一定相同。\n\n    - 半连接存活时间\n    是指半连接队列的条目存活的最长时间，也即服务从收到SYN包到确认这个报文无效的最长时间，该时间值是所有重传请求包的最长等待时间总和。有时我们也称半连接存活时间为Timeout时间、SYN_RECV存活时间。\n\n- SYN攻击\n    - SYN攻击属于DOS攻击的一种，它利用TCP协议缺陷，通过发送大量的半连接请求，耗费CPU和内存资源。\n    - SYN攻击利用TCP协议三次握手的原理，大量发送伪造源IP的SYN包也就是伪造第一次握手数据包，服务器每接收到一个SYN包就会为这个连接信息分配核心内存并放入半连接队列，如果短时间内接收到的SYN太多，半连接队列就会溢出，操作系统会把这个连接信息丢弃造成不能连接，当攻击的SYN包超过半连接队列的最大值时，正常的客户发送SYN数据包请求连接就会被服务器丢弃。目标系统运行缓慢，严重者引起网络堵塞甚至系统瘫痪。每种操作系统半连接队列大小不一样所以抵御SYN攻击的能力也不一样。\n    - Syn攻击是一个典型的DOS攻击。检测SYN攻击非常的方便，当你在服务器上看到大量的半连接状态时，特别是源IP地址是随机的，基本上可以断定这是一次SYN攻击.在Linux下可以如下命令检测是否被Syn攻击\n\n- [空连接](https://baike.baidu.com/item/%E7%A9%BA%E8%BF%9E%E6%8E%A5)\n使用命令 `net use \\\\*.*.*.*（IP地址）\\ipc$ \"\" /user:\"\"` 就可以简单地和目标建立一个空连接（需要目标开放**ipc$**）。\n空连接就是不用密码和用户名的IPC连接，在Windows下，它是用Net命令来实现的．\n\n- [Unicode漏洞](https://baike.baidu.com/item/Unicode%E6%BC%8F%E6%B4%9E/3791874)\nUnicode漏洞是攻击者可通过IE浏览器远程运行被攻击计算机的cmd.exe文件，从而使该计算机的文件暴露，且可随意执行和更改文件的漏洞。\n对策\n    - (1)为避免该类攻击，建议下载最新补丁\n    - (2)安装[IIS](https://zhuanlan.zhihu.com/p/145430397) Lockdown和URL Scan来加固系统，从而避免该类攻击。\n    - (3)安装Windows 2000的Service Pack 2以上的版本。\n\n- [IIS](https://zhuanlan.zhihu.com/p/145430397)\n    - IIS是缩写，全称Internet Information Services ( IIS,互联网信息服务 ),是由微软公司提供的基于运行Microsoft Windows的互联网基本服务。\n    - IIS是指World Wide Web server服务，IIS是一种Web（网页）服务组件，专业的说，IIS可以赋予一部主机电脑一组以上的IP地址，而且还可以有一个以上的域名作为Web网站。做过服务器配置的都应该知道IIS.** 制作好了网站怎么才能让别人浏览，就是通过网站服务器来实现的。IIS只是网站服务器的一种而已。**\n    - Internet Information Service（IIS）是windows开设web网页服务的组件，用来搭载网站运行程序的平台的。还能提供FTP，SMTP等服务。\n\n- [HTTP协议](https://www.cnblogs.com/ranyonsue/p/5984001.html)\n    - HTTP协议是Hyper Text Transfer Protocol（超文本传输协议）的缩写,是用于从万维网（WWW:World Wide Web ）服务器传输超文本到本地浏览器的传送协议。\n\n    - HTTP是一个基于TCP/IP通信协议来传递数据（HTML 文件, 图片文件, 查询结果等）。\n\n    - HTTP是一个属于应用层的面向对象的协议，由于其简捷、快速的方式，适用于分布式超媒体信息系统。它于1990年提出，经过几年的使用与发展，得到不断地完善和扩展。目前在WWW中使用的是HTTP/1.0的第六版，HTTP/1.1的规范化工作正在进行之中，而且HTTP-NG(Next Generation of HTTP)的建议已经提出。\n\n    - HTTP协议工作于客户端-服务端架构为上。浏览器作为HTTP客户端通过URL向HTTP服务端即WEB服务器发送所有请求。Web服务器根据接收到的请求后，向客户端发送响应信息。\n\n- FTP协议\n    - FTP（File Transfer Protocol，文件传输协议） 是 TCP/IP 协议组中的协议之一。FTP协议包括两个组成部分，其一为FTP服务器，其二为FTP客户端。其中FTP服务器用来存储文件，用户可以使用FTP客户端通过FTP协议访问位于FTP服务器上的资源。在开发网站的时候，通常利用FTP协议把网页或程序传到Web服务器上。此外，由于FTP传输效率非常高，在网络上传输大的文件时，一般也采用该协议。\n    - 默认情况下FTP协议使用TCP端口中的 20和21这两个端口，其中20用于传输数据，21用于传输控制信息。但是，是否使用20作为传输数据的端口与FTP使用的传输模式有关，如果采用主动模式，那么数据传输端口就是20；如果采用被动模式，则具体最终使用哪个端口要服务器端和客户端协商决定。\n\n- gopher协议\ngopher协议是一个在http协议诞生前用来访问Internet资源的协议可以理解为http协议的前身或简化版，虽然很古老但现在很多库还支持gopher协议而且gopher协议功能很强大。\n它可以实现多个数据包整合发送，然后gopher服务器将多个数据包捆绑着发送到客户端，这就是它的菜单响应。比如使用一条gopher协议的curl命令就能操作mysql数据库或完成对redis的攻击等等。gopher协议使用tcp可靠连接。\n\n- MS SQL-SERVER空口令入侵\n在微软的MSSQL7.0以下的版本在默认安装时其SA(System Administrator)口令为空，所开端口为1433，一个入侵者只需要使用一个MS SQL客户端与SA口令为空的服务器连接就可以获得System的权限。\n\n- [防止Access数据库被非法下载的方法](http://www.it3721.com/data/2010/0913/381.html)\n    - 给数据库起一个随机复杂的名称\n    - \"#\"式\n    - asp式\n    - asa式\n\n- SQL注入攻击\nSQL注入攻击是黑客对数据库进行攻击的常用手段之一。随着B/S模式应用开发的发展，使用这种模式编写应用程序的程序员也越来越多。但是由于程序员的水平及经验也参差不齐，相当大一部分程序员在编写代码的时候，没有对用户输入数据的合法性进行判断，使应用程序存在安全隐患。用户可以提交一段数据库查询代码，根据程序返回的结果，获得某些他想得知的数据，这就是所谓的SQL Injection，即SQL注入。\n\n- [ICMP（Internet Control Message Protocol）Internet控制报文协议](https://baike.baidu.com/item/ICMP)。它是TCP/IP协议簇的一个子协议，用于在IP主机、路由器之间传递控制消息。控制消息是指网络通不通、主机是否可达、路由是否可用等网络本身的消息。这些控制消息虽然并不传输用户数据，但是对于用户数据的传递起着重要的作用。\n\n- PC机的意思就是个人计算机。\n\n- **防火墙（英语：Firewall）**技术是通过有机结合各类用于安全管理与筛选的软件和硬件设备，帮助计算机网络于其内、外网之间构建一道相对隔绝的保护屏障，以保护用户资料与信息安全性的一种技术。\n\n- [land攻击](https://www.wangan.com/discuss/wikis/644)\nLAND 攻击（局域网拒绝服务攻击，英语：Local Area Network Denial attack，缩写：LAND attack，是拒绝服务攻击（DoS 攻击）的一种，通过发送精心构造的、具有相同源地址和目标地址的欺骗数据包，致使缺乏相应防护机制的目标设备瘫痪。这种攻击方法最早在 1997 年被某人以 “m3lt” 的名称提出，并于多年之后的 Windows Server 2003、[Windows XP SP2 等操作系统中重现。\n\n- [Smurf攻击](https://blog.csdn.net/wdkirchhoff/article/details/45560513)\nSmurf 攻击是分布式拒绝服务 (DDoS) 攻击的一种形式，该攻击会导致计算机网络停止服务。\n原理：攻击者向网络广播地址发送ICMP包，并将回复地址设置成受害网络的广播地址，通过使用ICMP应答请求数据包来淹没受害主机的方式进行，最终导致该网络的所有主机都对次ICMP应答请求作出答复，导致网络阻塞。更加复杂的Smurf攻击攻击将源地址改为第三方受害者，最终导致第三方崩溃。\n\n- UDP-Flood攻击\nUDP洪泛是一种拒绝服务攻击，其中大量的用户数据报协议（UDP）数据包被发送到目标服务器，目的是压倒该设备的处理和响应能力。防火墙保护目标服务器也可能因UDP泛滥而耗尽，从而导致对合法流量的拒绝服务。\n\n- [Teardrop攻击](https://baike.baidu.com/item/Teardrop%E6%94%BB%E5%87%BB/5957505)\nTeardrop攻击是一种畸形报文攻击。是基于UDP的病态分片数据包的攻击方法，其工作原理是向被攻击者发送多个分片的IP包（IP分片数据包中包括该分片数据包属于哪个数据包以及在数据包中的位置等信息），某些操作系统收到含有重叠偏移的伪造分片数据包时将会出现系统崩溃、重启等现象。\n\n- Hotfix是微软公司研发的一个程序，针对某一个具体的系统漏洞或安全问题而发布的专门解决该漏洞或安全问题，通常称为修补程序。\n\n- [冲击波病毒](https://baike.baidu.com/item/%E5%86%B2%E5%87%BB%E6%B3%A2%E7%97%85%E6%AF%92/11036738)\n冲击波病毒(Worm.Blaster)是利用在2003年7月21日公布的RPC漏洞进行传播的，该病毒于当年8月爆发。病毒运行时会不停地利用IP扫描技术寻找网络上系统为Win2000或XP的计算机，找到后就利用DCOM/RPC缓冲区漏洞攻击该系统，一旦攻击成功，病毒体将会被传送到对方计算机中进行感染，使系统操作异常、不停重启、甚至导致系统奔溃。另外，该病毒还会对系统升级网站进行拒绝服务攻击，导致该网站堵塞，使用户无法通过该网站升级系统。只要是计算机上有RPC服务并且没有打安全补丁的计算机都存在有RPC漏洞，具体涉及的操作系统是：Windows 2000\\XP\\Server 2003\\NT4.0。\n\n- [RPC漏洞](https://baike.baidu.com/item/RPC%E6%BC%8F%E6%B4%9E)是远程过程调用的漏洞。\n\n- “红色代码”病毒是2001年7月15日发现的一种网络蠕虫病毒，感染运行Microsoft IIS Web服务器的计算机。其传播所使用的技术可以充分体现网络时代网络安全与病毒的巧妙结合，将网络蠕虫、计算机病毒、木马程序合为一体，开创了网络病毒传播的新路，可称之为划时代的病毒。如果稍加改造，将是非常致命的病毒，可以完全取得所攻破计算机的所有权限并为所欲为，可以盗走机密数据，严重威胁网络安全。\n\n- **TCSEC**(Trusted Computer System Evaluation Criteria; commonly called the \"Orange Book\")美国可信计算机系统评价标准是计算机系统安全评估的第一个正式标准，具有划时代的意义。该准则于1970年由美国国防科学委员会提出，并于1985年12月由美国国防部公布。TCSEC最初只是军用标准，后来延至民用领域。TCSEC将计算机系统的安全划分为4个等级、7个级别。\n\n-[包过滤技术](https://baike.baidu.com/item/%E5%8C%85%E8%BF%87%E6%BB%A4%E6%8A%80%E6%9C%AF/4184498)\n基于协议特定的标准，路由器在其端口能够区分包和限制包的能力叫包过滤（Packet Filtering）。其技术原理在于加入IP过滤功能的路由器逐一审查包头信息，并根据匹配和规则决定包的前行或被舍弃，以达到拒绝发送可疑的包的目的。过滤路由器具备保护整个网络、高效快速并且透明等优点，同时也有定义复杂、消耗CPU资源、不能彻底防止地址欺骗、涵盖应用协议不全、无法执行特殊的安全策略并且不提供日志等局限性。\n\n- [包过滤防火墙](https://baike.baidu.com/item/%E5%8C%85%E8%BF%87%E6%BB%A4%E9%98%B2%E7%81%AB%E5%A2%99/327991)\n    - 包过滤防火墙是用一个软件查看所流经的数据包的包头（header），由此决定整个包的命运。它可能会决定丢弃（DROP）这个包，可能会接受（ACCEPT）这个包（让这个包通过），也可能执行其它更复杂的动作。\n    - 包过滤是一种内置于Linux内核路由功能之上的防火墙类型，其防火墙工作在网络层和传输层。\n\n- [状态检测技术](https://baike.baidu.com/item/%E7%8A%B6%E6%80%81%E6%A3%80%E6%B5%8B%E6%8A%80%E6%9C%AF/6338299)\n状态检测技术是防火墙近几年才应用的新技术。传统的包过滤防火墙只是通过检测IP包头的相关信息来决定数据流的通过还是拒绝，而状态检测技术采用的是一种基于连接的状态检测机制，将属于同一连接的所有包作为一个整体的数据流看待，构成连接状态表，通过规则表与状态表的共同配合，对表中的各个连接状态因素加以识别。这里动态连接状态表中的记录可以是以前的通信信息，也可以是其他相关应用程序的信息，因此，与传统包过滤防火墙的静态过滤规则表相比，它具有更好的灵活性和安全性。\n\n- [状态检测防火墙](https://baike.baidu.com/item/%E7%8A%B6%E6%80%81%E6%A3%80%E6%B5%8B%E9%98%B2%E7%81%AB%E5%A2%99/3106862)采用了状态检测包过滤的技术，是传统包过滤上的功能扩展。\n\n- [代理防火墙](https://baike.baidu.com/item/%E4%BB%A3%E7%90%86%E9%98%B2%E7%81%AB%E5%A2%99/9570104)\n代理防火墙通过一种代理（Proxy）技术参与到一个TCP连接的全过程。从内部发出的数据包经过这样的防火墙处理后，就好像是源于防火墙外部网卡一样，从而可以达到隐藏内部网结构的作用。这种类型的防火墙被网络安全专家和媒体公认为是最安全的防火墙。\n\n- [代理服务型防火墙](https://baike.baidu.com/item/%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1%E5%9E%8B%E9%98%B2%E7%81%AB%E5%A2%99/5189462)\n代理服务型防火墙是防火墙的一种，代表某个专用网络同互联网进行通讯的防火墙，类似在股东会上某人以你的名义代理你来投票。当你将浏览器配置成使用代理功能时，防火墙就将你的浏览器的请求转给互联网；当互联网返回响应时，代理服务器再把它转给你的浏览器。代理服务器也用于页面的缓存，代理服务器在从互联网上下载特定页面前先从缓存器取出这些页面。内部网络与外部网络之间不存在直接连接。\n\n- 加密和认证\n首先我们需要区分加密和认证这两个基本概念。\n加密是将数据资料加密，使得非法用户即使取得加密过的资料，也无法获取正确的资料内容，所以数据加密可以保护数据，防止监听攻击。其重点在于数据的安全性。身份认证是用来判断某个身份的真实性，确认身份后，系统才可以依不同的身份给予不同的权限。其重点在于用户的真实性。两者的侧重点是不同的。\n\n- 公钥和私钥\n在现代密码体制中加密和解密是采用**不同的密钥**（公开密钥），也就是**非对称**密钥密码系统，每个通信方均需要两个密钥，即公钥和私钥，这两把密钥可以互为加解密。公钥是公开的，不需要保密，而私钥是由个人自己持有，并且必须妥善保管和注意保密。\n公钥私钥的原则：\n    - 一个公钥对应一个私钥。\n    - 密钥对中，让大家都知道的是公钥，不告诉大家，只有自己知道的，是私钥。\n    - 如果用其中一个密钥加密数据，则只有对应的那个密钥才可以解密。\n    - 如果用其中一个密钥可以进行解密数据，则该数据必然是对应的那个密钥进行的加密。\n---\n\n**总结**：公钥和私钥是通过一种算法得到的一个密钥对(即一个公钥和一个私钥)，将其中的一个向外界公开，称为公钥；另一个自己保留，称为私钥。通过这种算法得到的密钥对能保证在世界范围内是唯一的。\n**公钥和私钥是成对的，它们互相解密（密钥指公钥或私钥，密钥对指公钥加私钥）。**\n**公钥和私钥都可以加密和解密。**\n**私钥数字签名，公钥验证。**\n\n- \"MYDOOM\"变种Q(Worm.Mydoom.q)病毒\n大量发送病毒邮件，浪费网络和系统资源；大量病毒垃圾邮件可能造成中小型邮件服务器极不稳定，甚致崩溃的现象；自动从网络中下载后门木马，并立即执行。\n\n- 爱虫病毒\n    - 爱虫病毒(Vbs.loveletter)，又称“我爱你”(I Love You)病毒，是一种蠕虫病毒，它与1999年的梅丽莎病毒非常相似。据称，这个病毒可以改写本地及网络硬盘上面的某些文件。用户机器染毒以后，邮件系统将会变慢，并可能导致整个网络系统崩溃，当时在全球更是造成了百亿美元的损失。 \n    - 2000年5月4日，一种名为“我爱你”的电脑病毒开始在全球各地迅速传播，短短的一两天内就侵袭了100多万台计算机。这个病毒是通过Microsoft Outlook电子邮件系统传播的，邮件的主题为“I LOVE YOU”，并包含一个附件。一旦在Microsoft Outlook里打开这个邮件，系统就会自动复制并向地址簿中的所有邮件电址发送这个病毒。\n\n- [计算机病毒与蠕虫](https://www.kaspersky.com.cn/resource-center/threats/computer-viruses-vs-worms)\n    - 计算机病毒与蠕虫的一个重要区别是，病毒需要借助活动的宿主程序或已被感染的活动操作系统才能运行、造成破坏并感染其他可执行文件或文档；而蠕虫是独立的恶意程序，可以通过计算机网络进行自我复制和传播，不需要人工干预。\n    - 病毒通常附加到可执行文件或 Word 文档。它们多通过 P2P 文件共享、受感染的网站和电子邮件附件下载进行传播。病毒侵入系统后，会保持休眠状态，直到被感染的宿主文件或程序被激活，反过来再激活病毒，使其能够在您的系统上运行和复制。\n    - 相反，蠕虫无需借助宿主程序即可运行、自我复制和传播。一旦蠕虫侵入系统（通常通过网络连接或以下载的文件形式），就会立即自行创建多个副本，并通过网络或互联网连接传播，感染网络上任何没有得到充分保护的计算机和服务器。网络蠕虫的每个后续副本也可以自我复制，因此可以通过互联网和计算机网络非常迅速地传播感染。\n\n- [Worm.Klez](https://baike.baidu.com/item/Worm.Klez)\n一个通过INTERNET以及EMAIL附件传播感染的蠕虫类病毒，本身是一个WINDOWS PE格式的可执行程序，大约在57-65K之间，是用MICROSOFT VISUALC++编写，它不仅在本地的网络散布并且通过电子邮件消息传播，还会在WINDOWS临时文件夹下建立一个名字为以字母K开头的可执行文件，把“ Win32.Klez ”病毒写进去，并且启动该病毒。\n\n- [IP碎片攻击](https://baike.baidu.com/item/IP%E7%A2%8E%E7%89%87%E6%94%BB%E5%87%BB/15686325)\nIP碎片攻击指的是一种计算机程序重组的漏洞。链路层具有最大传输单元MTU这个特性，它限制了数据帧的最大长度，不同的网络类型都有一个上限值。以太网的MTU是1500，你可以用 netstat -i 命令查看这个值。如果IP层有数据包要传，而且数据包的长度超过了MTU，那么IP层就要对数据包进行分片(fragmentation)操作，使每一片的长度都小于或等于MTU。我们假设要传输一个UDP数据包，以太网的MTU为1500字节，一般IP首部为20字节，UDP首部为8字节，数据的净荷(payload)部分预留是1500-20-8=1472字节。如果数据部分大于1472字节，就会出现分片现象。\n\n- **ICMP**的全称是Internet Control Message Protocol（网间报文控制协议），它是IP不可分割的一部分，用来提供错误报告。一旦发现各种错误类型就将其返回原主机，我们平时最常见的ping命令就是基于ICMP的。\n\n- [分组密码与流密码](https://blog.csdn.net/zhangyixing_mj/article/details/121721761)\n    - 分组加密\n        - 明文被分为固定长度的块（即为分组），对每个分组用相同的算法和密钥加解密。\n        - 分组长度：64b，128b，256b。明文不是上述整数倍时，在其后填充。填充内容可自选，一般0。而且填充也可掩盖真实长度。\n        - 密文长度与明文长度相同：①密文长度不能小于明文长度，因为这样就会出现不同明文产生相同密文的情况，就是不可逆的了，解密时不行；②密文长度可以大于明文长度，但是这样会使效率降低。所以一般都是选择二者相同长度。\n\n    - 流加密\n        - 每次加密数据流的一位或一字节，连续处理。异或\n        - 算法结构：\n            - 伪随机序列\n            - 明文与密钥流逐位异或\n        - 设计上的考虑\n            - 密钥流周期要长。\n            - 统计上随机。\n            - 密钥流的随机性与密钥长度相关。\n        - 不同的明文要用不同的密钥\n\n- [唯密文攻击](https://zh.wikipedia.org/wiki/%E5%94%AF%E5%AF%86%E6%96%87%E6%94%BB%E5%87%BB)\n在[密码学](https://zh.wikipedia.org/wiki/%E5%AF%86%E7%A0%81%E5%AD%A6)或[密码分析](https://zh.wikipedia.org/wiki/%E5%AF%86%E7%A0%81%E5%88%86%E6%9E%90)中，唯密文攻击是一种攻击模式，指的是在仅知已加密文字（即[密文](https://zh.wikipedia.org/wiki/%E5%AF%86%E6%96%87)）的情况下进行攻击。此方案可同时用于攻击[对称密码体制](https://zh.wikipedia.org/wiki/%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86)和[非对称密码体制](https://zh.wikipedia.org/wiki/%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86)。\n\n- [PGP加密](https://baike.baidu.com/item/PGP/212244)\nPGP（英语：Pretty Good Privacy，中文翻译“优良保密协议”）是一套用于消息加密、验证的应用程序，采用[IDEA](https://baike.baidu.com/item/IDEA)的散列算法作为加密与验证之用\nPGP加密由一系列散列、数据压缩、对称密钥加密，以及公钥加密的算法组合而成。每个步骤支持几种算法，可以选择一个使用。每个公钥均绑定唯一的用户名和/或者E-mail地址。这个系统的第一个版本通常称为可信Web或[X.509](https://baike.baidu.com/item/X.509)系统；X.509系统使用的是基于数字证书认证机构的分层方案，该方案后来被加入到PGP的实现中。当前的PGP加密版本通过一个自动密钥管理服务器来进行密钥的可靠存放。\n\n- [509](https://baike.baidu.com/item/X.509/2817050)\n    - X.509 是密码学里公钥证书的格式标准。 X.509 证书己应用在包括TLS/SSL（WWW万维网安全浏览的基石）在内的众多 Internet协议里.同时它也用在很多非在线应用场景里，比如电子签名服务。X.509证书里含有公钥、身份信息(比如网络主机名，组织的名称或个体名称等)和签名信息（可以是证书签发机构CA的签名，也可以是自签名）。对于一份经由可信的证书签发机构签名或者可以通过其它方式验证的证书，证书的拥有者就可以用证书及相应的私钥来创建安全的通信，对文档进行数字签名.\n    - 另外除了证书本身功能，X.509还附带了证书吊销列表和用于从最终对证书进行签名的证书签发机构直到最终可信点为止的证书合法性验证算法。\n    - X.509是ITU-T标准化部门基于他们之前的ASN.1定义的一套证书标准。\n\n- [CA证书](https://baike.baidu.com/item/CA%E8%AF%81%E4%B9%A6/10028741)\nCA是证书的签发机构，它是公钥基础设施（Public Key Infrastructure，PKI）的核心。CA是负责签发证书、认证证书、管理已颁发证书的机关。\n\n- [SSL协议](https://baike.baidu.com/item/ssl/320778)\nSSL(Secure Sockets Layer 安全套接字协议),及其继任者传输层安全（Transport Layer Security，TLS）是为网络通信提供安全及数据完整性的一种安全协议。TLS与SSL在传输层与应用层之间对网络连接进行加密。\n\n- [IPsec](https://baike.baidu.com/item/ipsec/2472311)\n    - **互联网安全协议（英语：Internet Protocol Security，缩写为IPsec）**，是一个协议簇，通过对IP协议的分组进行加密和认证来保护IP协议的网络传输协议簇（一些相互关联的协议的集合）。\n    - IPsec主要由以下协议组成：\n        - 一、认证头（AH），为IP数据报提供无连接数据完整性、消息认证以及防重放攻击保护；\n        - 二、封装安全载荷（ESP），提供机密性、数据源认证、无连接完整性、防重放和有限的传输流（traffic-flow）机密性；\n        - 三、安全关联（SA），提供算法和数据包，提供AH、ESP操作所需的参数。\n        - 四、密钥协议（IKE），提供对称密码的钥匙的生存和交换。\n    - IPsec协议工作在OSI模型的**第三层**，使其在单独使用时适于保护基于TCP或UDP的协议（如安全套接子层（SSL）就不能保护UDP层的通信流）。这就意味着，与传输层或更高层的协议相比，IPsec协议必须处理可靠性和分片的问题，这同时也增加了它的复杂性和处理开销。相对而言，SSL/TLS依靠更高层的TCP（OSI的第四层）来管理可靠性和分片。\n\n- [PPTP、L2TP、OpenVPN三种隧道协议的概念](https://www.jingh.top/2017/01/15/vpn/)\n    - PPTP（Point to Point Tunneling Protocol，点对点隧道协议）默认端口号：1723\n    - L2TP（Layer 2 Tunneling Protocol，第二层隧道协议）\n\n- 电子商务系统\n电子商务系统，广义上讲是商务活动中各参与方和支持企业进行交易活动的电子技术手段的集合。狭义上讲，电子商务系统则是指企业、消费者、银行、政府等在Internet和其他网络的基础上，以实现企业电子商务活动的目标，满足企业生产、销售、服务等生产和管理的需要，支持企业的对外业务协作，从运作、管理和决策等层次全面提高企业信息化水平，为企业提供具备商业智能的计算机网络系统。\n \n- [数字信封](https://baike.baidu.com/item/%E6%95%B0%E5%AD%97%E4%BF%A1%E5%B0%81/425647)\n数字信封是将对称密钥通过非对称加密（即：有公钥和私钥两个）的结果分发对称密钥的方法。数字信封是实现信息保密性验证的技术。\n数字信封是一种综合利用了对称加密技术和非对称加密技术两者的优点进行信息安全传输的一种技术。数字信封既发挥了对称加密算法速度快、安全性好的优点，又发挥了非对称加密算法密钥管理方便的优点。\n\n- Exim系统\nExim是一个MTA（Mail Transfer Agent，邮件传输代理）服务器软件，该软件基于GPL协议开发，是一款开源软件。该软件主要运行于类UNIX系统。通常该软件会与Dovecot或Courier等软件搭配使用。Exim同时也是“进出口”（Export-Import）的英文缩写。\n\n- Sniffer\nSniffer，中文可以翻译为嗅探器，也叫抓数据包软件，是一种基于被动侦听原理的网络分析方式。使用这种技术方式，可以监视网络的状态、数据流动情况以及网络上传输的信息。\n\n- 流密码算法\n流密码算法，或者叫序列密码，算法大概的原理是，每次加密都通过密钥生成一个密钥流，解密也是使用同一个密钥流，明文与同样长度的密钥流进行异或运算得到密文，密文与同样的密钥流进行异或运算得到明文。流密码算法是以“一次性密码本“为雏形演变出来的加密算法，一次性密码本算法很重要的一个特性就是密钥使用的“一次性”，来看看一次性密码本的算法原理。\n\n- IKE（网络密钥交换协议）\nIKE属于一种混合型协议，由Internet安全关联和密钥管理协议（ISAKMP）和两种密钥交换协议OAKLEY与SKEME组成。IKE创建在由ISAKMP定义的框架上，沿用了OAKLEY的密钥交换模式以及SKEME的共享和密钥更新技术，还定义了它自己的两种密钥交换方式：主模式和积极模式。\n\n- [VPN](https://zhuanlan.zhihu.com/p/164503799)\nVPN的英文全称是“VirtualPrivateNetwork”，翻译过来就是“虚拟专用网络”。顾名思义，虚拟专用网络我们可以把它理解成是虚拟出来的内部专线。\n\n- PPDR 模型\n    - PPDR 模型是在整体的安全策略的控制和指导下，综合运用防护工具（如防火墙、身份认证、加密等）的同时，利用检测工具（如漏洞评估、入侵检测系统）了解和评估系统的安全状态，通过适当的响应将系统调整到一个比较安全的状态。保护、检测和响应组成了一个完整的、动态的安全循环。\n\n    - PPDR（Policy Protection Detection Response) 的基于思想是：以安全策略为核心，通过一致性检查、流量统计、异常分析、模式匹配以及基于应用、目标、主机、网络的入侵检查等方法进行安全漏洞检测。检测使系统从静态防护转化为动态防护，为系统快速响应提供了依据。当发现系统有异常时，根据系统安全策略快速作出反应，从而达到保护系统安全的目的。\n\n- PKI\nPKI（Public Key Infrastructure）即公钥基础设施，是提供公钥加密和数字签名服务的系统，目的是为了自动管理密钥和证书，保证网上数据信息传输的机密性、真实性、完整性和不可否认性。PKI采用证书进行公钥管理，通过第三方的可信任机构，把用户的公钥和用户的其它标识信息捆绑在一起，从而在网上验证用户的身份。一个PKI系统由公钥密码技术（Public Key Cryptography）、证书认证机构（CA）、注册机构（RA）、数字证书（Digital Certificate）和相应的PKI存储库组成。\n以下介绍几个PKI相关的术语：\n    - 公钥密码技术：用户使用公钥密码技术产生密钥对，分别为公钥（public key）和私钥（private key），公钥向外界公开，私钥则自己保留。公钥与私钥互为补充，被一个密钥加密的数据，只可以用相匹配的另外一个密钥解密。\n    - 认证机构（CA）：是一个向个人、计算机或任何其它实体颁发证书的可信实体。CA受理证书服务申请，根据证书管理策略验证申请方的信息，然后用其私钥对证书进行签名，并颁发该证书给申请方。\n    - 注册机构（RA）：RA是CA的延伸，RA向CA转发证书服务申请，也向目录服务器转发CA颁发的数字证书和证书撤消列表，以提供目录浏览和查询服务。\n    - 证书撤销列表（CRL）：证书具有一定的使用期限，但是由于密钥被泄露、业务终止等原因，CA可通过撤销证书缩短证书的使用期限。一个证书一旦被撤消，证书中心就要公布CRL来声明该证书是无效的，并列出不能再使用的证书的序列号。\n\n安全网关的以下功能模块支持PKI功能：\n    - IKE VPN：建立IKE VPN时，支持PKI认证。\n    - HTTPS/SSH：使用HTTPS或者SSH方式访问安全网关时，支持PKI认证。\n\n\n\n\n\n\n\n\n\n\n### 6.数据库试卷\n#### 6.1 2005哈尔滨工程大学数据库试卷A卷\n![2005哈尔滨工程大学数据库试卷A_1](2005哈尔滨工程大学数据库试卷A_1.png)\n\n![2005哈尔滨工程大学数据库试卷A_2](2005哈尔滨工程大学数据库试卷A_2.png)\n\n\n\n\n\n\n\n\n### 7.参考文献\n1. [传输层详解](https://www.cnblogs.com/Curryxin/p/15098548.html)\n2. [计算机网络的七层结构、五层结构和四层结构](https://blog.csdn.net/sinat_40770656/article/details/113787888)\n3. [ TCP SYN洪水 (SYN Flood) 攻击原理与实现](https://cloud.tencent.com/developer/article/1802453)\n4. [MS SQL-SERVER空口令入侵漏洞](https://www.flypeng.com/shujuku/sqlserver/379.html)\n5. [防止Access数据库被非法下载的方法比较](http://www.it3721.com/data/2010/0913/381.html)\n6. [防火墙-IBM文档](https://www.ibm.com/docs/zh/i/7.3?topic=options-firewalls)\n7. [网安社区](https://www.wangan.com/discuss/wikis/315)\n8. [Hotfix热修复](https://zh.wikipedia.org/wiki/%E7%83%AD%E4%BF%AE%E5%A4%8D)\n9. [Hotfix热修复](https://baike.baidu.com/item/Hotfix/6371681)\n10. [HTTP协议](https://www.cnblogs.com/ranyonsue/p/5984001.html)\n11. [公钥和私钥的区别](https://www.cnblogs.com/moonfans/p/3939335.html)\n12. [密钥对，密钥，公钥，私钥的区分](https://blog.csdn.net/SeniorShen/article/details/102850439)\n13. [ICMP攻击和基于ICMP的路由欺骗](https://blog.51cto.com/tonghuatianshi/385867)","source":"_posts/哈工程复试笔记.md","raw":"---\ntitle: 哈工程复试笔记\ndate: 2022-03-15 22:27:10\ntags:\n    - 考研\ndeclare: true\ntoc: 1\n---\n### 1.规范化问题\n#### 1.1 求任意属性集的闭包<!--more-->\n- 题意: $(A->B,B->C,D->E)$\n解: $A^+= ABC$\n\n#### 1.2 求候选码\n- 题意: $U=${$A,B,C,D,E$} $F=${$A->D,E->D,D->B,BC->D,DC->A$}\n解: $L:CE$\n    $R:$\n    $N:$\n    $LR:ABD$\n分析:$R$中的肯定不能作为候选码，$L+N$一定属于候选码的子集，求${(L+R)}^+$看是否等于U，如果不等再慢慢的从LR中去添加。\n对于本题${(CE)}^+=CEDBA=U$,**所以本题中的候选码为$CE$**.\n\n---\n\n- 题意: $U=${$A,B,C,D,E,G$} $F=${$BE->G,BD->G,CD->A,CE->G,CDE->AB,BC->A,B->D$}\n解: $L:CE$\n    $R:AG$\n    $N:$\n    $LR:BD$\n分析:${(CE)}^+=CEG≠U$,所有CE不是候选码。${(CEB)}^+=CEBGAD=U$，**所以$BCE$是候选码，同理$CDE$也是。**\n**总结**：找出只在左侧，右侧，未出现，左右都出现的。其中只出现在右侧的绝不可能成为候选码，只出现在左侧的加未出现的一定是候选码的一部分，这时候通过求闭包找出候选码。注意候选码可能并不唯一。\n\n\n#### 1.3 判断规范化程度\n1NF ${\\Rightarrow}^{消除非主属性对码的部分依赖}$2NF ${\\Rightarrow}^{消除非主属性对码的传递依赖}$3NF ${\\Rightarrow}^{消除主属性对不包含它的码的部分传递依赖}$BCNF\n**如果都是主属性，至少是3NF**\n**如果一个关系模式的候选码是单属性，那么肯定不存在对码的部分依赖**\n方法：先求候选码得出主属性和非主属性，然后按照定义判断（部分依赖的定义背住）\n\n- 题意: $U=${$A,B,C,D,E,G$} $F=${$BE->G,BD->G,CD->A,CE->G,CDE->AB,BC->A,B->D$}\n解: 主码$BCE$和$CDE$，主属性BCDE,非主属性AG。存在非主属性G对主码BCE的部分函数依赖，所以属于1NF.\n\n---\n\n- 题意: $U=${$A,B,C,D,E$} $F=${$A->C,C->D,B->C,DE->C,CE->A$}\n解: 主码$BE$,存在非主属性C对主码BE的部分函数依赖，所以属于1NF.\n\n#### 1.4 求最小函数依赖集\n- 题意: $U=${$A,B,C,D,E,G$} $F=${$BE->G,BD->G,CD->A,CE->G,CDE->AB,BC->A,B->D$}\n解: 第一步：$F=${$BE->G,BD->G,CD->A,CE->G,CDE->A,CDE->B,BC->A,B->D$}\n第二步：去除冗余的依赖\n对于$BE->G$：${(BE)}^+=BEDG$，即$G\\in{(BE)}^+$，所哟$BE->G$是冗余函数依赖，去除。\n得到：$F=${$BD->G,CD->A,CE->G,CDE->B,B->D$}\n第三步：判断依赖得左部是否有冗余的属性（左部只有一个的就不用看了）\n最终得到：$F_{min}=${$B->G,CD->A,CE->G,CDE->B,B->D$}\n即最小函数依赖集：$F_{min}=${$BG,CDA,CEG,CDEB,BD$}\n\n---\n\n- 题意: $U=${$A,B,C,D$} $F=${$A->CD,B->CD,C->D,D->C$}\n解: 第一步：$F=${$A->C,A->D,B->C,B->D,C->D,D->C$}\n第二步：去除冗余的依赖\n得到：$F=${$A->D,B->D,C->D,D->C$}**(注意答案并不唯一)**\n**第三步：判断依赖得左部是否有冗余的属性（左部只有一个的就不用看了）**\n最终得到：$F_{min}=${$A->D,B->D,C->D,D->C$}\n即最小函数依赖集：$F_{min}=${$AD,BD,CD$}\n\n#### 1.5 保持函数依赖分解为3NF\n**步骤:**\n第一步：求出最小函数依赖集\n第二步：是否包含所有属性\n第三步：相同左部合并\n- 题意: $U=${$A,B,C,D$} $F=${$A->CD,B->CD,C->D,D->C$}\n解：最小函数依赖集：$F_{min}=${$A->D,B->D,C->D,D->C$}\n相同左部合并得到：$F_{min}=${$AD,BD,CD$}\n\n---\n\n#### 1.6 判断分解后的关系模式是否保持函数依赖\n**如果F上的每一个函数依赖都在其分解后的某一个关系上成立，则这个分解是保持依赖的（这是一个充分条件）**\n\n#### 1.7 保持函数依赖和无损连接性分解为3NF\n**步骤:**\n第一步：先分解为保持依赖的3NF\n第二步：查看是否包含候选码\n- 题意：$F=${$A->B,B->D,C->DE,D->CE$}\n解：$F=${$A->B,B->D,C->D,D->C,D->E$}\n候选码:A\n保持函数依赖的3NF：$F=${$AD,BD,CDE$}\n**包含候选码**\n    \n#### 1.8 保持无损连接分解为BCNF\n步骤:\n第一步：求出关系模式的候选码\n第二步：从依赖集中找出左部不是候选码的依赖进行分解\n- 题意：$F=${$CS->G,C->T,TH->R,HR->C,HS->R$},将其分解成BCNF并保持无损连接\n解：$U = {C,S,G,T,H,R}$\n$L:SH$\n$R:G$\n$N:$\n$LR:CTR$\n\n${SH}^+=SHRCGT=U$,**所以$SH$为候选码**\n分解：$R_1:CSG F_1:{CS->G}$那么$R_2:{CSTHR}$**(去掉F1中右部的那个)** $F_2:{C->T,TH->R,HR->C,HS->R}$\n显然此时$R_1$是BCNF;而$R_2$不是，所以对$R_2$继续分解\n\n---\n\n$R_{21}:CT$  $F_{21}:{C->T}$   那么$R_{22}:CSHR$  $F_{22}:{CH->R,HR->C,HS->R}$**(去掉$F_{21}$中右部的那个,对于左边的，看谁能推出它，就拿谁替换他)** \n显然此时$R_{21}$,$F_{21}$是BCNF;而$R_{22}$不是，所以对$R_{22}$继续分解\n\n---\n\n$R_{221}:CHR$  $F_{221}:{CH->R}$**(这个是BCNF)**\n$R_{222}:CSH$  $F_{222}:{HC->C,HS->C}$即$F_{222}:{HS->C}$\n**(HC->C属于平凡函数依赖,不用写.而HS->R->C)**\n最终分解为:$R_1,R_{21},R_{221},R_{222}$;即：$CSG,CT,CHR,CSH$\n\n#### 1.9 判断分解后的关系模式是否保持无损连接\n**$P_{197}$的11行:应当注意的是，若某个btli被更改，那么该表的li列中凡是btli的符号（不管它是否是开始找到的那些行）均应该做相应的修改**\n- 题意：$F=${$A->D,E->D,D->B,BC->D,DC->A$},$\\rho$={$AB,AE,EC,DBC,AC$}\n\n|    | A | B | C | D | E |\n| :---: | :---: |:---:|:---:|:---:|:---:|\n|  AB   |$a_1$  |$a_2$|$b_{13}$|$b_{14}$|$b_{15}$|\n|  AE   |$a_1$  |$b_{22}$|$b_{23}$|$b_{24}$|  $a_5$  |\n|  EC   |$b_{31}$  |$b_{32}$|$a_3$|$b_{34}$|$a_5$|\n|  DBC  |$b_{41}$  |$a_{2}$|$a_3$|$a_{4}$|$b_{45}$|\n|  AC   |$a_{1}$  |$b_{52}$|$a_3$|$b_{54}$|$b_{55}$|\n\n$\\Downarrow$\n\n|    | A | B | C | D | E |\n| :---: | :---: |:---:|:---:|:---:|:---:|\n|  AB   |$a_1$  |$a_2$|$b_{13}$|$a_{4}$|$b_{15}$|\n|  AE   |$a_1$  |$a_{2}$|$b_{23}$|$a_{4}$|  $a_5$  |\n|  EC   |$a_{1}$  |$a_{2}$|$a_3$|$a_{4}$|$a_5$|\n|  DBC  |$a_{1}$  |$a_{2}$|$a_3$|$a_{4}$|$b_{45}$|\n|  AC   |$a_{1}$  |$a_{2}$|$a_3$|$a_{4}$|$b_{55}$|\n\n**存在全a行，所以是保持无损连接。**\n\n### 2.查询优化树\n步骤:\n第一步：画出初始的查询优化树(自下而上)\n第二步：将选择操作“下沉”（选择先于连接或者笛卡尔积）\n\n### 3.E-R图和转化成关系模式\n对于实体型间的联系有以下不同的情况:\n(1)**一个1:1联系可以转换为一个独立的关系模式，也可以与任意一端对应的关系模式合并**。如果转换为一个独立的关系模式，则与该联系相连的各实体的码以及联系本身的属性均转换为关系的属性，每个实体的码均是该关系的候选码。<font color=\"#dd0000\">如果与某一端实体对应的关系模式合并,则需要在该关系模式的属性中加入另一个关系模式的码和联系本身的属性。</font><br /> \n(2）**一个1:n联系可以转换为一个独立的关系模式，也可以与n端对应的关系模式合并**。如果转换为一个独立的关系模式，则与该联系相连的各实体的码以及联系本身的属性均转换为关系的属性,<font color=\"#dd0000\">而关系的码为n端实体的码。</font><br /> \n(3）**一个m:n联系转换为一个关系模式**，与该联系相连的各实体的码以及联系本身的属性均转换为关系的属性，各实体的码组成关系的码或关系码的一部分。\n(4)**三个或三个以上实体间的一个多元联系可以转换为一个关系模式**。与该多元联系相连的各实体的码以及联系本身的属性均转换为关系的属性，各实体的码组成关系的码或关系码的一部分。\n(5）**具有相同码的关系模式可合并。**\n\n### 4.计算机网络\n#### 4.1计算机网络体系\n计算机网络**体系结构**分为3种：OSI体系结构（七层），TCP/IP体系结构（四层），五层体系结构。\n- **OSI体系结构**: 概念清楚，理论也比较完整，但是它既复杂又不实用。\n- **TCP/IP体系结构**:TCP/IP是一个四层体系结构，得到了广泛的运用。\n- **五层体系结构**:为了方便学习，**折中OSI体系结构和TCP/IP体系结构**，综合二者的优点，这样既简洁，又能将概念讲清楚。\n\n![计算机网络体系结构](计算机网络体系结构.png)\n\nTCP/IP与OSI最大的不同在于：OSI是一个理论上的网络通信模型，而TCP/IP则是实际运行的**网络协议**。\n\n#### 4.2五层网络体系结构概述\n- **应用层**：应用层是网络协议的最高层，主要任务**通过进程间的交互完成特定网络应用**。应用层协议定义的是**应用程序（进程）间通信和交互的规则**。\n\n\n对于不同的网络应用需要有不同的应用层协议，在互联网中的应用层协议很多，如域名系统DNS，支持万维网应用的HTTP协议，支持电子邮件的SMTP协议，等等。应用层交互的数据单元称为**报文**。\n\n- **运输层**：有时也译为传输层，它负责为两台主机中的进程提供通信服务。该层主要有以下两种协议：\n    - 传输控制协议 (Transmission Control Protocol，TCP)：提供面向连接的、可靠的数据传输服务，数据传输的基本单位是报文段（segment）；\n\n    - 用户数据报协议 (User Datagram Protocol，UDP)：提供无连接的、尽最大努力的数据传输服务，但不保证数据传输的可靠性，数据传输的基本单位是用户数据报。\n\n- **网络层**：网络层负责为分组网络中的不同主机提供通信服务，并通过选择合适的路由将数据传递到目标主机。在发送数据时，网络层把运输层产生的报文段或用户数据封装成**分组**或**包**进行传送。\n\n\n在TCP/IP体系中，由于网络层使用IP协议，因此分组也叫**IP数据报**。\n\n- **数据链路层**：数据链路层通常简称为链路层。数据链路层在两个相邻节点传输数据时，将网络层交下来的IP数据报**组装成帧**，在两个相邻节点之间的链路上传送**帧**。\n\n- **物理层**：保数据可以在各种物理媒介上进行传输，为数据的传输提供可靠的环境。\n\n以下是应用进程的数据在各层之间的传递过程中所经历的变化的简单示意图：\n![传递过程](传递过程.png)\n\n### 5.网络安全\n#### 5.1 传输层概述\n##### 5.1.1概述\nTCP隶属于传输层，所以要首先明白传输层的作用是什么，传输层能够实现**端到端**的连接。比如说我们用QQ与别人发信息，网络层能够将信息发送到对方的主机上，**主机上使用什么协议来接受这个信息就由传输层来完成**，所以传输层实现的是**进程到进程间的连接**。\n\n传输层提供的是应用程序间的逻辑通信，也就是说它向高层(应用层)屏蔽了下面网络层的细节，使应用程序看起来好像是在传输层之间沿着水平方向传输数据，但事实上两者之间并没有这样一条实际的物理连接。\n\n##### 5.1.2功能\n- 网络层提供了**点到点**的连接，而传输层提供了**端到端**的服务，也就是进程间的通信；\n- 网络层提供的是**不可靠**的连接，传输层能够实现**可靠**的传输；\n\n##### 5.1.3协议\n- TCP(Transmission Control Protocol) 传输控制协议\n- UDP(User Datagram Protocol) 用户数据报协议\n\n##### 5.1.4传输层和应用层的关系\n###### 5.1.4.1端口\nTCP/IP传输层用一个16位端口号(0~65535)来标识一个端口，但是注意，端口号只具有本地意义，不同计算机的相同端口号没有关联，0一般不用，所以允许有65535个不同的端口号。\n\n两个计算机的进程要实现通信，不仅必须知道对方的IP地址(为了找到对方的计算机)，而且还要知道对方的端口号(为了找到对方计算机中的应用程序)\n\n**问：怎么理解端口？**\n在网络技术中，端口(Port)大致有两种意思：\n1. 硬件端口，也就是设备间交互的接口，是物理意义上的端口，比如集线器，交换机等设备的接口；\n2. 软件端口，指的是应用层的的进程和运输层进行层间交互的一种地址，是逻辑意义上的端口，一般指的是TCP/IP协议中的端口。正是这种端口，所有传输层实现的是端到端的通信；\n\n在TCP/IP协议中，用\"源IP地址、目的IP地址、源端口号、目的端口号、协议号\"这五部分组成一个套接字，来标识一次通信；\n\n- 一个进程可以绑定多个端口号，因为一个进程可以有很多线程或者说是子进程等，这每一个都对应一个端口号，所以一个进程可以绑定多个端口号；\n- 但是一个端口号不可以被多个进程绑定，每一个端口号都与唯一的进程对应，if有多个了，那通信不就乱了套了吗；\n\n一个端口号一个进程，一个进程可以多个端口；\n\n###### 5.1.4.2端口号分类\n- 公认端口：0~1023，明确与某种服务绑定，比如各种协议；\n- 注册端口：1024~65535：松散的绑定一些服务，也就是有许多服务绑定这些端口。\nTCP/UDP加上特定的端口号就可以表示应用层的某个协议；\n**问：知道哪些常用的端口号**\n- TCP+20/21: ftp协议(文件传输协议)；\n- TCP+22: ssh协议(专门为远程登录提供的安全性协议)\n- TCP+25: SMTP协议(简单邮件传输协议)\n- TCP/UDP+53: DNS协议(域名解析协议)\n- TCP+80: Http协议(超文本传输协议)\n- TCP+443: Https协议(超文本传输安全协议)\n\n#### 5.2TCP协议\n一个TCP连接不仅需要端口，还需要IP地址来确定通信的主机。所以IP首部中的发送端IP地址加上发送端端口号就形成了连接的发送端；目标端IP地址再加上接收端端口号就确定了连接的接收端。这样就唯一地确定了一个TCP连接。\n\n在TCP/IP协议中，TCP协议是基于IP协议的。**IP协议是对应于网络层的协议，它是一个不可靠的协议**。TCP协议的可靠性保证给IP协议提供了可靠环境，从而使得IP协议可以不必考虑传输的可靠性，专注于网络层的功能。这也是协议分层的初衷。\n\n**IP协议解决了数据包的路由和传输，上层的TCP就可以不再关注路由和寻址；TCP协议解决了传输的可靠性和顺序问题，上层的应用层就可以直接使用TCP协议进行数据传输，不再需要关心数据段的丢失和重复**\n\n**http是要基于TCP连接基础上的，简单的说，TCP就是单纯的简历连接，不涉及任何我们需要请求的数据；http协议使用来收发数据，就是为实际应用而来的；**\n\nTCP被认为是一种流式传输层服务。它表示TCP发送端从应用程序接收到字符流，并从这个流中提取适当的长度创建数据段，然后将其发送到网络上。TCP接收端则接收数据段，从中提取数据，若没有按序号到达还要对其进行排序，并将其作为字符流交付给接收端应用程序。这样就完成了数据的传输。\n\n下图是一张典型的TCP面向流的传输\n![TCP面向流的传输](TCP面向流的传输.png)\n\n**问：TCP怎样实现可靠传输？**\nTCP采用了很多手段来保证可靠传输\n\n1. 连接管理机制：在传输数据前需要进行建立连接,也就是三次握手，在数据传送完后还需要释放连接，也就是四次挥手。\n2. 数据分段：TCP以报文段为单位进行发送，在建立TCP连接的时候，两端协商TCP报文段中的数据字段(也称为数据包)的最大长度(MSS);其长度加上首部长度就是整个TCP报文段的长度；\n3. 校验和：提供了一种简单的校验，如果收到段的校验和和原来的有差别，那接收方就会丢掉这个报文段；\n4. 序列号：TCP给发送的数据包的编号，如果接收端收到乱序后会进行重新排序，收到重复的也会进行丢弃；\n5. 确认应答：接收方收到报文后会回复确认(累计确认：对所有收到的按序的只确认最后，确认号之前的数据已经全部收到了)；\n6. 重发控制：TCP发出一个报文段后，就会启动一个定时器，等接收方确认这个报文段，如果不能及时收到确认，将重发这个报文段；\n7. 流量控制：通信的双方都有固定大小的缓冲区，TCP的接收端只允许发送端发送接收端缓冲区能接纳的数据。当接收方来不及处理发送方的数据，就把窗口缩小，并把窗口值告诉发送端（提示发送方降低发送的速率，防止包丢失）是利用滑动窗口来实现；\n8. 拥塞控制：当网络产生拥堵时，减少数据的发送；主要是通过拥塞窗口来实现；(慢开始和拥塞避免；快重传和快恢复)；\n\n#### 5.3网安概念注解\n- [特洛伊木马（Trojan Horse）](https://zh.wikipedia.org/wiki/%E7%89%B9%E6%B4%9B%E4%BC%8A%E6%9C%A8%E9%A9%AC_(%E7%94%B5%E8%84%91))简称木马，在计算机领域中指的是一种后门程序，是黑客用来盗取其他用户的个人消息，甚至是远程控制对方的电子设备而加密制作，然后通过传播或者骗取目标执行该程序，以达到盗取密码等各种数据资料等目的。**和病毒相似**，木马程序有很强的隐秘性，会随著操作系统启动而启动。\n- TCP握手协议相关概念\n    - 半连接\n    在三次握手过程中，服务器发送SYN-ACK之后，收到客户端的ACK之前的TCP连接称为半连接(half-open connect).此时服务器处于Syn_RECV状态.当收到ACK后，服务器转入ESTABLISHED状态.\n\n    - 半连接队列\n    在三次握手协议中，服务器维护一个半连接队列，存放半连接。该队列为每个客户端的SYN包（syn=j）开设一个条目，该条目表明服务器已收到SYN包，并向客户发出确认，正在等待客户的ACK确认包。这些条目所标识的连接在服务器处于Syn_RECV状态，当服务器收到客户的确认包时，删除该条目，服务器进入ESTABLISHED状态。\n\n    - Backlog参数\n    表示半连接队列的最大容纳数目。\n\n    - SYN-ACK 重传次数\n    服务器发送完SYN－ACK包，如果未收到客户确认包，服务器进行首次重传，等待一段时间仍未收到客户确认包，进行第二次重传，如果重传次数超过系统规定的最大重传次数，系统将该连接信息从半连接队列中删除。注意，每次重传等待的时间不一定相同。\n\n    - 半连接存活时间\n    是指半连接队列的条目存活的最长时间，也即服务从收到SYN包到确认这个报文无效的最长时间，该时间值是所有重传请求包的最长等待时间总和。有时我们也称半连接存活时间为Timeout时间、SYN_RECV存活时间。\n\n- SYN攻击\n    - SYN攻击属于DOS攻击的一种，它利用TCP协议缺陷，通过发送大量的半连接请求，耗费CPU和内存资源。\n    - SYN攻击利用TCP协议三次握手的原理，大量发送伪造源IP的SYN包也就是伪造第一次握手数据包，服务器每接收到一个SYN包就会为这个连接信息分配核心内存并放入半连接队列，如果短时间内接收到的SYN太多，半连接队列就会溢出，操作系统会把这个连接信息丢弃造成不能连接，当攻击的SYN包超过半连接队列的最大值时，正常的客户发送SYN数据包请求连接就会被服务器丢弃。目标系统运行缓慢，严重者引起网络堵塞甚至系统瘫痪。每种操作系统半连接队列大小不一样所以抵御SYN攻击的能力也不一样。\n    - Syn攻击是一个典型的DOS攻击。检测SYN攻击非常的方便，当你在服务器上看到大量的半连接状态时，特别是源IP地址是随机的，基本上可以断定这是一次SYN攻击.在Linux下可以如下命令检测是否被Syn攻击\n\n- [空连接](https://baike.baidu.com/item/%E7%A9%BA%E8%BF%9E%E6%8E%A5)\n使用命令 `net use \\\\*.*.*.*（IP地址）\\ipc$ \"\" /user:\"\"` 就可以简单地和目标建立一个空连接（需要目标开放**ipc$**）。\n空连接就是不用密码和用户名的IPC连接，在Windows下，它是用Net命令来实现的．\n\n- [Unicode漏洞](https://baike.baidu.com/item/Unicode%E6%BC%8F%E6%B4%9E/3791874)\nUnicode漏洞是攻击者可通过IE浏览器远程运行被攻击计算机的cmd.exe文件，从而使该计算机的文件暴露，且可随意执行和更改文件的漏洞。\n对策\n    - (1)为避免该类攻击，建议下载最新补丁\n    - (2)安装[IIS](https://zhuanlan.zhihu.com/p/145430397) Lockdown和URL Scan来加固系统，从而避免该类攻击。\n    - (3)安装Windows 2000的Service Pack 2以上的版本。\n\n- [IIS](https://zhuanlan.zhihu.com/p/145430397)\n    - IIS是缩写，全称Internet Information Services ( IIS,互联网信息服务 ),是由微软公司提供的基于运行Microsoft Windows的互联网基本服务。\n    - IIS是指World Wide Web server服务，IIS是一种Web（网页）服务组件，专业的说，IIS可以赋予一部主机电脑一组以上的IP地址，而且还可以有一个以上的域名作为Web网站。做过服务器配置的都应该知道IIS.** 制作好了网站怎么才能让别人浏览，就是通过网站服务器来实现的。IIS只是网站服务器的一种而已。**\n    - Internet Information Service（IIS）是windows开设web网页服务的组件，用来搭载网站运行程序的平台的。还能提供FTP，SMTP等服务。\n\n- [HTTP协议](https://www.cnblogs.com/ranyonsue/p/5984001.html)\n    - HTTP协议是Hyper Text Transfer Protocol（超文本传输协议）的缩写,是用于从万维网（WWW:World Wide Web ）服务器传输超文本到本地浏览器的传送协议。\n\n    - HTTP是一个基于TCP/IP通信协议来传递数据（HTML 文件, 图片文件, 查询结果等）。\n\n    - HTTP是一个属于应用层的面向对象的协议，由于其简捷、快速的方式，适用于分布式超媒体信息系统。它于1990年提出，经过几年的使用与发展，得到不断地完善和扩展。目前在WWW中使用的是HTTP/1.0的第六版，HTTP/1.1的规范化工作正在进行之中，而且HTTP-NG(Next Generation of HTTP)的建议已经提出。\n\n    - HTTP协议工作于客户端-服务端架构为上。浏览器作为HTTP客户端通过URL向HTTP服务端即WEB服务器发送所有请求。Web服务器根据接收到的请求后，向客户端发送响应信息。\n\n- FTP协议\n    - FTP（File Transfer Protocol，文件传输协议） 是 TCP/IP 协议组中的协议之一。FTP协议包括两个组成部分，其一为FTP服务器，其二为FTP客户端。其中FTP服务器用来存储文件，用户可以使用FTP客户端通过FTP协议访问位于FTP服务器上的资源。在开发网站的时候，通常利用FTP协议把网页或程序传到Web服务器上。此外，由于FTP传输效率非常高，在网络上传输大的文件时，一般也采用该协议。\n    - 默认情况下FTP协议使用TCP端口中的 20和21这两个端口，其中20用于传输数据，21用于传输控制信息。但是，是否使用20作为传输数据的端口与FTP使用的传输模式有关，如果采用主动模式，那么数据传输端口就是20；如果采用被动模式，则具体最终使用哪个端口要服务器端和客户端协商决定。\n\n- gopher协议\ngopher协议是一个在http协议诞生前用来访问Internet资源的协议可以理解为http协议的前身或简化版，虽然很古老但现在很多库还支持gopher协议而且gopher协议功能很强大。\n它可以实现多个数据包整合发送，然后gopher服务器将多个数据包捆绑着发送到客户端，这就是它的菜单响应。比如使用一条gopher协议的curl命令就能操作mysql数据库或完成对redis的攻击等等。gopher协议使用tcp可靠连接。\n\n- MS SQL-SERVER空口令入侵\n在微软的MSSQL7.0以下的版本在默认安装时其SA(System Administrator)口令为空，所开端口为1433，一个入侵者只需要使用一个MS SQL客户端与SA口令为空的服务器连接就可以获得System的权限。\n\n- [防止Access数据库被非法下载的方法](http://www.it3721.com/data/2010/0913/381.html)\n    - 给数据库起一个随机复杂的名称\n    - \"#\"式\n    - asp式\n    - asa式\n\n- SQL注入攻击\nSQL注入攻击是黑客对数据库进行攻击的常用手段之一。随着B/S模式应用开发的发展，使用这种模式编写应用程序的程序员也越来越多。但是由于程序员的水平及经验也参差不齐，相当大一部分程序员在编写代码的时候，没有对用户输入数据的合法性进行判断，使应用程序存在安全隐患。用户可以提交一段数据库查询代码，根据程序返回的结果，获得某些他想得知的数据，这就是所谓的SQL Injection，即SQL注入。\n\n- [ICMP（Internet Control Message Protocol）Internet控制报文协议](https://baike.baidu.com/item/ICMP)。它是TCP/IP协议簇的一个子协议，用于在IP主机、路由器之间传递控制消息。控制消息是指网络通不通、主机是否可达、路由是否可用等网络本身的消息。这些控制消息虽然并不传输用户数据，但是对于用户数据的传递起着重要的作用。\n\n- PC机的意思就是个人计算机。\n\n- **防火墙（英语：Firewall）**技术是通过有机结合各类用于安全管理与筛选的软件和硬件设备，帮助计算机网络于其内、外网之间构建一道相对隔绝的保护屏障，以保护用户资料与信息安全性的一种技术。\n\n- [land攻击](https://www.wangan.com/discuss/wikis/644)\nLAND 攻击（局域网拒绝服务攻击，英语：Local Area Network Denial attack，缩写：LAND attack，是拒绝服务攻击（DoS 攻击）的一种，通过发送精心构造的、具有相同源地址和目标地址的欺骗数据包，致使缺乏相应防护机制的目标设备瘫痪。这种攻击方法最早在 1997 年被某人以 “m3lt” 的名称提出，并于多年之后的 Windows Server 2003、[Windows XP SP2 等操作系统中重现。\n\n- [Smurf攻击](https://blog.csdn.net/wdkirchhoff/article/details/45560513)\nSmurf 攻击是分布式拒绝服务 (DDoS) 攻击的一种形式，该攻击会导致计算机网络停止服务。\n原理：攻击者向网络广播地址发送ICMP包，并将回复地址设置成受害网络的广播地址，通过使用ICMP应答请求数据包来淹没受害主机的方式进行，最终导致该网络的所有主机都对次ICMP应答请求作出答复，导致网络阻塞。更加复杂的Smurf攻击攻击将源地址改为第三方受害者，最终导致第三方崩溃。\n\n- UDP-Flood攻击\nUDP洪泛是一种拒绝服务攻击，其中大量的用户数据报协议（UDP）数据包被发送到目标服务器，目的是压倒该设备的处理和响应能力。防火墙保护目标服务器也可能因UDP泛滥而耗尽，从而导致对合法流量的拒绝服务。\n\n- [Teardrop攻击](https://baike.baidu.com/item/Teardrop%E6%94%BB%E5%87%BB/5957505)\nTeardrop攻击是一种畸形报文攻击。是基于UDP的病态分片数据包的攻击方法，其工作原理是向被攻击者发送多个分片的IP包（IP分片数据包中包括该分片数据包属于哪个数据包以及在数据包中的位置等信息），某些操作系统收到含有重叠偏移的伪造分片数据包时将会出现系统崩溃、重启等现象。\n\n- Hotfix是微软公司研发的一个程序，针对某一个具体的系统漏洞或安全问题而发布的专门解决该漏洞或安全问题，通常称为修补程序。\n\n- [冲击波病毒](https://baike.baidu.com/item/%E5%86%B2%E5%87%BB%E6%B3%A2%E7%97%85%E6%AF%92/11036738)\n冲击波病毒(Worm.Blaster)是利用在2003年7月21日公布的RPC漏洞进行传播的，该病毒于当年8月爆发。病毒运行时会不停地利用IP扫描技术寻找网络上系统为Win2000或XP的计算机，找到后就利用DCOM/RPC缓冲区漏洞攻击该系统，一旦攻击成功，病毒体将会被传送到对方计算机中进行感染，使系统操作异常、不停重启、甚至导致系统奔溃。另外，该病毒还会对系统升级网站进行拒绝服务攻击，导致该网站堵塞，使用户无法通过该网站升级系统。只要是计算机上有RPC服务并且没有打安全补丁的计算机都存在有RPC漏洞，具体涉及的操作系统是：Windows 2000\\XP\\Server 2003\\NT4.0。\n\n- [RPC漏洞](https://baike.baidu.com/item/RPC%E6%BC%8F%E6%B4%9E)是远程过程调用的漏洞。\n\n- “红色代码”病毒是2001年7月15日发现的一种网络蠕虫病毒，感染运行Microsoft IIS Web服务器的计算机。其传播所使用的技术可以充分体现网络时代网络安全与病毒的巧妙结合，将网络蠕虫、计算机病毒、木马程序合为一体，开创了网络病毒传播的新路，可称之为划时代的病毒。如果稍加改造，将是非常致命的病毒，可以完全取得所攻破计算机的所有权限并为所欲为，可以盗走机密数据，严重威胁网络安全。\n\n- **TCSEC**(Trusted Computer System Evaluation Criteria; commonly called the \"Orange Book\")美国可信计算机系统评价标准是计算机系统安全评估的第一个正式标准，具有划时代的意义。该准则于1970年由美国国防科学委员会提出，并于1985年12月由美国国防部公布。TCSEC最初只是军用标准，后来延至民用领域。TCSEC将计算机系统的安全划分为4个等级、7个级别。\n\n-[包过滤技术](https://baike.baidu.com/item/%E5%8C%85%E8%BF%87%E6%BB%A4%E6%8A%80%E6%9C%AF/4184498)\n基于协议特定的标准，路由器在其端口能够区分包和限制包的能力叫包过滤（Packet Filtering）。其技术原理在于加入IP过滤功能的路由器逐一审查包头信息，并根据匹配和规则决定包的前行或被舍弃，以达到拒绝发送可疑的包的目的。过滤路由器具备保护整个网络、高效快速并且透明等优点，同时也有定义复杂、消耗CPU资源、不能彻底防止地址欺骗、涵盖应用协议不全、无法执行特殊的安全策略并且不提供日志等局限性。\n\n- [包过滤防火墙](https://baike.baidu.com/item/%E5%8C%85%E8%BF%87%E6%BB%A4%E9%98%B2%E7%81%AB%E5%A2%99/327991)\n    - 包过滤防火墙是用一个软件查看所流经的数据包的包头（header），由此决定整个包的命运。它可能会决定丢弃（DROP）这个包，可能会接受（ACCEPT）这个包（让这个包通过），也可能执行其它更复杂的动作。\n    - 包过滤是一种内置于Linux内核路由功能之上的防火墙类型，其防火墙工作在网络层和传输层。\n\n- [状态检测技术](https://baike.baidu.com/item/%E7%8A%B6%E6%80%81%E6%A3%80%E6%B5%8B%E6%8A%80%E6%9C%AF/6338299)\n状态检测技术是防火墙近几年才应用的新技术。传统的包过滤防火墙只是通过检测IP包头的相关信息来决定数据流的通过还是拒绝，而状态检测技术采用的是一种基于连接的状态检测机制，将属于同一连接的所有包作为一个整体的数据流看待，构成连接状态表，通过规则表与状态表的共同配合，对表中的各个连接状态因素加以识别。这里动态连接状态表中的记录可以是以前的通信信息，也可以是其他相关应用程序的信息，因此，与传统包过滤防火墙的静态过滤规则表相比，它具有更好的灵活性和安全性。\n\n- [状态检测防火墙](https://baike.baidu.com/item/%E7%8A%B6%E6%80%81%E6%A3%80%E6%B5%8B%E9%98%B2%E7%81%AB%E5%A2%99/3106862)采用了状态检测包过滤的技术，是传统包过滤上的功能扩展。\n\n- [代理防火墙](https://baike.baidu.com/item/%E4%BB%A3%E7%90%86%E9%98%B2%E7%81%AB%E5%A2%99/9570104)\n代理防火墙通过一种代理（Proxy）技术参与到一个TCP连接的全过程。从内部发出的数据包经过这样的防火墙处理后，就好像是源于防火墙外部网卡一样，从而可以达到隐藏内部网结构的作用。这种类型的防火墙被网络安全专家和媒体公认为是最安全的防火墙。\n\n- [代理服务型防火墙](https://baike.baidu.com/item/%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1%E5%9E%8B%E9%98%B2%E7%81%AB%E5%A2%99/5189462)\n代理服务型防火墙是防火墙的一种，代表某个专用网络同互联网进行通讯的防火墙，类似在股东会上某人以你的名义代理你来投票。当你将浏览器配置成使用代理功能时，防火墙就将你的浏览器的请求转给互联网；当互联网返回响应时，代理服务器再把它转给你的浏览器。代理服务器也用于页面的缓存，代理服务器在从互联网上下载特定页面前先从缓存器取出这些页面。内部网络与外部网络之间不存在直接连接。\n\n- 加密和认证\n首先我们需要区分加密和认证这两个基本概念。\n加密是将数据资料加密，使得非法用户即使取得加密过的资料，也无法获取正确的资料内容，所以数据加密可以保护数据，防止监听攻击。其重点在于数据的安全性。身份认证是用来判断某个身份的真实性，确认身份后，系统才可以依不同的身份给予不同的权限。其重点在于用户的真实性。两者的侧重点是不同的。\n\n- 公钥和私钥\n在现代密码体制中加密和解密是采用**不同的密钥**（公开密钥），也就是**非对称**密钥密码系统，每个通信方均需要两个密钥，即公钥和私钥，这两把密钥可以互为加解密。公钥是公开的，不需要保密，而私钥是由个人自己持有，并且必须妥善保管和注意保密。\n公钥私钥的原则：\n    - 一个公钥对应一个私钥。\n    - 密钥对中，让大家都知道的是公钥，不告诉大家，只有自己知道的，是私钥。\n    - 如果用其中一个密钥加密数据，则只有对应的那个密钥才可以解密。\n    - 如果用其中一个密钥可以进行解密数据，则该数据必然是对应的那个密钥进行的加密。\n---\n\n**总结**：公钥和私钥是通过一种算法得到的一个密钥对(即一个公钥和一个私钥)，将其中的一个向外界公开，称为公钥；另一个自己保留，称为私钥。通过这种算法得到的密钥对能保证在世界范围内是唯一的。\n**公钥和私钥是成对的，它们互相解密（密钥指公钥或私钥，密钥对指公钥加私钥）。**\n**公钥和私钥都可以加密和解密。**\n**私钥数字签名，公钥验证。**\n\n- \"MYDOOM\"变种Q(Worm.Mydoom.q)病毒\n大量发送病毒邮件，浪费网络和系统资源；大量病毒垃圾邮件可能造成中小型邮件服务器极不稳定，甚致崩溃的现象；自动从网络中下载后门木马，并立即执行。\n\n- 爱虫病毒\n    - 爱虫病毒(Vbs.loveletter)，又称“我爱你”(I Love You)病毒，是一种蠕虫病毒，它与1999年的梅丽莎病毒非常相似。据称，这个病毒可以改写本地及网络硬盘上面的某些文件。用户机器染毒以后，邮件系统将会变慢，并可能导致整个网络系统崩溃，当时在全球更是造成了百亿美元的损失。 \n    - 2000年5月4日，一种名为“我爱你”的电脑病毒开始在全球各地迅速传播，短短的一两天内就侵袭了100多万台计算机。这个病毒是通过Microsoft Outlook电子邮件系统传播的，邮件的主题为“I LOVE YOU”，并包含一个附件。一旦在Microsoft Outlook里打开这个邮件，系统就会自动复制并向地址簿中的所有邮件电址发送这个病毒。\n\n- [计算机病毒与蠕虫](https://www.kaspersky.com.cn/resource-center/threats/computer-viruses-vs-worms)\n    - 计算机病毒与蠕虫的一个重要区别是，病毒需要借助活动的宿主程序或已被感染的活动操作系统才能运行、造成破坏并感染其他可执行文件或文档；而蠕虫是独立的恶意程序，可以通过计算机网络进行自我复制和传播，不需要人工干预。\n    - 病毒通常附加到可执行文件或 Word 文档。它们多通过 P2P 文件共享、受感染的网站和电子邮件附件下载进行传播。病毒侵入系统后，会保持休眠状态，直到被感染的宿主文件或程序被激活，反过来再激活病毒，使其能够在您的系统上运行和复制。\n    - 相反，蠕虫无需借助宿主程序即可运行、自我复制和传播。一旦蠕虫侵入系统（通常通过网络连接或以下载的文件形式），就会立即自行创建多个副本，并通过网络或互联网连接传播，感染网络上任何没有得到充分保护的计算机和服务器。网络蠕虫的每个后续副本也可以自我复制，因此可以通过互联网和计算机网络非常迅速地传播感染。\n\n- [Worm.Klez](https://baike.baidu.com/item/Worm.Klez)\n一个通过INTERNET以及EMAIL附件传播感染的蠕虫类病毒，本身是一个WINDOWS PE格式的可执行程序，大约在57-65K之间，是用MICROSOFT VISUALC++编写，它不仅在本地的网络散布并且通过电子邮件消息传播，还会在WINDOWS临时文件夹下建立一个名字为以字母K开头的可执行文件，把“ Win32.Klez ”病毒写进去，并且启动该病毒。\n\n- [IP碎片攻击](https://baike.baidu.com/item/IP%E7%A2%8E%E7%89%87%E6%94%BB%E5%87%BB/15686325)\nIP碎片攻击指的是一种计算机程序重组的漏洞。链路层具有最大传输单元MTU这个特性，它限制了数据帧的最大长度，不同的网络类型都有一个上限值。以太网的MTU是1500，你可以用 netstat -i 命令查看这个值。如果IP层有数据包要传，而且数据包的长度超过了MTU，那么IP层就要对数据包进行分片(fragmentation)操作，使每一片的长度都小于或等于MTU。我们假设要传输一个UDP数据包，以太网的MTU为1500字节，一般IP首部为20字节，UDP首部为8字节，数据的净荷(payload)部分预留是1500-20-8=1472字节。如果数据部分大于1472字节，就会出现分片现象。\n\n- **ICMP**的全称是Internet Control Message Protocol（网间报文控制协议），它是IP不可分割的一部分，用来提供错误报告。一旦发现各种错误类型就将其返回原主机，我们平时最常见的ping命令就是基于ICMP的。\n\n- [分组密码与流密码](https://blog.csdn.net/zhangyixing_mj/article/details/121721761)\n    - 分组加密\n        - 明文被分为固定长度的块（即为分组），对每个分组用相同的算法和密钥加解密。\n        - 分组长度：64b，128b，256b。明文不是上述整数倍时，在其后填充。填充内容可自选，一般0。而且填充也可掩盖真实长度。\n        - 密文长度与明文长度相同：①密文长度不能小于明文长度，因为这样就会出现不同明文产生相同密文的情况，就是不可逆的了，解密时不行；②密文长度可以大于明文长度，但是这样会使效率降低。所以一般都是选择二者相同长度。\n\n    - 流加密\n        - 每次加密数据流的一位或一字节，连续处理。异或\n        - 算法结构：\n            - 伪随机序列\n            - 明文与密钥流逐位异或\n        - 设计上的考虑\n            - 密钥流周期要长。\n            - 统计上随机。\n            - 密钥流的随机性与密钥长度相关。\n        - 不同的明文要用不同的密钥\n\n- [唯密文攻击](https://zh.wikipedia.org/wiki/%E5%94%AF%E5%AF%86%E6%96%87%E6%94%BB%E5%87%BB)\n在[密码学](https://zh.wikipedia.org/wiki/%E5%AF%86%E7%A0%81%E5%AD%A6)或[密码分析](https://zh.wikipedia.org/wiki/%E5%AF%86%E7%A0%81%E5%88%86%E6%9E%90)中，唯密文攻击是一种攻击模式，指的是在仅知已加密文字（即[密文](https://zh.wikipedia.org/wiki/%E5%AF%86%E6%96%87)）的情况下进行攻击。此方案可同时用于攻击[对称密码体制](https://zh.wikipedia.org/wiki/%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86)和[非对称密码体制](https://zh.wikipedia.org/wiki/%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86)。\n\n- [PGP加密](https://baike.baidu.com/item/PGP/212244)\nPGP（英语：Pretty Good Privacy，中文翻译“优良保密协议”）是一套用于消息加密、验证的应用程序，采用[IDEA](https://baike.baidu.com/item/IDEA)的散列算法作为加密与验证之用\nPGP加密由一系列散列、数据压缩、对称密钥加密，以及公钥加密的算法组合而成。每个步骤支持几种算法，可以选择一个使用。每个公钥均绑定唯一的用户名和/或者E-mail地址。这个系统的第一个版本通常称为可信Web或[X.509](https://baike.baidu.com/item/X.509)系统；X.509系统使用的是基于数字证书认证机构的分层方案，该方案后来被加入到PGP的实现中。当前的PGP加密版本通过一个自动密钥管理服务器来进行密钥的可靠存放。\n\n- [509](https://baike.baidu.com/item/X.509/2817050)\n    - X.509 是密码学里公钥证书的格式标准。 X.509 证书己应用在包括TLS/SSL（WWW万维网安全浏览的基石）在内的众多 Internet协议里.同时它也用在很多非在线应用场景里，比如电子签名服务。X.509证书里含有公钥、身份信息(比如网络主机名，组织的名称或个体名称等)和签名信息（可以是证书签发机构CA的签名，也可以是自签名）。对于一份经由可信的证书签发机构签名或者可以通过其它方式验证的证书，证书的拥有者就可以用证书及相应的私钥来创建安全的通信，对文档进行数字签名.\n    - 另外除了证书本身功能，X.509还附带了证书吊销列表和用于从最终对证书进行签名的证书签发机构直到最终可信点为止的证书合法性验证算法。\n    - X.509是ITU-T标准化部门基于他们之前的ASN.1定义的一套证书标准。\n\n- [CA证书](https://baike.baidu.com/item/CA%E8%AF%81%E4%B9%A6/10028741)\nCA是证书的签发机构，它是公钥基础设施（Public Key Infrastructure，PKI）的核心。CA是负责签发证书、认证证书、管理已颁发证书的机关。\n\n- [SSL协议](https://baike.baidu.com/item/ssl/320778)\nSSL(Secure Sockets Layer 安全套接字协议),及其继任者传输层安全（Transport Layer Security，TLS）是为网络通信提供安全及数据完整性的一种安全协议。TLS与SSL在传输层与应用层之间对网络连接进行加密。\n\n- [IPsec](https://baike.baidu.com/item/ipsec/2472311)\n    - **互联网安全协议（英语：Internet Protocol Security，缩写为IPsec）**，是一个协议簇，通过对IP协议的分组进行加密和认证来保护IP协议的网络传输协议簇（一些相互关联的协议的集合）。\n    - IPsec主要由以下协议组成：\n        - 一、认证头（AH），为IP数据报提供无连接数据完整性、消息认证以及防重放攻击保护；\n        - 二、封装安全载荷（ESP），提供机密性、数据源认证、无连接完整性、防重放和有限的传输流（traffic-flow）机密性；\n        - 三、安全关联（SA），提供算法和数据包，提供AH、ESP操作所需的参数。\n        - 四、密钥协议（IKE），提供对称密码的钥匙的生存和交换。\n    - IPsec协议工作在OSI模型的**第三层**，使其在单独使用时适于保护基于TCP或UDP的协议（如安全套接子层（SSL）就不能保护UDP层的通信流）。这就意味着，与传输层或更高层的协议相比，IPsec协议必须处理可靠性和分片的问题，这同时也增加了它的复杂性和处理开销。相对而言，SSL/TLS依靠更高层的TCP（OSI的第四层）来管理可靠性和分片。\n\n- [PPTP、L2TP、OpenVPN三种隧道协议的概念](https://www.jingh.top/2017/01/15/vpn/)\n    - PPTP（Point to Point Tunneling Protocol，点对点隧道协议）默认端口号：1723\n    - L2TP（Layer 2 Tunneling Protocol，第二层隧道协议）\n\n- 电子商务系统\n电子商务系统，广义上讲是商务活动中各参与方和支持企业进行交易活动的电子技术手段的集合。狭义上讲，电子商务系统则是指企业、消费者、银行、政府等在Internet和其他网络的基础上，以实现企业电子商务活动的目标，满足企业生产、销售、服务等生产和管理的需要，支持企业的对外业务协作，从运作、管理和决策等层次全面提高企业信息化水平，为企业提供具备商业智能的计算机网络系统。\n \n- [数字信封](https://baike.baidu.com/item/%E6%95%B0%E5%AD%97%E4%BF%A1%E5%B0%81/425647)\n数字信封是将对称密钥通过非对称加密（即：有公钥和私钥两个）的结果分发对称密钥的方法。数字信封是实现信息保密性验证的技术。\n数字信封是一种综合利用了对称加密技术和非对称加密技术两者的优点进行信息安全传输的一种技术。数字信封既发挥了对称加密算法速度快、安全性好的优点，又发挥了非对称加密算法密钥管理方便的优点。\n\n- Exim系统\nExim是一个MTA（Mail Transfer Agent，邮件传输代理）服务器软件，该软件基于GPL协议开发，是一款开源软件。该软件主要运行于类UNIX系统。通常该软件会与Dovecot或Courier等软件搭配使用。Exim同时也是“进出口”（Export-Import）的英文缩写。\n\n- Sniffer\nSniffer，中文可以翻译为嗅探器，也叫抓数据包软件，是一种基于被动侦听原理的网络分析方式。使用这种技术方式，可以监视网络的状态、数据流动情况以及网络上传输的信息。\n\n- 流密码算法\n流密码算法，或者叫序列密码，算法大概的原理是，每次加密都通过密钥生成一个密钥流，解密也是使用同一个密钥流，明文与同样长度的密钥流进行异或运算得到密文，密文与同样的密钥流进行异或运算得到明文。流密码算法是以“一次性密码本“为雏形演变出来的加密算法，一次性密码本算法很重要的一个特性就是密钥使用的“一次性”，来看看一次性密码本的算法原理。\n\n- IKE（网络密钥交换协议）\nIKE属于一种混合型协议，由Internet安全关联和密钥管理协议（ISAKMP）和两种密钥交换协议OAKLEY与SKEME组成。IKE创建在由ISAKMP定义的框架上，沿用了OAKLEY的密钥交换模式以及SKEME的共享和密钥更新技术，还定义了它自己的两种密钥交换方式：主模式和积极模式。\n\n- [VPN](https://zhuanlan.zhihu.com/p/164503799)\nVPN的英文全称是“VirtualPrivateNetwork”，翻译过来就是“虚拟专用网络”。顾名思义，虚拟专用网络我们可以把它理解成是虚拟出来的内部专线。\n\n- PPDR 模型\n    - PPDR 模型是在整体的安全策略的控制和指导下，综合运用防护工具（如防火墙、身份认证、加密等）的同时，利用检测工具（如漏洞评估、入侵检测系统）了解和评估系统的安全状态，通过适当的响应将系统调整到一个比较安全的状态。保护、检测和响应组成了一个完整的、动态的安全循环。\n\n    - PPDR（Policy Protection Detection Response) 的基于思想是：以安全策略为核心，通过一致性检查、流量统计、异常分析、模式匹配以及基于应用、目标、主机、网络的入侵检查等方法进行安全漏洞检测。检测使系统从静态防护转化为动态防护，为系统快速响应提供了依据。当发现系统有异常时，根据系统安全策略快速作出反应，从而达到保护系统安全的目的。\n\n- PKI\nPKI（Public Key Infrastructure）即公钥基础设施，是提供公钥加密和数字签名服务的系统，目的是为了自动管理密钥和证书，保证网上数据信息传输的机密性、真实性、完整性和不可否认性。PKI采用证书进行公钥管理，通过第三方的可信任机构，把用户的公钥和用户的其它标识信息捆绑在一起，从而在网上验证用户的身份。一个PKI系统由公钥密码技术（Public Key Cryptography）、证书认证机构（CA）、注册机构（RA）、数字证书（Digital Certificate）和相应的PKI存储库组成。\n以下介绍几个PKI相关的术语：\n    - 公钥密码技术：用户使用公钥密码技术产生密钥对，分别为公钥（public key）和私钥（private key），公钥向外界公开，私钥则自己保留。公钥与私钥互为补充，被一个密钥加密的数据，只可以用相匹配的另外一个密钥解密。\n    - 认证机构（CA）：是一个向个人、计算机或任何其它实体颁发证书的可信实体。CA受理证书服务申请，根据证书管理策略验证申请方的信息，然后用其私钥对证书进行签名，并颁发该证书给申请方。\n    - 注册机构（RA）：RA是CA的延伸，RA向CA转发证书服务申请，也向目录服务器转发CA颁发的数字证书和证书撤消列表，以提供目录浏览和查询服务。\n    - 证书撤销列表（CRL）：证书具有一定的使用期限，但是由于密钥被泄露、业务终止等原因，CA可通过撤销证书缩短证书的使用期限。一个证书一旦被撤消，证书中心就要公布CRL来声明该证书是无效的，并列出不能再使用的证书的序列号。\n\n安全网关的以下功能模块支持PKI功能：\n    - IKE VPN：建立IKE VPN时，支持PKI认证。\n    - HTTPS/SSH：使用HTTPS或者SSH方式访问安全网关时，支持PKI认证。\n\n\n\n\n\n\n\n\n\n\n### 6.数据库试卷\n#### 6.1 2005哈尔滨工程大学数据库试卷A卷\n![2005哈尔滨工程大学数据库试卷A_1](2005哈尔滨工程大学数据库试卷A_1.png)\n\n![2005哈尔滨工程大学数据库试卷A_2](2005哈尔滨工程大学数据库试卷A_2.png)\n\n\n\n\n\n\n\n\n### 7.参考文献\n1. [传输层详解](https://www.cnblogs.com/Curryxin/p/15098548.html)\n2. [计算机网络的七层结构、五层结构和四层结构](https://blog.csdn.net/sinat_40770656/article/details/113787888)\n3. [ TCP SYN洪水 (SYN Flood) 攻击原理与实现](https://cloud.tencent.com/developer/article/1802453)\n4. [MS SQL-SERVER空口令入侵漏洞](https://www.flypeng.com/shujuku/sqlserver/379.html)\n5. [防止Access数据库被非法下载的方法比较](http://www.it3721.com/data/2010/0913/381.html)\n6. [防火墙-IBM文档](https://www.ibm.com/docs/zh/i/7.3?topic=options-firewalls)\n7. [网安社区](https://www.wangan.com/discuss/wikis/315)\n8. [Hotfix热修复](https://zh.wikipedia.org/wiki/%E7%83%AD%E4%BF%AE%E5%A4%8D)\n9. [Hotfix热修复](https://baike.baidu.com/item/Hotfix/6371681)\n10. [HTTP协议](https://www.cnblogs.com/ranyonsue/p/5984001.html)\n11. [公钥和私钥的区别](https://www.cnblogs.com/moonfans/p/3939335.html)\n12. [密钥对，密钥，公钥，私钥的区分](https://blog.csdn.net/SeniorShen/article/details/102850439)\n13. [ICMP攻击和基于ICMP的路由欺骗](https://blog.51cto.com/tonghuatianshi/385867)","slug":"哈工程复试笔记","published":1,"updated":"2024-04-25T17:26:50.753Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvjbaqmg00b90vn17omkfv2j","content":"<h3 id=\"1-规范化问题\"><a href=\"#1-规范化问题\" class=\"headerlink\" title=\"1.规范化问题\"></a>1.规范化问题</h3><h4 id=\"1-1-求任意属性集的闭包\"><a href=\"#1-1-求任意属性集的闭包\" class=\"headerlink\" title=\"1.1 求任意属性集的闭包\"></a>1.1 求任意属性集的闭包<span id=\"more\"></span></h4><ul>\n<li>题意: $(A-&gt;B,B-&gt;C,D-&gt;E)$<br>解: $A^+&#x3D; ABC$</li>\n</ul>\n<h4 id=\"1-2-求候选码\"><a href=\"#1-2-求候选码\" class=\"headerlink\" title=\"1.2 求候选码\"></a>1.2 求候选码</h4><ul>\n<li>题意: $U&#x3D;${$A,B,C,D,E$} $F&#x3D;${$A-&gt;D,E-&gt;D,D-&gt;B,BC-&gt;D,DC-&gt;A$}<br>解: $L:CE$<br>  $R:$<br>  $N:$<br>  $LR:ABD$<br>分析:$R$中的肯定不能作为候选码，$L+N$一定属于候选码的子集，求${(L+R)}^+$看是否等于U，如果不等再慢慢的从LR中去添加。<br>对于本题${(CE)}^+&#x3D;CEDBA&#x3D;U$,<strong>所以本题中的候选码为$CE$</strong>.</li>\n</ul>\n<hr>\n<ul>\n<li>题意: $U&#x3D;${$A,B,C,D,E,G$} $F&#x3D;${$BE-&gt;G,BD-&gt;G,CD-&gt;A,CE-&gt;G,CDE-&gt;AB,BC-&gt;A,B-&gt;D$}<br>解: $L:CE$<br>  $R:AG$<br>  $N:$<br>  $LR:BD$<br>分析:${(CE)}^+&#x3D;CEG≠U$,所有CE不是候选码。${(CEB)}^+&#x3D;CEBGAD&#x3D;U$，<strong>所以$BCE$是候选码，同理$CDE$也是。</strong><br><strong>总结</strong>：找出只在左侧，右侧，未出现，左右都出现的。其中只出现在右侧的绝不可能成为候选码，只出现在左侧的加未出现的一定是候选码的一部分，这时候通过求闭包找出候选码。注意候选码可能并不唯一。</li>\n</ul>\n<h4 id=\"1-3-判断规范化程度\"><a href=\"#1-3-判断规范化程度\" class=\"headerlink\" title=\"1.3 判断规范化程度\"></a>1.3 判断规范化程度</h4><p>1NF ${\\Rightarrow}^{消除非主属性对码的部分依赖}$2NF ${\\Rightarrow}^{消除非主属性对码的传递依赖}$3NF ${\\Rightarrow}^{消除主属性对不包含它的码的部分传递依赖}$BCNF<br><strong>如果都是主属性，至少是3NF</strong><br><strong>如果一个关系模式的候选码是单属性，那么肯定不存在对码的部分依赖</strong><br>方法：先求候选码得出主属性和非主属性，然后按照定义判断（部分依赖的定义背住）</p>\n<ul>\n<li>题意: $U&#x3D;${$A,B,C,D,E,G$} $F&#x3D;${$BE-&gt;G,BD-&gt;G,CD-&gt;A,CE-&gt;G,CDE-&gt;AB,BC-&gt;A,B-&gt;D$}<br>解: 主码$BCE$和$CDE$，主属性BCDE,非主属性AG。存在非主属性G对主码BCE的部分函数依赖，所以属于1NF.</li>\n</ul>\n<hr>\n<ul>\n<li>题意: $U&#x3D;${$A,B,C,D,E$} $F&#x3D;${$A-&gt;C,C-&gt;D,B-&gt;C,DE-&gt;C,CE-&gt;A$}<br>解: 主码$BE$,存在非主属性C对主码BE的部分函数依赖，所以属于1NF.</li>\n</ul>\n<h4 id=\"1-4-求最小函数依赖集\"><a href=\"#1-4-求最小函数依赖集\" class=\"headerlink\" title=\"1.4 求最小函数依赖集\"></a>1.4 求最小函数依赖集</h4><ul>\n<li>题意: $U&#x3D;${$A,B,C,D,E,G$} $F&#x3D;${$BE-&gt;G,BD-&gt;G,CD-&gt;A,CE-&gt;G,CDE-&gt;AB,BC-&gt;A,B-&gt;D$}<br>解: 第一步：$F&#x3D;${$BE-&gt;G,BD-&gt;G,CD-&gt;A,CE-&gt;G,CDE-&gt;A,CDE-&gt;B,BC-&gt;A,B-&gt;D$}<br>第二步：去除冗余的依赖<br>对于$BE-&gt;G$：${(BE)}^+&#x3D;BEDG$，即$G\\in{(BE)}^+$，所哟$BE-&gt;G$是冗余函数依赖，去除。<br>得到：$F&#x3D;${$BD-&gt;G,CD-&gt;A,CE-&gt;G,CDE-&gt;B,B-&gt;D$}<br>第三步：判断依赖得左部是否有冗余的属性（左部只有一个的就不用看了）<br>最终得到：$F_{min}&#x3D;${$B-&gt;G,CD-&gt;A,CE-&gt;G,CDE-&gt;B,B-&gt;D$}<br>即最小函数依赖集：$F_{min}&#x3D;${$BG,CDA,CEG,CDEB,BD$}</li>\n</ul>\n<hr>\n<ul>\n<li>题意: $U&#x3D;${$A,B,C,D$} $F&#x3D;${$A-&gt;CD,B-&gt;CD,C-&gt;D,D-&gt;C$}<br>解: 第一步：$F&#x3D;${$A-&gt;C,A-&gt;D,B-&gt;C,B-&gt;D,C-&gt;D,D-&gt;C$}<br>第二步：去除冗余的依赖<br>得到：$F&#x3D;${$A-&gt;D,B-&gt;D,C-&gt;D,D-&gt;C$}<strong>(注意答案并不唯一)</strong><br><strong>第三步：判断依赖得左部是否有冗余的属性（左部只有一个的就不用看了）</strong><br>最终得到：$F_{min}&#x3D;${$A-&gt;D,B-&gt;D,C-&gt;D,D-&gt;C$}<br>即最小函数依赖集：$F_{min}&#x3D;${$AD,BD,CD$}</li>\n</ul>\n<h4 id=\"1-5-保持函数依赖分解为3NF\"><a href=\"#1-5-保持函数依赖分解为3NF\" class=\"headerlink\" title=\"1.5 保持函数依赖分解为3NF\"></a>1.5 保持函数依赖分解为3NF</h4><p><strong>步骤:</strong><br>第一步：求出最小函数依赖集<br>第二步：是否包含所有属性<br>第三步：相同左部合并</p>\n<ul>\n<li>题意: $U&#x3D;${$A,B,C,D$} $F&#x3D;${$A-&gt;CD,B-&gt;CD,C-&gt;D,D-&gt;C$}<br>解：最小函数依赖集：$F_{min}&#x3D;${$A-&gt;D,B-&gt;D,C-&gt;D,D-&gt;C$}<br>相同左部合并得到：$F_{min}&#x3D;${$AD,BD,CD$}</li>\n</ul>\n<hr>\n<h4 id=\"1-6-判断分解后的关系模式是否保持函数依赖\"><a href=\"#1-6-判断分解后的关系模式是否保持函数依赖\" class=\"headerlink\" title=\"1.6 判断分解后的关系模式是否保持函数依赖\"></a>1.6 判断分解后的关系模式是否保持函数依赖</h4><p><strong>如果F上的每一个函数依赖都在其分解后的某一个关系上成立，则这个分解是保持依赖的（这是一个充分条件）</strong></p>\n<h4 id=\"1-7-保持函数依赖和无损连接性分解为3NF\"><a href=\"#1-7-保持函数依赖和无损连接性分解为3NF\" class=\"headerlink\" title=\"1.7 保持函数依赖和无损连接性分解为3NF\"></a>1.7 保持函数依赖和无损连接性分解为3NF</h4><p><strong>步骤:</strong><br>第一步：先分解为保持依赖的3NF<br>第二步：查看是否包含候选码</p>\n<ul>\n<li>题意：$F&#x3D;${$A-&gt;B,B-&gt;D,C-&gt;DE,D-&gt;CE$}<br>解：$F&#x3D;${$A-&gt;B,B-&gt;D,C-&gt;D,D-&gt;C,D-&gt;E$}<br>候选码:A<br>保持函数依赖的3NF：$F&#x3D;${$AD,BD,CDE$}<br><strong>包含候选码</strong></li>\n</ul>\n<h4 id=\"1-8-保持无损连接分解为BCNF\"><a href=\"#1-8-保持无损连接分解为BCNF\" class=\"headerlink\" title=\"1.8 保持无损连接分解为BCNF\"></a>1.8 保持无损连接分解为BCNF</h4><p>步骤:<br>第一步：求出关系模式的候选码<br>第二步：从依赖集中找出左部不是候选码的依赖进行分解</p>\n<ul>\n<li>题意：$F&#x3D;${$CS-&gt;G,C-&gt;T,TH-&gt;R,HR-&gt;C,HS-&gt;R$},将其分解成BCNF并保持无损连接<br>解：$U &#x3D; {C,S,G,T,H,R}$<br>$L:SH$<br>$R:G$<br>$N:$<br>$LR:CTR$</li>\n</ul>\n<p>${SH}^+&#x3D;SHRCGT&#x3D;U$,<strong>所以$SH$为候选码</strong><br>分解：$R_1:CSG F_1:{CS-&gt;G}$那么$R_2:{CSTHR}$<strong>(去掉F1中右部的那个)</strong> $F_2:{C-&gt;T,TH-&gt;R,HR-&gt;C,HS-&gt;R}$<br>显然此时$R_1$是BCNF;而$R_2$不是，所以对$R_2$继续分解</p>\n<hr>\n<p>$R_{21}:CT$  $F_{21}:{C-&gt;T}$   那么$R_{22}:CSHR$  $F_{22}:{CH-&gt;R,HR-&gt;C,HS-&gt;R}$<strong>(去掉$F_{21}$中右部的那个,对于左边的，看谁能推出它，就拿谁替换他)</strong><br>显然此时$R_{21}$,$F_{21}$是BCNF;而$R_{22}$不是，所以对$R_{22}$继续分解</p>\n<hr>\n<p>$R_{221}:CHR$  $F_{221}:{CH-&gt;R}$<strong>(这个是BCNF)</strong><br>$R_{222}:CSH$  $F_{222}:{HC-&gt;C,HS-&gt;C}$即$F_{222}:{HS-&gt;C}$<br><strong>(HC-&gt;C属于平凡函数依赖,不用写.而HS-&gt;R-&gt;C)</strong><br>最终分解为:$R_1,R_{21},R_{221},R_{222}$;即：$CSG,CT,CHR,CSH$</p>\n<h4 id=\"1-9-判断分解后的关系模式是否保持无损连接\"><a href=\"#1-9-判断分解后的关系模式是否保持无损连接\" class=\"headerlink\" title=\"1.9 判断分解后的关系模式是否保持无损连接\"></a>1.9 判断分解后的关系模式是否保持无损连接</h4><p><strong>$P_{197}$的11行:应当注意的是，若某个btli被更改，那么该表的li列中凡是btli的符号（不管它是否是开始找到的那些行）均应该做相应的修改</strong></p>\n<ul>\n<li>题意：$F&#x3D;${$A-&gt;D,E-&gt;D,D-&gt;B,BC-&gt;D,DC-&gt;A$},$\\rho$&#x3D;{$AB,AE,EC,DBC,AC$}</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\"></th>\n<th align=\"center\">A</th>\n<th align=\"center\">B</th>\n<th align=\"center\">C</th>\n<th align=\"center\">D</th>\n<th align=\"center\">E</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">AB</td>\n<td align=\"center\">$a_1$</td>\n<td align=\"center\">$a_2$</td>\n<td align=\"center\">$b_{13}$</td>\n<td align=\"center\">$b_{14}$</td>\n<td align=\"center\">$b_{15}$</td>\n</tr>\n<tr>\n<td align=\"center\">AE</td>\n<td align=\"center\">$a_1$</td>\n<td align=\"center\">$b_{22}$</td>\n<td align=\"center\">$b_{23}$</td>\n<td align=\"center\">$b_{24}$</td>\n<td align=\"center\">$a_5$</td>\n</tr>\n<tr>\n<td align=\"center\">EC</td>\n<td align=\"center\">$b_{31}$</td>\n<td align=\"center\">$b_{32}$</td>\n<td align=\"center\">$a_3$</td>\n<td align=\"center\">$b_{34}$</td>\n<td align=\"center\">$a_5$</td>\n</tr>\n<tr>\n<td align=\"center\">DBC</td>\n<td align=\"center\">$b_{41}$</td>\n<td align=\"center\">$a_{2}$</td>\n<td align=\"center\">$a_3$</td>\n<td align=\"center\">$a_{4}$</td>\n<td align=\"center\">$b_{45}$</td>\n</tr>\n<tr>\n<td align=\"center\">AC</td>\n<td align=\"center\">$a_{1}$</td>\n<td align=\"center\">$b_{52}$</td>\n<td align=\"center\">$a_3$</td>\n<td align=\"center\">$b_{54}$</td>\n<td align=\"center\">$b_{55}$</td>\n</tr>\n</tbody></table>\n<p>$\\Downarrow$</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\"></th>\n<th align=\"center\">A</th>\n<th align=\"center\">B</th>\n<th align=\"center\">C</th>\n<th align=\"center\">D</th>\n<th align=\"center\">E</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">AB</td>\n<td align=\"center\">$a_1$</td>\n<td align=\"center\">$a_2$</td>\n<td align=\"center\">$b_{13}$</td>\n<td align=\"center\">$a_{4}$</td>\n<td align=\"center\">$b_{15}$</td>\n</tr>\n<tr>\n<td align=\"center\">AE</td>\n<td align=\"center\">$a_1$</td>\n<td align=\"center\">$a_{2}$</td>\n<td align=\"center\">$b_{23}$</td>\n<td align=\"center\">$a_{4}$</td>\n<td align=\"center\">$a_5$</td>\n</tr>\n<tr>\n<td align=\"center\">EC</td>\n<td align=\"center\">$a_{1}$</td>\n<td align=\"center\">$a_{2}$</td>\n<td align=\"center\">$a_3$</td>\n<td align=\"center\">$a_{4}$</td>\n<td align=\"center\">$a_5$</td>\n</tr>\n<tr>\n<td align=\"center\">DBC</td>\n<td align=\"center\">$a_{1}$</td>\n<td align=\"center\">$a_{2}$</td>\n<td align=\"center\">$a_3$</td>\n<td align=\"center\">$a_{4}$</td>\n<td align=\"center\">$b_{45}$</td>\n</tr>\n<tr>\n<td align=\"center\">AC</td>\n<td align=\"center\">$a_{1}$</td>\n<td align=\"center\">$a_{2}$</td>\n<td align=\"center\">$a_3$</td>\n<td align=\"center\">$a_{4}$</td>\n<td align=\"center\">$b_{55}$</td>\n</tr>\n</tbody></table>\n<p><strong>存在全a行，所以是保持无损连接。</strong></p>\n<h3 id=\"2-查询优化树\"><a href=\"#2-查询优化树\" class=\"headerlink\" title=\"2.查询优化树\"></a>2.查询优化树</h3><p>步骤:<br>第一步：画出初始的查询优化树(自下而上)<br>第二步：将选择操作“下沉”（选择先于连接或者笛卡尔积）</p>\n<h3 id=\"3-E-R图和转化成关系模式\"><a href=\"#3-E-R图和转化成关系模式\" class=\"headerlink\" title=\"3.E-R图和转化成关系模式\"></a>3.E-R图和转化成关系模式</h3><p>对于实体型间的联系有以下不同的情况:<br>(1)<strong>一个1:1联系可以转换为一个独立的关系模式，也可以与任意一端对应的关系模式合并</strong>。如果转换为一个独立的关系模式，则与该联系相连的各实体的码以及联系本身的属性均转换为关系的属性，每个实体的码均是该关系的候选码。<font color=\"#dd0000\">如果与某一端实体对应的关系模式合并,则需要在该关系模式的属性中加入另一个关系模式的码和联系本身的属性。</font><br><br>(2）<strong>一个1:n联系可以转换为一个独立的关系模式，也可以与n端对应的关系模式合并</strong>。如果转换为一个独立的关系模式，则与该联系相连的各实体的码以及联系本身的属性均转换为关系的属性,<font color=\"#dd0000\">而关系的码为n端实体的码。</font><br><br>(3）<strong>一个m:n联系转换为一个关系模式</strong>，与该联系相连的各实体的码以及联系本身的属性均转换为关系的属性，各实体的码组成关系的码或关系码的一部分。<br>(4)<strong>三个或三个以上实体间的一个多元联系可以转换为一个关系模式</strong>。与该多元联系相连的各实体的码以及联系本身的属性均转换为关系的属性，各实体的码组成关系的码或关系码的一部分。<br>(5）<strong>具有相同码的关系模式可合并。</strong></p>\n<h3 id=\"4-计算机网络\"><a href=\"#4-计算机网络\" class=\"headerlink\" title=\"4.计算机网络\"></a>4.计算机网络</h3><h4 id=\"4-1计算机网络体系\"><a href=\"#4-1计算机网络体系\" class=\"headerlink\" title=\"4.1计算机网络体系\"></a>4.1计算机网络体系</h4><p>计算机网络<strong>体系结构</strong>分为3种：OSI体系结构（七层），TCP&#x2F;IP体系结构（四层），五层体系结构。</p>\n<ul>\n<li><strong>OSI体系结构</strong>: 概念清楚，理论也比较完整，但是它既复杂又不实用。</li>\n<li><strong>TCP&#x2F;IP体系结构</strong>:TCP&#x2F;IP是一个四层体系结构，得到了广泛的运用。</li>\n<li><strong>五层体系结构</strong>:为了方便学习，<strong>折中OSI体系结构和TCP&#x2F;IP体系结构</strong>，综合二者的优点，这样既简洁，又能将概念讲清楚。</li>\n</ul>\n<p><img src=\"/2022/03/15/%E5%93%88%E5%B7%A5%E7%A8%8B%E5%A4%8D%E8%AF%95%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84.png\" alt=\"计算机网络体系结构\"></p>\n<p>TCP&#x2F;IP与OSI最大的不同在于：OSI是一个理论上的网络通信模型，而TCP&#x2F;IP则是实际运行的<strong>网络协议</strong>。</p>\n<h4 id=\"4-2五层网络体系结构概述\"><a href=\"#4-2五层网络体系结构概述\" class=\"headerlink\" title=\"4.2五层网络体系结构概述\"></a>4.2五层网络体系结构概述</h4><ul>\n<li><strong>应用层</strong>：应用层是网络协议的最高层，主要任务<strong>通过进程间的交互完成特定网络应用</strong>。应用层协议定义的是<strong>应用程序（进程）间通信和交互的规则</strong>。</li>\n</ul>\n<p>对于不同的网络应用需要有不同的应用层协议，在互联网中的应用层协议很多，如域名系统DNS，支持万维网应用的HTTP协议，支持电子邮件的SMTP协议，等等。应用层交互的数据单元称为<strong>报文</strong>。</p>\n<ul>\n<li><p><strong>运输层</strong>：有时也译为传输层，它负责为两台主机中的进程提供通信服务。该层主要有以下两种协议：</p>\n<ul>\n<li><p>传输控制协议 (Transmission Control Protocol，TCP)：提供面向连接的、可靠的数据传输服务，数据传输的基本单位是报文段（segment）；</p>\n</li>\n<li><p>用户数据报协议 (User Datagram Protocol，UDP)：提供无连接的、尽最大努力的数据传输服务，但不保证数据传输的可靠性，数据传输的基本单位是用户数据报。</p>\n</li>\n</ul>\n</li>\n<li><p><strong>网络层</strong>：网络层负责为分组网络中的不同主机提供通信服务，并通过选择合适的路由将数据传递到目标主机。在发送数据时，网络层把运输层产生的报文段或用户数据封装成<strong>分组</strong>或<strong>包</strong>进行传送。</p>\n</li>\n</ul>\n<p>在TCP&#x2F;IP体系中，由于网络层使用IP协议，因此分组也叫<strong>IP数据报</strong>。</p>\n<ul>\n<li><p><strong>数据链路层</strong>：数据链路层通常简称为链路层。数据链路层在两个相邻节点传输数据时，将网络层交下来的IP数据报<strong>组装成帧</strong>，在两个相邻节点之间的链路上传送<strong>帧</strong>。</p>\n</li>\n<li><p><strong>物理层</strong>：保数据可以在各种物理媒介上进行传输，为数据的传输提供可靠的环境。</p>\n</li>\n</ul>\n<p>以下是应用进程的数据在各层之间的传递过程中所经历的变化的简单示意图：<br><img src=\"/2022/03/15/%E5%93%88%E5%B7%A5%E7%A8%8B%E5%A4%8D%E8%AF%95%E7%AC%94%E8%AE%B0/%E4%BC%A0%E9%80%92%E8%BF%87%E7%A8%8B.png\" alt=\"传递过程\"></p>\n<h3 id=\"5-网络安全\"><a href=\"#5-网络安全\" class=\"headerlink\" title=\"5.网络安全\"></a>5.网络安全</h3><h4 id=\"5-1-传输层概述\"><a href=\"#5-1-传输层概述\" class=\"headerlink\" title=\"5.1 传输层概述\"></a>5.1 传输层概述</h4><h5 id=\"5-1-1概述\"><a href=\"#5-1-1概述\" class=\"headerlink\" title=\"5.1.1概述\"></a>5.1.1概述</h5><p>TCP隶属于传输层，所以要首先明白传输层的作用是什么，传输层能够实现<strong>端到端</strong>的连接。比如说我们用QQ与别人发信息，网络层能够将信息发送到对方的主机上，<strong>主机上使用什么协议来接受这个信息就由传输层来完成</strong>，所以传输层实现的是<strong>进程到进程间的连接</strong>。</p>\n<p>传输层提供的是应用程序间的逻辑通信，也就是说它向高层(应用层)屏蔽了下面网络层的细节，使应用程序看起来好像是在传输层之间沿着水平方向传输数据，但事实上两者之间并没有这样一条实际的物理连接。</p>\n<h5 id=\"5-1-2功能\"><a href=\"#5-1-2功能\" class=\"headerlink\" title=\"5.1.2功能\"></a>5.1.2功能</h5><ul>\n<li>网络层提供了<strong>点到点</strong>的连接，而传输层提供了<strong>端到端</strong>的服务，也就是进程间的通信；</li>\n<li>网络层提供的是<strong>不可靠</strong>的连接，传输层能够实现<strong>可靠</strong>的传输；</li>\n</ul>\n<h5 id=\"5-1-3协议\"><a href=\"#5-1-3协议\" class=\"headerlink\" title=\"5.1.3协议\"></a>5.1.3协议</h5><ul>\n<li>TCP(Transmission Control Protocol) 传输控制协议</li>\n<li>UDP(User Datagram Protocol) 用户数据报协议</li>\n</ul>\n<h5 id=\"5-1-4传输层和应用层的关系\"><a href=\"#5-1-4传输层和应用层的关系\" class=\"headerlink\" title=\"5.1.4传输层和应用层的关系\"></a>5.1.4传输层和应用层的关系</h5><h6 id=\"5-1-4-1端口\"><a href=\"#5-1-4-1端口\" class=\"headerlink\" title=\"5.1.4.1端口\"></a>5.1.4.1端口</h6><p>TCP&#x2F;IP传输层用一个16位端口号(0~65535)来标识一个端口，但是注意，端口号只具有本地意义，不同计算机的相同端口号没有关联，0一般不用，所以允许有65535个不同的端口号。</p>\n<p>两个计算机的进程要实现通信，不仅必须知道对方的IP地址(为了找到对方的计算机)，而且还要知道对方的端口号(为了找到对方计算机中的应用程序)</p>\n<p><strong>问：怎么理解端口？</strong><br>在网络技术中，端口(Port)大致有两种意思：</p>\n<ol>\n<li>硬件端口，也就是设备间交互的接口，是物理意义上的端口，比如集线器，交换机等设备的接口；</li>\n<li>软件端口，指的是应用层的的进程和运输层进行层间交互的一种地址，是逻辑意义上的端口，一般指的是TCP&#x2F;IP协议中的端口。正是这种端口，所有传输层实现的是端到端的通信；</li>\n</ol>\n<p>在TCP&#x2F;IP协议中，用”源IP地址、目的IP地址、源端口号、目的端口号、协议号”这五部分组成一个套接字，来标识一次通信；</p>\n<ul>\n<li>一个进程可以绑定多个端口号，因为一个进程可以有很多线程或者说是子进程等，这每一个都对应一个端口号，所以一个进程可以绑定多个端口号；</li>\n<li>但是一个端口号不可以被多个进程绑定，每一个端口号都与唯一的进程对应，if有多个了，那通信不就乱了套了吗；</li>\n</ul>\n<p>一个端口号一个进程，一个进程可以多个端口；</p>\n<h6 id=\"5-1-4-2端口号分类\"><a href=\"#5-1-4-2端口号分类\" class=\"headerlink\" title=\"5.1.4.2端口号分类\"></a>5.1.4.2端口号分类</h6><ul>\n<li>公认端口：0~1023，明确与某种服务绑定，比如各种协议；</li>\n<li>注册端口：1024~65535：松散的绑定一些服务，也就是有许多服务绑定这些端口。<br>TCP&#x2F;UDP加上特定的端口号就可以表示应用层的某个协议；<br><strong>问：知道哪些常用的端口号</strong></li>\n<li>TCP+20&#x2F;21: ftp协议(文件传输协议)；</li>\n<li>TCP+22: ssh协议(专门为远程登录提供的安全性协议)</li>\n<li>TCP+25: SMTP协议(简单邮件传输协议)</li>\n<li>TCP&#x2F;UDP+53: DNS协议(域名解析协议)</li>\n<li>TCP+80: Http协议(超文本传输协议)</li>\n<li>TCP+443: Https协议(超文本传输安全协议)</li>\n</ul>\n<h4 id=\"5-2TCP协议\"><a href=\"#5-2TCP协议\" class=\"headerlink\" title=\"5.2TCP协议\"></a>5.2TCP协议</h4><p>一个TCP连接不仅需要端口，还需要IP地址来确定通信的主机。所以IP首部中的发送端IP地址加上发送端端口号就形成了连接的发送端；目标端IP地址再加上接收端端口号就确定了连接的接收端。这样就唯一地确定了一个TCP连接。</p>\n<p>在TCP&#x2F;IP协议中，TCP协议是基于IP协议的。<strong>IP协议是对应于网络层的协议，它是一个不可靠的协议</strong>。TCP协议的可靠性保证给IP协议提供了可靠环境，从而使得IP协议可以不必考虑传输的可靠性，专注于网络层的功能。这也是协议分层的初衷。</p>\n<p><strong>IP协议解决了数据包的路由和传输，上层的TCP就可以不再关注路由和寻址；TCP协议解决了传输的可靠性和顺序问题，上层的应用层就可以直接使用TCP协议进行数据传输，不再需要关心数据段的丢失和重复</strong></p>\n<p><strong>http是要基于TCP连接基础上的，简单的说，TCP就是单纯的简历连接，不涉及任何我们需要请求的数据；http协议使用来收发数据，就是为实际应用而来的；</strong></p>\n<p>TCP被认为是一种流式传输层服务。它表示TCP发送端从应用程序接收到字符流，并从这个流中提取适当的长度创建数据段，然后将其发送到网络上。TCP接收端则接收数据段，从中提取数据，若没有按序号到达还要对其进行排序，并将其作为字符流交付给接收端应用程序。这样就完成了数据的传输。</p>\n<p>下图是一张典型的TCP面向流的传输<br><img src=\"/2022/03/15/%E5%93%88%E5%B7%A5%E7%A8%8B%E5%A4%8D%E8%AF%95%E7%AC%94%E8%AE%B0/TCP%E9%9D%A2%E5%90%91%E6%B5%81%E7%9A%84%E4%BC%A0%E8%BE%93.png\" alt=\"TCP面向流的传输\"></p>\n<p><strong>问：TCP怎样实现可靠传输？</strong><br>TCP采用了很多手段来保证可靠传输</p>\n<ol>\n<li>连接管理机制：在传输数据前需要进行建立连接,也就是三次握手，在数据传送完后还需要释放连接，也就是四次挥手。</li>\n<li>数据分段：TCP以报文段为单位进行发送，在建立TCP连接的时候，两端协商TCP报文段中的数据字段(也称为数据包)的最大长度(MSS);其长度加上首部长度就是整个TCP报文段的长度；</li>\n<li>校验和：提供了一种简单的校验，如果收到段的校验和和原来的有差别，那接收方就会丢掉这个报文段；</li>\n<li>序列号：TCP给发送的数据包的编号，如果接收端收到乱序后会进行重新排序，收到重复的也会进行丢弃；</li>\n<li>确认应答：接收方收到报文后会回复确认(累计确认：对所有收到的按序的只确认最后，确认号之前的数据已经全部收到了)；</li>\n<li>重发控制：TCP发出一个报文段后，就会启动一个定时器，等接收方确认这个报文段，如果不能及时收到确认，将重发这个报文段；</li>\n<li>流量控制：通信的双方都有固定大小的缓冲区，TCP的接收端只允许发送端发送接收端缓冲区能接纳的数据。当接收方来不及处理发送方的数据，就把窗口缩小，并把窗口值告诉发送端（提示发送方降低发送的速率，防止包丢失）是利用滑动窗口来实现；</li>\n<li>拥塞控制：当网络产生拥堵时，减少数据的发送；主要是通过拥塞窗口来实现；(慢开始和拥塞避免；快重传和快恢复)；</li>\n</ol>\n<h4 id=\"5-3网安概念注解\"><a href=\"#5-3网安概念注解\" class=\"headerlink\" title=\"5.3网安概念注解\"></a>5.3网安概念注解</h4><ul>\n<li><p><a href=\"https://zh.wikipedia.org/wiki/%E7%89%B9%E6%B4%9B%E4%BC%8A%E6%9C%A8%E9%A9%AC_(%E7%94%B5%E8%84%91)\">特洛伊木马（Trojan Horse）</a>简称木马，在计算机领域中指的是一种后门程序，是黑客用来盗取其他用户的个人消息，甚至是远程控制对方的电子设备而加密制作，然后通过传播或者骗取目标执行该程序，以达到盗取密码等各种数据资料等目的。<strong>和病毒相似</strong>，木马程序有很强的隐秘性，会随著操作系统启动而启动。</p>\n</li>\n<li><p>TCP握手协议相关概念</p>\n<ul>\n<li><p>半连接<br>  在三次握手过程中，服务器发送SYN-ACK之后，收到客户端的ACK之前的TCP连接称为半连接(half-open connect).此时服务器处于Syn_RECV状态.当收到ACK后，服务器转入ESTABLISHED状态.</p>\n</li>\n<li><p>半连接队列<br>  在三次握手协议中，服务器维护一个半连接队列，存放半连接。该队列为每个客户端的SYN包（syn&#x3D;j）开设一个条目，该条目表明服务器已收到SYN包，并向客户发出确认，正在等待客户的ACK确认包。这些条目所标识的连接在服务器处于Syn_RECV状态，当服务器收到客户的确认包时，删除该条目，服务器进入ESTABLISHED状态。</p>\n</li>\n<li><p>Backlog参数<br>  表示半连接队列的最大容纳数目。</p>\n</li>\n<li><p>SYN-ACK 重传次数<br>  服务器发送完SYN－ACK包，如果未收到客户确认包，服务器进行首次重传，等待一段时间仍未收到客户确认包，进行第二次重传，如果重传次数超过系统规定的最大重传次数，系统将该连接信息从半连接队列中删除。注意，每次重传等待的时间不一定相同。</p>\n</li>\n<li><p>半连接存活时间<br>  是指半连接队列的条目存活的最长时间，也即服务从收到SYN包到确认这个报文无效的最长时间，该时间值是所有重传请求包的最长等待时间总和。有时我们也称半连接存活时间为Timeout时间、SYN_RECV存活时间。</p>\n</li>\n</ul>\n</li>\n<li><p>SYN攻击</p>\n<ul>\n<li>SYN攻击属于DOS攻击的一种，它利用TCP协议缺陷，通过发送大量的半连接请求，耗费CPU和内存资源。</li>\n<li>SYN攻击利用TCP协议三次握手的原理，大量发送伪造源IP的SYN包也就是伪造第一次握手数据包，服务器每接收到一个SYN包就会为这个连接信息分配核心内存并放入半连接队列，如果短时间内接收到的SYN太多，半连接队列就会溢出，操作系统会把这个连接信息丢弃造成不能连接，当攻击的SYN包超过半连接队列的最大值时，正常的客户发送SYN数据包请求连接就会被服务器丢弃。目标系统运行缓慢，严重者引起网络堵塞甚至系统瘫痪。每种操作系统半连接队列大小不一样所以抵御SYN攻击的能力也不一样。</li>\n<li>Syn攻击是一个典型的DOS攻击。检测SYN攻击非常的方便，当你在服务器上看到大量的半连接状态时，特别是源IP地址是随机的，基本上可以断定这是一次SYN攻击.在Linux下可以如下命令检测是否被Syn攻击</li>\n</ul>\n</li>\n<li><p><a href=\"https://baike.baidu.com/item/%E7%A9%BA%E8%BF%9E%E6%8E%A5\">空连接</a><br>使用命令 <code>net use \\\\*.*.*.*（IP地址）\\ipc$ &quot;&quot; /user:&quot;&quot;</code> 就可以简单地和目标建立一个空连接（需要目标开放**ipc$**）。<br>空连接就是不用密码和用户名的IPC连接，在Windows下，它是用Net命令来实现的．</p>\n</li>\n<li><p><a href=\"https://baike.baidu.com/item/Unicode%E6%BC%8F%E6%B4%9E/3791874\">Unicode漏洞</a><br>Unicode漏洞是攻击者可通过IE浏览器远程运行被攻击计算机的cmd.exe文件，从而使该计算机的文件暴露，且可随意执行和更改文件的漏洞。<br>对策</p>\n<ul>\n<li>(1)为避免该类攻击，建议下载最新补丁</li>\n<li>(2)安装<a href=\"https://zhuanlan.zhihu.com/p/145430397\">IIS</a> Lockdown和URL Scan来加固系统，从而避免该类攻击。</li>\n<li>(3)安装Windows 2000的Service Pack 2以上的版本。</li>\n</ul>\n</li>\n<li><p><a href=\"https://zhuanlan.zhihu.com/p/145430397\">IIS</a></p>\n<ul>\n<li>IIS是缩写，全称Internet Information Services ( IIS,互联网信息服务 ),是由微软公司提供的基于运行Microsoft Windows的互联网基本服务。</li>\n<li>IIS是指World Wide Web server服务，IIS是一种Web（网页）服务组件，专业的说，IIS可以赋予一部主机电脑一组以上的IP地址，而且还可以有一个以上的域名作为Web网站。做过服务器配置的都应该知道IIS.** 制作好了网站怎么才能让别人浏览，就是通过网站服务器来实现的。IIS只是网站服务器的一种而已。**</li>\n<li>Internet Information Service（IIS）是windows开设web网页服务的组件，用来搭载网站运行程序的平台的。还能提供FTP，SMTP等服务。</li>\n</ul>\n</li>\n<li><p><a href=\"https://www.cnblogs.com/ranyonsue/p/5984001.html\">HTTP协议</a></p>\n<ul>\n<li><p>HTTP协议是Hyper Text Transfer Protocol（超文本传输协议）的缩写,是用于从万维网（WWW:World Wide Web ）服务器传输超文本到本地浏览器的传送协议。</p>\n</li>\n<li><p>HTTP是一个基于TCP&#x2F;IP通信协议来传递数据（HTML 文件, 图片文件, 查询结果等）。</p>\n</li>\n<li><p>HTTP是一个属于应用层的面向对象的协议，由于其简捷、快速的方式，适用于分布式超媒体信息系统。它于1990年提出，经过几年的使用与发展，得到不断地完善和扩展。目前在WWW中使用的是HTTP&#x2F;1.0的第六版，HTTP&#x2F;1.1的规范化工作正在进行之中，而且HTTP-NG(Next Generation of HTTP)的建议已经提出。</p>\n</li>\n<li><p>HTTP协议工作于客户端-服务端架构为上。浏览器作为HTTP客户端通过URL向HTTP服务端即WEB服务器发送所有请求。Web服务器根据接收到的请求后，向客户端发送响应信息。</p>\n</li>\n</ul>\n</li>\n<li><p>FTP协议</p>\n<ul>\n<li>FTP（File Transfer Protocol，文件传输协议） 是 TCP&#x2F;IP 协议组中的协议之一。FTP协议包括两个组成部分，其一为FTP服务器，其二为FTP客户端。其中FTP服务器用来存储文件，用户可以使用FTP客户端通过FTP协议访问位于FTP服务器上的资源。在开发网站的时候，通常利用FTP协议把网页或程序传到Web服务器上。此外，由于FTP传输效率非常高，在网络上传输大的文件时，一般也采用该协议。</li>\n<li>默认情况下FTP协议使用TCP端口中的 20和21这两个端口，其中20用于传输数据，21用于传输控制信息。但是，是否使用20作为传输数据的端口与FTP使用的传输模式有关，如果采用主动模式，那么数据传输端口就是20；如果采用被动模式，则具体最终使用哪个端口要服务器端和客户端协商决定。</li>\n</ul>\n</li>\n<li><p>gopher协议<br>gopher协议是一个在http协议诞生前用来访问Internet资源的协议可以理解为http协议的前身或简化版，虽然很古老但现在很多库还支持gopher协议而且gopher协议功能很强大。<br>它可以实现多个数据包整合发送，然后gopher服务器将多个数据包捆绑着发送到客户端，这就是它的菜单响应。比如使用一条gopher协议的curl命令就能操作mysql数据库或完成对redis的攻击等等。gopher协议使用tcp可靠连接。</p>\n</li>\n<li><p>MS SQL-SERVER空口令入侵<br>在微软的MSSQL7.0以下的版本在默认安装时其SA(System Administrator)口令为空，所开端口为1433，一个入侵者只需要使用一个MS SQL客户端与SA口令为空的服务器连接就可以获得System的权限。</p>\n</li>\n<li><p><a href=\"http://www.it3721.com/data/2010/0913/381.html\">防止Access数据库被非法下载的方法</a></p>\n<ul>\n<li>给数据库起一个随机复杂的名称</li>\n<li>“#”式</li>\n<li>asp式</li>\n<li>asa式</li>\n</ul>\n</li>\n<li><p>SQL注入攻击<br>SQL注入攻击是黑客对数据库进行攻击的常用手段之一。随着B&#x2F;S模式应用开发的发展，使用这种模式编写应用程序的程序员也越来越多。但是由于程序员的水平及经验也参差不齐，相当大一部分程序员在编写代码的时候，没有对用户输入数据的合法性进行判断，使应用程序存在安全隐患。用户可以提交一段数据库查询代码，根据程序返回的结果，获得某些他想得知的数据，这就是所谓的SQL Injection，即SQL注入。</p>\n</li>\n<li><p><a href=\"https://baike.baidu.com/item/ICMP\">ICMP（Internet Control Message Protocol）Internet控制报文协议</a>。它是TCP&#x2F;IP协议簇的一个子协议，用于在IP主机、路由器之间传递控制消息。控制消息是指网络通不通、主机是否可达、路由是否可用等网络本身的消息。这些控制消息虽然并不传输用户数据，但是对于用户数据的传递起着重要的作用。</p>\n</li>\n<li><p>PC机的意思就是个人计算机。</p>\n</li>\n<li><p><strong>防火墙（英语：Firewall）</strong>技术是通过有机结合各类用于安全管理与筛选的软件和硬件设备，帮助计算机网络于其内、外网之间构建一道相对隔绝的保护屏障，以保护用户资料与信息安全性的一种技术。</p>\n</li>\n<li><p><a href=\"https://www.wangan.com/discuss/wikis/644\">land攻击</a><br>LAND 攻击（局域网拒绝服务攻击，英语：Local Area Network Denial attack，缩写：LAND attack，是拒绝服务攻击（DoS 攻击）的一种，通过发送精心构造的、具有相同源地址和目标地址的欺骗数据包，致使缺乏相应防护机制的目标设备瘫痪。这种攻击方法最早在 1997 年被某人以 “m3lt” 的名称提出，并于多年之后的 Windows Server 2003、[Windows XP SP2 等操作系统中重现。</p>\n</li>\n<li><p><a href=\"https://blog.csdn.net/wdkirchhoff/article/details/45560513\">Smurf攻击</a><br>Smurf 攻击是分布式拒绝服务 (DDoS) 攻击的一种形式，该攻击会导致计算机网络停止服务。<br>原理：攻击者向网络广播地址发送ICMP包，并将回复地址设置成受害网络的广播地址，通过使用ICMP应答请求数据包来淹没受害主机的方式进行，最终导致该网络的所有主机都对次ICMP应答请求作出答复，导致网络阻塞。更加复杂的Smurf攻击攻击将源地址改为第三方受害者，最终导致第三方崩溃。</p>\n</li>\n<li><p>UDP-Flood攻击<br>UDP洪泛是一种拒绝服务攻击，其中大量的用户数据报协议（UDP）数据包被发送到目标服务器，目的是压倒该设备的处理和响应能力。防火墙保护目标服务器也可能因UDP泛滥而耗尽，从而导致对合法流量的拒绝服务。</p>\n</li>\n<li><p><a href=\"https://baike.baidu.com/item/Teardrop%E6%94%BB%E5%87%BB/5957505\">Teardrop攻击</a><br>Teardrop攻击是一种畸形报文攻击。是基于UDP的病态分片数据包的攻击方法，其工作原理是向被攻击者发送多个分片的IP包（IP分片数据包中包括该分片数据包属于哪个数据包以及在数据包中的位置等信息），某些操作系统收到含有重叠偏移的伪造分片数据包时将会出现系统崩溃、重启等现象。</p>\n</li>\n<li><p>Hotfix是微软公司研发的一个程序，针对某一个具体的系统漏洞或安全问题而发布的专门解决该漏洞或安全问题，通常称为修补程序。</p>\n</li>\n<li><p><a href=\"https://baike.baidu.com/item/%E5%86%B2%E5%87%BB%E6%B3%A2%E7%97%85%E6%AF%92/11036738\">冲击波病毒</a><br>冲击波病毒(Worm.Blaster)是利用在2003年7月21日公布的RPC漏洞进行传播的，该病毒于当年8月爆发。病毒运行时会不停地利用IP扫描技术寻找网络上系统为Win2000或XP的计算机，找到后就利用DCOM&#x2F;RPC缓冲区漏洞攻击该系统，一旦攻击成功，病毒体将会被传送到对方计算机中进行感染，使系统操作异常、不停重启、甚至导致系统奔溃。另外，该病毒还会对系统升级网站进行拒绝服务攻击，导致该网站堵塞，使用户无法通过该网站升级系统。只要是计算机上有RPC服务并且没有打安全补丁的计算机都存在有RPC漏洞，具体涉及的操作系统是：Windows 2000\\XP\\Server 2003\\NT4.0。</p>\n</li>\n<li><p><a href=\"https://baike.baidu.com/item/RPC%E6%BC%8F%E6%B4%9E\">RPC漏洞</a>是远程过程调用的漏洞。</p>\n</li>\n<li><p>“红色代码”病毒是2001年7月15日发现的一种网络蠕虫病毒，感染运行Microsoft IIS Web服务器的计算机。其传播所使用的技术可以充分体现网络时代网络安全与病毒的巧妙结合，将网络蠕虫、计算机病毒、木马程序合为一体，开创了网络病毒传播的新路，可称之为划时代的病毒。如果稍加改造，将是非常致命的病毒，可以完全取得所攻破计算机的所有权限并为所欲为，可以盗走机密数据，严重威胁网络安全。</p>\n</li>\n<li><p><strong>TCSEC</strong>(Trusted Computer System Evaluation Criteria; commonly called the “Orange Book”)美国可信计算机系统评价标准是计算机系统安全评估的第一个正式标准，具有划时代的意义。该准则于1970年由美国国防科学委员会提出，并于1985年12月由美国国防部公布。TCSEC最初只是军用标准，后来延至民用领域。TCSEC将计算机系统的安全划分为4个等级、7个级别。</p>\n</li>\n</ul>\n<p>-<a href=\"https://baike.baidu.com/item/%E5%8C%85%E8%BF%87%E6%BB%A4%E6%8A%80%E6%9C%AF/4184498\">包过滤技术</a><br>基于协议特定的标准，路由器在其端口能够区分包和限制包的能力叫包过滤（Packet Filtering）。其技术原理在于加入IP过滤功能的路由器逐一审查包头信息，并根据匹配和规则决定包的前行或被舍弃，以达到拒绝发送可疑的包的目的。过滤路由器具备保护整个网络、高效快速并且透明等优点，同时也有定义复杂、消耗CPU资源、不能彻底防止地址欺骗、涵盖应用协议不全、无法执行特殊的安全策略并且不提供日志等局限性。</p>\n<ul>\n<li><p><a href=\"https://baike.baidu.com/item/%E5%8C%85%E8%BF%87%E6%BB%A4%E9%98%B2%E7%81%AB%E5%A2%99/327991\">包过滤防火墙</a></p>\n<ul>\n<li>包过滤防火墙是用一个软件查看所流经的数据包的包头（header），由此决定整个包的命运。它可能会决定丢弃（DROP）这个包，可能会接受（ACCEPT）这个包（让这个包通过），也可能执行其它更复杂的动作。</li>\n<li>包过滤是一种内置于Linux内核路由功能之上的防火墙类型，其防火墙工作在网络层和传输层。</li>\n</ul>\n</li>\n<li><p><a href=\"https://baike.baidu.com/item/%E7%8A%B6%E6%80%81%E6%A3%80%E6%B5%8B%E6%8A%80%E6%9C%AF/6338299\">状态检测技术</a><br>状态检测技术是防火墙近几年才应用的新技术。传统的包过滤防火墙只是通过检测IP包头的相关信息来决定数据流的通过还是拒绝，而状态检测技术采用的是一种基于连接的状态检测机制，将属于同一连接的所有包作为一个整体的数据流看待，构成连接状态表，通过规则表与状态表的共同配合，对表中的各个连接状态因素加以识别。这里动态连接状态表中的记录可以是以前的通信信息，也可以是其他相关应用程序的信息，因此，与传统包过滤防火墙的静态过滤规则表相比，它具有更好的灵活性和安全性。</p>\n</li>\n<li><p><a href=\"https://baike.baidu.com/item/%E7%8A%B6%E6%80%81%E6%A3%80%E6%B5%8B%E9%98%B2%E7%81%AB%E5%A2%99/3106862\">状态检测防火墙</a>采用了状态检测包过滤的技术，是传统包过滤上的功能扩展。</p>\n</li>\n<li><p><a href=\"https://baike.baidu.com/item/%E4%BB%A3%E7%90%86%E9%98%B2%E7%81%AB%E5%A2%99/9570104\">代理防火墙</a><br>代理防火墙通过一种代理（Proxy）技术参与到一个TCP连接的全过程。从内部发出的数据包经过这样的防火墙处理后，就好像是源于防火墙外部网卡一样，从而可以达到隐藏内部网结构的作用。这种类型的防火墙被网络安全专家和媒体公认为是最安全的防火墙。</p>\n</li>\n<li><p><a href=\"https://baike.baidu.com/item/%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1%E5%9E%8B%E9%98%B2%E7%81%AB%E5%A2%99/5189462\">代理服务型防火墙</a><br>代理服务型防火墙是防火墙的一种，代表某个专用网络同互联网进行通讯的防火墙，类似在股东会上某人以你的名义代理你来投票。当你将浏览器配置成使用代理功能时，防火墙就将你的浏览器的请求转给互联网；当互联网返回响应时，代理服务器再把它转给你的浏览器。代理服务器也用于页面的缓存，代理服务器在从互联网上下载特定页面前先从缓存器取出这些页面。内部网络与外部网络之间不存在直接连接。</p>\n</li>\n<li><p>加密和认证<br>首先我们需要区分加密和认证这两个基本概念。<br>加密是将数据资料加密，使得非法用户即使取得加密过的资料，也无法获取正确的资料内容，所以数据加密可以保护数据，防止监听攻击。其重点在于数据的安全性。身份认证是用来判断某个身份的真实性，确认身份后，系统才可以依不同的身份给予不同的权限。其重点在于用户的真实性。两者的侧重点是不同的。</p>\n</li>\n<li><p>公钥和私钥<br>在现代密码体制中加密和解密是采用<strong>不同的密钥</strong>（公开密钥），也就是<strong>非对称</strong>密钥密码系统，每个通信方均需要两个密钥，即公钥和私钥，这两把密钥可以互为加解密。公钥是公开的，不需要保密，而私钥是由个人自己持有，并且必须妥善保管和注意保密。<br>公钥私钥的原则：</p>\n<ul>\n<li>一个公钥对应一个私钥。</li>\n<li>密钥对中，让大家都知道的是公钥，不告诉大家，只有自己知道的，是私钥。</li>\n<li>如果用其中一个密钥加密数据，则只有对应的那个密钥才可以解密。</li>\n<li>如果用其中一个密钥可以进行解密数据，则该数据必然是对应的那个密钥进行的加密。</li>\n</ul>\n</li>\n</ul>\n<hr>\n<p><strong>总结</strong>：公钥和私钥是通过一种算法得到的一个密钥对(即一个公钥和一个私钥)，将其中的一个向外界公开，称为公钥；另一个自己保留，称为私钥。通过这种算法得到的密钥对能保证在世界范围内是唯一的。<br><strong>公钥和私钥是成对的，它们互相解密（密钥指公钥或私钥，密钥对指公钥加私钥）。</strong><br><strong>公钥和私钥都可以加密和解密。</strong><br><strong>私钥数字签名，公钥验证。</strong></p>\n<ul>\n<li><p>“MYDOOM”变种Q(Worm.Mydoom.q)病毒<br>大量发送病毒邮件，浪费网络和系统资源；大量病毒垃圾邮件可能造成中小型邮件服务器极不稳定，甚致崩溃的现象；自动从网络中下载后门木马，并立即执行。</p>\n</li>\n<li><p>爱虫病毒</p>\n<ul>\n<li>爱虫病毒(Vbs.loveletter)，又称“我爱你”(I Love You)病毒，是一种蠕虫病毒，它与1999年的梅丽莎病毒非常相似。据称，这个病毒可以改写本地及网络硬盘上面的某些文件。用户机器染毒以后，邮件系统将会变慢，并可能导致整个网络系统崩溃，当时在全球更是造成了百亿美元的损失。 </li>\n<li>2000年5月4日，一种名为“我爱你”的电脑病毒开始在全球各地迅速传播，短短的一两天内就侵袭了100多万台计算机。这个病毒是通过Microsoft Outlook电子邮件系统传播的，邮件的主题为“I LOVE YOU”，并包含一个附件。一旦在Microsoft Outlook里打开这个邮件，系统就会自动复制并向地址簿中的所有邮件电址发送这个病毒。</li>\n</ul>\n</li>\n<li><p><a href=\"https://www.kaspersky.com.cn/resource-center/threats/computer-viruses-vs-worms\">计算机病毒与蠕虫</a></p>\n<ul>\n<li>计算机病毒与蠕虫的一个重要区别是，病毒需要借助活动的宿主程序或已被感染的活动操作系统才能运行、造成破坏并感染其他可执行文件或文档；而蠕虫是独立的恶意程序，可以通过计算机网络进行自我复制和传播，不需要人工干预。</li>\n<li>病毒通常附加到可执行文件或 Word 文档。它们多通过 P2P 文件共享、受感染的网站和电子邮件附件下载进行传播。病毒侵入系统后，会保持休眠状态，直到被感染的宿主文件或程序被激活，反过来再激活病毒，使其能够在您的系统上运行和复制。</li>\n<li>相反，蠕虫无需借助宿主程序即可运行、自我复制和传播。一旦蠕虫侵入系统（通常通过网络连接或以下载的文件形式），就会立即自行创建多个副本，并通过网络或互联网连接传播，感染网络上任何没有得到充分保护的计算机和服务器。网络蠕虫的每个后续副本也可以自我复制，因此可以通过互联网和计算机网络非常迅速地传播感染。</li>\n</ul>\n</li>\n<li><p><a href=\"https://baike.baidu.com/item/Worm.Klez\">Worm.Klez</a><br>一个通过INTERNET以及EMAIL附件传播感染的蠕虫类病毒，本身是一个WINDOWS PE格式的可执行程序，大约在57-65K之间，是用MICROSOFT VISUALC++编写，它不仅在本地的网络散布并且通过电子邮件消息传播，还会在WINDOWS临时文件夹下建立一个名字为以字母K开头的可执行文件，把“ Win32.Klez ”病毒写进去，并且启动该病毒。</p>\n</li>\n<li><p><a href=\"https://baike.baidu.com/item/IP%E7%A2%8E%E7%89%87%E6%94%BB%E5%87%BB/15686325\">IP碎片攻击</a><br>IP碎片攻击指的是一种计算机程序重组的漏洞。链路层具有最大传输单元MTU这个特性，它限制了数据帧的最大长度，不同的网络类型都有一个上限值。以太网的MTU是1500，你可以用 netstat -i 命令查看这个值。如果IP层有数据包要传，而且数据包的长度超过了MTU，那么IP层就要对数据包进行分片(fragmentation)操作，使每一片的长度都小于或等于MTU。我们假设要传输一个UDP数据包，以太网的MTU为1500字节，一般IP首部为20字节，UDP首部为8字节，数据的净荷(payload)部分预留是1500-20-8&#x3D;1472字节。如果数据部分大于1472字节，就会出现分片现象。</p>\n</li>\n<li><p><strong>ICMP</strong>的全称是Internet Control Message Protocol（网间报文控制协议），它是IP不可分割的一部分，用来提供错误报告。一旦发现各种错误类型就将其返回原主机，我们平时最常见的ping命令就是基于ICMP的。</p>\n</li>\n<li><p><a href=\"https://blog.csdn.net/zhangyixing_mj/article/details/121721761\">分组密码与流密码</a></p>\n<ul>\n<li><p>分组加密</p>\n<ul>\n<li>明文被分为固定长度的块（即为分组），对每个分组用相同的算法和密钥加解密。</li>\n<li>分组长度：64b，128b，256b。明文不是上述整数倍时，在其后填充。填充内容可自选，一般0。而且填充也可掩盖真实长度。</li>\n<li>密文长度与明文长度相同：①密文长度不能小于明文长度，因为这样就会出现不同明文产生相同密文的情况，就是不可逆的了，解密时不行；②密文长度可以大于明文长度，但是这样会使效率降低。所以一般都是选择二者相同长度。</li>\n</ul>\n</li>\n<li><p>流加密</p>\n<ul>\n<li>每次加密数据流的一位或一字节，连续处理。异或</li>\n<li>算法结构：<ul>\n<li>伪随机序列</li>\n<li>明文与密钥流逐位异或</li>\n</ul>\n</li>\n<li>设计上的考虑<ul>\n<li>密钥流周期要长。</li>\n<li>统计上随机。</li>\n<li>密钥流的随机性与密钥长度相关。</li>\n</ul>\n</li>\n<li>不同的明文要用不同的密钥</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><a href=\"https://zh.wikipedia.org/wiki/%E5%94%AF%E5%AF%86%E6%96%87%E6%94%BB%E5%87%BB\">唯密文攻击</a><br>在<a href=\"https://zh.wikipedia.org/wiki/%E5%AF%86%E7%A0%81%E5%AD%A6\">密码学</a>或<a href=\"https://zh.wikipedia.org/wiki/%E5%AF%86%E7%A0%81%E5%88%86%E6%9E%90\">密码分析</a>中，唯密文攻击是一种攻击模式，指的是在仅知已加密文字（即<a href=\"https://zh.wikipedia.org/wiki/%E5%AF%86%E6%96%87\">密文</a>）的情况下进行攻击。此方案可同时用于攻击<a href=\"https://zh.wikipedia.org/wiki/%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86\">对称密码体制</a>和<a href=\"https://zh.wikipedia.org/wiki/%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86\">非对称密码体制</a>。</p>\n</li>\n<li><p><a href=\"https://baike.baidu.com/item/PGP/212244\">PGP加密</a><br>PGP（英语：Pretty Good Privacy，中文翻译“优良保密协议”）是一套用于消息加密、验证的应用程序，采用<a href=\"https://baike.baidu.com/item/IDEA\">IDEA</a>的散列算法作为加密与验证之用<br>PGP加密由一系列散列、数据压缩、对称密钥加密，以及公钥加密的算法组合而成。每个步骤支持几种算法，可以选择一个使用。每个公钥均绑定唯一的用户名和&#x2F;或者E-mail地址。这个系统的第一个版本通常称为可信Web或<a href=\"https://baike.baidu.com/item/X.509\">X.509</a>系统；X.509系统使用的是基于数字证书认证机构的分层方案，该方案后来被加入到PGP的实现中。当前的PGP加密版本通过一个自动密钥管理服务器来进行密钥的可靠存放。</p>\n</li>\n<li><p><a href=\"https://baike.baidu.com/item/X.509/2817050\">509</a></p>\n<ul>\n<li>X.509 是密码学里公钥证书的格式标准。 X.509 证书己应用在包括TLS&#x2F;SSL（WWW万维网安全浏览的基石）在内的众多 Internet协议里.同时它也用在很多非在线应用场景里，比如电子签名服务。X.509证书里含有公钥、身份信息(比如网络主机名，组织的名称或个体名称等)和签名信息（可以是证书签发机构CA的签名，也可以是自签名）。对于一份经由可信的证书签发机构签名或者可以通过其它方式验证的证书，证书的拥有者就可以用证书及相应的私钥来创建安全的通信，对文档进行数字签名.</li>\n<li>另外除了证书本身功能，X.509还附带了证书吊销列表和用于从最终对证书进行签名的证书签发机构直到最终可信点为止的证书合法性验证算法。</li>\n<li>X.509是ITU-T标准化部门基于他们之前的ASN.1定义的一套证书标准。</li>\n</ul>\n</li>\n<li><p><a href=\"https://baike.baidu.com/item/CA%E8%AF%81%E4%B9%A6/10028741\">CA证书</a><br>CA是证书的签发机构，它是公钥基础设施（Public Key Infrastructure，PKI）的核心。CA是负责签发证书、认证证书、管理已颁发证书的机关。</p>\n</li>\n<li><p><a href=\"https://baike.baidu.com/item/ssl/320778\">SSL协议</a><br>SSL(Secure Sockets Layer 安全套接字协议),及其继任者传输层安全（Transport Layer Security，TLS）是为网络通信提供安全及数据完整性的一种安全协议。TLS与SSL在传输层与应用层之间对网络连接进行加密。</p>\n</li>\n<li><p><a href=\"https://baike.baidu.com/item/ipsec/2472311\">IPsec</a></p>\n<ul>\n<li><strong>互联网安全协议（英语：Internet Protocol Security，缩写为IPsec）</strong>，是一个协议簇，通过对IP协议的分组进行加密和认证来保护IP协议的网络传输协议簇（一些相互关联的协议的集合）。</li>\n<li>IPsec主要由以下协议组成：<ul>\n<li>一、认证头（AH），为IP数据报提供无连接数据完整性、消息认证以及防重放攻击保护；</li>\n<li>二、封装安全载荷（ESP），提供机密性、数据源认证、无连接完整性、防重放和有限的传输流（traffic-flow）机密性；</li>\n<li>三、安全关联（SA），提供算法和数据包，提供AH、ESP操作所需的参数。</li>\n<li>四、密钥协议（IKE），提供对称密码的钥匙的生存和交换。</li>\n</ul>\n</li>\n<li>IPsec协议工作在OSI模型的<strong>第三层</strong>，使其在单独使用时适于保护基于TCP或UDP的协议（如安全套接子层（SSL）就不能保护UDP层的通信流）。这就意味着，与传输层或更高层的协议相比，IPsec协议必须处理可靠性和分片的问题，这同时也增加了它的复杂性和处理开销。相对而言，SSL&#x2F;TLS依靠更高层的TCP（OSI的第四层）来管理可靠性和分片。</li>\n</ul>\n</li>\n<li><p><a href=\"https://www.jingh.top/2017/01/15/vpn/\">PPTP、L2TP、OpenVPN三种隧道协议的概念</a></p>\n<ul>\n<li>PPTP（Point to Point Tunneling Protocol，点对点隧道协议）默认端口号：1723</li>\n<li>L2TP（Layer 2 Tunneling Protocol，第二层隧道协议）</li>\n</ul>\n</li>\n<li><p>电子商务系统<br>电子商务系统，广义上讲是商务活动中各参与方和支持企业进行交易活动的电子技术手段的集合。狭义上讲，电子商务系统则是指企业、消费者、银行、政府等在Internet和其他网络的基础上，以实现企业电子商务活动的目标，满足企业生产、销售、服务等生产和管理的需要，支持企业的对外业务协作，从运作、管理和决策等层次全面提高企业信息化水平，为企业提供具备商业智能的计算机网络系统。</p>\n</li>\n<li><p><a href=\"https://baike.baidu.com/item/%E6%95%B0%E5%AD%97%E4%BF%A1%E5%B0%81/425647\">数字信封</a><br>数字信封是将对称密钥通过非对称加密（即：有公钥和私钥两个）的结果分发对称密钥的方法。数字信封是实现信息保密性验证的技术。<br>数字信封是一种综合利用了对称加密技术和非对称加密技术两者的优点进行信息安全传输的一种技术。数字信封既发挥了对称加密算法速度快、安全性好的优点，又发挥了非对称加密算法密钥管理方便的优点。</p>\n</li>\n<li><p>Exim系统<br>Exim是一个MTA（Mail Transfer Agent，邮件传输代理）服务器软件，该软件基于GPL协议开发，是一款开源软件。该软件主要运行于类UNIX系统。通常该软件会与Dovecot或Courier等软件搭配使用。Exim同时也是“进出口”（Export-Import）的英文缩写。</p>\n</li>\n<li><p>Sniffer<br>Sniffer，中文可以翻译为嗅探器，也叫抓数据包软件，是一种基于被动侦听原理的网络分析方式。使用这种技术方式，可以监视网络的状态、数据流动情况以及网络上传输的信息。</p>\n</li>\n<li><p>流密码算法<br>流密码算法，或者叫序列密码，算法大概的原理是，每次加密都通过密钥生成一个密钥流，解密也是使用同一个密钥流，明文与同样长度的密钥流进行异或运算得到密文，密文与同样的密钥流进行异或运算得到明文。流密码算法是以“一次性密码本“为雏形演变出来的加密算法，一次性密码本算法很重要的一个特性就是密钥使用的“一次性”，来看看一次性密码本的算法原理。</p>\n</li>\n<li><p>IKE（网络密钥交换协议）<br>IKE属于一种混合型协议，由Internet安全关联和密钥管理协议（ISAKMP）和两种密钥交换协议OAKLEY与SKEME组成。IKE创建在由ISAKMP定义的框架上，沿用了OAKLEY的密钥交换模式以及SKEME的共享和密钥更新技术，还定义了它自己的两种密钥交换方式：主模式和积极模式。</p>\n</li>\n<li><p><a href=\"https://zhuanlan.zhihu.com/p/164503799\">VPN</a><br>VPN的英文全称是“VirtualPrivateNetwork”，翻译过来就是“虚拟专用网络”。顾名思义，虚拟专用网络我们可以把它理解成是虚拟出来的内部专线。</p>\n</li>\n<li><p>PPDR 模型</p>\n<ul>\n<li><p>PPDR 模型是在整体的安全策略的控制和指导下，综合运用防护工具（如防火墙、身份认证、加密等）的同时，利用检测工具（如漏洞评估、入侵检测系统）了解和评估系统的安全状态，通过适当的响应将系统调整到一个比较安全的状态。保护、检测和响应组成了一个完整的、动态的安全循环。</p>\n</li>\n<li><p>PPDR（Policy Protection Detection Response) 的基于思想是：以安全策略为核心，通过一致性检查、流量统计、异常分析、模式匹配以及基于应用、目标、主机、网络的入侵检查等方法进行安全漏洞检测。检测使系统从静态防护转化为动态防护，为系统快速响应提供了依据。当发现系统有异常时，根据系统安全策略快速作出反应，从而达到保护系统安全的目的。</p>\n</li>\n</ul>\n</li>\n<li><p>PKI<br>PKI（Public Key Infrastructure）即公钥基础设施，是提供公钥加密和数字签名服务的系统，目的是为了自动管理密钥和证书，保证网上数据信息传输的机密性、真实性、完整性和不可否认性。PKI采用证书进行公钥管理，通过第三方的可信任机构，把用户的公钥和用户的其它标识信息捆绑在一起，从而在网上验证用户的身份。一个PKI系统由公钥密码技术（Public Key Cryptography）、证书认证机构（CA）、注册机构（RA）、数字证书（Digital Certificate）和相应的PKI存储库组成。<br>以下介绍几个PKI相关的术语：</p>\n<ul>\n<li>公钥密码技术：用户使用公钥密码技术产生密钥对，分别为公钥（public key）和私钥（private key），公钥向外界公开，私钥则自己保留。公钥与私钥互为补充，被一个密钥加密的数据，只可以用相匹配的另外一个密钥解密。</li>\n<li>认证机构（CA）：是一个向个人、计算机或任何其它实体颁发证书的可信实体。CA受理证书服务申请，根据证书管理策略验证申请方的信息，然后用其私钥对证书进行签名，并颁发该证书给申请方。</li>\n<li>注册机构（RA）：RA是CA的延伸，RA向CA转发证书服务申请，也向目录服务器转发CA颁发的数字证书和证书撤消列表，以提供目录浏览和查询服务。</li>\n<li>证书撤销列表（CRL）：证书具有一定的使用期限，但是由于密钥被泄露、业务终止等原因，CA可通过撤销证书缩短证书的使用期限。一个证书一旦被撤消，证书中心就要公布CRL来声明该证书是无效的，并列出不能再使用的证书的序列号。</li>\n</ul>\n</li>\n</ul>\n<p>安全网关的以下功能模块支持PKI功能：<br>    - IKE VPN：建立IKE VPN时，支持PKI认证。<br>    - HTTPS&#x2F;SSH：使用HTTPS或者SSH方式访问安全网关时，支持PKI认证。</p>\n<h3 id=\"6-数据库试卷\"><a href=\"#6-数据库试卷\" class=\"headerlink\" title=\"6.数据库试卷\"></a>6.数据库试卷</h3><h4 id=\"6-1-2005哈尔滨工程大学数据库试卷A卷\"><a href=\"#6-1-2005哈尔滨工程大学数据库试卷A卷\" class=\"headerlink\" title=\"6.1 2005哈尔滨工程大学数据库试卷A卷\"></a>6.1 2005哈尔滨工程大学数据库试卷A卷</h4><p><img src=\"/2022/03/15/%E5%93%88%E5%B7%A5%E7%A8%8B%E5%A4%8D%E8%AF%95%E7%AC%94%E8%AE%B0/2005%E5%93%88%E5%B0%94%E6%BB%A8%E5%B7%A5%E7%A8%8B%E5%A4%A7%E5%AD%A6%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AF%95%E5%8D%B7A_1.png\" alt=\"2005哈尔滨工程大学数据库试卷A_1\"></p>\n<p><img src=\"/2022/03/15/%E5%93%88%E5%B7%A5%E7%A8%8B%E5%A4%8D%E8%AF%95%E7%AC%94%E8%AE%B0/2005%E5%93%88%E5%B0%94%E6%BB%A8%E5%B7%A5%E7%A8%8B%E5%A4%A7%E5%AD%A6%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AF%95%E5%8D%B7A_2.png\" alt=\"2005哈尔滨工程大学数据库试卷A_2\"></p>\n<h3 id=\"7-参考文献\"><a href=\"#7-参考文献\" class=\"headerlink\" title=\"7.参考文献\"></a>7.参考文献</h3><ol>\n<li><a href=\"https://www.cnblogs.com/Curryxin/p/15098548.html\">传输层详解</a></li>\n<li><a href=\"https://blog.csdn.net/sinat_40770656/article/details/113787888\">计算机网络的七层结构、五层结构和四层结构</a></li>\n<li><a href=\"https://cloud.tencent.com/developer/article/1802453\"> TCP SYN洪水 (SYN Flood) 攻击原理与实现</a></li>\n<li><a href=\"https://www.flypeng.com/shujuku/sqlserver/379.html\">MS SQL-SERVER空口令入侵漏洞</a></li>\n<li><a href=\"http://www.it3721.com/data/2010/0913/381.html\">防止Access数据库被非法下载的方法比较</a></li>\n<li><a href=\"https://www.ibm.com/docs/zh/i/7.3?topic=options-firewalls\">防火墙-IBM文档</a></li>\n<li><a href=\"https://www.wangan.com/discuss/wikis/315\">网安社区</a></li>\n<li><a href=\"https://zh.wikipedia.org/wiki/%E7%83%AD%E4%BF%AE%E5%A4%8D\">Hotfix热修复</a></li>\n<li><a href=\"https://baike.baidu.com/item/Hotfix/6371681\">Hotfix热修复</a></li>\n<li><a href=\"https://www.cnblogs.com/ranyonsue/p/5984001.html\">HTTP协议</a></li>\n<li><a href=\"https://www.cnblogs.com/moonfans/p/3939335.html\">公钥和私钥的区别</a></li>\n<li><a href=\"https://blog.csdn.net/SeniorShen/article/details/102850439\">密钥对，密钥，公钥，私钥的区分</a></li>\n<li><a href=\"https://blog.51cto.com/tonghuatianshi/385867\">ICMP攻击和基于ICMP的路由欺骗</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"<h3 id=\"1-规范化问题\"><a href=\"#1-规范化问题\" class=\"headerlink\" title=\"1.规范化问题\"></a>1.规范化问题</h3><h4 id=\"1-1-求任意属性集的闭包\"><a href=\"#1-1-求任意属性集的闭包\" class=\"headerlink\" title=\"1.1 求任意属性集的闭包\"></a>1.1 求任意属性集的闭包</h4>","more":"<ul>\n<li>题意: $(A-&gt;B,B-&gt;C,D-&gt;E)$<br>解: $A^+&#x3D; ABC$</li>\n</ul>\n<h4 id=\"1-2-求候选码\"><a href=\"#1-2-求候选码\" class=\"headerlink\" title=\"1.2 求候选码\"></a>1.2 求候选码</h4><ul>\n<li>题意: $U&#x3D;${$A,B,C,D,E$} $F&#x3D;${$A-&gt;D,E-&gt;D,D-&gt;B,BC-&gt;D,DC-&gt;A$}<br>解: $L:CE$<br>  $R:$<br>  $N:$<br>  $LR:ABD$<br>分析:$R$中的肯定不能作为候选码，$L+N$一定属于候选码的子集，求${(L+R)}^+$看是否等于U，如果不等再慢慢的从LR中去添加。<br>对于本题${(CE)}^+&#x3D;CEDBA&#x3D;U$,<strong>所以本题中的候选码为$CE$</strong>.</li>\n</ul>\n<hr>\n<ul>\n<li>题意: $U&#x3D;${$A,B,C,D,E,G$} $F&#x3D;${$BE-&gt;G,BD-&gt;G,CD-&gt;A,CE-&gt;G,CDE-&gt;AB,BC-&gt;A,B-&gt;D$}<br>解: $L:CE$<br>  $R:AG$<br>  $N:$<br>  $LR:BD$<br>分析:${(CE)}^+&#x3D;CEG≠U$,所有CE不是候选码。${(CEB)}^+&#x3D;CEBGAD&#x3D;U$，<strong>所以$BCE$是候选码，同理$CDE$也是。</strong><br><strong>总结</strong>：找出只在左侧，右侧，未出现，左右都出现的。其中只出现在右侧的绝不可能成为候选码，只出现在左侧的加未出现的一定是候选码的一部分，这时候通过求闭包找出候选码。注意候选码可能并不唯一。</li>\n</ul>\n<h4 id=\"1-3-判断规范化程度\"><a href=\"#1-3-判断规范化程度\" class=\"headerlink\" title=\"1.3 判断规范化程度\"></a>1.3 判断规范化程度</h4><p>1NF ${\\Rightarrow}^{消除非主属性对码的部分依赖}$2NF ${\\Rightarrow}^{消除非主属性对码的传递依赖}$3NF ${\\Rightarrow}^{消除主属性对不包含它的码的部分传递依赖}$BCNF<br><strong>如果都是主属性，至少是3NF</strong><br><strong>如果一个关系模式的候选码是单属性，那么肯定不存在对码的部分依赖</strong><br>方法：先求候选码得出主属性和非主属性，然后按照定义判断（部分依赖的定义背住）</p>\n<ul>\n<li>题意: $U&#x3D;${$A,B,C,D,E,G$} $F&#x3D;${$BE-&gt;G,BD-&gt;G,CD-&gt;A,CE-&gt;G,CDE-&gt;AB,BC-&gt;A,B-&gt;D$}<br>解: 主码$BCE$和$CDE$，主属性BCDE,非主属性AG。存在非主属性G对主码BCE的部分函数依赖，所以属于1NF.</li>\n</ul>\n<hr>\n<ul>\n<li>题意: $U&#x3D;${$A,B,C,D,E$} $F&#x3D;${$A-&gt;C,C-&gt;D,B-&gt;C,DE-&gt;C,CE-&gt;A$}<br>解: 主码$BE$,存在非主属性C对主码BE的部分函数依赖，所以属于1NF.</li>\n</ul>\n<h4 id=\"1-4-求最小函数依赖集\"><a href=\"#1-4-求最小函数依赖集\" class=\"headerlink\" title=\"1.4 求最小函数依赖集\"></a>1.4 求最小函数依赖集</h4><ul>\n<li>题意: $U&#x3D;${$A,B,C,D,E,G$} $F&#x3D;${$BE-&gt;G,BD-&gt;G,CD-&gt;A,CE-&gt;G,CDE-&gt;AB,BC-&gt;A,B-&gt;D$}<br>解: 第一步：$F&#x3D;${$BE-&gt;G,BD-&gt;G,CD-&gt;A,CE-&gt;G,CDE-&gt;A,CDE-&gt;B,BC-&gt;A,B-&gt;D$}<br>第二步：去除冗余的依赖<br>对于$BE-&gt;G$：${(BE)}^+&#x3D;BEDG$，即$G\\in{(BE)}^+$，所哟$BE-&gt;G$是冗余函数依赖，去除。<br>得到：$F&#x3D;${$BD-&gt;G,CD-&gt;A,CE-&gt;G,CDE-&gt;B,B-&gt;D$}<br>第三步：判断依赖得左部是否有冗余的属性（左部只有一个的就不用看了）<br>最终得到：$F_{min}&#x3D;${$B-&gt;G,CD-&gt;A,CE-&gt;G,CDE-&gt;B,B-&gt;D$}<br>即最小函数依赖集：$F_{min}&#x3D;${$BG,CDA,CEG,CDEB,BD$}</li>\n</ul>\n<hr>\n<ul>\n<li>题意: $U&#x3D;${$A,B,C,D$} $F&#x3D;${$A-&gt;CD,B-&gt;CD,C-&gt;D,D-&gt;C$}<br>解: 第一步：$F&#x3D;${$A-&gt;C,A-&gt;D,B-&gt;C,B-&gt;D,C-&gt;D,D-&gt;C$}<br>第二步：去除冗余的依赖<br>得到：$F&#x3D;${$A-&gt;D,B-&gt;D,C-&gt;D,D-&gt;C$}<strong>(注意答案并不唯一)</strong><br><strong>第三步：判断依赖得左部是否有冗余的属性（左部只有一个的就不用看了）</strong><br>最终得到：$F_{min}&#x3D;${$A-&gt;D,B-&gt;D,C-&gt;D,D-&gt;C$}<br>即最小函数依赖集：$F_{min}&#x3D;${$AD,BD,CD$}</li>\n</ul>\n<h4 id=\"1-5-保持函数依赖分解为3NF\"><a href=\"#1-5-保持函数依赖分解为3NF\" class=\"headerlink\" title=\"1.5 保持函数依赖分解为3NF\"></a>1.5 保持函数依赖分解为3NF</h4><p><strong>步骤:</strong><br>第一步：求出最小函数依赖集<br>第二步：是否包含所有属性<br>第三步：相同左部合并</p>\n<ul>\n<li>题意: $U&#x3D;${$A,B,C,D$} $F&#x3D;${$A-&gt;CD,B-&gt;CD,C-&gt;D,D-&gt;C$}<br>解：最小函数依赖集：$F_{min}&#x3D;${$A-&gt;D,B-&gt;D,C-&gt;D,D-&gt;C$}<br>相同左部合并得到：$F_{min}&#x3D;${$AD,BD,CD$}</li>\n</ul>\n<hr>\n<h4 id=\"1-6-判断分解后的关系模式是否保持函数依赖\"><a href=\"#1-6-判断分解后的关系模式是否保持函数依赖\" class=\"headerlink\" title=\"1.6 判断分解后的关系模式是否保持函数依赖\"></a>1.6 判断分解后的关系模式是否保持函数依赖</h4><p><strong>如果F上的每一个函数依赖都在其分解后的某一个关系上成立，则这个分解是保持依赖的（这是一个充分条件）</strong></p>\n<h4 id=\"1-7-保持函数依赖和无损连接性分解为3NF\"><a href=\"#1-7-保持函数依赖和无损连接性分解为3NF\" class=\"headerlink\" title=\"1.7 保持函数依赖和无损连接性分解为3NF\"></a>1.7 保持函数依赖和无损连接性分解为3NF</h4><p><strong>步骤:</strong><br>第一步：先分解为保持依赖的3NF<br>第二步：查看是否包含候选码</p>\n<ul>\n<li>题意：$F&#x3D;${$A-&gt;B,B-&gt;D,C-&gt;DE,D-&gt;CE$}<br>解：$F&#x3D;${$A-&gt;B,B-&gt;D,C-&gt;D,D-&gt;C,D-&gt;E$}<br>候选码:A<br>保持函数依赖的3NF：$F&#x3D;${$AD,BD,CDE$}<br><strong>包含候选码</strong></li>\n</ul>\n<h4 id=\"1-8-保持无损连接分解为BCNF\"><a href=\"#1-8-保持无损连接分解为BCNF\" class=\"headerlink\" title=\"1.8 保持无损连接分解为BCNF\"></a>1.8 保持无损连接分解为BCNF</h4><p>步骤:<br>第一步：求出关系模式的候选码<br>第二步：从依赖集中找出左部不是候选码的依赖进行分解</p>\n<ul>\n<li>题意：$F&#x3D;${$CS-&gt;G,C-&gt;T,TH-&gt;R,HR-&gt;C,HS-&gt;R$},将其分解成BCNF并保持无损连接<br>解：$U &#x3D; {C,S,G,T,H,R}$<br>$L:SH$<br>$R:G$<br>$N:$<br>$LR:CTR$</li>\n</ul>\n<p>${SH}^+&#x3D;SHRCGT&#x3D;U$,<strong>所以$SH$为候选码</strong><br>分解：$R_1:CSG F_1:{CS-&gt;G}$那么$R_2:{CSTHR}$<strong>(去掉F1中右部的那个)</strong> $F_2:{C-&gt;T,TH-&gt;R,HR-&gt;C,HS-&gt;R}$<br>显然此时$R_1$是BCNF;而$R_2$不是，所以对$R_2$继续分解</p>\n<hr>\n<p>$R_{21}:CT$  $F_{21}:{C-&gt;T}$   那么$R_{22}:CSHR$  $F_{22}:{CH-&gt;R,HR-&gt;C,HS-&gt;R}$<strong>(去掉$F_{21}$中右部的那个,对于左边的，看谁能推出它，就拿谁替换他)</strong><br>显然此时$R_{21}$,$F_{21}$是BCNF;而$R_{22}$不是，所以对$R_{22}$继续分解</p>\n<hr>\n<p>$R_{221}:CHR$  $F_{221}:{CH-&gt;R}$<strong>(这个是BCNF)</strong><br>$R_{222}:CSH$  $F_{222}:{HC-&gt;C,HS-&gt;C}$即$F_{222}:{HS-&gt;C}$<br><strong>(HC-&gt;C属于平凡函数依赖,不用写.而HS-&gt;R-&gt;C)</strong><br>最终分解为:$R_1,R_{21},R_{221},R_{222}$;即：$CSG,CT,CHR,CSH$</p>\n<h4 id=\"1-9-判断分解后的关系模式是否保持无损连接\"><a href=\"#1-9-判断分解后的关系模式是否保持无损连接\" class=\"headerlink\" title=\"1.9 判断分解后的关系模式是否保持无损连接\"></a>1.9 判断分解后的关系模式是否保持无损连接</h4><p><strong>$P_{197}$的11行:应当注意的是，若某个btli被更改，那么该表的li列中凡是btli的符号（不管它是否是开始找到的那些行）均应该做相应的修改</strong></p>\n<ul>\n<li>题意：$F&#x3D;${$A-&gt;D,E-&gt;D,D-&gt;B,BC-&gt;D,DC-&gt;A$},$\\rho$&#x3D;{$AB,AE,EC,DBC,AC$}</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\"></th>\n<th align=\"center\">A</th>\n<th align=\"center\">B</th>\n<th align=\"center\">C</th>\n<th align=\"center\">D</th>\n<th align=\"center\">E</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">AB</td>\n<td align=\"center\">$a_1$</td>\n<td align=\"center\">$a_2$</td>\n<td align=\"center\">$b_{13}$</td>\n<td align=\"center\">$b_{14}$</td>\n<td align=\"center\">$b_{15}$</td>\n</tr>\n<tr>\n<td align=\"center\">AE</td>\n<td align=\"center\">$a_1$</td>\n<td align=\"center\">$b_{22}$</td>\n<td align=\"center\">$b_{23}$</td>\n<td align=\"center\">$b_{24}$</td>\n<td align=\"center\">$a_5$</td>\n</tr>\n<tr>\n<td align=\"center\">EC</td>\n<td align=\"center\">$b_{31}$</td>\n<td align=\"center\">$b_{32}$</td>\n<td align=\"center\">$a_3$</td>\n<td align=\"center\">$b_{34}$</td>\n<td align=\"center\">$a_5$</td>\n</tr>\n<tr>\n<td align=\"center\">DBC</td>\n<td align=\"center\">$b_{41}$</td>\n<td align=\"center\">$a_{2}$</td>\n<td align=\"center\">$a_3$</td>\n<td align=\"center\">$a_{4}$</td>\n<td align=\"center\">$b_{45}$</td>\n</tr>\n<tr>\n<td align=\"center\">AC</td>\n<td align=\"center\">$a_{1}$</td>\n<td align=\"center\">$b_{52}$</td>\n<td align=\"center\">$a_3$</td>\n<td align=\"center\">$b_{54}$</td>\n<td align=\"center\">$b_{55}$</td>\n</tr>\n</tbody></table>\n<p>$\\Downarrow$</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\"></th>\n<th align=\"center\">A</th>\n<th align=\"center\">B</th>\n<th align=\"center\">C</th>\n<th align=\"center\">D</th>\n<th align=\"center\">E</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">AB</td>\n<td align=\"center\">$a_1$</td>\n<td align=\"center\">$a_2$</td>\n<td align=\"center\">$b_{13}$</td>\n<td align=\"center\">$a_{4}$</td>\n<td align=\"center\">$b_{15}$</td>\n</tr>\n<tr>\n<td align=\"center\">AE</td>\n<td align=\"center\">$a_1$</td>\n<td align=\"center\">$a_{2}$</td>\n<td align=\"center\">$b_{23}$</td>\n<td align=\"center\">$a_{4}$</td>\n<td align=\"center\">$a_5$</td>\n</tr>\n<tr>\n<td align=\"center\">EC</td>\n<td align=\"center\">$a_{1}$</td>\n<td align=\"center\">$a_{2}$</td>\n<td align=\"center\">$a_3$</td>\n<td align=\"center\">$a_{4}$</td>\n<td align=\"center\">$a_5$</td>\n</tr>\n<tr>\n<td align=\"center\">DBC</td>\n<td align=\"center\">$a_{1}$</td>\n<td align=\"center\">$a_{2}$</td>\n<td align=\"center\">$a_3$</td>\n<td align=\"center\">$a_{4}$</td>\n<td align=\"center\">$b_{45}$</td>\n</tr>\n<tr>\n<td align=\"center\">AC</td>\n<td align=\"center\">$a_{1}$</td>\n<td align=\"center\">$a_{2}$</td>\n<td align=\"center\">$a_3$</td>\n<td align=\"center\">$a_{4}$</td>\n<td align=\"center\">$b_{55}$</td>\n</tr>\n</tbody></table>\n<p><strong>存在全a行，所以是保持无损连接。</strong></p>\n<h3 id=\"2-查询优化树\"><a href=\"#2-查询优化树\" class=\"headerlink\" title=\"2.查询优化树\"></a>2.查询优化树</h3><p>步骤:<br>第一步：画出初始的查询优化树(自下而上)<br>第二步：将选择操作“下沉”（选择先于连接或者笛卡尔积）</p>\n<h3 id=\"3-E-R图和转化成关系模式\"><a href=\"#3-E-R图和转化成关系模式\" class=\"headerlink\" title=\"3.E-R图和转化成关系模式\"></a>3.E-R图和转化成关系模式</h3><p>对于实体型间的联系有以下不同的情况:<br>(1)<strong>一个1:1联系可以转换为一个独立的关系模式，也可以与任意一端对应的关系模式合并</strong>。如果转换为一个独立的关系模式，则与该联系相连的各实体的码以及联系本身的属性均转换为关系的属性，每个实体的码均是该关系的候选码。<font color=\"#dd0000\">如果与某一端实体对应的关系模式合并,则需要在该关系模式的属性中加入另一个关系模式的码和联系本身的属性。</font><br><br>(2）<strong>一个1:n联系可以转换为一个独立的关系模式，也可以与n端对应的关系模式合并</strong>。如果转换为一个独立的关系模式，则与该联系相连的各实体的码以及联系本身的属性均转换为关系的属性,<font color=\"#dd0000\">而关系的码为n端实体的码。</font><br><br>(3）<strong>一个m:n联系转换为一个关系模式</strong>，与该联系相连的各实体的码以及联系本身的属性均转换为关系的属性，各实体的码组成关系的码或关系码的一部分。<br>(4)<strong>三个或三个以上实体间的一个多元联系可以转换为一个关系模式</strong>。与该多元联系相连的各实体的码以及联系本身的属性均转换为关系的属性，各实体的码组成关系的码或关系码的一部分。<br>(5）<strong>具有相同码的关系模式可合并。</strong></p>\n<h3 id=\"4-计算机网络\"><a href=\"#4-计算机网络\" class=\"headerlink\" title=\"4.计算机网络\"></a>4.计算机网络</h3><h4 id=\"4-1计算机网络体系\"><a href=\"#4-1计算机网络体系\" class=\"headerlink\" title=\"4.1计算机网络体系\"></a>4.1计算机网络体系</h4><p>计算机网络<strong>体系结构</strong>分为3种：OSI体系结构（七层），TCP&#x2F;IP体系结构（四层），五层体系结构。</p>\n<ul>\n<li><strong>OSI体系结构</strong>: 概念清楚，理论也比较完整，但是它既复杂又不实用。</li>\n<li><strong>TCP&#x2F;IP体系结构</strong>:TCP&#x2F;IP是一个四层体系结构，得到了广泛的运用。</li>\n<li><strong>五层体系结构</strong>:为了方便学习，<strong>折中OSI体系结构和TCP&#x2F;IP体系结构</strong>，综合二者的优点，这样既简洁，又能将概念讲清楚。</li>\n</ul>\n<p><img src=\"/2022/03/15/%E5%93%88%E5%B7%A5%E7%A8%8B%E5%A4%8D%E8%AF%95%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84.png\" alt=\"计算机网络体系结构\"></p>\n<p>TCP&#x2F;IP与OSI最大的不同在于：OSI是一个理论上的网络通信模型，而TCP&#x2F;IP则是实际运行的<strong>网络协议</strong>。</p>\n<h4 id=\"4-2五层网络体系结构概述\"><a href=\"#4-2五层网络体系结构概述\" class=\"headerlink\" title=\"4.2五层网络体系结构概述\"></a>4.2五层网络体系结构概述</h4><ul>\n<li><strong>应用层</strong>：应用层是网络协议的最高层，主要任务<strong>通过进程间的交互完成特定网络应用</strong>。应用层协议定义的是<strong>应用程序（进程）间通信和交互的规则</strong>。</li>\n</ul>\n<p>对于不同的网络应用需要有不同的应用层协议，在互联网中的应用层协议很多，如域名系统DNS，支持万维网应用的HTTP协议，支持电子邮件的SMTP协议，等等。应用层交互的数据单元称为<strong>报文</strong>。</p>\n<ul>\n<li><p><strong>运输层</strong>：有时也译为传输层，它负责为两台主机中的进程提供通信服务。该层主要有以下两种协议：</p>\n<ul>\n<li><p>传输控制协议 (Transmission Control Protocol，TCP)：提供面向连接的、可靠的数据传输服务，数据传输的基本单位是报文段（segment）；</p>\n</li>\n<li><p>用户数据报协议 (User Datagram Protocol，UDP)：提供无连接的、尽最大努力的数据传输服务，但不保证数据传输的可靠性，数据传输的基本单位是用户数据报。</p>\n</li>\n</ul>\n</li>\n<li><p><strong>网络层</strong>：网络层负责为分组网络中的不同主机提供通信服务，并通过选择合适的路由将数据传递到目标主机。在发送数据时，网络层把运输层产生的报文段或用户数据封装成<strong>分组</strong>或<strong>包</strong>进行传送。</p>\n</li>\n</ul>\n<p>在TCP&#x2F;IP体系中，由于网络层使用IP协议，因此分组也叫<strong>IP数据报</strong>。</p>\n<ul>\n<li><p><strong>数据链路层</strong>：数据链路层通常简称为链路层。数据链路层在两个相邻节点传输数据时，将网络层交下来的IP数据报<strong>组装成帧</strong>，在两个相邻节点之间的链路上传送<strong>帧</strong>。</p>\n</li>\n<li><p><strong>物理层</strong>：保数据可以在各种物理媒介上进行传输，为数据的传输提供可靠的环境。</p>\n</li>\n</ul>\n<p>以下是应用进程的数据在各层之间的传递过程中所经历的变化的简单示意图：<br><img src=\"/2022/03/15/%E5%93%88%E5%B7%A5%E7%A8%8B%E5%A4%8D%E8%AF%95%E7%AC%94%E8%AE%B0/%E4%BC%A0%E9%80%92%E8%BF%87%E7%A8%8B.png\" alt=\"传递过程\"></p>\n<h3 id=\"5-网络安全\"><a href=\"#5-网络安全\" class=\"headerlink\" title=\"5.网络安全\"></a>5.网络安全</h3><h4 id=\"5-1-传输层概述\"><a href=\"#5-1-传输层概述\" class=\"headerlink\" title=\"5.1 传输层概述\"></a>5.1 传输层概述</h4><h5 id=\"5-1-1概述\"><a href=\"#5-1-1概述\" class=\"headerlink\" title=\"5.1.1概述\"></a>5.1.1概述</h5><p>TCP隶属于传输层，所以要首先明白传输层的作用是什么，传输层能够实现<strong>端到端</strong>的连接。比如说我们用QQ与别人发信息，网络层能够将信息发送到对方的主机上，<strong>主机上使用什么协议来接受这个信息就由传输层来完成</strong>，所以传输层实现的是<strong>进程到进程间的连接</strong>。</p>\n<p>传输层提供的是应用程序间的逻辑通信，也就是说它向高层(应用层)屏蔽了下面网络层的细节，使应用程序看起来好像是在传输层之间沿着水平方向传输数据，但事实上两者之间并没有这样一条实际的物理连接。</p>\n<h5 id=\"5-1-2功能\"><a href=\"#5-1-2功能\" class=\"headerlink\" title=\"5.1.2功能\"></a>5.1.2功能</h5><ul>\n<li>网络层提供了<strong>点到点</strong>的连接，而传输层提供了<strong>端到端</strong>的服务，也就是进程间的通信；</li>\n<li>网络层提供的是<strong>不可靠</strong>的连接，传输层能够实现<strong>可靠</strong>的传输；</li>\n</ul>\n<h5 id=\"5-1-3协议\"><a href=\"#5-1-3协议\" class=\"headerlink\" title=\"5.1.3协议\"></a>5.1.3协议</h5><ul>\n<li>TCP(Transmission Control Protocol) 传输控制协议</li>\n<li>UDP(User Datagram Protocol) 用户数据报协议</li>\n</ul>\n<h5 id=\"5-1-4传输层和应用层的关系\"><a href=\"#5-1-4传输层和应用层的关系\" class=\"headerlink\" title=\"5.1.4传输层和应用层的关系\"></a>5.1.4传输层和应用层的关系</h5><h6 id=\"5-1-4-1端口\"><a href=\"#5-1-4-1端口\" class=\"headerlink\" title=\"5.1.4.1端口\"></a>5.1.4.1端口</h6><p>TCP&#x2F;IP传输层用一个16位端口号(0~65535)来标识一个端口，但是注意，端口号只具有本地意义，不同计算机的相同端口号没有关联，0一般不用，所以允许有65535个不同的端口号。</p>\n<p>两个计算机的进程要实现通信，不仅必须知道对方的IP地址(为了找到对方的计算机)，而且还要知道对方的端口号(为了找到对方计算机中的应用程序)</p>\n<p><strong>问：怎么理解端口？</strong><br>在网络技术中，端口(Port)大致有两种意思：</p>\n<ol>\n<li>硬件端口，也就是设备间交互的接口，是物理意义上的端口，比如集线器，交换机等设备的接口；</li>\n<li>软件端口，指的是应用层的的进程和运输层进行层间交互的一种地址，是逻辑意义上的端口，一般指的是TCP&#x2F;IP协议中的端口。正是这种端口，所有传输层实现的是端到端的通信；</li>\n</ol>\n<p>在TCP&#x2F;IP协议中，用”源IP地址、目的IP地址、源端口号、目的端口号、协议号”这五部分组成一个套接字，来标识一次通信；</p>\n<ul>\n<li>一个进程可以绑定多个端口号，因为一个进程可以有很多线程或者说是子进程等，这每一个都对应一个端口号，所以一个进程可以绑定多个端口号；</li>\n<li>但是一个端口号不可以被多个进程绑定，每一个端口号都与唯一的进程对应，if有多个了，那通信不就乱了套了吗；</li>\n</ul>\n<p>一个端口号一个进程，一个进程可以多个端口；</p>\n<h6 id=\"5-1-4-2端口号分类\"><a href=\"#5-1-4-2端口号分类\" class=\"headerlink\" title=\"5.1.4.2端口号分类\"></a>5.1.4.2端口号分类</h6><ul>\n<li>公认端口：0~1023，明确与某种服务绑定，比如各种协议；</li>\n<li>注册端口：1024~65535：松散的绑定一些服务，也就是有许多服务绑定这些端口。<br>TCP&#x2F;UDP加上特定的端口号就可以表示应用层的某个协议；<br><strong>问：知道哪些常用的端口号</strong></li>\n<li>TCP+20&#x2F;21: ftp协议(文件传输协议)；</li>\n<li>TCP+22: ssh协议(专门为远程登录提供的安全性协议)</li>\n<li>TCP+25: SMTP协议(简单邮件传输协议)</li>\n<li>TCP&#x2F;UDP+53: DNS协议(域名解析协议)</li>\n<li>TCP+80: Http协议(超文本传输协议)</li>\n<li>TCP+443: Https协议(超文本传输安全协议)</li>\n</ul>\n<h4 id=\"5-2TCP协议\"><a href=\"#5-2TCP协议\" class=\"headerlink\" title=\"5.2TCP协议\"></a>5.2TCP协议</h4><p>一个TCP连接不仅需要端口，还需要IP地址来确定通信的主机。所以IP首部中的发送端IP地址加上发送端端口号就形成了连接的发送端；目标端IP地址再加上接收端端口号就确定了连接的接收端。这样就唯一地确定了一个TCP连接。</p>\n<p>在TCP&#x2F;IP协议中，TCP协议是基于IP协议的。<strong>IP协议是对应于网络层的协议，它是一个不可靠的协议</strong>。TCP协议的可靠性保证给IP协议提供了可靠环境，从而使得IP协议可以不必考虑传输的可靠性，专注于网络层的功能。这也是协议分层的初衷。</p>\n<p><strong>IP协议解决了数据包的路由和传输，上层的TCP就可以不再关注路由和寻址；TCP协议解决了传输的可靠性和顺序问题，上层的应用层就可以直接使用TCP协议进行数据传输，不再需要关心数据段的丢失和重复</strong></p>\n<p><strong>http是要基于TCP连接基础上的，简单的说，TCP就是单纯的简历连接，不涉及任何我们需要请求的数据；http协议使用来收发数据，就是为实际应用而来的；</strong></p>\n<p>TCP被认为是一种流式传输层服务。它表示TCP发送端从应用程序接收到字符流，并从这个流中提取适当的长度创建数据段，然后将其发送到网络上。TCP接收端则接收数据段，从中提取数据，若没有按序号到达还要对其进行排序，并将其作为字符流交付给接收端应用程序。这样就完成了数据的传输。</p>\n<p>下图是一张典型的TCP面向流的传输<br><img src=\"/2022/03/15/%E5%93%88%E5%B7%A5%E7%A8%8B%E5%A4%8D%E8%AF%95%E7%AC%94%E8%AE%B0/TCP%E9%9D%A2%E5%90%91%E6%B5%81%E7%9A%84%E4%BC%A0%E8%BE%93.png\" alt=\"TCP面向流的传输\"></p>\n<p><strong>问：TCP怎样实现可靠传输？</strong><br>TCP采用了很多手段来保证可靠传输</p>\n<ol>\n<li>连接管理机制：在传输数据前需要进行建立连接,也就是三次握手，在数据传送完后还需要释放连接，也就是四次挥手。</li>\n<li>数据分段：TCP以报文段为单位进行发送，在建立TCP连接的时候，两端协商TCP报文段中的数据字段(也称为数据包)的最大长度(MSS);其长度加上首部长度就是整个TCP报文段的长度；</li>\n<li>校验和：提供了一种简单的校验，如果收到段的校验和和原来的有差别，那接收方就会丢掉这个报文段；</li>\n<li>序列号：TCP给发送的数据包的编号，如果接收端收到乱序后会进行重新排序，收到重复的也会进行丢弃；</li>\n<li>确认应答：接收方收到报文后会回复确认(累计确认：对所有收到的按序的只确认最后，确认号之前的数据已经全部收到了)；</li>\n<li>重发控制：TCP发出一个报文段后，就会启动一个定时器，等接收方确认这个报文段，如果不能及时收到确认，将重发这个报文段；</li>\n<li>流量控制：通信的双方都有固定大小的缓冲区，TCP的接收端只允许发送端发送接收端缓冲区能接纳的数据。当接收方来不及处理发送方的数据，就把窗口缩小，并把窗口值告诉发送端（提示发送方降低发送的速率，防止包丢失）是利用滑动窗口来实现；</li>\n<li>拥塞控制：当网络产生拥堵时，减少数据的发送；主要是通过拥塞窗口来实现；(慢开始和拥塞避免；快重传和快恢复)；</li>\n</ol>\n<h4 id=\"5-3网安概念注解\"><a href=\"#5-3网安概念注解\" class=\"headerlink\" title=\"5.3网安概念注解\"></a>5.3网安概念注解</h4><ul>\n<li><p><a href=\"https://zh.wikipedia.org/wiki/%E7%89%B9%E6%B4%9B%E4%BC%8A%E6%9C%A8%E9%A9%AC_(%E7%94%B5%E8%84%91)\">特洛伊木马（Trojan Horse）</a>简称木马，在计算机领域中指的是一种后门程序，是黑客用来盗取其他用户的个人消息，甚至是远程控制对方的电子设备而加密制作，然后通过传播或者骗取目标执行该程序，以达到盗取密码等各种数据资料等目的。<strong>和病毒相似</strong>，木马程序有很强的隐秘性，会随著操作系统启动而启动。</p>\n</li>\n<li><p>TCP握手协议相关概念</p>\n<ul>\n<li><p>半连接<br>  在三次握手过程中，服务器发送SYN-ACK之后，收到客户端的ACK之前的TCP连接称为半连接(half-open connect).此时服务器处于Syn_RECV状态.当收到ACK后，服务器转入ESTABLISHED状态.</p>\n</li>\n<li><p>半连接队列<br>  在三次握手协议中，服务器维护一个半连接队列，存放半连接。该队列为每个客户端的SYN包（syn&#x3D;j）开设一个条目，该条目表明服务器已收到SYN包，并向客户发出确认，正在等待客户的ACK确认包。这些条目所标识的连接在服务器处于Syn_RECV状态，当服务器收到客户的确认包时，删除该条目，服务器进入ESTABLISHED状态。</p>\n</li>\n<li><p>Backlog参数<br>  表示半连接队列的最大容纳数目。</p>\n</li>\n<li><p>SYN-ACK 重传次数<br>  服务器发送完SYN－ACK包，如果未收到客户确认包，服务器进行首次重传，等待一段时间仍未收到客户确认包，进行第二次重传，如果重传次数超过系统规定的最大重传次数，系统将该连接信息从半连接队列中删除。注意，每次重传等待的时间不一定相同。</p>\n</li>\n<li><p>半连接存活时间<br>  是指半连接队列的条目存活的最长时间，也即服务从收到SYN包到确认这个报文无效的最长时间，该时间值是所有重传请求包的最长等待时间总和。有时我们也称半连接存活时间为Timeout时间、SYN_RECV存活时间。</p>\n</li>\n</ul>\n</li>\n<li><p>SYN攻击</p>\n<ul>\n<li>SYN攻击属于DOS攻击的一种，它利用TCP协议缺陷，通过发送大量的半连接请求，耗费CPU和内存资源。</li>\n<li>SYN攻击利用TCP协议三次握手的原理，大量发送伪造源IP的SYN包也就是伪造第一次握手数据包，服务器每接收到一个SYN包就会为这个连接信息分配核心内存并放入半连接队列，如果短时间内接收到的SYN太多，半连接队列就会溢出，操作系统会把这个连接信息丢弃造成不能连接，当攻击的SYN包超过半连接队列的最大值时，正常的客户发送SYN数据包请求连接就会被服务器丢弃。目标系统运行缓慢，严重者引起网络堵塞甚至系统瘫痪。每种操作系统半连接队列大小不一样所以抵御SYN攻击的能力也不一样。</li>\n<li>Syn攻击是一个典型的DOS攻击。检测SYN攻击非常的方便，当你在服务器上看到大量的半连接状态时，特别是源IP地址是随机的，基本上可以断定这是一次SYN攻击.在Linux下可以如下命令检测是否被Syn攻击</li>\n</ul>\n</li>\n<li><p><a href=\"https://baike.baidu.com/item/%E7%A9%BA%E8%BF%9E%E6%8E%A5\">空连接</a><br>使用命令 <code>net use \\\\*.*.*.*（IP地址）\\ipc$ &quot;&quot; /user:&quot;&quot;</code> 就可以简单地和目标建立一个空连接（需要目标开放**ipc$**）。<br>空连接就是不用密码和用户名的IPC连接，在Windows下，它是用Net命令来实现的．</p>\n</li>\n<li><p><a href=\"https://baike.baidu.com/item/Unicode%E6%BC%8F%E6%B4%9E/3791874\">Unicode漏洞</a><br>Unicode漏洞是攻击者可通过IE浏览器远程运行被攻击计算机的cmd.exe文件，从而使该计算机的文件暴露，且可随意执行和更改文件的漏洞。<br>对策</p>\n<ul>\n<li>(1)为避免该类攻击，建议下载最新补丁</li>\n<li>(2)安装<a href=\"https://zhuanlan.zhihu.com/p/145430397\">IIS</a> Lockdown和URL Scan来加固系统，从而避免该类攻击。</li>\n<li>(3)安装Windows 2000的Service Pack 2以上的版本。</li>\n</ul>\n</li>\n<li><p><a href=\"https://zhuanlan.zhihu.com/p/145430397\">IIS</a></p>\n<ul>\n<li>IIS是缩写，全称Internet Information Services ( IIS,互联网信息服务 ),是由微软公司提供的基于运行Microsoft Windows的互联网基本服务。</li>\n<li>IIS是指World Wide Web server服务，IIS是一种Web（网页）服务组件，专业的说，IIS可以赋予一部主机电脑一组以上的IP地址，而且还可以有一个以上的域名作为Web网站。做过服务器配置的都应该知道IIS.** 制作好了网站怎么才能让别人浏览，就是通过网站服务器来实现的。IIS只是网站服务器的一种而已。**</li>\n<li>Internet Information Service（IIS）是windows开设web网页服务的组件，用来搭载网站运行程序的平台的。还能提供FTP，SMTP等服务。</li>\n</ul>\n</li>\n<li><p><a href=\"https://www.cnblogs.com/ranyonsue/p/5984001.html\">HTTP协议</a></p>\n<ul>\n<li><p>HTTP协议是Hyper Text Transfer Protocol（超文本传输协议）的缩写,是用于从万维网（WWW:World Wide Web ）服务器传输超文本到本地浏览器的传送协议。</p>\n</li>\n<li><p>HTTP是一个基于TCP&#x2F;IP通信协议来传递数据（HTML 文件, 图片文件, 查询结果等）。</p>\n</li>\n<li><p>HTTP是一个属于应用层的面向对象的协议，由于其简捷、快速的方式，适用于分布式超媒体信息系统。它于1990年提出，经过几年的使用与发展，得到不断地完善和扩展。目前在WWW中使用的是HTTP&#x2F;1.0的第六版，HTTP&#x2F;1.1的规范化工作正在进行之中，而且HTTP-NG(Next Generation of HTTP)的建议已经提出。</p>\n</li>\n<li><p>HTTP协议工作于客户端-服务端架构为上。浏览器作为HTTP客户端通过URL向HTTP服务端即WEB服务器发送所有请求。Web服务器根据接收到的请求后，向客户端发送响应信息。</p>\n</li>\n</ul>\n</li>\n<li><p>FTP协议</p>\n<ul>\n<li>FTP（File Transfer Protocol，文件传输协议） 是 TCP&#x2F;IP 协议组中的协议之一。FTP协议包括两个组成部分，其一为FTP服务器，其二为FTP客户端。其中FTP服务器用来存储文件，用户可以使用FTP客户端通过FTP协议访问位于FTP服务器上的资源。在开发网站的时候，通常利用FTP协议把网页或程序传到Web服务器上。此外，由于FTP传输效率非常高，在网络上传输大的文件时，一般也采用该协议。</li>\n<li>默认情况下FTP协议使用TCP端口中的 20和21这两个端口，其中20用于传输数据，21用于传输控制信息。但是，是否使用20作为传输数据的端口与FTP使用的传输模式有关，如果采用主动模式，那么数据传输端口就是20；如果采用被动模式，则具体最终使用哪个端口要服务器端和客户端协商决定。</li>\n</ul>\n</li>\n<li><p>gopher协议<br>gopher协议是一个在http协议诞生前用来访问Internet资源的协议可以理解为http协议的前身或简化版，虽然很古老但现在很多库还支持gopher协议而且gopher协议功能很强大。<br>它可以实现多个数据包整合发送，然后gopher服务器将多个数据包捆绑着发送到客户端，这就是它的菜单响应。比如使用一条gopher协议的curl命令就能操作mysql数据库或完成对redis的攻击等等。gopher协议使用tcp可靠连接。</p>\n</li>\n<li><p>MS SQL-SERVER空口令入侵<br>在微软的MSSQL7.0以下的版本在默认安装时其SA(System Administrator)口令为空，所开端口为1433，一个入侵者只需要使用一个MS SQL客户端与SA口令为空的服务器连接就可以获得System的权限。</p>\n</li>\n<li><p><a href=\"http://www.it3721.com/data/2010/0913/381.html\">防止Access数据库被非法下载的方法</a></p>\n<ul>\n<li>给数据库起一个随机复杂的名称</li>\n<li>“#”式</li>\n<li>asp式</li>\n<li>asa式</li>\n</ul>\n</li>\n<li><p>SQL注入攻击<br>SQL注入攻击是黑客对数据库进行攻击的常用手段之一。随着B&#x2F;S模式应用开发的发展，使用这种模式编写应用程序的程序员也越来越多。但是由于程序员的水平及经验也参差不齐，相当大一部分程序员在编写代码的时候，没有对用户输入数据的合法性进行判断，使应用程序存在安全隐患。用户可以提交一段数据库查询代码，根据程序返回的结果，获得某些他想得知的数据，这就是所谓的SQL Injection，即SQL注入。</p>\n</li>\n<li><p><a href=\"https://baike.baidu.com/item/ICMP\">ICMP（Internet Control Message Protocol）Internet控制报文协议</a>。它是TCP&#x2F;IP协议簇的一个子协议，用于在IP主机、路由器之间传递控制消息。控制消息是指网络通不通、主机是否可达、路由是否可用等网络本身的消息。这些控制消息虽然并不传输用户数据，但是对于用户数据的传递起着重要的作用。</p>\n</li>\n<li><p>PC机的意思就是个人计算机。</p>\n</li>\n<li><p><strong>防火墙（英语：Firewall）</strong>技术是通过有机结合各类用于安全管理与筛选的软件和硬件设备，帮助计算机网络于其内、外网之间构建一道相对隔绝的保护屏障，以保护用户资料与信息安全性的一种技术。</p>\n</li>\n<li><p><a href=\"https://www.wangan.com/discuss/wikis/644\">land攻击</a><br>LAND 攻击（局域网拒绝服务攻击，英语：Local Area Network Denial attack，缩写：LAND attack，是拒绝服务攻击（DoS 攻击）的一种，通过发送精心构造的、具有相同源地址和目标地址的欺骗数据包，致使缺乏相应防护机制的目标设备瘫痪。这种攻击方法最早在 1997 年被某人以 “m3lt” 的名称提出，并于多年之后的 Windows Server 2003、[Windows XP SP2 等操作系统中重现。</p>\n</li>\n<li><p><a href=\"https://blog.csdn.net/wdkirchhoff/article/details/45560513\">Smurf攻击</a><br>Smurf 攻击是分布式拒绝服务 (DDoS) 攻击的一种形式，该攻击会导致计算机网络停止服务。<br>原理：攻击者向网络广播地址发送ICMP包，并将回复地址设置成受害网络的广播地址，通过使用ICMP应答请求数据包来淹没受害主机的方式进行，最终导致该网络的所有主机都对次ICMP应答请求作出答复，导致网络阻塞。更加复杂的Smurf攻击攻击将源地址改为第三方受害者，最终导致第三方崩溃。</p>\n</li>\n<li><p>UDP-Flood攻击<br>UDP洪泛是一种拒绝服务攻击，其中大量的用户数据报协议（UDP）数据包被发送到目标服务器，目的是压倒该设备的处理和响应能力。防火墙保护目标服务器也可能因UDP泛滥而耗尽，从而导致对合法流量的拒绝服务。</p>\n</li>\n<li><p><a href=\"https://baike.baidu.com/item/Teardrop%E6%94%BB%E5%87%BB/5957505\">Teardrop攻击</a><br>Teardrop攻击是一种畸形报文攻击。是基于UDP的病态分片数据包的攻击方法，其工作原理是向被攻击者发送多个分片的IP包（IP分片数据包中包括该分片数据包属于哪个数据包以及在数据包中的位置等信息），某些操作系统收到含有重叠偏移的伪造分片数据包时将会出现系统崩溃、重启等现象。</p>\n</li>\n<li><p>Hotfix是微软公司研发的一个程序，针对某一个具体的系统漏洞或安全问题而发布的专门解决该漏洞或安全问题，通常称为修补程序。</p>\n</li>\n<li><p><a href=\"https://baike.baidu.com/item/%E5%86%B2%E5%87%BB%E6%B3%A2%E7%97%85%E6%AF%92/11036738\">冲击波病毒</a><br>冲击波病毒(Worm.Blaster)是利用在2003年7月21日公布的RPC漏洞进行传播的，该病毒于当年8月爆发。病毒运行时会不停地利用IP扫描技术寻找网络上系统为Win2000或XP的计算机，找到后就利用DCOM&#x2F;RPC缓冲区漏洞攻击该系统，一旦攻击成功，病毒体将会被传送到对方计算机中进行感染，使系统操作异常、不停重启、甚至导致系统奔溃。另外，该病毒还会对系统升级网站进行拒绝服务攻击，导致该网站堵塞，使用户无法通过该网站升级系统。只要是计算机上有RPC服务并且没有打安全补丁的计算机都存在有RPC漏洞，具体涉及的操作系统是：Windows 2000\\XP\\Server 2003\\NT4.0。</p>\n</li>\n<li><p><a href=\"https://baike.baidu.com/item/RPC%E6%BC%8F%E6%B4%9E\">RPC漏洞</a>是远程过程调用的漏洞。</p>\n</li>\n<li><p>“红色代码”病毒是2001年7月15日发现的一种网络蠕虫病毒，感染运行Microsoft IIS Web服务器的计算机。其传播所使用的技术可以充分体现网络时代网络安全与病毒的巧妙结合，将网络蠕虫、计算机病毒、木马程序合为一体，开创了网络病毒传播的新路，可称之为划时代的病毒。如果稍加改造，将是非常致命的病毒，可以完全取得所攻破计算机的所有权限并为所欲为，可以盗走机密数据，严重威胁网络安全。</p>\n</li>\n<li><p><strong>TCSEC</strong>(Trusted Computer System Evaluation Criteria; commonly called the “Orange Book”)美国可信计算机系统评价标准是计算机系统安全评估的第一个正式标准，具有划时代的意义。该准则于1970年由美国国防科学委员会提出，并于1985年12月由美国国防部公布。TCSEC最初只是军用标准，后来延至民用领域。TCSEC将计算机系统的安全划分为4个等级、7个级别。</p>\n</li>\n</ul>\n<p>-<a href=\"https://baike.baidu.com/item/%E5%8C%85%E8%BF%87%E6%BB%A4%E6%8A%80%E6%9C%AF/4184498\">包过滤技术</a><br>基于协议特定的标准，路由器在其端口能够区分包和限制包的能力叫包过滤（Packet Filtering）。其技术原理在于加入IP过滤功能的路由器逐一审查包头信息，并根据匹配和规则决定包的前行或被舍弃，以达到拒绝发送可疑的包的目的。过滤路由器具备保护整个网络、高效快速并且透明等优点，同时也有定义复杂、消耗CPU资源、不能彻底防止地址欺骗、涵盖应用协议不全、无法执行特殊的安全策略并且不提供日志等局限性。</p>\n<ul>\n<li><p><a href=\"https://baike.baidu.com/item/%E5%8C%85%E8%BF%87%E6%BB%A4%E9%98%B2%E7%81%AB%E5%A2%99/327991\">包过滤防火墙</a></p>\n<ul>\n<li>包过滤防火墙是用一个软件查看所流经的数据包的包头（header），由此决定整个包的命运。它可能会决定丢弃（DROP）这个包，可能会接受（ACCEPT）这个包（让这个包通过），也可能执行其它更复杂的动作。</li>\n<li>包过滤是一种内置于Linux内核路由功能之上的防火墙类型，其防火墙工作在网络层和传输层。</li>\n</ul>\n</li>\n<li><p><a href=\"https://baike.baidu.com/item/%E7%8A%B6%E6%80%81%E6%A3%80%E6%B5%8B%E6%8A%80%E6%9C%AF/6338299\">状态检测技术</a><br>状态检测技术是防火墙近几年才应用的新技术。传统的包过滤防火墙只是通过检测IP包头的相关信息来决定数据流的通过还是拒绝，而状态检测技术采用的是一种基于连接的状态检测机制，将属于同一连接的所有包作为一个整体的数据流看待，构成连接状态表，通过规则表与状态表的共同配合，对表中的各个连接状态因素加以识别。这里动态连接状态表中的记录可以是以前的通信信息，也可以是其他相关应用程序的信息，因此，与传统包过滤防火墙的静态过滤规则表相比，它具有更好的灵活性和安全性。</p>\n</li>\n<li><p><a href=\"https://baike.baidu.com/item/%E7%8A%B6%E6%80%81%E6%A3%80%E6%B5%8B%E9%98%B2%E7%81%AB%E5%A2%99/3106862\">状态检测防火墙</a>采用了状态检测包过滤的技术，是传统包过滤上的功能扩展。</p>\n</li>\n<li><p><a href=\"https://baike.baidu.com/item/%E4%BB%A3%E7%90%86%E9%98%B2%E7%81%AB%E5%A2%99/9570104\">代理防火墙</a><br>代理防火墙通过一种代理（Proxy）技术参与到一个TCP连接的全过程。从内部发出的数据包经过这样的防火墙处理后，就好像是源于防火墙外部网卡一样，从而可以达到隐藏内部网结构的作用。这种类型的防火墙被网络安全专家和媒体公认为是最安全的防火墙。</p>\n</li>\n<li><p><a href=\"https://baike.baidu.com/item/%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1%E5%9E%8B%E9%98%B2%E7%81%AB%E5%A2%99/5189462\">代理服务型防火墙</a><br>代理服务型防火墙是防火墙的一种，代表某个专用网络同互联网进行通讯的防火墙，类似在股东会上某人以你的名义代理你来投票。当你将浏览器配置成使用代理功能时，防火墙就将你的浏览器的请求转给互联网；当互联网返回响应时，代理服务器再把它转给你的浏览器。代理服务器也用于页面的缓存，代理服务器在从互联网上下载特定页面前先从缓存器取出这些页面。内部网络与外部网络之间不存在直接连接。</p>\n</li>\n<li><p>加密和认证<br>首先我们需要区分加密和认证这两个基本概念。<br>加密是将数据资料加密，使得非法用户即使取得加密过的资料，也无法获取正确的资料内容，所以数据加密可以保护数据，防止监听攻击。其重点在于数据的安全性。身份认证是用来判断某个身份的真实性，确认身份后，系统才可以依不同的身份给予不同的权限。其重点在于用户的真实性。两者的侧重点是不同的。</p>\n</li>\n<li><p>公钥和私钥<br>在现代密码体制中加密和解密是采用<strong>不同的密钥</strong>（公开密钥），也就是<strong>非对称</strong>密钥密码系统，每个通信方均需要两个密钥，即公钥和私钥，这两把密钥可以互为加解密。公钥是公开的，不需要保密，而私钥是由个人自己持有，并且必须妥善保管和注意保密。<br>公钥私钥的原则：</p>\n<ul>\n<li>一个公钥对应一个私钥。</li>\n<li>密钥对中，让大家都知道的是公钥，不告诉大家，只有自己知道的，是私钥。</li>\n<li>如果用其中一个密钥加密数据，则只有对应的那个密钥才可以解密。</li>\n<li>如果用其中一个密钥可以进行解密数据，则该数据必然是对应的那个密钥进行的加密。</li>\n</ul>\n</li>\n</ul>\n<hr>\n<p><strong>总结</strong>：公钥和私钥是通过一种算法得到的一个密钥对(即一个公钥和一个私钥)，将其中的一个向外界公开，称为公钥；另一个自己保留，称为私钥。通过这种算法得到的密钥对能保证在世界范围内是唯一的。<br><strong>公钥和私钥是成对的，它们互相解密（密钥指公钥或私钥，密钥对指公钥加私钥）。</strong><br><strong>公钥和私钥都可以加密和解密。</strong><br><strong>私钥数字签名，公钥验证。</strong></p>\n<ul>\n<li><p>“MYDOOM”变种Q(Worm.Mydoom.q)病毒<br>大量发送病毒邮件，浪费网络和系统资源；大量病毒垃圾邮件可能造成中小型邮件服务器极不稳定，甚致崩溃的现象；自动从网络中下载后门木马，并立即执行。</p>\n</li>\n<li><p>爱虫病毒</p>\n<ul>\n<li>爱虫病毒(Vbs.loveletter)，又称“我爱你”(I Love You)病毒，是一种蠕虫病毒，它与1999年的梅丽莎病毒非常相似。据称，这个病毒可以改写本地及网络硬盘上面的某些文件。用户机器染毒以后，邮件系统将会变慢，并可能导致整个网络系统崩溃，当时在全球更是造成了百亿美元的损失。 </li>\n<li>2000年5月4日，一种名为“我爱你”的电脑病毒开始在全球各地迅速传播，短短的一两天内就侵袭了100多万台计算机。这个病毒是通过Microsoft Outlook电子邮件系统传播的，邮件的主题为“I LOVE YOU”，并包含一个附件。一旦在Microsoft Outlook里打开这个邮件，系统就会自动复制并向地址簿中的所有邮件电址发送这个病毒。</li>\n</ul>\n</li>\n<li><p><a href=\"https://www.kaspersky.com.cn/resource-center/threats/computer-viruses-vs-worms\">计算机病毒与蠕虫</a></p>\n<ul>\n<li>计算机病毒与蠕虫的一个重要区别是，病毒需要借助活动的宿主程序或已被感染的活动操作系统才能运行、造成破坏并感染其他可执行文件或文档；而蠕虫是独立的恶意程序，可以通过计算机网络进行自我复制和传播，不需要人工干预。</li>\n<li>病毒通常附加到可执行文件或 Word 文档。它们多通过 P2P 文件共享、受感染的网站和电子邮件附件下载进行传播。病毒侵入系统后，会保持休眠状态，直到被感染的宿主文件或程序被激活，反过来再激活病毒，使其能够在您的系统上运行和复制。</li>\n<li>相反，蠕虫无需借助宿主程序即可运行、自我复制和传播。一旦蠕虫侵入系统（通常通过网络连接或以下载的文件形式），就会立即自行创建多个副本，并通过网络或互联网连接传播，感染网络上任何没有得到充分保护的计算机和服务器。网络蠕虫的每个后续副本也可以自我复制，因此可以通过互联网和计算机网络非常迅速地传播感染。</li>\n</ul>\n</li>\n<li><p><a href=\"https://baike.baidu.com/item/Worm.Klez\">Worm.Klez</a><br>一个通过INTERNET以及EMAIL附件传播感染的蠕虫类病毒，本身是一个WINDOWS PE格式的可执行程序，大约在57-65K之间，是用MICROSOFT VISUALC++编写，它不仅在本地的网络散布并且通过电子邮件消息传播，还会在WINDOWS临时文件夹下建立一个名字为以字母K开头的可执行文件，把“ Win32.Klez ”病毒写进去，并且启动该病毒。</p>\n</li>\n<li><p><a href=\"https://baike.baidu.com/item/IP%E7%A2%8E%E7%89%87%E6%94%BB%E5%87%BB/15686325\">IP碎片攻击</a><br>IP碎片攻击指的是一种计算机程序重组的漏洞。链路层具有最大传输单元MTU这个特性，它限制了数据帧的最大长度，不同的网络类型都有一个上限值。以太网的MTU是1500，你可以用 netstat -i 命令查看这个值。如果IP层有数据包要传，而且数据包的长度超过了MTU，那么IP层就要对数据包进行分片(fragmentation)操作，使每一片的长度都小于或等于MTU。我们假设要传输一个UDP数据包，以太网的MTU为1500字节，一般IP首部为20字节，UDP首部为8字节，数据的净荷(payload)部分预留是1500-20-8&#x3D;1472字节。如果数据部分大于1472字节，就会出现分片现象。</p>\n</li>\n<li><p><strong>ICMP</strong>的全称是Internet Control Message Protocol（网间报文控制协议），它是IP不可分割的一部分，用来提供错误报告。一旦发现各种错误类型就将其返回原主机，我们平时最常见的ping命令就是基于ICMP的。</p>\n</li>\n<li><p><a href=\"https://blog.csdn.net/zhangyixing_mj/article/details/121721761\">分组密码与流密码</a></p>\n<ul>\n<li><p>分组加密</p>\n<ul>\n<li>明文被分为固定长度的块（即为分组），对每个分组用相同的算法和密钥加解密。</li>\n<li>分组长度：64b，128b，256b。明文不是上述整数倍时，在其后填充。填充内容可自选，一般0。而且填充也可掩盖真实长度。</li>\n<li>密文长度与明文长度相同：①密文长度不能小于明文长度，因为这样就会出现不同明文产生相同密文的情况，就是不可逆的了，解密时不行；②密文长度可以大于明文长度，但是这样会使效率降低。所以一般都是选择二者相同长度。</li>\n</ul>\n</li>\n<li><p>流加密</p>\n<ul>\n<li>每次加密数据流的一位或一字节，连续处理。异或</li>\n<li>算法结构：<ul>\n<li>伪随机序列</li>\n<li>明文与密钥流逐位异或</li>\n</ul>\n</li>\n<li>设计上的考虑<ul>\n<li>密钥流周期要长。</li>\n<li>统计上随机。</li>\n<li>密钥流的随机性与密钥长度相关。</li>\n</ul>\n</li>\n<li>不同的明文要用不同的密钥</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><a href=\"https://zh.wikipedia.org/wiki/%E5%94%AF%E5%AF%86%E6%96%87%E6%94%BB%E5%87%BB\">唯密文攻击</a><br>在<a href=\"https://zh.wikipedia.org/wiki/%E5%AF%86%E7%A0%81%E5%AD%A6\">密码学</a>或<a href=\"https://zh.wikipedia.org/wiki/%E5%AF%86%E7%A0%81%E5%88%86%E6%9E%90\">密码分析</a>中，唯密文攻击是一种攻击模式，指的是在仅知已加密文字（即<a href=\"https://zh.wikipedia.org/wiki/%E5%AF%86%E6%96%87\">密文</a>）的情况下进行攻击。此方案可同时用于攻击<a href=\"https://zh.wikipedia.org/wiki/%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86\">对称密码体制</a>和<a href=\"https://zh.wikipedia.org/wiki/%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86\">非对称密码体制</a>。</p>\n</li>\n<li><p><a href=\"https://baike.baidu.com/item/PGP/212244\">PGP加密</a><br>PGP（英语：Pretty Good Privacy，中文翻译“优良保密协议”）是一套用于消息加密、验证的应用程序，采用<a href=\"https://baike.baidu.com/item/IDEA\">IDEA</a>的散列算法作为加密与验证之用<br>PGP加密由一系列散列、数据压缩、对称密钥加密，以及公钥加密的算法组合而成。每个步骤支持几种算法，可以选择一个使用。每个公钥均绑定唯一的用户名和&#x2F;或者E-mail地址。这个系统的第一个版本通常称为可信Web或<a href=\"https://baike.baidu.com/item/X.509\">X.509</a>系统；X.509系统使用的是基于数字证书认证机构的分层方案，该方案后来被加入到PGP的实现中。当前的PGP加密版本通过一个自动密钥管理服务器来进行密钥的可靠存放。</p>\n</li>\n<li><p><a href=\"https://baike.baidu.com/item/X.509/2817050\">509</a></p>\n<ul>\n<li>X.509 是密码学里公钥证书的格式标准。 X.509 证书己应用在包括TLS&#x2F;SSL（WWW万维网安全浏览的基石）在内的众多 Internet协议里.同时它也用在很多非在线应用场景里，比如电子签名服务。X.509证书里含有公钥、身份信息(比如网络主机名，组织的名称或个体名称等)和签名信息（可以是证书签发机构CA的签名，也可以是自签名）。对于一份经由可信的证书签发机构签名或者可以通过其它方式验证的证书，证书的拥有者就可以用证书及相应的私钥来创建安全的通信，对文档进行数字签名.</li>\n<li>另外除了证书本身功能，X.509还附带了证书吊销列表和用于从最终对证书进行签名的证书签发机构直到最终可信点为止的证书合法性验证算法。</li>\n<li>X.509是ITU-T标准化部门基于他们之前的ASN.1定义的一套证书标准。</li>\n</ul>\n</li>\n<li><p><a href=\"https://baike.baidu.com/item/CA%E8%AF%81%E4%B9%A6/10028741\">CA证书</a><br>CA是证书的签发机构，它是公钥基础设施（Public Key Infrastructure，PKI）的核心。CA是负责签发证书、认证证书、管理已颁发证书的机关。</p>\n</li>\n<li><p><a href=\"https://baike.baidu.com/item/ssl/320778\">SSL协议</a><br>SSL(Secure Sockets Layer 安全套接字协议),及其继任者传输层安全（Transport Layer Security，TLS）是为网络通信提供安全及数据完整性的一种安全协议。TLS与SSL在传输层与应用层之间对网络连接进行加密。</p>\n</li>\n<li><p><a href=\"https://baike.baidu.com/item/ipsec/2472311\">IPsec</a></p>\n<ul>\n<li><strong>互联网安全协议（英语：Internet Protocol Security，缩写为IPsec）</strong>，是一个协议簇，通过对IP协议的分组进行加密和认证来保护IP协议的网络传输协议簇（一些相互关联的协议的集合）。</li>\n<li>IPsec主要由以下协议组成：<ul>\n<li>一、认证头（AH），为IP数据报提供无连接数据完整性、消息认证以及防重放攻击保护；</li>\n<li>二、封装安全载荷（ESP），提供机密性、数据源认证、无连接完整性、防重放和有限的传输流（traffic-flow）机密性；</li>\n<li>三、安全关联（SA），提供算法和数据包，提供AH、ESP操作所需的参数。</li>\n<li>四、密钥协议（IKE），提供对称密码的钥匙的生存和交换。</li>\n</ul>\n</li>\n<li>IPsec协议工作在OSI模型的<strong>第三层</strong>，使其在单独使用时适于保护基于TCP或UDP的协议（如安全套接子层（SSL）就不能保护UDP层的通信流）。这就意味着，与传输层或更高层的协议相比，IPsec协议必须处理可靠性和分片的问题，这同时也增加了它的复杂性和处理开销。相对而言，SSL&#x2F;TLS依靠更高层的TCP（OSI的第四层）来管理可靠性和分片。</li>\n</ul>\n</li>\n<li><p><a href=\"https://www.jingh.top/2017/01/15/vpn/\">PPTP、L2TP、OpenVPN三种隧道协议的概念</a></p>\n<ul>\n<li>PPTP（Point to Point Tunneling Protocol，点对点隧道协议）默认端口号：1723</li>\n<li>L2TP（Layer 2 Tunneling Protocol，第二层隧道协议）</li>\n</ul>\n</li>\n<li><p>电子商务系统<br>电子商务系统，广义上讲是商务活动中各参与方和支持企业进行交易活动的电子技术手段的集合。狭义上讲，电子商务系统则是指企业、消费者、银行、政府等在Internet和其他网络的基础上，以实现企业电子商务活动的目标，满足企业生产、销售、服务等生产和管理的需要，支持企业的对外业务协作，从运作、管理和决策等层次全面提高企业信息化水平，为企业提供具备商业智能的计算机网络系统。</p>\n</li>\n<li><p><a href=\"https://baike.baidu.com/item/%E6%95%B0%E5%AD%97%E4%BF%A1%E5%B0%81/425647\">数字信封</a><br>数字信封是将对称密钥通过非对称加密（即：有公钥和私钥两个）的结果分发对称密钥的方法。数字信封是实现信息保密性验证的技术。<br>数字信封是一种综合利用了对称加密技术和非对称加密技术两者的优点进行信息安全传输的一种技术。数字信封既发挥了对称加密算法速度快、安全性好的优点，又发挥了非对称加密算法密钥管理方便的优点。</p>\n</li>\n<li><p>Exim系统<br>Exim是一个MTA（Mail Transfer Agent，邮件传输代理）服务器软件，该软件基于GPL协议开发，是一款开源软件。该软件主要运行于类UNIX系统。通常该软件会与Dovecot或Courier等软件搭配使用。Exim同时也是“进出口”（Export-Import）的英文缩写。</p>\n</li>\n<li><p>Sniffer<br>Sniffer，中文可以翻译为嗅探器，也叫抓数据包软件，是一种基于被动侦听原理的网络分析方式。使用这种技术方式，可以监视网络的状态、数据流动情况以及网络上传输的信息。</p>\n</li>\n<li><p>流密码算法<br>流密码算法，或者叫序列密码，算法大概的原理是，每次加密都通过密钥生成一个密钥流，解密也是使用同一个密钥流，明文与同样长度的密钥流进行异或运算得到密文，密文与同样的密钥流进行异或运算得到明文。流密码算法是以“一次性密码本“为雏形演变出来的加密算法，一次性密码本算法很重要的一个特性就是密钥使用的“一次性”，来看看一次性密码本的算法原理。</p>\n</li>\n<li><p>IKE（网络密钥交换协议）<br>IKE属于一种混合型协议，由Internet安全关联和密钥管理协议（ISAKMP）和两种密钥交换协议OAKLEY与SKEME组成。IKE创建在由ISAKMP定义的框架上，沿用了OAKLEY的密钥交换模式以及SKEME的共享和密钥更新技术，还定义了它自己的两种密钥交换方式：主模式和积极模式。</p>\n</li>\n<li><p><a href=\"https://zhuanlan.zhihu.com/p/164503799\">VPN</a><br>VPN的英文全称是“VirtualPrivateNetwork”，翻译过来就是“虚拟专用网络”。顾名思义，虚拟专用网络我们可以把它理解成是虚拟出来的内部专线。</p>\n</li>\n<li><p>PPDR 模型</p>\n<ul>\n<li><p>PPDR 模型是在整体的安全策略的控制和指导下，综合运用防护工具（如防火墙、身份认证、加密等）的同时，利用检测工具（如漏洞评估、入侵检测系统）了解和评估系统的安全状态，通过适当的响应将系统调整到一个比较安全的状态。保护、检测和响应组成了一个完整的、动态的安全循环。</p>\n</li>\n<li><p>PPDR（Policy Protection Detection Response) 的基于思想是：以安全策略为核心，通过一致性检查、流量统计、异常分析、模式匹配以及基于应用、目标、主机、网络的入侵检查等方法进行安全漏洞检测。检测使系统从静态防护转化为动态防护，为系统快速响应提供了依据。当发现系统有异常时，根据系统安全策略快速作出反应，从而达到保护系统安全的目的。</p>\n</li>\n</ul>\n</li>\n<li><p>PKI<br>PKI（Public Key Infrastructure）即公钥基础设施，是提供公钥加密和数字签名服务的系统，目的是为了自动管理密钥和证书，保证网上数据信息传输的机密性、真实性、完整性和不可否认性。PKI采用证书进行公钥管理，通过第三方的可信任机构，把用户的公钥和用户的其它标识信息捆绑在一起，从而在网上验证用户的身份。一个PKI系统由公钥密码技术（Public Key Cryptography）、证书认证机构（CA）、注册机构（RA）、数字证书（Digital Certificate）和相应的PKI存储库组成。<br>以下介绍几个PKI相关的术语：</p>\n<ul>\n<li>公钥密码技术：用户使用公钥密码技术产生密钥对，分别为公钥（public key）和私钥（private key），公钥向外界公开，私钥则自己保留。公钥与私钥互为补充，被一个密钥加密的数据，只可以用相匹配的另外一个密钥解密。</li>\n<li>认证机构（CA）：是一个向个人、计算机或任何其它实体颁发证书的可信实体。CA受理证书服务申请，根据证书管理策略验证申请方的信息，然后用其私钥对证书进行签名，并颁发该证书给申请方。</li>\n<li>注册机构（RA）：RA是CA的延伸，RA向CA转发证书服务申请，也向目录服务器转发CA颁发的数字证书和证书撤消列表，以提供目录浏览和查询服务。</li>\n<li>证书撤销列表（CRL）：证书具有一定的使用期限，但是由于密钥被泄露、业务终止等原因，CA可通过撤销证书缩短证书的使用期限。一个证书一旦被撤消，证书中心就要公布CRL来声明该证书是无效的，并列出不能再使用的证书的序列号。</li>\n</ul>\n</li>\n</ul>\n<p>安全网关的以下功能模块支持PKI功能：<br>    - IKE VPN：建立IKE VPN时，支持PKI认证。<br>    - HTTPS&#x2F;SSH：使用HTTPS或者SSH方式访问安全网关时，支持PKI认证。</p>\n<h3 id=\"6-数据库试卷\"><a href=\"#6-数据库试卷\" class=\"headerlink\" title=\"6.数据库试卷\"></a>6.数据库试卷</h3><h4 id=\"6-1-2005哈尔滨工程大学数据库试卷A卷\"><a href=\"#6-1-2005哈尔滨工程大学数据库试卷A卷\" class=\"headerlink\" title=\"6.1 2005哈尔滨工程大学数据库试卷A卷\"></a>6.1 2005哈尔滨工程大学数据库试卷A卷</h4><p><img src=\"/2022/03/15/%E5%93%88%E5%B7%A5%E7%A8%8B%E5%A4%8D%E8%AF%95%E7%AC%94%E8%AE%B0/2005%E5%93%88%E5%B0%94%E6%BB%A8%E5%B7%A5%E7%A8%8B%E5%A4%A7%E5%AD%A6%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AF%95%E5%8D%B7A_1.png\" alt=\"2005哈尔滨工程大学数据库试卷A_1\"></p>\n<p><img src=\"/2022/03/15/%E5%93%88%E5%B7%A5%E7%A8%8B%E5%A4%8D%E8%AF%95%E7%AC%94%E8%AE%B0/2005%E5%93%88%E5%B0%94%E6%BB%A8%E5%B7%A5%E7%A8%8B%E5%A4%A7%E5%AD%A6%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AF%95%E5%8D%B7A_2.png\" alt=\"2005哈尔滨工程大学数据库试卷A_2\"></p>\n<h3 id=\"7-参考文献\"><a href=\"#7-参考文献\" class=\"headerlink\" title=\"7.参考文献\"></a>7.参考文献</h3><ol>\n<li><a href=\"https://www.cnblogs.com/Curryxin/p/15098548.html\">传输层详解</a></li>\n<li><a href=\"https://blog.csdn.net/sinat_40770656/article/details/113787888\">计算机网络的七层结构、五层结构和四层结构</a></li>\n<li><a href=\"https://cloud.tencent.com/developer/article/1802453\"> TCP SYN洪水 (SYN Flood) 攻击原理与实现</a></li>\n<li><a href=\"https://www.flypeng.com/shujuku/sqlserver/379.html\">MS SQL-SERVER空口令入侵漏洞</a></li>\n<li><a href=\"http://www.it3721.com/data/2010/0913/381.html\">防止Access数据库被非法下载的方法比较</a></li>\n<li><a href=\"https://www.ibm.com/docs/zh/i/7.3?topic=options-firewalls\">防火墙-IBM文档</a></li>\n<li><a href=\"https://www.wangan.com/discuss/wikis/315\">网安社区</a></li>\n<li><a href=\"https://zh.wikipedia.org/wiki/%E7%83%AD%E4%BF%AE%E5%A4%8D\">Hotfix热修复</a></li>\n<li><a href=\"https://baike.baidu.com/item/Hotfix/6371681\">Hotfix热修复</a></li>\n<li><a href=\"https://www.cnblogs.com/ranyonsue/p/5984001.html\">HTTP协议</a></li>\n<li><a href=\"https://www.cnblogs.com/moonfans/p/3939335.html\">公钥和私钥的区别</a></li>\n<li><a href=\"https://blog.csdn.net/SeniorShen/article/details/102850439\">密钥对，密钥，公钥，私钥的区分</a></li>\n<li><a href=\"https://blog.51cto.com/tonghuatianshi/385867\">ICMP攻击和基于ICMP的路由欺骗</a></li>\n</ol>"}],"PostAsset":[{"_id":"source/_posts/Building-a-picture-bed-through-github-and-PicGo/PicGo_setting.png","slug":"PicGo_setting.png","post":"clvjbaqgr00040vn16mfd48gc","modified":0,"renderable":0},{"_id":"source/_posts/Configure-Hexo/HTML标签验证.png","slug":"HTML标签验证.png","post":"clvjbaqgs00050vn1f5cudeje","modified":0,"renderable":0},{"_id":"source/_posts/Configure-Hexo/准入密钥获取.png","slug":"准入密钥获取.png","post":"clvjbaqgs00050vn1f5cudeje","modified":0,"renderable":0},{"_id":"source/_posts/Configure-Hexo/效果图1.png","slug":"效果图1.png","post":"clvjbaqgs00050vn1f5cudeje","modified":0,"renderable":0},{"_id":"source/_posts/Configure-Hexo/效果图2.png","slug":"效果图2.png","post":"clvjbaqgs00050vn1f5cudeje","modified":0,"renderable":0},{"_id":"source/_posts/Configure-Hexo/添加CNAME.png","slug":"添加CNAME.png","post":"clvjbaqgs00050vn1f5cudeje","modified":0,"renderable":0},{"_id":"source/_posts/Configure-Hexo/绑定到page.png","slug":"绑定到page.png","post":"clvjbaqgs00050vn1f5cudeje","modified":0,"renderable":0},{"_id":"source/_posts/How-to-build-a-hexo-blog-on-Ubuntu-through-gitee-github/单篇字数.png","slug":"单篇字数.png","post":"clvjbaqm400ay0vn1g1pg9wqs","modified":0,"renderable":0},{"_id":"source/_posts/How-to-build-a-hexo-blog-on-Ubuntu-through-gitee-github/复制HTML代码.png","slug":"复制HTML代码.png","post":"clvjbaqm400ay0vn1g1pg9wqs","modified":0,"renderable":0},{"_id":"source/_posts/How-to-build-a-hexo-blog-on-Ubuntu-through-gitee-github/总字数.png","slug":"总字数.png","post":"clvjbaqm400ay0vn1g1pg9wqs","modified":0,"renderable":0},{"_id":"source/_posts/How-to-build-a-hexo-blog-on-Ubuntu-through-gitee-github/模块完整.png","slug":"模块完整.png","post":"clvjbaqm400ay0vn1g1pg9wqs","modified":0,"renderable":0},{"_id":"source/_posts/How-to-build-a-hexo-blog-on-Ubuntu-through-gitee-github/模块缺失.png","slug":"模块缺失.png","post":"clvjbaqm400ay0vn1g1pg9wqs","modified":0,"renderable":0},{"_id":"source/_posts/How-to-build-a-hexo-blog-on-Ubuntu-through-gitee-github/测试置顶.png","slug":"测试置顶.png","post":"clvjbaqm400ay0vn1g1pg9wqs","modified":0,"renderable":0},{"_id":"source/_posts/How-to-build-a-hexo-blog-on-Ubuntu-through-gitee-github/网易云生成外链.png","slug":"网易云生成外链.png","post":"clvjbaqm400ay0vn1g1pg9wqs","modified":0,"renderable":0},{"_id":"source/_posts/How-to-build-a-hexo-blog-on-Ubuntu-through-gitee-github/置顶优先级配置.png","slug":"置顶优先级配置.png","post":"clvjbaqm400ay0vn1g1pg9wqs","modified":0,"renderable":0},{"_id":"source/_posts/How-to-build-a-hexo-blog-on-Ubuntu-through-gitee-github/置顶效果图.png","slug":"置顶效果图.png","post":"clvjbaqm400ay0vn1g1pg9wqs","modified":0,"renderable":0},{"_id":"source/_posts/How-to-build-a-hexo-blog-on-Ubuntu-through-gitee-github/选择外链插件.png","slug":"选择外链插件.png","post":"clvjbaqm400ay0vn1g1pg9wqs","modified":0,"renderable":0},{"_id":"source/_posts/哈工程复试笔记/2005哈尔滨工程大学数据库试卷A_1.png","slug":"2005哈尔滨工程大学数据库试卷A_1.png","post":"clvjbaqmg00b90vn17omkfv2j","modified":0,"renderable":0},{"_id":"source/_posts/哈工程复试笔记/2005哈尔滨工程大学数据库试卷A_2.png","slug":"2005哈尔滨工程大学数据库试卷A_2.png","post":"clvjbaqmg00b90vn17omkfv2j","modified":0,"renderable":0},{"_id":"source/_posts/哈工程复试笔记/TCP面向流的传输.png","slug":"TCP面向流的传输.png","post":"clvjbaqmg00b90vn17omkfv2j","modified":0,"renderable":0},{"_id":"source/_posts/哈工程复试笔记/传递过程.png","slug":"传递过程.png","post":"clvjbaqmg00b90vn17omkfv2j","modified":0,"renderable":0},{"_id":"source/_posts/哈工程复试笔记/计算机网络体系结构.png","slug":"计算机网络体系结构.png","post":"clvjbaqmg00b90vn17omkfv2j","modified":0,"renderable":0}],"PostCategory":[],"PostTag":[{"post_id":"clvjbaqgl00010vn1bfbkatyv","tag_id":"clvjbaqgo00030vn142v049w6","_id":"clvjbaqgv00080vn1cddv3yzn"},{"post_id":"clvjbaqgn00020vn186w2g3zd","tag_id":"clvjbaqgu00070vn17bto8tve","_id":"clvjbaqh7000j0vn1dr7vhyby"},{"post_id":"clvjbaqgn00020vn186w2g3zd","tag_id":"clvjbaqgy000b0vn1fwtg43bt","_id":"clvjbaqh8000l0vn11yga7k4x"},{"post_id":"clvjbaqgn00020vn186w2g3zd","tag_id":"clvjbaqh0000e0vn152ut0g9z","_id":"clvjbaqh9000o0vn1333tad0z"},{"post_id":"clvjbaqgr00040vn16mfd48gc","tag_id":"clvjbaqh5000h0vn19tgweu5z","_id":"clvjbaqhj00120vn125cn9bo6"},{"post_id":"clvjbaqgr00040vn16mfd48gc","tag_id":"clvjbaqh9000n0vn12h9vhkii","_id":"clvjbaqhj00140vn18pvuaj83"},{"post_id":"clvjbaqgr00040vn16mfd48gc","tag_id":"clvjbaqhb000r0vn1gw4reii1","_id":"clvjbaqhn00170vn12l410lmb"},{"post_id":"clvjbaqgr00040vn16mfd48gc","tag_id":"clvjbaqhd000u0vn1ef3qhllq","_id":"clvjbaqho00190vn13age6vn9"},{"post_id":"clvjbaqgr00040vn16mfd48gc","tag_id":"clvjbaqhf000x0vn1es1ycb7l","_id":"clvjbaqhq001c0vn13tgf1ov5"},{"post_id":"clvjbaqgs00050vn1f5cudeje","tag_id":"clvjbaqhi00110vn1gzr18nbh","_id":"clvjbaqhr001e0vn1bolreiz0"},{"post_id":"clvjbaqgt00060vn1763728f3","tag_id":"clvjbaqhl00160vn13om3a9ml","_id":"clvjbaqhu001i0vn1bg7t3vna"},{"post_id":"clvjbaqgt00060vn1763728f3","tag_id":"clvjbaqhp001b0vn12w4985ag","_id":"clvjbaqhv001k0vn143pqai7t"},{"post_id":"clvjbaqht001h0vn1csuvanug","tag_id":"clvjbaqhf000x0vn1es1ycb7l","_id":"clvjbaqhw001n0vn1gvulg7qu"},{"post_id":"clvjbaqht001h0vn1csuvanug","tag_id":"clvjbaqgy000b0vn1fwtg43bt","_id":"clvjbaqhx001p0vn19rtnaquu"},{"post_id":"clvjbaqhu001j0vn15jwt6fvf","tag_id":"clvjbaqhf000x0vn1es1ycb7l","_id":"clvjbaqhy001s0vn16i6ee9o8"},{"post_id":"clvjbaqhw001o0vn108axhr1k","tag_id":"clvjbaqhf000x0vn1es1ycb7l","_id":"clvjbaqhz001u0vn13fhva4a9"},{"post_id":"clvjbaqhy001t0vn1bewjch0l","tag_id":"clvjbaqhf000x0vn1es1ycb7l","_id":"clvjbaqi0001x0vn1gf1q0od5"},{"post_id":"clvjbaqhz001v0vn14vl8hcew","tag_id":"clvjbaqhf000x0vn1es1ycb7l","_id":"clvjbaqi1001z0vn11tx73na6"},{"post_id":"clvjbaqgv00090vn1g3y92dvq","tag_id":"clvjbaqhs001g0vn14zp72q4o","_id":"clvjbaqi300230vn154nm9uwv"},{"post_id":"clvjbaqgv00090vn1g3y92dvq","tag_id":"clvjbaqhw001m0vn183c78wb4","_id":"clvjbaqi400250vn1c57j6sfv"},{"post_id":"clvjbaqgv00090vn1g3y92dvq","tag_id":"clvjbaqhy001r0vn1701bawch","_id":"clvjbaqi500280vn1ho5qgcaw"},{"post_id":"clvjbaqgv00090vn1g3y92dvq","tag_id":"clvjbaqi0001w0vn1broh4606","_id":"clvjbaqi6002a0vn1eueh6e9w"},{"post_id":"clvjbaqgx000a0vn1dv7wcwh7","tag_id":"clvjbaqi200210vn136g7auox","_id":"clvjbaqi7002d0vn1e5ljd46n"},{"post_id":"clvjbaqi400260vn18pg4534q","tag_id":"clvjbaqgo00030vn142v049w6","_id":"clvjbaqi8002f0vn1h2etbnwp"},{"post_id":"clvjbaqgy000c0vn129lgbedr","tag_id":"clvjbaqi500270vn17y03gefe","_id":"clvjbaqia002i0vn1gkn64on1"},{"post_id":"clvjbaqgz000d0vn13yvg3hp8","tag_id":"clvjbaqi7002c0vn101o67o9j","_id":"clvjbaqic002k0vn158ifarwl"},{"post_id":"clvjbaqic002l0vn14h2ccrls","tag_id":"clvjbaqhd000u0vn1ef3qhllq","_id":"clvjbaqie002o0vn19bg187pc"},{"post_id":"clvjbaqh4000f0vn1frnkez76","tag_id":"clvjbaqhf000x0vn1es1ycb7l","_id":"clvjbaqih002s0vn11fsxaaas"},{"post_id":"clvjbaqh4000f0vn1frnkez76","tag_id":"clvjbaqid002m0vn13j8v6kto","_id":"clvjbaqii002u0vn1fb5xg1xz"},{"post_id":"clvjbaqii002w0vn12w4n19ol","tag_id":"clvjbaqgu00070vn17bto8tve","_id":"clvjbaqik002y0vn10hxebbtf"},{"post_id":"clvjbaqh4000g0vn158iibvun","tag_id":"clvjbaqhf000x0vn1es1ycb7l","_id":"clvjbaqil00310vn113vu9jxw"},{"post_id":"clvjbaqh4000g0vn158iibvun","tag_id":"clvjbaqii002v0vn1flb98ioz","_id":"clvjbaqim00330vn1glu78ila"},{"post_id":"clvjbaqh6000i0vn1byit80sf","tag_id":"clvjbaqhd000u0vn1ef3qhllq","_id":"clvjbaqio00360vn1g8q0gtz7"},{"post_id":"clvjbaqim00340vn1hdfof2u5","tag_id":"clvjbaqi200210vn136g7auox","_id":"clvjbaqip00380vn15nyj0mk3"},{"post_id":"clvjbaqh7000k0vn1136y44m8","tag_id":"clvjbaqin00350vn1exhnhkgv","_id":"clvjbaqiw003i0vn1dp6w6tur"},{"post_id":"clvjbaqh7000k0vn1136y44m8","tag_id":"clvjbaqhl00160vn13om3a9ml","_id":"clvjbaqiy003k0vn15e4g2hib"},{"post_id":"clvjbaqh7000k0vn1136y44m8","tag_id":"clvjbaqis003d0vn12r9y6yus","_id":"clvjbaqiz003n0vn1hotu6bqg"},{"post_id":"clvjbaqh8000m0vn1a3use5u5","tag_id":"clvjbaqiu003g0vn14qiha4bx","_id":"clvjbaqj0003p0vn10m3d9bgt"},{"post_id":"clvjbaqiz003o0vn18fut616f","tag_id":"clvjbaqis003d0vn12r9y6yus","_id":"clvjbaqj2003s0vn10atd7iv7"},{"post_id":"clvjbaqj0003q0vn1em67a2e7","tag_id":"clvjbaqhd000u0vn1ef3qhllq","_id":"clvjbaqj3003u0vn1eqyc370u"},{"post_id":"clvjbaqh9000p0vn1239a35o0","tag_id":"clvjbaqiy003l0vn14nzfdxue","_id":"clvjbaqj4003x0vn184bae3fs"},{"post_id":"clvjbaqh9000p0vn1239a35o0","tag_id":"clvjbaqhf000x0vn1es1ycb7l","_id":"clvjbaqj5003z0vn1geunbkmz"},{"post_id":"clvjbaqha000q0vn14zfy65yy","tag_id":"clvjbaqi500270vn17y03gefe","_id":"clvjbaqj700420vn12zk47nj8"},{"post_id":"clvjbaqhb000s0vn1d91qb8b7","tag_id":"clvjbaqhd000u0vn1ef3qhllq","_id":"clvjbaqjf004a0vn1ftyq89sd"},{"post_id":"clvjbaqhb000s0vn1d91qb8b7","tag_id":"clvjbaqj900450vn10wr0bhgt","_id":"clvjbaqjg004c0vn1bm5oduhe"},{"post_id":"clvjbaqhc000t0vn13l6n6cd4","tag_id":"clvjbaqjd00480vn16asxghzp","_id":"clvjbaqjj004f0vn1a388a719"},{"post_id":"clvjbaqhd000v0vn1e27g1wbd","tag_id":"clvjbaqi200210vn136g7auox","_id":"clvjbaqjp004j0vn1ejph6r3a"},{"post_id":"clvjbaqhe000w0vn1ggx2g8h3","tag_id":"clvjbaqi200210vn136g7auox","_id":"clvjbaqjs004n0vn1cnxz04gd"},{"post_id":"clvjbaqjr004m0vn1597igt1f","tag_id":"clvjbaqhl00160vn13om3a9ml","_id":"clvjbaqju004p0vn12sdfdqve"},{"post_id":"clvjbaqhg000z0vn11u4i975m","tag_id":"clvjbaqi200210vn136g7auox","_id":"clvjbaqk2004z0vn194yk9q82"},{"post_id":"clvjbaqhg000z0vn11u4i975m","tag_id":"clvjbaqjx004u0vn13m4e7qe5","_id":"clvjbaqk300510vn1hvozceo2"},{"post_id":"clvjbaqk0004x0vn1hh6338zd","tag_id":"clvjbaqhd000u0vn1ef3qhllq","_id":"clvjbaqk400540vn1eaaie5jz"},{"post_id":"clvjbaqhh00100vn12hndb0ce","tag_id":"clvjbaqi200210vn136g7auox","_id":"clvjbaqk500560vn12g4oekoy"},{"post_id":"clvjbaqk300520vn1b32n3mb9","tag_id":"clvjbaqgu00070vn17bto8tve","_id":"clvjbaqk600590vn16ugx5mwi"},{"post_id":"clvjbaqk400550vn13mfc2rzn","tag_id":"clvjbaqi200210vn136g7auox","_id":"clvjbaqk7005b0vn1fl4y66nl"},{"post_id":"clvjbaqhj00130vn1ak4xg9bg","tag_id":"clvjbaqk300530vn1efq56qee","_id":"clvjbaqk8005e0vn1c15yf7v6"},{"post_id":"clvjbaqhj00130vn1ak4xg9bg","tag_id":"clvjbaqgu00070vn17bto8tve","_id":"clvjbaqk9005g0vn177r28uln"},{"post_id":"clvjbaqk500570vn11c4uh784","tag_id":"clvjbaqgu00070vn17bto8tve","_id":"clvjbaqka005j0vn17k2cfpjr"},{"post_id":"clvjbaqk500570vn11c4uh784","tag_id":"clvjbaqk300530vn1efq56qee","_id":"clvjbaqkb005l0vn14pxn1v7o"},{"post_id":"clvjbaqk6005a0vn1b59v8vn7","tag_id":"clvjbaqhf000x0vn1es1ycb7l","_id":"clvjbaqkc005n0vn1c2j2c2n1"},{"post_id":"clvjbaqhk00150vn17pitbvyn","tag_id":"clvjbaqhd000u0vn1ef3qhllq","_id":"clvjbaqkd005q0vn1ee6t6eyi"},{"post_id":"clvjbaqhk00150vn17pitbvyn","tag_id":"clvjbaqk500580vn1b3rmgrfm","_id":"clvjbaqke005s0vn1a63n8rz5"},{"post_id":"clvjbaqk8005f0vn1ga8x72h4","tag_id":"clvjbaqi200210vn136g7auox","_id":"clvjbaqki005v0vn157ppf5ia"},{"post_id":"clvjbaqk9005h0vn11bqc2eph","tag_id":"clvjbaqis003d0vn12r9y6yus","_id":"clvjbaqki005x0vn1h4se45mz"},{"post_id":"clvjbaqhn00180vn16qcr6o5s","tag_id":"clvjbaqk8005d0vn1atwuhggl","_id":"clvjbaqkk00600vn1gz6747rj"},{"post_id":"clvjbaqhn00180vn16qcr6o5s","tag_id":"clvjbaqka005i0vn11if23idl","_id":"clvjbaqkl00620vn1bgo53rxh"},{"post_id":"clvjbaqki005w0vn1cht36f95","tag_id":"clvjbaqgu00070vn17bto8tve","_id":"clvjbaqkm00650vn19cwzgwj1"},{"post_id":"clvjbaqho001a0vn12yu67pvn","tag_id":"clvjbaqkc005p0vn130an6nyf","_id":"clvjbaqkn00670vn1dj1n4vlp"},{"post_id":"clvjbaqho001a0vn12yu67pvn","tag_id":"clvjbaqkh005u0vn129yz9nre","_id":"clvjbaqko00690vn19765amoo"},{"post_id":"clvjbaqkj005y0vn19xh35o8p","tag_id":"clvjbaqis003d0vn12r9y6yus","_id":"clvjbaqkq006c0vn1dhav43ak"},{"post_id":"clvjbaqkk00610vn1fxh41rjs","tag_id":"clvjbaqgu00070vn17bto8tve","_id":"clvjbaqkr006e0vn115j6234h"},{"post_id":"clvjbaqhq001d0vn11xnggp6d","tag_id":"clvjbaqkj005z0vn1hs4u66pp","_id":"clvjbaqks006h0vn1dtjddoae"},{"post_id":"clvjbaqkl00630vn12luk3vxq","tag_id":"clvjbaqgu00070vn17bto8tve","_id":"clvjbaqkt006i0vn10f38g9xl"},{"post_id":"clvjbaqkm00660vn1aodqak2m","tag_id":"clvjbaqk300530vn1efq56qee","_id":"clvjbaqkt006k0vn176vk84ui"},{"post_id":"clvjbaqkm00660vn1aodqak2m","tag_id":"clvjbaqgu00070vn17bto8tve","_id":"clvjbaqkt006l0vn19hpud9n9"},{"post_id":"clvjbaqhr001f0vn1d1pbdn2y","tag_id":"clvjbaqkl00640vn11uy6fcuv","_id":"clvjbaqku006n0vn1480peki9"},{"post_id":"clvjbaqhr001f0vn1d1pbdn2y","tag_id":"clvjbaqhd000u0vn1ef3qhllq","_id":"clvjbaqku006o0vn1dziw71wp"},{"post_id":"clvjbaqhv001l0vn1c2z94nqh","tag_id":"clvjbaqko006b0vn11ubgeylu","_id":"clvjbaqkv006q0vn11pppae2o"},{"post_id":"clvjbaqhv001l0vn1c2z94nqh","tag_id":"clvjbaqhf000x0vn1es1ycb7l","_id":"clvjbaqkv006r0vn14noe0u4m"},{"post_id":"clvjbaqkr006f0vn113u43dfw","tag_id":"clvjbaqko006b0vn11ubgeylu","_id":"clvjbaqkv006t0vn1d3xs5ee2"},{"post_id":"clvjbaqhx001q0vn14528618j","tag_id":"clvjbaqhf000x0vn1es1ycb7l","_id":"clvjbaqkv006u0vn1baxiafpu"},{"post_id":"clvjbaqhx001q0vn14528618j","tag_id":"clvjbaqis003d0vn12r9y6yus","_id":"clvjbaqkw006w0vn1gmu64p2z"},{"post_id":"clvjbaqi0001y0vn11m5ubq3d","tag_id":"clvjbaqkj005z0vn1hs4u66pp","_id":"clvjbaqkw006x0vn158xk0rlr"},{"post_id":"clvjbaqi0001y0vn11m5ubq3d","tag_id":"clvjbaqku006m0vn1evilbson","_id":"clvjbaqkw006z0vn17wh7emmm"},{"post_id":"clvjbaqi100200vn16annc3ux","tag_id":"clvjbaqkj005z0vn1hs4u66pp","_id":"clvjbaqkw00700vn1fcwd5ofc"},{"post_id":"clvjbaqi100200vn16annc3ux","tag_id":"clvjbaqku006m0vn1evilbson","_id":"clvjbaqkx00720vn1bift99kp"},{"post_id":"clvjbaqi200220vn1hsnvc5m6","tag_id":"clvjbaqkj005z0vn1hs4u66pp","_id":"clvjbaqkx00730vn1g6bq71j7"},{"post_id":"clvjbaqi300240vn104aa79me","tag_id":"clvjbaqkw006y0vn1dof05fj4","_id":"clvjbaqkx00740vn13zqo7jig"},{"post_id":"clvjbaqi500290vn14vl18fbt","tag_id":"clvjbaqkw00710vn1488o7zch","_id":"clvjbaqkx00760vn1djh7ed2j"},{"post_id":"clvjbaqi6002b0vn1826s64t1","tag_id":"clvjbaqkx00750vn1fdw437ol","_id":"clvjbaqky00780vn16mj96x9v"},{"post_id":"clvjbaqi8002e0vn1hdn0f0jy","tag_id":"clvjbaqkx00770vn13ztu40uk","_id":"clvjbaqky007a0vn14ih0f8bh"},{"post_id":"clvjbaqi9002g0vn1d7yf3sdu","tag_id":"clvjbaqin00350vn1exhnhkgv","_id":"clvjbaqkz007d0vn1ci6y5nkc"},{"post_id":"clvjbaqi9002g0vn1d7yf3sdu","tag_id":"clvjbaqis003d0vn12r9y6yus","_id":"clvjbaqkz007e0vn16l4z9kct"},{"post_id":"clvjbaqib002j0vn1bg9thbmw","tag_id":"clvjbaqkz007c0vn1bkbd3fs6","_id":"clvjbaql0007g0vn1dtgi1pkk"},{"post_id":"clvjbaqie002n0vn1clfc75zt","tag_id":"clvjbaqkz007f0vn1fp59aoml","_id":"clvjbaql0007j0vn1gnwydobi"},{"post_id":"clvjbaqie002n0vn1clfc75zt","tag_id":"clvjbaql0007h0vn108kug1ok","_id":"clvjbaql1007k0vn1bnw22ghh"},{"post_id":"clvjbaqig002r0vn171u2gryb","tag_id":"clvjbaql0007i0vn1dxm2hh6p","_id":"clvjbaql1007m0vn1f1ul6bo4"},{"post_id":"clvjbaqig002r0vn171u2gryb","tag_id":"clvjbaqi7002c0vn101o67o9j","_id":"clvjbaql1007n0vn19hofbq35"},{"post_id":"clvjbaqih002t0vn11nz35w0d","tag_id":"clvjbaql0007i0vn1dxm2hh6p","_id":"clvjbaql2007p0vn1hyxu21w5"},{"post_id":"clvjbaqij002x0vn1hhl5dp21","tag_id":"clvjbaql1007o0vn10x7z2n2w","_id":"clvjbaql2007r0vn1aask1hpx"},{"post_id":"clvjbaqik002z0vn1ct0b9dbt","tag_id":"clvjbaql2007q0vn1dscbe5wh","_id":"clvjbaql3007t0vn10sb73dg5"},{"post_id":"clvjbaqim00320vn12ygz1rpj","tag_id":"clvjbaql2007s0vn17p9lcvyl","_id":"clvjbaql5007w0vn10zanb2td"},{"post_id":"clvjbaqim00320vn12ygz1rpj","tag_id":"clvjbaql3007u0vn1aioe9to3","_id":"clvjbaql5007x0vn1c19p98uk"},{"post_id":"clvjbaqim00320vn12ygz1rpj","tag_id":"clvjbaqhd000u0vn1ef3qhllq","_id":"clvjbaql5007z0vn1gu1fez22"},{"post_id":"clvjbaqio00370vn1cv0s3l9d","tag_id":"clvjbaql4007v0vn16ln69437","_id":"clvjbaql600800vn19clz4xfv"},{"post_id":"clvjbaqip00390vn1a81a2sx0","tag_id":"clvjbaql0007i0vn1dxm2hh6p","_id":"clvjbaql600820vn1dffa21h2"},{"post_id":"clvjbaqir003b0vn13y5a1hxr","tag_id":"clvjbaql600810vn1d9tt0yvi","_id":"clvjbaql700840vn16ww168lq"},{"post_id":"clvjbaqir003c0vn1aggv3wb0","tag_id":"clvjbaql600830vn12zrg3lfb","_id":"clvjbaql800870vn1hrn25cwv"},{"post_id":"clvjbaqir003c0vn1aggv3wb0","tag_id":"clvjbaqk300530vn1efq56qee","_id":"clvjbaql800880vn1248i6pay"},{"post_id":"clvjbaqir003c0vn1aggv3wb0","tag_id":"clvjbaqgu00070vn17bto8tve","_id":"clvjbaql9008a0vn18hlr4e84"},{"post_id":"clvjbaqit003e0vn16sj4a2ls","tag_id":"clvjbaqk300530vn1efq56qee","_id":"clvjbaql9008b0vn17u8c1567"},{"post_id":"clvjbaqit003e0vn16sj4a2ls","tag_id":"clvjbaqgu00070vn17bto8tve","_id":"clvjbaql9008d0vn1fpr0g7qd"},{"post_id":"clvjbaqiu003f0vn16h3f4f3t","tag_id":"clvjbaqk300530vn1efq56qee","_id":"clvjbaql9008e0vn136yzejaa"},{"post_id":"clvjbaqiu003f0vn16h3f4f3t","tag_id":"clvjbaqgu00070vn17bto8tve","_id":"clvjbaqla008g0vn1bzjr002r"},{"post_id":"clvjbaqiv003h0vn1flzihwxe","tag_id":"clvjbaqk300530vn1efq56qee","_id":"clvjbaqla008h0vn16k4n8510"},{"post_id":"clvjbaqiv003h0vn1flzihwxe","tag_id":"clvjbaqgu00070vn17bto8tve","_id":"clvjbaqla008j0vn1djhwewuo"},{"post_id":"clvjbaqiw003j0vn1hxpp0tky","tag_id":"clvjbaql9008f0vn14jy03ori","_id":"clvjbaqlb008l0vn1gt77aiy6"},{"post_id":"clvjbaqiw003j0vn1hxpp0tky","tag_id":"clvjbaqk300530vn1efq56qee","_id":"clvjbaqlb008m0vn1h91h8p9r"},{"post_id":"clvjbaqiw003j0vn1hxpp0tky","tag_id":"clvjbaqgu00070vn17bto8tve","_id":"clvjbaqlb008o0vn16uy54xr1"},{"post_id":"clvjbaqiy003m0vn183x93x6t","tag_id":"clvjbaqi200210vn136g7auox","_id":"clvjbaqlb008p0vn18cv917o4"},{"post_id":"clvjbaqiy003m0vn183x93x6t","tag_id":"clvjbaqjx004u0vn13m4e7qe5","_id":"clvjbaqlc008r0vn1bzto1twm"},{"post_id":"clvjbaqj2003t0vn16dxkel44","tag_id":"clvjbaqlb008n0vn1hdwy5izr","_id":"clvjbaqlc008t0vn16es0dxiw"},{"post_id":"clvjbaqj2003t0vn16dxkel44","tag_id":"clvjbaqlb008q0vn13i1z0gqz","_id":"clvjbaqlc008u0vn1fvba1nt2"},{"post_id":"clvjbaqj3003v0vn1174q1kam","tag_id":"clvjbaqlb008n0vn1hdwy5izr","_id":"clvjbaqld008x0vn1gpxz8pvg"},{"post_id":"clvjbaqj3003v0vn1174q1kam","tag_id":"clvjbaqjr004l0vn15xjecvx4","_id":"clvjbaqld008y0vn1cz5b6j0d"},{"post_id":"clvjbaqj4003y0vn19eha7pqq","tag_id":"clvjbaqlb008n0vn1hdwy5izr","_id":"clvjbaqle00910vn19xpj4rbu"},{"post_id":"clvjbaqj4003y0vn19eha7pqq","tag_id":"clvjbaqle008z0vn14wfu3c9q","_id":"clvjbaqle00920vn120ms2i5z"},{"post_id":"clvjbaqj500400vn11hfyby5y","tag_id":"clvjbaqlb008n0vn1hdwy5izr","_id":"clvjbaqlf00950vn10hpz21e8"},{"post_id":"clvjbaqj500400vn11hfyby5y","tag_id":"clvjbaql0007h0vn108kug1ok","_id":"clvjbaqlf00960vn1d7p60ko4"},{"post_id":"clvjbaqj700430vn1b8p8h3an","tag_id":"clvjbaqkj005z0vn1hs4u66pp","_id":"clvjbaqlg00980vn1ek6uf7c1"},{"post_id":"clvjbaqj800440vn15w4mbxed","tag_id":"clvjbaqkj005z0vn1hs4u66pp","_id":"clvjbaqlh009a0vn1g23of9zb"},{"post_id":"clvjbaqjb00460vn1bb761idj","tag_id":"clvjbaqkj005z0vn1hs4u66pp","_id":"clvjbaqlh009c0vn1dpef0chu"},{"post_id":"clvjbaqjc00470vn19lzn32s7","tag_id":"clvjbaqkj005z0vn1hs4u66pp","_id":"clvjbaqli009e0vn11l9p1h86"},{"post_id":"clvjbaqje00490vn1bsjdfiqz","tag_id":"clvjbaqkj005z0vn1hs4u66pp","_id":"clvjbaqlj009h0vn17caj4s77"},{"post_id":"clvjbaqje00490vn1bsjdfiqz","tag_id":"clvjbaqli009f0vn167fd69hi","_id":"clvjbaqlj009i0vn1hctsce99"},{"post_id":"clvjbaqjf004b0vn165qde6uk","tag_id":"clvjbaqkj005z0vn1hs4u66pp","_id":"clvjbaqlk009l0vn11jtthijt"},{"post_id":"clvjbaqjf004b0vn165qde6uk","tag_id":"clvjbaqis003d0vn12r9y6yus","_id":"clvjbaqlk009m0vn1hnqi5h38"},{"post_id":"clvjbaqjf004b0vn165qde6uk","tag_id":"clvjbaqlj009j0vn1gqbn9yxl","_id":"clvjbaqlk009o0vn1b3bwhl1c"},{"post_id":"clvjbaqjh004e0vn100tf5aa0","tag_id":"clvjbaqkj005z0vn1hs4u66pp","_id":"clvjbaqll009q0vn182zp4uk7"},{"post_id":"clvjbaqjh004e0vn100tf5aa0","tag_id":"clvjbaqlk009n0vn14fhxei3c","_id":"clvjbaqll009r0vn14cy78tuf"},{"post_id":"clvjbaqjh004e0vn100tf5aa0","tag_id":"clvjbaqhd000u0vn1ef3qhllq","_id":"clvjbaqll009t0vn10b6c4g2o"},{"post_id":"clvjbaqjk004g0vn1cpzn0er2","tag_id":"clvjbaqkj005z0vn1hs4u66pp","_id":"clvjbaqll009u0vn126739eg3"},{"post_id":"clvjbaqjo004i0vn11jjq29wp","tag_id":"clvjbaqkj005z0vn1hs4u66pp","_id":"clvjbaqlm009w0vn1avx8hrw1"},{"post_id":"clvjbaqjq004k0vn12thz8437","tag_id":"clvjbaqkj005z0vn1hs4u66pp","_id":"clvjbaqlm009y0vn1eunp12o9"},{"post_id":"clvjbaqjt004o0vn1c5838vet","tag_id":"clvjbaqlm009x0vn1azg26pmm","_id":"clvjbaqln00a00vn19ud416mf"},{"post_id":"clvjbaqju004r0vn15ckibmcp","tag_id":"clvjbaqlm009z0vn12r5o45ck","_id":"clvjbaqln00a20vn1firo16ld"},{"post_id":"clvjbaqjw004t0vn1hf1p7387","tag_id":"clvjbaqln00a10vn1f5nphwal","_id":"clvjbaqlo00a40vn153n8effb"},{"post_id":"clvjbaqjy004v0vn1altnfy0u","tag_id":"clvjbaqln00a10vn1f5nphwal","_id":"clvjbaqlo00a60vn14btv9idg"},{"post_id":"clvjbaqjz004w0vn19er92nh6","tag_id":"clvjbaqlo00a50vn16mck9mnf","_id":"clvjbaqlp00a90vn131pmcamz"},{"post_id":"clvjbaqjz004w0vn19er92nh6","tag_id":"clvjbaql0007i0vn1dxm2hh6p","_id":"clvjbaqlp00aa0vn12vb2b8hk"},{"post_id":"clvjbaqk200500vn121mj2y62","tag_id":"clvjbaql2007q0vn1dscbe5wh","_id":"clvjbaqlq00ac0vn1h5ei2avi"},{"post_id":"clvjbaqk7005c0vn12sevb045","tag_id":"clvjbaql2007q0vn1dscbe5wh","_id":"clvjbaqlq00ae0vn1confbu9r"},{"post_id":"clvjbaqka005k0vn1ci62b84f","tag_id":"clvjbaql0007h0vn108kug1ok","_id":"clvjbaqlr00ag0vn12e9u0f1s"},{"post_id":"clvjbaqkb005m0vn12ml34eli","tag_id":"clvjbaqiu003g0vn14qiha4bx","_id":"clvjbaqlr00aj0vn1e7ugfchz"},{"post_id":"clvjbaqkb005m0vn12ml34eli","tag_id":"clvjbaqlq00af0vn1afhzhnf9","_id":"clvjbaqlr00ak0vn1a2qjcnrv"},{"post_id":"clvjbaqkb005m0vn12ml34eli","tag_id":"clvjbaqlr00ah0vn18crjgqyv","_id":"clvjbaqls00am0vn169a068vo"},{"post_id":"clvjbaqkc005o0vn1cbar1qhn","tag_id":"clvjbaqlr00ai0vn15x90ey4a","_id":"clvjbaqls00an0vn11e587ipc"},{"post_id":"clvjbaqkg005t0vn1e4er4vtx","tag_id":"clvjbaqka005i0vn11if23idl","_id":"clvjbaqls00ap0vn1h921650w"},{"post_id":"clvjbaqkg005t0vn1e4er4vtx","tag_id":"clvjbaqls00al0vn17sdeabdm","_id":"clvjbaqlt00aq0vn16ds76f4s"},{"post_id":"clvjbaqkn00680vn15ssoc0ae","tag_id":"clvjbaqls00ao0vn106r1f9b8","_id":"clvjbaqlt00as0vn10oc04oih"},{"post_id":"clvjbaqkn00680vn15ssoc0ae","tag_id":"clvjbaqkj005z0vn1hs4u66pp","_id":"clvjbaqlt00at0vn1c6q57j28"},{"post_id":"clvjbaqkn00680vn15ssoc0ae","tag_id":"clvjbaqhf000x0vn1es1ycb7l","_id":"clvjbaqlu00av0vn1aihi7pwh"},{"post_id":"clvjbaqko006a0vn17cux0kl4","tag_id":"clvjbaqlt00ar0vn1d4f6e7vv","_id":"clvjbaqlu00aw0vn18asp844g"},{"post_id":"clvjbaqkq006d0vn10rt49xv3","tag_id":"clvjbaqlt00au0vn1d6u5cd5o","_id":"clvjbaqlu00ax0vn1gjalbxhh"},{"post_id":"clvjbaqm400ay0vn1g1pg9wqs","tag_id":"clvjbaql0007i0vn1dxm2hh6p","_id":"clvjbaqm600b00vn1h8la8u66"},{"post_id":"clvjbaqm400ay0vn1g1pg9wqs","tag_id":"clvjbaqhf000x0vn1es1ycb7l","_id":"clvjbaqm600b10vn199iahsb8"},{"post_id":"clvjbaqm500az0vn1hvcl82sh","tag_id":"clvjbaql0007h0vn108kug1ok","_id":"clvjbaqm600b20vn13og7b2l6"},{"post_id":"clvjbaqm500az0vn1hvcl82sh","tag_id":"clvjbaqln00a10vn1f5nphwal","_id":"clvjbaqm700b30vn12ihkhs9z"},{"post_id":"clvjbaqma00b40vn1bdi4de3t","tag_id":"clvjbaqi200210vn136g7auox","_id":"clvjbaqmb00b60vn16fec5xkq"},{"post_id":"clvjbaqmb00b50vn19xwkdjz6","tag_id":"clvjbaqka005i0vn11if23idl","_id":"clvjbaqmd00b70vn10ncqai07"},{"post_id":"clvjbaqmb00b50vn19xwkdjz6","tag_id":"clvjbaqgy000b0vn1fwtg43bt","_id":"clvjbaqmd00b80vn161q9bnj0"},{"post_id":"clvjbaqmg00b90vn17omkfv2j","tag_id":"clvjbaqln00a10vn1f5nphwal","_id":"clvjbaqmj00ba0vn1av26efcj"}],"Tag":[{"name":"DIY","_id":"clvjbaqgo00030vn142v049w6"},{"name":"路由器","_id":"clvjbaqgu00070vn17bto8tve"},{"name":"网络","_id":"clvjbaqgy000b0vn1fwtg43bt"},{"name":"AdGuard Home","_id":"clvjbaqh0000e0vn152ut0g9z"},{"name":"Picture bed","_id":"clvjbaqh5000h0vn19tgweu5z"},{"name":"PicGo","_id":"clvjbaqh9000n0vn12h9vhkii"},{"name":"图床","_id":"clvjbaqhb000r0vn1gw4reii1"},{"name":"Linux","_id":"clvjbaqhd000u0vn1ef3qhllq"},{"name":"Ubuntu","_id":"clvjbaqhf000x0vn1es1ycb7l"},{"name":"Hexo","_id":"clvjbaqhi00110vn1gzr18nbh"},{"name":"wsl","_id":"clvjbaqhl00160vn13om3a9ml"},{"name":"jupyter notebook","_id":"clvjbaqhp001b0vn12w4985ag"},{"name":"oh-my-zsh","_id":"clvjbaqhs001g0vn14zp72q4o"},{"name":"zsh","_id":"clvjbaqhw001m0vn183c78wb4"},{"name":"shell","_id":"clvjbaqhy001r0vn1701bawch"},{"name":"bash","_id":"clvjbaqi0001w0vn1broh4606"},{"name":"科研","_id":"clvjbaqi200210vn136g7auox"},{"name":"内网穿透","_id":"clvjbaqi500270vn17y03gefe"},{"name":"ssh","_id":"clvjbaqi7002c0vn101o67o9j"},{"name":"Hadoop","_id":"clvjbaqid002m0vn13j8v6kto"},{"name":"dpkg","_id":"clvjbaqii002v0vn1flb98ioz"},{"name":"clash","_id":"clvjbaqin00350vn1exhnhkgv"},{"name":"科学上网","_id":"clvjbaqis003d0vn12r9y6yus"},{"name":"markdown","_id":"clvjbaqiu003g0vn14qiha4bx"},{"name":"MongoDB","_id":"clvjbaqiy003l0vn14nzfdxue"},{"name":"WebDav","_id":"clvjbaqj900450vn10wr0bhgt"},{"name":"git","_id":"clvjbaqjd00480vn16asxghzp"},{"name":"python","_id":"clvjbaqjr004l0vn15xjecvx4"},{"name":"pytorch","_id":"clvjbaqjx004u0vn13m4e7qe5"},{"name":"openwrt","_id":"clvjbaqk300530vn1efq56qee"},{"name":"RAID","_id":"clvjbaqk500580vn1b3rmgrfm"},{"name":"学习","_id":"clvjbaqk8005d0vn1atwuhggl"},{"name":"笔记","_id":"clvjbaqka005i0vn11if23idl"},{"name":"hosts","_id":"clvjbaqkc005p0vn130an6nyf"},{"name":"raw.githubusercontent.com","_id":"clvjbaqkh005u0vn129yz9nre"},{"name":"windows","_id":"clvjbaqkj005z0vn1hs4u66pp"},{"name":"gpg 加密","_id":"clvjbaqkl00640vn11uy6fcuv"},{"name":"NAS","_id":"clvjbaqko006b0vn11ubgeylu"},{"name":"WSL","_id":"clvjbaqku006m0vn1evilbson"},{"name":"Windows","_id":"clvjbaqkw006y0vn1dof05fj4"},{"name":"bilibili","_id":"clvjbaqkw00710vn1488o7zch"},{"name":"chatgpt","_id":"clvjbaqkx00750vn1fdw437ol"},{"name":"chrome","_id":"clvjbaqkx00770vn13ztu40uk"},{"name":"emoji","_id":"clvjbaqkz007c0vn1bkbd3fs6"},{"name":"gdb","_id":"clvjbaqkz007f0vn1fp59aoml"},{"name":"C/C++","_id":"clvjbaql0007h0vn108kug1ok"},{"name":"hexo","_id":"clvjbaql0007i0vn1dxm2hh6p"},{"name":"Python","_id":"clvjbaql1007o0vn10x7z2n2w"},{"name":"其它","_id":"clvjbaql2007q0vn1dscbe5wh"},{"name":"manjaro","_id":"clvjbaql2007s0vn17p9lcvyl"},{"name":"Arch","_id":"clvjbaql3007u0vn1aioe9to3"},{"name":"microsoft","_id":"clvjbaql4007v0vn16ln69437"},{"name":"mysql","_id":"clvjbaql600810vn1d9tt0yvi"},{"name":"bing","_id":"clvjbaql600830vn12zrg3lfb"},{"name":"域名解析","_id":"clvjbaql9008f0vn14jy03ori"},{"name":"vscode","_id":"clvjbaqlb008n0vn1hdwy5izr"},{"name":"colab","_id":"clvjbaqlb008q0vn13i1z0gqz"},{"name":"jupyter","_id":"clvjbaqle008z0vn14wfu3c9q"},{"name":"快捷键","_id":"clvjbaqli009f0vn167fd69hi"},{"name":"v2ray","_id":"clvjbaqlj009j0vn1gqbn9yxl"},{"name":"deepin","_id":"clvjbaqlk009n0vn14fhxei3c"},{"name":"羊毛","_id":"clvjbaqlm009x0vn1azg26pmm"},{"name":"入党","_id":"clvjbaqlm009z0vn12r5o45ck"},{"name":"考研","_id":"clvjbaqln00a10vn1f5nphwal"},{"name":"域名","_id":"clvjbaqlo00a50vn16mck9mnf"},{"name":"mathjax","_id":"clvjbaqlq00af0vn1afhzhnf9"},{"name":"数学公式","_id":"clvjbaqlr00ah0vn18crjgqyv"},{"name":"百度文库","_id":"clvjbaqlr00ai0vn15x90ey4a"},{"name":"算法","_id":"clvjbaqls00al0vn17sdeabdm"},{"name":"键位映射","_id":"clvjbaqls00ao0vn106r1f9b8"},{"name":"阿里云","_id":"clvjbaqlt00ar0vn1d4f6e7vv"},{"name":"阿里云盘","_id":"clvjbaqlt00au0vn1d6u5cd5o"}]}}